{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8fd9\u662f\u5361\u5361\u7684blog \u4e00\u4e9b\u5b66\u4e60\u7b14\u8bb0\u548c\u6536\u85cf\u77e5\u8bc6\u5e93\u3002\u81ea\u5df1\u770b python python\u5b66\u4e60\u7b14\u8bb0 \u524d\u7aef html\u57fa\u7840 css\u6837\u5f0f js jQuery Django Django\u521b\u5efa ORM \u6a21\u677f\u8bed\u6cd5 \u4e2d\u95f4\u4ef6 \u5206\u9875 Ajax \u5de5\u5177\u7bb1 mkdocs\u642d\u5efa python\u865a\u62df\u73af\u5883","title":"\u4e3b\u9875"},{"location":"#blog","text":"\u4e00\u4e9b\u5b66\u4e60\u7b14\u8bb0\u548c\u6536\u85cf\u77e5\u8bc6\u5e93\u3002\u81ea\u5df1\u770b","title":"\u8fd9\u662f\u5361\u5361\u7684blog"},{"location":"#python","text":"python\u5b66\u4e60\u7b14\u8bb0","title":"python"},{"location":"#_1","text":"html\u57fa\u7840 css\u6837\u5f0f js jQuery","title":"\u524d\u7aef"},{"location":"#django","text":"Django\u521b\u5efa ORM \u6a21\u677f\u8bed\u6cd5 \u4e2d\u95f4\u4ef6 \u5206\u9875 Ajax","title":"Django"},{"location":"#_2","text":"mkdocs\u642d\u5efa python\u865a\u62df\u73af\u5883","title":"\u5de5\u5177\u7bb1"},{"location":"pandas/answer/","text":"In [ 1 ]: import numpy as np In [ 2 ]: import pandas as pd In [ 3 ]: import matplotlib.pyplot as plt \u7b2c\u4e00\u7ae0 \u9884\u5907\u77e5\u8bc6 Ex1\uff1a\u5229\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u5199\u77e9\u9635\u4e58\u6cd5 In [ 4 ]: M1 = np . random . rand ( 2 , 3 ) In [ 5 ]: M2 = np . random . rand ( 3 , 4 ) In [ 6 ]: res = [[ sum ([ M1 [ i ][ k ] * M2 [ k ][ j ] for k in range ( M1 . shape [ 1 ])]) for j in range ( M2 . shape [ 1 ])] for i in range ( M1 . shape [ 0 ])] In [ 7 ]: ( np . abs (( M1 @M2 - res ) < 1e-15 )) . all () Out [ 7 ]: True Ex2\uff1a\u66f4\u65b0\u77e9\u9635 In [ 8 ]: A = np . arange ( 1 , 10 ) . reshape ( 3 , - 1 ) In [ 9 ]: B = A * ( 1 / A ) . sum ( 1 ) . reshape ( - 1 , 1 ) In [ 10 ]: B Out [ 10 ]: array ([[ 1.83333333 , 3.66666667 , 5.5 ], [ 2.46666667 , 3.08333333 , 3.7 ], [ 2.65277778 , 3.03174603 , 3.41071429 ]]) Ex3\uff1a\u5361\u65b9\u7edf\u8ba1\u91cf In [ 11 ]: np . random . seed ( 0 ) In [ 12 ]: A = np . random . randint ( 10 , 20 , ( 8 , 5 )) In [ 13 ]: B = A . sum ( 0 ) * A . sum ( 1 ) . reshape ( - 1 , 1 ) / A . sum () In [ 14 ]: res = (( A - B ) ** 2 / B ) . sum () In [ 15 ]: res Out [ 15 ]: 11.842696601945802 Ex4\uff1a\u6539\u8fdb\u77e9\u9635\u8ba1\u7b97\u7684\u6027\u80fd \u539f\u65b9\u6cd5\uff1a In [ 16 ]: np . random . seed ( 0 ) In [ 17 ]: m , n , p = 100 , 80 , 50 In [ 18 ]: B = np . random . randint ( 0 , 2 , ( m , p )) In [ 19 ]: U = np . random . randint ( 0 , 2 , ( p , n )) In [ 20 ]: Z = np . random . randint ( 0 , 2 , ( m , n )) In [ 21 ]: def solution ( B = B , U = U , Z = Z ): .... : L_res = [] .... : for i in range ( m ): .... : for j in range ( n ): .... : norm_value = (( B [ i ] - U [:, j ]) ** 2 ) . sum () .... : L_res . append ( norm_value * Z [ i ][ j ]) .... : return sum ( L_res ) .... : In [ 22 ]: solution ( B , U , Z ) Out [ 22 ]: 100566 \u6539\u8fdb\u65b9\u6cd5\uff1a \u5728 Numpy \u4e2d\u53ef\u4ee5\u7528\u9010\u5143\u7d20\u7684\u4e58\u6cd5\u540e\u6c42\u548c\u5b9e\u73b0\uff0c\u56e0\u6b64\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u5982\u4f55\u6784\u9020 \u77e9\u9635\u3002 \u7b2c\u4e00\u7b2c\u4e8c\u9879\u5206\u522b\u4e3a \u7684\u884c\u5e73\u65b9\u548c\u4e0e \u7684\u5217\u5e73\u65b9\u548c\uff0c\u7b2c\u4e09\u9879\u662f\u4e24\u500d\u7684\u5185\u79ef\u3002\u56e0\u6b64\uff0c \u77e9\u9635\u53ef\u4ee5\u5199\u4e3a\u4e09\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u662f \u7684\u5168 \u77e9\u9635\u6bcf\u884c\u4e58\u4ee5 \u5bf9\u5e94\u884c\u7684\u884c\u5e73\u65b9\u548c\uff0c\u7b2c\u4e8c\u4e2a\u90e8\u5206\u662f\u76f8\u540c\u5927\u5c0f\u7684\u5168 \u77e9\u9635\u6bcf\u5217\u4e58\u4ee5 \u5bf9\u5e94\u5217\u7684\u5217\u5e73\u65b9\u548c\uff0c\u7b2c\u4e09\u4e2a\u90e8\u5206\u6070\u4e3a \u77e9\u9635\u4e0e \u77e9\u9635\u4e58\u79ef\u7684\u4e24\u500d\u3002\u4ece\u800c\u7ed3\u679c\u5982\u4e0b\uff1a In [ 23 ]: ((( B ** 2 ) . sum ( 1 ) . reshape ( - 1 , 1 ) + ( U ** 2 ) . sum ( 0 ) - 2 * B @U ) * Z ) . sum () Out [ 23 ]: 100566 \u5bf9\u6bd4\u5b83\u4eec\u7684\u6027\u80fd\uff1a In [ 24 ]: % timeit - n 30 solution ( B , U , Z ) 35.9 ms +- 3.24 ms per loop ( mean +- std . dev . of 7 runs , 30 loops each ) In [ 25 ]: % timeit - n 30 (( np . ones (( m , n )) * ( B ** 2 ) . sum ( 1 ) . reshape ( - 1 , 1 ) + \\ .... : np . ones (( m , n )) * ( U ** 2 ) . sum ( 0 ) - 2 * B @U ) * Z ) . sum () .... : 692 us +- 43 us per loop ( mean +- std . dev . of 7 runs , 30 loops each ) Ex5\uff1a\u8fde\u7eed\u6574\u6570\u7684\u6700\u5927\u957f\u5ea6 In [ 26 ]: f = lambda x : np . diff ( np . nonzero ( np . r_ [ 1 , np . diff ( x ) != 1 , 1 ])) . max () In [ 27 ]: f ([ 1 , 2 , 5 , 6 , 7 ]) Out [ 27 ]: 3 In [ 28 ]: f ([ 3 , 2 , 1 , 2 , 3 , 4 , 6 ]) Out [ 28 ]: 4 \u7b2c\u4e8c\u7ae0 pandas \u57fa\u7840 Ex1\uff1a\u53e3\u888b\u5996\u602a\u6570\u636e\u96c6 1 In [ 29 ]: df = pd . read_csv ( 'data/pokemon.csv' ) In [ 30 ]: ( df [[ 'HP' , 'Attack' , 'Defense' , 'Sp. Atk' , 'Sp. Def' , 'Speed' .... : ]] . sum ( 1 ) != df [ 'Total' ]) . mean () .... : Out [ 30 ]: 0.0 2-a In [ 31 ]: dp_dup = df . drop_duplicates ( '#' , keep = 'first' ) In [ 32 ]: dp_dup [ 'Type 1' ] . nunique () Out [ 32 ]: 18 In [ 33 ]: dp_dup [ 'Type 1' ] . value_counts () . index [: 3 ] Out [ 33 ]: Index ([ 'Water' , 'Normal' , 'Grass' ], dtype = 'object' ) 2-b In [ 34 ]: attr_dup = dp_dup . drop_duplicates ([ 'Type 1' , 'Type 2' ]) In [ 35 ]: attr_dup . shape [ 0 ] Out [ 35 ]: 143 2-c In [ 36 ]: L_full = [ i + ' ' + j if i != j else i for i in df [ 'Type 1' .... : ] . unique () for j in df [ 'Type 1' ] . unique ()] .... : In [ 37 ]: L_part = [ i + ' ' + j if not isinstance ( j , float ) else i for i , j in zip ( .... : attr_dup [ 'Type 1' ], attr_dup [ 'Type 2' ])] .... : In [ 38 ]: res = set ( L_full ) . difference ( set ( L_part )) In [ 39 ]: len ( res ) # \u592a\u591a\uff0c\u4e0d\u6253\u5370\u4e86 Out [ 39 ]: 181 3-a In [ 40 ]: df [ 'Attack' ] . mask ( df [ 'Attack' ] > 120 , 'high' .... : ) . mask ( df [ 'Attack' ] < 50 , 'low' ) . mask (( 50 <= df [ 'Attack' ] .... : ) & ( df [ 'Attack' ] <= 120 ), 'mid' ) . head () .... : Out [ 40 ]: 0 low 1 mid 2 mid 3 mid 4 mid Name : Attack , dtype : object 3-b In [ 41 ]: df [ 'Type 1' ] . replace ({ i : str . upper ( i ) for i in df [ 'Type 1' .... : ] . unique ()}) . head () .... : Out [ 41 ]: 0 GRASS 1 GRASS 2 GRASS 3 GRASS 4 FIRE Name : Type 1 , dtype : object In [ 42 ]: df [ 'Type 1' ] . apply ( lambda x : str . upper ( x )) . head () Out [ 42 ]: 0 GRASS 1 GRASS 2 GRASS 3 GRASS 4 FIRE Name : Type 1 , dtype : object 3-c In [ 43 ]: df [ 'Deviation' ] = df [[ 'HP' , 'Attack' , 'Defense' , 'Sp. Atk' , .... : 'Sp. Def' , 'Speed' ]] . apply ( lambda x : np . max ( .... : ( x - x . median ()) . abs ()), 1 ) .... : In [ 44 ]: df . sort_values ( 'Deviation' , ascending = False ) . head () Out [ 44 ]: # Name Type 1 Type 2 Total HP Attack Defense Sp. Atk Sp. Def Speed Deviation 230 213 Shuckle Bug Rock 505 20 10 230 10 230 5 215.0 121 113 Chansey Normal NaN 450 250 5 5 35 105 50 207.5 261 242 Blissey Normal NaN 540 255 10 10 75 135 55 190.0 333 306 AggronMega Aggron Steel NaN 630 70 140 230 60 80 50 155.0 224 208 SteelixMega Steelix Steel Ground 610 75 125 230 55 95 30 145.0 Ex2\uff1a\u6307\u6570\u52a0\u6743\u7a97\u53e3 1 In [ 45 ]: np . random . seed ( 0 ) In [ 46 ]: s = pd . Series ( np . random . randint ( - 1 , 2 , 30 ) . cumsum ()) In [ 47 ]: s . ewm ( alpha = 0.2 ) . mean () . head () Out [ 47 ]: 0 - 1.000000 1 - 1.000000 2 - 1.409836 3 - 1.609756 4 - 1.725845 dtype : float64 In [ 48 ]: def ewm_func ( x , alpha = 0.2 ): .... : win = ( 1 - alpha ) ** np . arange ( x . shape [ 0 ])[:: - 1 ] .... : res = ( win * x ) . sum () / win . sum () .... : return res .... : In [ 49 ]: s . expanding () . apply ( ewm_func ) . head () Out [ 49 ]: 0 - 1.000000 1 - 1.000000 2 - 1.409836 3 - 1.609756 4 - 1.725845 dtype : float64 \u65b0\u7684\u6743\u91cd\u4e3a \uff0c \u66f4\u65b0\u5982\u4e0b\uff1a 2 In [ 50 ]: s . rolling ( window = 4 ) . apply ( ewm_func ) . head () # \u65e0\u9700\u5bf9\u539f\u51fd\u6570\u6539\u52a8 Out [ 50 ]: 0 NaN 1 NaN 2 NaN 3 - 1.609756 4 - 1.826558 dtype : float64 \u7b2c\u4e09\u7ae0 \u7d22\u5f15 Ex1\uff1a\u516c\u53f8\u5458\u5de5\u6570\u636e\u96c6 1 In [ 51 ]: df = pd . read_csv ( 'data/company.csv' ) In [ 52 ]: dpt = [ 'Dairy' , 'Bakery' ] In [ 53 ]: df . query ( \"(age <= 40)&(department == @dpt)&(gender=='M')\" ) . head ( 3 ) Out [ 53 ]: EmployeeID birthdate_key age city_name department job_title gender 3611 5791 1 / 14 / 1975 40 Kelowna Dairy Dairy Person M 3613 5793 1 / 22 / 1975 40 Richmond Bakery Baker M 3615 5795 1 / 30 / 1975 40 Nanaimo Dairy Dairy Person M In [ 54 ]: df . loc [( df . age <= 40 ) & df . department . isin ( dpt ) & ( df . gender == 'M' )] . head ( 3 ) Out [ 54 ]: EmployeeID birthdate_key age city_name department job_title gender 3611 5791 1 / 14 / 1975 40 Kelowna Dairy Dairy Person M 3613 5793 1 / 22 / 1975 40 Richmond Bakery Baker M 3615 5795 1 / 30 / 1975 40 Nanaimo Dairy Dairy Person M 2 In [ 55 ]: df . iloc [( df . EmployeeID % 2 == 1 ) . values ,[ 0 , 2 , - 2 ]] . head () Out [ 55 ]: EmployeeID age job_title 1 1319 58 VP Stores 3 1321 56 VP Human Resources 5 1323 53 Exec Assistant , VP Stores 6 1325 51 Exec Assistant , Legal Counsel 8 1329 48 Store Manager 3 In [ 56 ]: df_op = df . copy () In [ 57 ]: df_op = df_op . set_index ( df_op . columns [ - 3 :] . tolist ()) . swaplevel ( 0 , 2 , axis = 0 ) In [ 58 ]: df_op = df_op . reset_index ( level = 1 ) In [ 59 ]: df_op = df_op . rename_axis ( index = { 'gender' : 'Gender' }) In [ 60 ]: df_op . index = df_op . index . map ( lambda x : '_' . join ( x )) In [ 61 ]: df_op . index = df_op . index . map ( lambda x : tuple ( x . split ( '_' ))) In [ 62 ]: df_op = df_op . rename_axis ( index = [ 'gender' , 'department' ]) In [ 63 ]: df_op = df_op . reset_index () . reindex ( df . columns , axis = 1 ) In [ 64 ]: df_op . equals ( df ) Out [ 64 ]: True Ex2\uff1a\u5de7\u514b\u529b\u6570\u636e\u96c6 1 In [ 65 ]: df = pd . read_csv ( 'data/chocolate.csv' ) In [ 66 ]: df . columns = [ ' ' . join ( i . split ( ' \\n ' )) for i in df . columns ] In [ 67 ]: df . head ( 3 ) Out [ 67 ]: Company Review Date Cocoa Percent Company Location Rating 0 A . Morin 2016 63 % France 3.75 1 A . Morin 2015 70 % France 2.75 2 A . Morin 2015 70 % France 3.00 2 In [ 68 ]: df [ 'Cocoa Percent' ] = df [ 'Cocoa Percent' ] . apply ( lambda x : float ( x [: - 1 ]) / 100 ) In [ 69 ]: df . query ( '(Rating<3)&(`Cocoa Percent`>`Cocoa Percent`.median())' ) . head ( 3 ) Out [ 69 ]: Company Review Date Cocoa Percent Company Location Rating 33 Akesson 's (Pralus) 2010 0.75 Switzerland 2.75 34 Akesson 's (Pralus) 2010 0.75 Switzerland 2.75 36 Alain Ducasse 2014 0.75 France 2.75 3 In [ 70 ]: idx = pd . IndexSlice In [ 71 ]: exclude = [ 'France' , 'Canada' , 'Amsterdam' , 'Belgium' ] In [ 72 ]: res = df . set_index ([ 'Review Date' , 'Company Location' ]) . sort_index ( level = 0 ) In [ 73 ]: res . loc [ idx [ 2012 :, ~ res . index . get_level_values ( 1 ) . isin ( exclude )],:] . head ( 3 ) Out [ 73 ]: Company Cocoa Percent Rating Review Date Company Location 2012 Australia Bahen & Co . 0.7 3.0 Australia Bahen & Co . 0.7 2.5 Australia Bahen & Co . 0.7 2.5 \u7b2c\u56db\u7ae0 \u5206\u7ec4 Ex1\uff1a\u6c7d\u8f66\u6570\u636e\u96c6 \u73b0\u6709\u4e00\u4efd\u5173\u4e8e\u6c7d\u8f66\u7684\u6570\u636e\u96c6\uff0c\u5176\u4e2d Brand, Disp., HP \u5206\u522b\u4ee3\u8868\u6c7d\u8f66\u54c1\u724c\u3001\u53d1\u52a8\u673a\u84c4\u91cf\u3001\u53d1\u52a8\u673a\u8f93\u51fa\u3002 In [ 74 ]: df = pd . read_csv ( 'data/car.csv' ) In [ 75 ]: df . head ( 3 ) Out [ 75 ]: Brand Price Country Reliability Mileage Type Weight Disp . HP 0 Eagle Summit 4 8895 USA 4.0 33 Small 2560 97 113 1 Ford Escort 4 7402 USA 2.0 33 Small 2345 114 90 2 Ford Festiva 4 6319 Korea 4.0 37 Small 1845 81 63 1 In [ 76 ]: df . groupby ( 'Country' ) . filter ( lambda x : x . shape [ 0 ] > 2 ) . groupby ( .... : 'Country' )[ 'Price' ] . agg ([( .... : 'CoV' , lambda x : x . std () / x . mean ()), 'mean' , 'count' ]) .... : Out [ 76 ]: CoV mean count Country Japan 0.387429 13938.052632 19 Japan / USA 0.240040 10067.571429 7 Korea 0.243435 7857.333333 3 USA 0.203344 12543.269231 26 2 In [ 77 ]: df . shape [ 0 ] Out [ 77 ]: 60 In [ 78 ]: condition = [ 'Head' ] * 20 + [ 'Mid' ] * 20 + [ 'Tail' ] * 20 In [ 79 ]: df . groupby ( condition )[ 'Price' ] . mean () Out [ 79 ]: Head 9069.95 Mid 13356.40 Tail 15420.65 Name : Price , dtype : float64 3 In [ 80 ]: res = df . groupby ( 'Type' ) . agg ({ 'Price' : [ 'max' ], 'HP' : [ 'min' ]}) In [ 81 ]: res . columns = res . columns . map ( lambda x : '_' . join ( x )) In [ 82 ]: res Out [ 82 ]: Price_max HP_min Type Compact 18900 95 Large 17257 150 Medium 24760 110 Small 9995 63 Sporty 13945 92 Van 15395 106 4 In [ 83 ]: def normalize ( s ): .... : s_min , s_max = s . min (), s . max () .... : res = ( s - s_min ) / ( s_max - s_min ) .... : return res .... : In [ 84 ]: df . groupby ( 'Type' )[ 'HP' ] . transform ( normalize ) . head () Out [ 84 ]: 0 1.00 1 0.54 2 0.00 3 0.58 4 0.80 Name : HP , dtype : float64 5 In [ 85 ]: df . groupby ( 'Type' )[[ 'HP' , 'Disp.' ]] . apply ( .... : lambda x : np . corrcoef ( x [ 'HP' ] . values , x [ 'Disp.' ] . values )[ 0 , 1 ]) .... : Out [ 85 ]: Type Compact 0.586087 Large - 0.242765 Medium 0.370491 Small 0.603916 Sporty 0.871426 Van 0.819881 dtype : float64 Ex2\uff1a\u5b9e\u73b0 transform \u51fd\u6570 In [ 86 ]: class my_groupby : .... : def __init__ ( self , my_df , group_cols ): .... : self . my_df = my_df . copy () .... : self . groups = my_df [ group_cols ] . drop_duplicates () .... : if isinstance ( self . groups , pd . Series ): .... : self . groups = self . groups . to_frame () .... : self . group_cols = self . groups . columns . tolist () .... : self . groups = { i : self . groups [ i ] . values . tolist ( .... : ) for i in self . groups . columns } .... : self . transform_col = None .... : def __getitem__ ( self , col ): .... : self . pr_col = [ col ] if isinstance ( col , str ) else list ( col ) .... : return self .... : def transform ( self , my_func ): .... : self . num = len ( self . groups [ self . group_cols [ 0 ]]) .... : L_order , L_value = np . array ([]), np . array ([]) .... : for i in range ( self . num ): .... : group_df = self . my_df . reset_index () . copy () .... : for col in self . group_cols : .... : group_df = group_df [ group_df [ col ] == self . groups [ col ][ i ]] .... : group_df = group_df [ self . pr_col ] .... : if group_df . shape [ 1 ] == 1 : .... : group_df = group_df . iloc [:, 0 ] .... : group_res = my_func ( group_df ) .... : if not isinstance ( group_res , pd . Series ): .... : group_res = pd . Series ( group_res , .... : index = group_df . index , .... : name = group_df . name ) .... : L_order = np . r_ [ L_order , group_res . index ] .... : L_value = np . r_ [ L_value , group_res . values ] .... : self . res = pd . Series ( pd . Series ( L_value , index = L_order ) . sort_index ( .... : ) . values , index = self . my_df . reset_index ( .... : ) . index , name = my_func . __name__ ) .... : return self . res .... : In [ 87 ]: my_groupby ( df , 'Type' ) Out [ 87 ]: < __main__ . my_groupby at 0x1364172ef70 > \u5355\u5217\u5206\u7ec4 In [ 88 ]: def f ( s ): .... : res = ( s - s . min ()) / ( s . max () - s . min ()) .... : return res .... : In [ 89 ]: my_groupby ( df , 'Type' )[ 'Price' ] . transform ( f ) . head () Out [ 89 ]: 0 0.733592 1 0.372003 2 0.109712 3 0.186244 4 0.177525 Name : f , dtype : float64 In [ 90 ]: df . groupby ( 'Type' )[ 'Price' ] . transform ( f ) . head () Out [ 90 ]: 0 0.733592 1 0.372003 2 0.109712 3 0.186244 4 0.177525 Name : Price , dtype : float64 \u591a\u5217\u5206\u7ec4 In [ 91 ]: my_groupby ( df , [ 'Type' , 'Country' ])[ 'Price' ] . transform ( f ) . head () Out [ 91 ]: 0 1.000000 1 0.000000 2 0.000000 3 0.000000 4 0.196357 Name : f , dtype : float64 In [ 92 ]: df . groupby ([ 'Type' , 'Country' ])[ 'Price' ] . transform ( f ) . head () Out [ 92 ]: 0 1.000000 1 0.000000 2 0.000000 3 0.000000 4 0.196357 Name : Price , dtype : float64 \u6807\u91cf\u5e7f\u64ad In [ 93 ]: my_groupby ( df , 'Type' )[ 'Price' ] . transform ( lambda x : x . mean ()) . head () Out [ 93 ]: 0 7682.384615 1 7682.384615 2 7682.384615 3 7682.384615 4 7682.384615 Name : < lambda > , dtype : float64 In [ 94 ]: df . groupby ( 'Type' )[ 'Price' ] . transform ( lambda x : x . mean ()) . head () Out [ 94 ]: 0 7682.384615 1 7682.384615 2 7682.384615 3 7682.384615 4 7682.384615 Name : Price , dtype : float64 \u8de8\u5217\u8ba1\u7b97 In [ 95 ]: my_groupby ( df , 'Type' )[ 'Disp.' , 'HP' ] . transform ( .... : lambda x : x [ 'Disp.' ] / x . HP ) . head () .... : Out [ 95 ]: 0 0.858407 1 1.266667 2 1.285714 3 0.989130 4 1.097087 Name : < lambda > , dtype : float64 \u7b2c\u4e94\u7ae0 \u53d8\u5f62 Ex1\uff1a\u7f8e\u56fd\u975e\u6cd5\u836f\u7269\u6570\u636e\u96c6 1 In [ 96 ]: df = pd . read_csv ( 'data/drugs.csv' ) . sort_values ([ .... : 'State' , 'COUNTY' , 'SubstanceName' ], ignore_index = True ) .... : In [ 97 ]: res = df . pivot ( index = [ 'State' , 'COUNTY' , 'SubstanceName' .... : ], columns = 'YYYY' , values = 'DrugReports' .... : ) . reset_index () . rename_axis ( columns = { 'YYYY' : '' }) .... : In [ 98 ]: res . head ( 5 ) Out [ 98 ]: State COUNTY SubstanceName 2010 2011 2012 2013 2014 2015 2016 2017 0 KY ADAIR Buprenorphine NaN 3.0 5.0 4.0 27.0 5.0 7.0 10.0 1 KY ADAIR Codeine NaN NaN 1.0 NaN NaN NaN NaN 1.0 2 KY ADAIR Fentanyl NaN NaN 1.0 NaN NaN NaN NaN NaN 3 KY ADAIR Heroin NaN NaN 1.0 2.0 NaN 1.0 NaN 2.0 4 KY ADAIR Hydrocodone 6.0 9.0 10.0 10.0 9.0 7.0 11.0 3.0 2 In [ 99 ]: res_melted = res . melt ( id_vars = [ 'State' , 'COUNTY' , 'SubstanceName' ], .... : value_vars = res . columns [ - 8 :], .... : var_name = 'YYYY' , .... : value_name = 'DrugReports' ) . dropna ( .... : subset = [ 'DrugReports' ]) .... : In [ 100 ]: res_melted = res_melted [ df . columns ] . sort_values ([ ..... : 'State' , 'COUNTY' , 'SubstanceName' ], ignore_index = True ..... : ) . astype ({ 'YYYY' : 'int64' , 'DrugReports' : 'int64' }) ..... : res_melted . equals ( df ) ..... : Out [ 100 ]: True 3-\u7b56\u75651 In [ 101 ]: res = df . pivot_table ( index = 'YYYY' , columns = 'State' , ..... : values = 'DrugReports' , aggfunc = 'sum' ) ..... : In [ 102 ]: res . head ( 3 ) Out [ 102 ]: State KY OH PA VA WV YYYY 2010 10453 19707 19814 8685 2890 2011 10289 20330 19987 6749 3271 2012 10722 23145 19959 7831 3376 3-\u7b56\u75652 In [ 103 ]: res = df . groupby ([ 'State' , 'YYYY' ])[ 'DrugReports' ] . sum ( ..... : ) . to_frame () . unstack ( 0 ) . droplevel ( 0 , axis = 1 ) ..... : In [ 104 ]: res . head ( 3 ) Out [ 104 ]: State KY OH PA VA WV YYYY 2010 10453 19707 19814 8685 2890 2011 10289 20330 19987 6749 3271 2012 10722 23145 19959 7831 3376 Ex2\uff1a\u7279\u6b8a\u7684 wide_to_long \u65b9\u6cd5 In [ 105 ]: df = pd . DataFrame ({ 'Class' :[ 1 , 2 ], ..... : 'Name' :[ 'San Zhang' , 'Si Li' ], ..... : 'Chinese' :[ 80 , 90 ], ..... : 'Math' :[ 80 , 75 ]}) ..... : In [ 106 ]: df Out [ 106 ]: Class Name Chinese Math 0 1 San Zhang 80 80 1 2 Si Li 90 75 In [ 107 ]: df = df . rename ( columns = { 'Chinese' : 'pre_Chinese' , 'Math' : 'pre_Math' }) In [ 108 ]: pd . wide_to_long ( df , ..... : stubnames = [ 'pre' ], ..... : i = [ 'Class' , 'Name' ], ..... : j = 'Subject' , ..... : sep = '_' , ..... : suffix = '.+' ) . reset_index () . rename ( columns = { 'pre' : 'Grade' }) ..... : Out [ 108 ]: Class Name Subject Grade 0 1 San Zhang Chinese 80 1 1 San Zhang Math 80 2 2 Si Li Chinese 90 3 2 Si Li Math 75 \u7b2c\u516d\u7ae0 \u8fde\u63a5 Ex1\uff1a\u7f8e\u56fd\u75ab\u60c5\u6570\u636e\u96c6 In [ 109 ]: date = pd . date_range ( '20200412' , '20201116' ) . to_series () In [ 110 ]: date = date . dt . month . astype ( 'string' ) . str . zfill ( 2 ..... : ) + '-' + date . dt . day . astype ( 'string' ..... : ) . str . zfill ( 2 ) + '-' + '2020' ..... : In [ 111 ]: date = date . tolist () In [ 112 ]: L = [] In [ 113 ]: for d in date : ..... : df = pd . read_csv ( 'data/us_report/' + d + '.csv' , index_col = 'Province_State' ) ..... : data = df . loc [ 'New York' , [ 'Confirmed' , 'Deaths' , ..... : 'Recovered' , 'Active' ]] ..... : L . append ( data . to_frame () . T ) ..... : In [ 114 ]: res = pd . concat ( L ) In [ 115 ]: res . index = date In [ 116 ]: res . head () Out [ 116 ]: Confirmed Deaths Recovered Active 04 - 12 - 2020 189033 9385 23887.0 179648 04 - 13 - 2020 195749 10058 23887.0 185691.0 04 - 14 - 2020 203020 10842 23887.0 192178.0 04 - 15 - 2020 214454 11617 23887.0 202837.0 04 - 16 - 2020 223691 14832 23887.0 208859.0 Ex2\uff1a\u5b9e\u73b0 join \u51fd\u6570 In [ 117 ]: def join ( df1 , df2 , how = 'left' ): ..... : res_col = df1 . columns . tolist () + df2 . columns . tolist () ..... : dup = df1 . index . unique () . intersection ( df2 . index . unique ()) ..... : res_df = pd . DataFrame ( columns = res_col ) ..... : for label in dup : ..... : cartesian = [ list ( i ) + list ( j ) for i in df1 . loc [ label ..... : ] . values . reshape ( - 1 , 1 ) for j in df2 . loc [ ..... : label ] . values . reshape ( - 1 , 1 )] ..... : dup_df = pd . DataFrame ( cartesian , index = [ label ] * len ( ..... : cartesian ), columns = res_col ) ..... : res_df = pd . concat ([ res_df , dup_df ]) ..... : if how in [ 'left' , 'outer' ]: ..... : for label in df1 . index . unique () . difference ( dup ): ..... : if isinstance ( df1 . loc [ label ], pd . DataFrame ): ..... : cat = [ list ( i ) + [ np . nan ] * df2 . shape [ 1 ..... : ] for i in df1 . loc [ label ] . values ] ..... : else : cat = [ list ( i ) + [ np . nan ] * df2 . shape [ 1 ..... : ] for i in df1 . loc [ label ] . to_frame () . values ] ..... : dup_df = pd . DataFrame ( cat , index = [ label ..... : ] * len ( cat ), columns = res_col ) ..... : res_df = pd . concat ([ res_df , dup_df ]) ..... : if how in [ 'right' , 'outer' ]: ..... : for label in df2 . index . unique () . difference ( dup ): ..... : if isinstance ( df2 . loc [ label ], pd . DataFrame ): ..... : cat = [[ np . nan ] + list ( i ) * df1 . shape [ 1 ..... : ] for i in df2 . loc [ label ] . values ] ..... : else : cat = [[ np . nan ] + list ( i ) * df1 . shape [ 1 ..... : ] for i in df2 . loc [ label ] . to_frame () . values ] ..... : dup_df = pd . DataFrame ( cat , index = [ label ..... : ] * len ( cat ), columns = res_col ) ..... : res_df = pd . concat ([ res_df , dup_df ]) ..... : return res_df ..... : In [ 118 ]: df1 = pd . DataFrame ({ 'col1' :[ 1 , 2 , 3 , 4 , 5 ]}, index = list ( 'AABCD' )) In [ 119 ]: df1 Out [ 119 ]: col1 A 1 A 2 B 3 C 4 D 5 In [ 120 ]: df2 = pd . DataFrame ({ 'col2' : list ( 'opqrst' )}, index = list ( 'ABBCEE' )) In [ 121 ]: df2 Out [ 121 ]: col2 A o B p B q C r E s E t In [ 122 ]: join ( df1 , df2 , how = 'outer' ) Out [ 122 ]: col1 col2 A 1 o A 2 o B 3 p B 3 q C 4 r D 5 NaN E NaN s E NaN t \u7b2c\u4e03\u7ae0 \u7f3a\u5931\u6570\u636e Ex1\uff1a\u7f3a\u5931\u503c\u4e0e\u7c7b\u522b\u7684\u76f8\u5173\u6027\u68c0\u9a8c In [ 123 ]: df = pd . read_csv ( 'data/missing_chi.csv' ) In [ 124 ]: cat_1 = df . X_1 . fillna ( 'NaN' ) . mask ( df . X_1 . notna ()) . fillna ( \"NotNaN\" ) In [ 125 ]: cat_2 = df . X_2 . fillna ( 'NaN' ) . mask ( df . X_2 . notna ()) . fillna ( \"NotNaN\" ) In [ 126 ]: df_1 = pd . crosstab ( cat_1 , df . y , margins = True ) In [ 127 ]: df_2 = pd . crosstab ( cat_2 , df . y , margins = True ) In [ 128 ]: def compute_S ( my_df ): ..... : S = [] ..... : for i in range ( 2 ): ..... : for j in range ( 2 ): ..... : E = my_df . iat [ i , j ] ..... : F = my_df . iat [ i , 2 ] * my_df . iat [ 2 , j ] / my_df . iat [ 2 , 2 ] ..... : S . append (( E - F ) ** 2 / F ) ..... : return sum ( S ) ..... : In [ 129 ]: res1 = compute_S ( df_1 ) In [ 130 ]: res2 = compute_S ( df_2 ) In [ 131 ]: from scipy.stats import chi2 In [ 132 ]: chi2 . sf ( res1 , 1 ) # X_1\u68c0\u9a8c\u7684p\u503c # \u4e0d\u80fd\u8ba4\u4e3a\u76f8\u5173\uff0c\u5254\u9664 Out [ 132 ]: 0.9712760884395901 In [ 133 ]: chi2 . sf ( res2 , 1 ) # X_2\u68c0\u9a8c\u7684p\u503c # \u8ba4\u4e3a\u76f8\u5173\uff0c\u4fdd\u7559 Out [ 133 ]: 7.459641265637543e-166 \u7ed3\u679c\u4e0e scipy.stats.chi2_contingency \u5728\u4e0d\u4f7f\u7528 \u4fee\u6b63\u7684\u60c5\u51b5\u4e0b\u5b8c\u5168\u4e00\u81f4\uff1a In [ 134 ]: from scipy.stats import chi2_contingency In [ 135 ]: chi2_contingency ( pd . crosstab ( cat_1 , df . y ), correction = False )[ 1 ] Out [ 135 ]: 0.9712760884395901 In [ 136 ]: chi2_contingency ( pd . crosstab ( cat_2 , df . y ), correction = False )[ 1 ] Out [ 136 ]: 7.459641265637543e-166 Ex2\uff1a\u7528\u56de\u5f52\u6a21\u578b\u89e3\u51b3\u5206\u7c7b\u95ee\u9898 1 In [ 137 ]: from sklearn.neighbors import KNeighborsRegressor In [ 138 ]: df = pd . read_excel ( 'data/color.xlsx' ) In [ 139 ]: df_dummies = pd . get_dummies ( df . Color ) In [ 140 ]: stack_list = [] In [ 141 ]: for col in df_dummies . columns : ..... : clf = KNeighborsRegressor ( n_neighbors = 6 ) ..... : clf . fit ( df . iloc [:,: 2 ] . values , df_dummies [ col ] . values ) ..... : res = clf . predict ([[ 0.8 , - 0.2 ]]) . reshape ( - 1 , 1 ) ..... : stack_list . append ( res ) ..... : In [ 142 ]: code_res = pd . Series ( np . hstack ( stack_list ) . argmax ( 1 )) In [ 143 ]: df_dummies . columns [ code_res [ 0 ]] Out [ 143 ]: 'Yellow' 2 In [ 144 ]: from sklearn.neighbors import KNeighborsRegressor In [ 145 ]: df = pd . read_csv ( 'data/audit.csv' ) In [ 146 ]: res_df = df . copy () In [ 147 ]: df = pd . concat ([ pd . get_dummies ( df [[ 'Marital' , 'Gender' ]]), ..... : df [[ 'Age' , 'Income' , 'Hours' ]] . apply ( ..... : lambda x :( x - x . min ()) / ( x . max () - x . min ())), df . Employment ], 1 ) ..... : In [ 148 ]: X_train = df . query ( 'Employment.notna()' ) In [ 149 ]: X_test = df . query ( 'Employment.isna()' ) In [ 150 ]: df_dummies = pd . get_dummies ( X_train . Employment ) In [ 151 ]: stack_list = [] In [ 152 ]: for col in df_dummies . columns : ..... : clf = KNeighborsRegressor ( n_neighbors = 6 ) ..... : clf . fit ( X_train . iloc [:,: - 1 ] . values , df_dummies [ col ] . values ) ..... : res = clf . predict ( X_test . iloc [:,: - 1 ] . values ) . reshape ( - 1 , 1 ) ..... : stack_list . append ( res ) ..... : In [ 153 ]: code_res = pd . Series ( np . hstack ( stack_list ) . argmax ( 1 )) In [ 154 ]: cat_res = code_res . replace ( dict ( zip ( list ( ..... : range ( df_dummies . shape [ 0 ])), df_dummies . columns ))) ..... : In [ 155 ]: res_df . loc [ res_df . Employment . isna (), 'Employment' ] = cat_res . values In [ 156 ]: res_df . isna () . sum () Out [ 156 ]: ID 0 Age 0 Employment 0 Marital 0 Income 0 Gender 0 Hours 0 dtype : int64 \u7b2c\u516b\u7ae0 \u6587\u672c\u6570\u636e Ex1\uff1a\u623f\u5c4b\u4fe1\u606f\u6570\u636e\u96c6 1 In [ 157 ]: df = pd . read_excel ( 'data/house_info.xls' , usecols = [ ..... : 'floor' , 'year' , 'area' , 'price' ]) ..... : In [ 158 ]: df . year = pd . to_numeric ( df . year . str [: - 2 ]) . astype ( 'Int64' ) In [ 159 ]: df . head ( 3 ) Out [ 159 ]: floor year area price 0 \u9ad8\u5c42 \uff08 \u51716\u5c42 \uff09 1986 58.23 \u33a1 155 \u4e07 1 \u4e2d\u5c42 \uff08 \u517120\u5c42 \uff09 2020 88 \u33a1 155 \u4e07 2 \u4f4e\u5c42 \uff08 \u517128\u5c42 \uff09 2010 89.33 \u33a1 365 \u4e07 2 In [ 160 ]: pat = '(\\w\u5c42)\uff08\u5171(\\d+)\u5c42\uff09' In [ 161 ]: new_cols = df . floor . str . extract ( pat ) . rename ( ..... : columns = { 0 : 'Level' , 1 : 'Highest' }) ..... : In [ 162 ]: df = pd . concat ([ df . drop ( columns = [ 'floor' ]), new_cols ], 1 ) In [ 163 ]: df . head ( 3 ) Out [ 163 ]: year area price Level Highest 0 1986 58.23 \u33a1 155 \u4e07 \u9ad8\u5c42 6 1 2020 88 \u33a1 155 \u4e07 \u4e2d\u5c42 20 2 2010 89.33 \u33a1 365 \u4e07 \u4f4e\u5c42 28 3 In [ 164 ]: s_area = pd . to_numeric ( df . area . str [: - 1 ]) In [ 165 ]: s_price = pd . to_numeric ( df . price . str [: - 1 ]) In [ 166 ]: df [ 'avg_price' ] = (( s_price / s_area ) * 10000 ) . astype ( ..... : 'int' ) . astype ( 'string' ) + '\u5143/\u5e73\u7c73' ..... : In [ 167 ]: df . head ( 3 ) Out [ 167 ]: year area price Level Highest avg_price 0 1986 58.23 \u33a1 155 \u4e07 \u9ad8\u5c42 6 26618 \u5143 / \u5e73\u7c73 1 2020 88 \u33a1 155 \u4e07 \u4e2d\u5c42 20 17613 \u5143 / \u5e73\u7c73 2 2010 89.33 \u33a1 365 \u4e07 \u4f4e\u5c42 28 40859 \u5143 / \u5e73\u7c73 Ex2\uff1a\u300a\u6743\u529b\u7684\u6e38\u620f\u300b\u5267\u672c\u6570\u636e\u96c6 1 In [ 168 ]: df = pd . read_csv ( 'data/script.csv' ) In [ 169 ]: df . columns = df . columns . str . strip () In [ 170 ]: df . groupby ([ 'Season' , 'Episode' ])[ 'Sentence' ] . count () . head () Out [ 170 ]: Season Episode Season 1 Episode 1 327 Episode 10 266 Episode 2 283 Episode 3 353 Episode 4 404 Name : Sentence , dtype : int64 2 In [ 171 ]: df . set_index ( 'Name' ) . Sentence . str . split () . str . len ( ..... : ) . groupby ( 'Name' ) . mean () . sort_values ( ascending = False ) . head () ..... : Out [ 171 ]: Name male singer 109.000000 slave owner 77.000000 manderly 62.000000 lollys stokeworth 62.000000 dothraki matron 56.666667 Name : Sentence , dtype : float64 3 In [ 172 ]: s = pd . Series ( df . Sentence . values , index = df . Name . shift ( - 1 )) In [ 173 ]: s . str . count ( '\\?' ) . groupby ( 'Name' ) . sum () . sort_values ( ascending = False ) . head () Out [ 173 ]: Name tyrion lannister 527 jon snow 374 jaime lannister 283 arya stark 265 cersei lannister 246 dtype : int64 \u7b2c\u4e5d\u7ae0 \u5206\u7c7b\u6570\u636e Ex1\uff1a\u7edf\u8ba1\u672a\u51fa\u73b0\u7684\u7c7b\u522b In [ 174 ]: def my_crosstab ( s1 , s2 , dropna = True ): ..... : idx1 = ( s1 . cat . categories if s1 . dtype . name == 'category' and ..... : not dropna else s1 . unique ()) ..... : idx2 = ( s2 . cat . categories if s2 . dtype . name == 'category' and ..... : not dropna else s2 . unique ()) ..... : res = pd . DataFrame ( np . zeros (( idx1 . shape [ 0 ], idx2 . shape [ 0 ])), ..... : index = idx1 , columns = idx2 ) ..... : for i , j in zip ( s1 , s2 ): ..... : res . at [ i , j ] += 1 ..... : res = res . rename_axis ( index = s1 . name , columns = s2 . name ) . astype ( 'int' ) ..... : return res ..... : In [ 175 ]: df = pd . DataFrame ({ 'A' :[ 'a' , 'b' , 'c' , 'a' ], ..... : 'B' :[ 'cat' , 'cat' , 'dog' , 'cat' ]}) ..... : In [ 176 ]: df . B = df . B . astype ( 'category' ) . cat . add_categories ( 'sheep' ) In [ 177 ]: my_crosstab ( df . A , df . B ) Out [ 177 ]: B cat dog A a 2 0 b 1 0 c 0 1 In [ 178 ]: my_crosstab ( df . A , df . B , dropna = False ) Out [ 178 ]: B cat dog sheep A a 2 0 0 b 1 0 0 c 0 1 0 Ex2\uff1a\u94bb\u77f3\u6570\u636e\u96c6 1 In [ 179 ]: df = pd . read_csv ( 'data/diamonds.csv' ) In [ 180 ]: s_obj , s_cat = df . cut , df . cut . astype ( 'category' ) In [ 181 ]: % timeit - n 30 s_obj . nunique () 4.21 ms +- 146 us per loop ( mean +- std . dev . of 7 runs , 30 loops each ) In [ 182 ]: % timeit - n 30 s_cat . nunique () 960 us +- 45.2 us per loop ( mean +- std . dev . of 7 runs , 30 loops each ) 2 In [ 183 ]: df . cut = df . cut . astype ( 'category' ) . cat . reorder_categories ([ ..... : 'Fair' , 'Good' , 'Very Good' , 'Premium' , 'Ideal' ], ordered = True ) ..... : In [ 184 ]: df . clarity = df . clarity . astype ( 'category' ) . cat . reorder_categories ([ ..... : 'I1' , 'SI2' , 'SI1' , 'VS2' , 'VS1' , 'VVS2' , 'VVS1' , 'IF' ], ordered = True ) ..... : In [ 185 ]: res = df . sort_values ([ 'cut' , 'clarity' ], ascending = [ False , True ]) In [ 186 ]: res . head ( 3 ) Out [ 186 ]: carat cut clarity price 315 0.96 Ideal I1 2801 535 0.96 Ideal I1 2826 551 0.97 Ideal I1 2830 In [ 187 ]: res . tail ( 3 ) Out [ 187 ]: carat cut clarity price 47407 0.52 Fair IF 1849 49683 0.52 Fair IF 2144 50126 0.47 Fair IF 2211 3 In [ 188 ]: df . cut = df . cut . cat . reorder_categories ( ..... : df . cut . cat . categories [:: - 1 ]) ..... : In [ 189 ]: df . clarity = df . clarity . cat . reorder_categories ( ..... : df . clarity . cat . categories [:: - 1 ]) ..... : In [ 190 ]: df . cut = df . cut . cat . codes # \u65b9\u6cd5\u4e00\uff1a\u5229\u7528cat.codes In [ 191 ]: clarity_cat = df . clarity . cat . categories In [ 192 ]: df . clarity = df . clarity . replace ( dict ( zip ( ..... : clarity_cat , np . arange ( ..... : len ( clarity_cat ))))) # \u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528replace\u6620\u5c04 ..... : In [ 193 ]: df . head ( 3 ) Out [ 193 ]: carat cut clarity price 0 0.23 0 6 326 1 0.21 1 5 326 2 0.23 3 3 327 4 In [ 194 ]: q = [ 0 , 0.2 , 0.4 , 0.6 , 0.8 , 1 ] In [ 195 ]: point = [ - np . infty , 1000 , 3500 , 5500 , 18000 , np . infty ] In [ 196 ]: avg = df . price / df . carat In [ 197 ]: df [ 'avg_cut' ] = pd . cut ( avg , bins = point , labels = [ ..... : 'Very Low' , 'Low' , 'Mid' , 'High' , 'Very High' ]) ..... : In [ 198 ]: df [ 'avg_qcut' ] = pd . qcut ( avg , q = q , labels = [ ..... : 'Very Low' , 'Low' , 'Mid' , 'High' , 'Very High' ]) ..... : In [ 199 ]: df . head () Out [ 199 ]: carat cut clarity price avg_cut avg_qcut 0 0.23 0 6 326 Low Very Low 1 0.21 1 5 326 Low Very Low 2 0.23 3 3 327 Low Very Low 3 0.29 1 4 334 Low Very Low 4 0.31 3 6 335 Low Very Low 5 In [ 200 ]: df . avg_cut . unique () Out [ 200 ]: [ 'Low' , 'Mid' , 'High' ] Categories ( 3 , object ): [ 'Low' < 'Mid' < 'High' ] In [ 201 ]: df . avg_cut . cat . categories Out [ 201 ]: Index ([ 'Very Low' , 'Low' , 'Mid' , 'High' , 'Very High' ], dtype = 'object' ) In [ 202 ]: df . avg_cut = df . avg_cut . cat . remove_categories ([ ..... : 'Very Low' , 'Very High' ]) ..... : In [ 203 ]: df . avg_cut . head ( 3 ) Out [ 203 ]: 0 Low 1 Low 2 Low Name : avg_cut , dtype : category Categories ( 3 , object ): [ 'Low' < 'Mid' < 'High' ] 6 In [ 204 ]: interval_avg = pd . IntervalIndex ( pd . qcut ( avg , q = q )) In [ 205 ]: interval_avg . right . to_series () . reset_index ( drop = True ) . head ( 3 ) Out [ 205 ]: 0 2295.0 1 2295.0 2 2295.0 dtype : float64 In [ 206 ]: interval_avg . left . to_series () . reset_index ( drop = True ) . head ( 3 ) Out [ 206 ]: 0 1051.162 1 1051.162 2 1051.162 dtype : float64 In [ 207 ]: interval_avg . length . to_series () . reset_index ( drop = True ) . head ( 3 ) Out [ 207 ]: 0 1243.838 1 1243.838 2 1243.838 dtype : float64 \u7b2c\u5341\u7ae0 \u65f6\u5e8f\u6570\u636e Ex1\uff1a\u592a\u9633\u8f90\u5c04\u6570\u636e\u96c6 1 In [ 208 ]: df = pd . read_csv ( 'data/solar.csv' , usecols = [ 'Data' , 'Time' , ..... : 'Radiation' , 'Temperature' ]) ..... : In [ 209 ]: solar_date = df . Data . str . extract ( '([/|\\w]+\\s).+' )[ 0 ] In [ 210 ]: df [ 'Data' ] = pd . to_datetime ( solar_date + df . Time ) In [ 211 ]: df = df . drop ( columns = 'Time' ) . rename ( columns = { 'Data' : 'Datetime' } ..... : ) . set_index ( 'Datetime' ) . sort_index () ..... : In [ 212 ]: df . head ( 3 ) Out [ 212 ]: Radiation Temperature Datetime 2016 - 09 - 01 00 : 00 : 08 2.58 51 2016 - 09 - 01 00 : 05 : 10 2.83 51 2016 - 09 - 01 00 : 20 : 06 2.16 51 2-a In [ 213 ]: s = df . index . to_series () . reset_index ( drop = True ) . diff () . dt . total_seconds () In [ 214 ]: max_3 = s . nlargest ( 3 ) . index In [ 215 ]: df . index [ max_3 . union ( max_3 - 1 )] Out [ 215 ]: DatetimeIndex ([ '2016-09-29 23:55:26' , '2016-10-01 00:00:19' , '2016-11-29 19:05:02' , '2016-12-01 00:00:02' , '2016-12-05 20:45:53' , '2016-12-08 11:10:42' ], dtype = 'datetime64[ns]' , name = 'Datetime' , freq = None ) 2-b In [ 216 ]: res = s . mask (( s > s . quantile ( 0.99 )) | ( s < s . quantile ( 0.01 ))) In [ 217 ]: _ = plt . hist ( res , bins = 50 ) 3-a In [ 218 ]: res = df . Radiation . rolling ( '6H' ) . corr ( df . Temperature ) In [ 219 ]: res . tail ( 3 ) Out [ 219 ]: Datetime 2016 - 12 - 31 23 : 45 : 04 0.328574 2016 - 12 - 31 23 : 50 : 03 0.261883 2016 - 12 - 31 23 : 55 : 01 0.262406 dtype : float64 3-b In [ 220 ]: res = df . Temperature . resample ( '6H' , origin = '03:00:00' ) . mean () In [ 221 ]: res . head ( 3 ) Out [ 221 ]: Datetime 2016 - 08 - 31 21 : 00 : 00 51.218750 2016 - 09 - 01 03 : 00 : 00 50.033333 2016 - 09 - 01 09 : 00 : 00 59.379310 Freq : 6 H , Name : Temperature , dtype : float64 3-c # \u975e\u5e38\u6162 my_dt = df . index . shift ( freq = '-6H' ) int_loc = [ df . index . get_indexer ([ i ], method = 'nearest' ) for i in my_dt ] int_loc = np . array ( int_loc ) . reshape ( - 1 ) res = df . Radiation . iloc [ int_loc ] res . index = df . index res . tail ( 3 ) # \u7eb8\u8d28\u7248\u4e0a\u4ecb\u7ecd\u4e86merge_asof\uff0c\u6027\u80fd\u5dee\u8ddd\u53ef\u4ee5\u8fbe\u52303-4\u4e2a\u6570\u91cf\u7ea7 In [ 222 ]: target = pd . DataFrame ( ..... : { ..... : \"Time\" : df . index . shift ( freq = '-6H' ), ..... : \"Datetime\" : df . index , ..... : } ..... : ) ..... : In [ 223 ]: res = pd . merge_asof ( ..... : target , ..... : df . reset_index () . rename ( columns = { \"Datetime\" : \"Time\" }), ..... : left_on = \"Time\" , ..... : right_on = \"Time\" , ..... : direction = \"nearest\" ..... : ) . set_index ( \"Datetime\" ) . Radiation ..... : In [ 224 ]: res . tail ( 3 ) Out [ 224 ]: Datetime 2016 - 12 - 31 23 : 45 : 04 9.33 2016 - 12 - 31 23 : 50 : 03 8.49 2016 - 12 - 31 23 : 55 : 01 5.84 Name : Radiation , dtype : float64 Ex2\uff1a\u6c34\u679c\u9500\u91cf\u6570\u636e\u96c6 1-a In [ 225 ]: df = pd . read_csv ( 'data/fruit.csv' ) In [ 226 ]: df . Date = pd . to_datetime ( df . Date ) In [ 227 ]: df_grape = df . query ( \"Fruit == 'Grape'\" ) In [ 228 ]: res = df_grape . groupby ([ np . where ( df_grape . Date . dt . day <= 15 , ..... : 'First' , 'Second' ), df_grape . Date . dt . month ] ..... : )[ 'Sale' ] . mean () . to_frame () . unstack ( 0 ..... : ) . droplevel ( 0 , axis = 1 ) ..... : In [ 229 ]: res = ( res . First / res . Second ) . rename_axis ( 'Month' ) In [ 230 ]: res . head () Out [ 230 ]: Month 1 1.174998 2 0.968890 3 0.951351 4 1.020797 5 0.931061 dtype : float64 1-b In [ 231 ]: df [ df . Date . dt . is_month_end ] . query ( \"Fruit == 'Pear'\" ..... : ) . groupby ( 'Date' ) . Sale . sum () . head () ..... : Out [ 231 ]: Date 2019 - 01 - 31 847 2019 - 02 - 28 774 2019 - 03 - 31 761 2019 - 04 - 30 648 2019 - 05 - 31 616 Name : Sale , dtype : int64 1-c In [ 232 ]: df [ df . Date . isin ( pd . date_range ( '20190101' , '20191231' , ..... : freq = 'BM' ))] . query ( \"Fruit == 'Pear'\" ..... : ) . groupby ( 'Date' ) . Sale . sum () . head () ..... : Out [ 232 ]: Date 2019 - 01 - 31 847 2019 - 02 - 28 774 2019 - 03 - 29 510 2019 - 04 - 30 648 2019 - 05 - 31 616 Name : Sale , dtype : int64 1-d In [ 233 ]: target_dt = df . drop_duplicates () . groupby ( df . Date . drop_duplicates ( ..... : ) . dt . month )[ 'Date' ] . nlargest ( 5 ) . reset_index ( drop = True ) ..... : In [ 234 ]: res = df . set_index ( 'Date' ) . loc [ target_dt ] . reset_index ( ..... : ) . query ( \"Fruit == 'Apple'\" ) ..... : In [ 235 ]: res = res . groupby ( res . Date . dt . month )[ 'Sale' ] . mean ( ..... : ) . rename_axis ( 'Month' ) ..... : In [ 236 ]: res . head () Out [ 236 ]: Month 1 65.313725 2 54.061538 3 59.325581 4 65.795455 5 57.465116 Name : Sale , dtype : float64 2 In [ 237 ]: month_order = [ 'January' , 'February' , 'March' , 'April' , ..... : 'May' , 'June' , 'July' , 'August' , 'September' , ..... : 'October' , 'November' , 'December' ] ..... : In [ 238 ]: week_order = [ 'Mon' , 'Tue' , 'Wed' , 'Thu' , 'Fri' , 'Sat' , 'Sum' ] In [ 239 ]: group1 = df . Date . dt . month_name () . astype ( 'category' ) . cat . reorder_categories ( ..... : month_order , ordered = True ) ..... : In [ 240 ]: group2 = df . Fruit In [ 241 ]: group3 = df . Date . dt . dayofweek . replace ( dict ( zip ( range ( 7 ), week_order )) ..... : ) . astype ( 'category' ) . cat . reorder_categories ( ..... : week_order , ordered = True ) ..... : In [ 242 ]: res = df . groupby ([ group1 , group2 , group3 ])[ 'Sale' ] . count () . to_frame ( ..... : ) . unstack ( 0 ) . droplevel ( 0 , axis = 1 ) ..... : In [ 243 ]: res . head () Out [ 243 ]: Date January February March April May June July August September October November December Fruit Date Apple Mon 46 43 43 47 43 40 41 38 59 42 39 45 Tue 50 40 44 52 46 39 50 42 40 57 47 47 Wed 50 47 37 43 39 39 58 43 35 46 47 38 Thu 45 35 31 47 58 33 52 44 36 63 37 40 Fri 32 33 52 31 46 38 37 48 34 37 46 41 3 In [ 244 ]: df_apple = df [( df . Fruit == 'Apple' ) & ( ..... : ~ df . Date . dt . dayofweek . isin ([ 5 , 6 ]))] ..... : In [ 245 ]: s = pd . Series ( df_apple . Sale . values , ..... : index = df_apple . Date ) . groupby ( 'Date' ) . sum () ..... : In [ 246 ]: res = s . rolling ( '10D' ) . mean () . reindex ( ..... : pd . date_range ( '20190101' , '20191231' )) . fillna ( method = 'ffill' ) ..... : In [ 247 ]: res . head () Out [ 247 ]: 2019 - 01 - 01 189.000000 2019 - 01 - 02 335.500000 2019 - 01 - 03 520.333333 2019 - 01 - 04 527.750000 2019 - 01 - 05 527.750000 Freq : D , dtype : float64","title":"\u53c2\u8003\u7b54\u6848"},{"location":"pandas/answer/#_1","text":"","title":"\u7b2c\u4e00\u7ae0 \u9884\u5907\u77e5\u8bc6"},{"location":"pandas/answer/#ex1","text":"In [ 4 ]: M1 = np . random . rand ( 2 , 3 ) In [ 5 ]: M2 = np . random . rand ( 3 , 4 ) In [ 6 ]: res = [[ sum ([ M1 [ i ][ k ] * M2 [ k ][ j ] for k in range ( M1 . shape [ 1 ])]) for j in range ( M2 . shape [ 1 ])] for i in range ( M1 . shape [ 0 ])] In [ 7 ]: ( np . abs (( M1 @M2 - res ) < 1e-15 )) . all () Out [ 7 ]: True","title":"Ex1\uff1a\u5229\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u5199\u77e9\u9635\u4e58\u6cd5"},{"location":"pandas/answer/#ex2","text":"In [ 8 ]: A = np . arange ( 1 , 10 ) . reshape ( 3 , - 1 ) In [ 9 ]: B = A * ( 1 / A ) . sum ( 1 ) . reshape ( - 1 , 1 ) In [ 10 ]: B Out [ 10 ]: array ([[ 1.83333333 , 3.66666667 , 5.5 ], [ 2.46666667 , 3.08333333 , 3.7 ], [ 2.65277778 , 3.03174603 , 3.41071429 ]])","title":"Ex2\uff1a\u66f4\u65b0\u77e9\u9635"},{"location":"pandas/answer/#ex3","text":"In [ 11 ]: np . random . seed ( 0 ) In [ 12 ]: A = np . random . randint ( 10 , 20 , ( 8 , 5 )) In [ 13 ]: B = A . sum ( 0 ) * A . sum ( 1 ) . reshape ( - 1 , 1 ) / A . sum () In [ 14 ]: res = (( A - B ) ** 2 / B ) . sum () In [ 15 ]: res Out [ 15 ]: 11.842696601945802","title":"Ex3\uff1a\u5361\u65b9\u7edf\u8ba1\u91cf"},{"location":"pandas/answer/#ex4","text":"\u539f\u65b9\u6cd5\uff1a In [ 16 ]: np . random . seed ( 0 ) In [ 17 ]: m , n , p = 100 , 80 , 50 In [ 18 ]: B = np . random . randint ( 0 , 2 , ( m , p )) In [ 19 ]: U = np . random . randint ( 0 , 2 , ( p , n )) In [ 20 ]: Z = np . random . randint ( 0 , 2 , ( m , n )) In [ 21 ]: def solution ( B = B , U = U , Z = Z ): .... : L_res = [] .... : for i in range ( m ): .... : for j in range ( n ): .... : norm_value = (( B [ i ] - U [:, j ]) ** 2 ) . sum () .... : L_res . append ( norm_value * Z [ i ][ j ]) .... : return sum ( L_res ) .... : In [ 22 ]: solution ( B , U , Z ) Out [ 22 ]: 100566 \u6539\u8fdb\u65b9\u6cd5\uff1a \u5728 Numpy \u4e2d\u53ef\u4ee5\u7528\u9010\u5143\u7d20\u7684\u4e58\u6cd5\u540e\u6c42\u548c\u5b9e\u73b0\uff0c\u56e0\u6b64\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u5982\u4f55\u6784\u9020 \u77e9\u9635\u3002 \u7b2c\u4e00\u7b2c\u4e8c\u9879\u5206\u522b\u4e3a \u7684\u884c\u5e73\u65b9\u548c\u4e0e \u7684\u5217\u5e73\u65b9\u548c\uff0c\u7b2c\u4e09\u9879\u662f\u4e24\u500d\u7684\u5185\u79ef\u3002\u56e0\u6b64\uff0c \u77e9\u9635\u53ef\u4ee5\u5199\u4e3a\u4e09\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u662f \u7684\u5168 \u77e9\u9635\u6bcf\u884c\u4e58\u4ee5 \u5bf9\u5e94\u884c\u7684\u884c\u5e73\u65b9\u548c\uff0c\u7b2c\u4e8c\u4e2a\u90e8\u5206\u662f\u76f8\u540c\u5927\u5c0f\u7684\u5168 \u77e9\u9635\u6bcf\u5217\u4e58\u4ee5 \u5bf9\u5e94\u5217\u7684\u5217\u5e73\u65b9\u548c\uff0c\u7b2c\u4e09\u4e2a\u90e8\u5206\u6070\u4e3a \u77e9\u9635\u4e0e \u77e9\u9635\u4e58\u79ef\u7684\u4e24\u500d\u3002\u4ece\u800c\u7ed3\u679c\u5982\u4e0b\uff1a In [ 23 ]: ((( B ** 2 ) . sum ( 1 ) . reshape ( - 1 , 1 ) + ( U ** 2 ) . sum ( 0 ) - 2 * B @U ) * Z ) . sum () Out [ 23 ]: 100566 \u5bf9\u6bd4\u5b83\u4eec\u7684\u6027\u80fd\uff1a In [ 24 ]: % timeit - n 30 solution ( B , U , Z ) 35.9 ms +- 3.24 ms per loop ( mean +- std . dev . of 7 runs , 30 loops each ) In [ 25 ]: % timeit - n 30 (( np . ones (( m , n )) * ( B ** 2 ) . sum ( 1 ) . reshape ( - 1 , 1 ) + \\ .... : np . ones (( m , n )) * ( U ** 2 ) . sum ( 0 ) - 2 * B @U ) * Z ) . sum () .... : 692 us +- 43 us per loop ( mean +- std . dev . of 7 runs , 30 loops each )","title":"Ex4\uff1a\u6539\u8fdb\u77e9\u9635\u8ba1\u7b97\u7684\u6027\u80fd"},{"location":"pandas/answer/#ex5","text":"In [ 26 ]: f = lambda x : np . diff ( np . nonzero ( np . r_ [ 1 , np . diff ( x ) != 1 , 1 ])) . max () In [ 27 ]: f ([ 1 , 2 , 5 , 6 , 7 ]) Out [ 27 ]: 3 In [ 28 ]: f ([ 3 , 2 , 1 , 2 , 3 , 4 , 6 ]) Out [ 28 ]: 4","title":"Ex5\uff1a\u8fde\u7eed\u6574\u6570\u7684\u6700\u5927\u957f\u5ea6"},{"location":"pandas/answer/#pandas","text":"","title":"\u7b2c\u4e8c\u7ae0 pandas \u57fa\u7840"},{"location":"pandas/answer/#ex1_1","text":"1 In [ 29 ]: df = pd . read_csv ( 'data/pokemon.csv' ) In [ 30 ]: ( df [[ 'HP' , 'Attack' , 'Defense' , 'Sp. Atk' , 'Sp. Def' , 'Speed' .... : ]] . sum ( 1 ) != df [ 'Total' ]) . mean () .... : Out [ 30 ]: 0.0 2-a In [ 31 ]: dp_dup = df . drop_duplicates ( '#' , keep = 'first' ) In [ 32 ]: dp_dup [ 'Type 1' ] . nunique () Out [ 32 ]: 18 In [ 33 ]: dp_dup [ 'Type 1' ] . value_counts () . index [: 3 ] Out [ 33 ]: Index ([ 'Water' , 'Normal' , 'Grass' ], dtype = 'object' ) 2-b In [ 34 ]: attr_dup = dp_dup . drop_duplicates ([ 'Type 1' , 'Type 2' ]) In [ 35 ]: attr_dup . shape [ 0 ] Out [ 35 ]: 143 2-c In [ 36 ]: L_full = [ i + ' ' + j if i != j else i for i in df [ 'Type 1' .... : ] . unique () for j in df [ 'Type 1' ] . unique ()] .... : In [ 37 ]: L_part = [ i + ' ' + j if not isinstance ( j , float ) else i for i , j in zip ( .... : attr_dup [ 'Type 1' ], attr_dup [ 'Type 2' ])] .... : In [ 38 ]: res = set ( L_full ) . difference ( set ( L_part )) In [ 39 ]: len ( res ) # \u592a\u591a\uff0c\u4e0d\u6253\u5370\u4e86 Out [ 39 ]: 181 3-a In [ 40 ]: df [ 'Attack' ] . mask ( df [ 'Attack' ] > 120 , 'high' .... : ) . mask ( df [ 'Attack' ] < 50 , 'low' ) . mask (( 50 <= df [ 'Attack' ] .... : ) & ( df [ 'Attack' ] <= 120 ), 'mid' ) . head () .... : Out [ 40 ]: 0 low 1 mid 2 mid 3 mid 4 mid Name : Attack , dtype : object 3-b In [ 41 ]: df [ 'Type 1' ] . replace ({ i : str . upper ( i ) for i in df [ 'Type 1' .... : ] . unique ()}) . head () .... : Out [ 41 ]: 0 GRASS 1 GRASS 2 GRASS 3 GRASS 4 FIRE Name : Type 1 , dtype : object In [ 42 ]: df [ 'Type 1' ] . apply ( lambda x : str . upper ( x )) . head () Out [ 42 ]: 0 GRASS 1 GRASS 2 GRASS 3 GRASS 4 FIRE Name : Type 1 , dtype : object 3-c In [ 43 ]: df [ 'Deviation' ] = df [[ 'HP' , 'Attack' , 'Defense' , 'Sp. Atk' , .... : 'Sp. Def' , 'Speed' ]] . apply ( lambda x : np . max ( .... : ( x - x . median ()) . abs ()), 1 ) .... : In [ 44 ]: df . sort_values ( 'Deviation' , ascending = False ) . head () Out [ 44 ]: # Name Type 1 Type 2 Total HP Attack Defense Sp. Atk Sp. Def Speed Deviation 230 213 Shuckle Bug Rock 505 20 10 230 10 230 5 215.0 121 113 Chansey Normal NaN 450 250 5 5 35 105 50 207.5 261 242 Blissey Normal NaN 540 255 10 10 75 135 55 190.0 333 306 AggronMega Aggron Steel NaN 630 70 140 230 60 80 50 155.0 224 208 SteelixMega Steelix Steel Ground 610 75 125 230 55 95 30 145.0","title":"Ex1\uff1a\u53e3\u888b\u5996\u602a\u6570\u636e\u96c6"},{"location":"pandas/answer/#ex2_1","text":"1 In [ 45 ]: np . random . seed ( 0 ) In [ 46 ]: s = pd . Series ( np . random . randint ( - 1 , 2 , 30 ) . cumsum ()) In [ 47 ]: s . ewm ( alpha = 0.2 ) . mean () . head () Out [ 47 ]: 0 - 1.000000 1 - 1.000000 2 - 1.409836 3 - 1.609756 4 - 1.725845 dtype : float64 In [ 48 ]: def ewm_func ( x , alpha = 0.2 ): .... : win = ( 1 - alpha ) ** np . arange ( x . shape [ 0 ])[:: - 1 ] .... : res = ( win * x ) . sum () / win . sum () .... : return res .... : In [ 49 ]: s . expanding () . apply ( ewm_func ) . head () Out [ 49 ]: 0 - 1.000000 1 - 1.000000 2 - 1.409836 3 - 1.609756 4 - 1.725845 dtype : float64 \u65b0\u7684\u6743\u91cd\u4e3a \uff0c \u66f4\u65b0\u5982\u4e0b\uff1a 2 In [ 50 ]: s . rolling ( window = 4 ) . apply ( ewm_func ) . head () # \u65e0\u9700\u5bf9\u539f\u51fd\u6570\u6539\u52a8 Out [ 50 ]: 0 NaN 1 NaN 2 NaN 3 - 1.609756 4 - 1.826558 dtype : float64","title":"Ex2\uff1a\u6307\u6570\u52a0\u6743\u7a97\u53e3"},{"location":"pandas/answer/#_2","text":"","title":"\u7b2c\u4e09\u7ae0 \u7d22\u5f15"},{"location":"pandas/answer/#ex1_2","text":"1 In [ 51 ]: df = pd . read_csv ( 'data/company.csv' ) In [ 52 ]: dpt = [ 'Dairy' , 'Bakery' ] In [ 53 ]: df . query ( \"(age <= 40)&(department == @dpt)&(gender=='M')\" ) . head ( 3 ) Out [ 53 ]: EmployeeID birthdate_key age city_name department job_title gender 3611 5791 1 / 14 / 1975 40 Kelowna Dairy Dairy Person M 3613 5793 1 / 22 / 1975 40 Richmond Bakery Baker M 3615 5795 1 / 30 / 1975 40 Nanaimo Dairy Dairy Person M In [ 54 ]: df . loc [( df . age <= 40 ) & df . department . isin ( dpt ) & ( df . gender == 'M' )] . head ( 3 ) Out [ 54 ]: EmployeeID birthdate_key age city_name department job_title gender 3611 5791 1 / 14 / 1975 40 Kelowna Dairy Dairy Person M 3613 5793 1 / 22 / 1975 40 Richmond Bakery Baker M 3615 5795 1 / 30 / 1975 40 Nanaimo Dairy Dairy Person M 2 In [ 55 ]: df . iloc [( df . EmployeeID % 2 == 1 ) . values ,[ 0 , 2 , - 2 ]] . head () Out [ 55 ]: EmployeeID age job_title 1 1319 58 VP Stores 3 1321 56 VP Human Resources 5 1323 53 Exec Assistant , VP Stores 6 1325 51 Exec Assistant , Legal Counsel 8 1329 48 Store Manager 3 In [ 56 ]: df_op = df . copy () In [ 57 ]: df_op = df_op . set_index ( df_op . columns [ - 3 :] . tolist ()) . swaplevel ( 0 , 2 , axis = 0 ) In [ 58 ]: df_op = df_op . reset_index ( level = 1 ) In [ 59 ]: df_op = df_op . rename_axis ( index = { 'gender' : 'Gender' }) In [ 60 ]: df_op . index = df_op . index . map ( lambda x : '_' . join ( x )) In [ 61 ]: df_op . index = df_op . index . map ( lambda x : tuple ( x . split ( '_' ))) In [ 62 ]: df_op = df_op . rename_axis ( index = [ 'gender' , 'department' ]) In [ 63 ]: df_op = df_op . reset_index () . reindex ( df . columns , axis = 1 ) In [ 64 ]: df_op . equals ( df ) Out [ 64 ]: True","title":"Ex1\uff1a\u516c\u53f8\u5458\u5de5\u6570\u636e\u96c6"},{"location":"pandas/answer/#ex2_2","text":"1 In [ 65 ]: df = pd . read_csv ( 'data/chocolate.csv' ) In [ 66 ]: df . columns = [ ' ' . join ( i . split ( ' \\n ' )) for i in df . columns ] In [ 67 ]: df . head ( 3 ) Out [ 67 ]: Company Review Date Cocoa Percent Company Location Rating 0 A . Morin 2016 63 % France 3.75 1 A . Morin 2015 70 % France 2.75 2 A . Morin 2015 70 % France 3.00 2 In [ 68 ]: df [ 'Cocoa Percent' ] = df [ 'Cocoa Percent' ] . apply ( lambda x : float ( x [: - 1 ]) / 100 ) In [ 69 ]: df . query ( '(Rating<3)&(`Cocoa Percent`>`Cocoa Percent`.median())' ) . head ( 3 ) Out [ 69 ]: Company Review Date Cocoa Percent Company Location Rating 33 Akesson 's (Pralus) 2010 0.75 Switzerland 2.75 34 Akesson 's (Pralus) 2010 0.75 Switzerland 2.75 36 Alain Ducasse 2014 0.75 France 2.75 3 In [ 70 ]: idx = pd . IndexSlice In [ 71 ]: exclude = [ 'France' , 'Canada' , 'Amsterdam' , 'Belgium' ] In [ 72 ]: res = df . set_index ([ 'Review Date' , 'Company Location' ]) . sort_index ( level = 0 ) In [ 73 ]: res . loc [ idx [ 2012 :, ~ res . index . get_level_values ( 1 ) . isin ( exclude )],:] . head ( 3 ) Out [ 73 ]: Company Cocoa Percent Rating Review Date Company Location 2012 Australia Bahen & Co . 0.7 3.0 Australia Bahen & Co . 0.7 2.5 Australia Bahen & Co . 0.7 2.5","title":"Ex2\uff1a\u5de7\u514b\u529b\u6570\u636e\u96c6"},{"location":"pandas/answer/#_3","text":"","title":"\u7b2c\u56db\u7ae0 \u5206\u7ec4"},{"location":"pandas/answer/#ex1_3","text":"\u73b0\u6709\u4e00\u4efd\u5173\u4e8e\u6c7d\u8f66\u7684\u6570\u636e\u96c6\uff0c\u5176\u4e2d Brand, Disp., HP \u5206\u522b\u4ee3\u8868\u6c7d\u8f66\u54c1\u724c\u3001\u53d1\u52a8\u673a\u84c4\u91cf\u3001\u53d1\u52a8\u673a\u8f93\u51fa\u3002 In [ 74 ]: df = pd . read_csv ( 'data/car.csv' ) In [ 75 ]: df . head ( 3 ) Out [ 75 ]: Brand Price Country Reliability Mileage Type Weight Disp . HP 0 Eagle Summit 4 8895 USA 4.0 33 Small 2560 97 113 1 Ford Escort 4 7402 USA 2.0 33 Small 2345 114 90 2 Ford Festiva 4 6319 Korea 4.0 37 Small 1845 81 63 1 In [ 76 ]: df . groupby ( 'Country' ) . filter ( lambda x : x . shape [ 0 ] > 2 ) . groupby ( .... : 'Country' )[ 'Price' ] . agg ([( .... : 'CoV' , lambda x : x . std () / x . mean ()), 'mean' , 'count' ]) .... : Out [ 76 ]: CoV mean count Country Japan 0.387429 13938.052632 19 Japan / USA 0.240040 10067.571429 7 Korea 0.243435 7857.333333 3 USA 0.203344 12543.269231 26 2 In [ 77 ]: df . shape [ 0 ] Out [ 77 ]: 60 In [ 78 ]: condition = [ 'Head' ] * 20 + [ 'Mid' ] * 20 + [ 'Tail' ] * 20 In [ 79 ]: df . groupby ( condition )[ 'Price' ] . mean () Out [ 79 ]: Head 9069.95 Mid 13356.40 Tail 15420.65 Name : Price , dtype : float64 3 In [ 80 ]: res = df . groupby ( 'Type' ) . agg ({ 'Price' : [ 'max' ], 'HP' : [ 'min' ]}) In [ 81 ]: res . columns = res . columns . map ( lambda x : '_' . join ( x )) In [ 82 ]: res Out [ 82 ]: Price_max HP_min Type Compact 18900 95 Large 17257 150 Medium 24760 110 Small 9995 63 Sporty 13945 92 Van 15395 106 4 In [ 83 ]: def normalize ( s ): .... : s_min , s_max = s . min (), s . max () .... : res = ( s - s_min ) / ( s_max - s_min ) .... : return res .... : In [ 84 ]: df . groupby ( 'Type' )[ 'HP' ] . transform ( normalize ) . head () Out [ 84 ]: 0 1.00 1 0.54 2 0.00 3 0.58 4 0.80 Name : HP , dtype : float64 5 In [ 85 ]: df . groupby ( 'Type' )[[ 'HP' , 'Disp.' ]] . apply ( .... : lambda x : np . corrcoef ( x [ 'HP' ] . values , x [ 'Disp.' ] . values )[ 0 , 1 ]) .... : Out [ 85 ]: Type Compact 0.586087 Large - 0.242765 Medium 0.370491 Small 0.603916 Sporty 0.871426 Van 0.819881 dtype : float64","title":"Ex1\uff1a\u6c7d\u8f66\u6570\u636e\u96c6"},{"location":"pandas/answer/#ex2-transform","text":"In [ 86 ]: class my_groupby : .... : def __init__ ( self , my_df , group_cols ): .... : self . my_df = my_df . copy () .... : self . groups = my_df [ group_cols ] . drop_duplicates () .... : if isinstance ( self . groups , pd . Series ): .... : self . groups = self . groups . to_frame () .... : self . group_cols = self . groups . columns . tolist () .... : self . groups = { i : self . groups [ i ] . values . tolist ( .... : ) for i in self . groups . columns } .... : self . transform_col = None .... : def __getitem__ ( self , col ): .... : self . pr_col = [ col ] if isinstance ( col , str ) else list ( col ) .... : return self .... : def transform ( self , my_func ): .... : self . num = len ( self . groups [ self . group_cols [ 0 ]]) .... : L_order , L_value = np . array ([]), np . array ([]) .... : for i in range ( self . num ): .... : group_df = self . my_df . reset_index () . copy () .... : for col in self . group_cols : .... : group_df = group_df [ group_df [ col ] == self . groups [ col ][ i ]] .... : group_df = group_df [ self . pr_col ] .... : if group_df . shape [ 1 ] == 1 : .... : group_df = group_df . iloc [:, 0 ] .... : group_res = my_func ( group_df ) .... : if not isinstance ( group_res , pd . Series ): .... : group_res = pd . Series ( group_res , .... : index = group_df . index , .... : name = group_df . name ) .... : L_order = np . r_ [ L_order , group_res . index ] .... : L_value = np . r_ [ L_value , group_res . values ] .... : self . res = pd . Series ( pd . Series ( L_value , index = L_order ) . sort_index ( .... : ) . values , index = self . my_df . reset_index ( .... : ) . index , name = my_func . __name__ ) .... : return self . res .... : In [ 87 ]: my_groupby ( df , 'Type' ) Out [ 87 ]: < __main__ . my_groupby at 0x1364172ef70 > \u5355\u5217\u5206\u7ec4 In [ 88 ]: def f ( s ): .... : res = ( s - s . min ()) / ( s . max () - s . min ()) .... : return res .... : In [ 89 ]: my_groupby ( df , 'Type' )[ 'Price' ] . transform ( f ) . head () Out [ 89 ]: 0 0.733592 1 0.372003 2 0.109712 3 0.186244 4 0.177525 Name : f , dtype : float64 In [ 90 ]: df . groupby ( 'Type' )[ 'Price' ] . transform ( f ) . head () Out [ 90 ]: 0 0.733592 1 0.372003 2 0.109712 3 0.186244 4 0.177525 Name : Price , dtype : float64 \u591a\u5217\u5206\u7ec4 In [ 91 ]: my_groupby ( df , [ 'Type' , 'Country' ])[ 'Price' ] . transform ( f ) . head () Out [ 91 ]: 0 1.000000 1 0.000000 2 0.000000 3 0.000000 4 0.196357 Name : f , dtype : float64 In [ 92 ]: df . groupby ([ 'Type' , 'Country' ])[ 'Price' ] . transform ( f ) . head () Out [ 92 ]: 0 1.000000 1 0.000000 2 0.000000 3 0.000000 4 0.196357 Name : Price , dtype : float64 \u6807\u91cf\u5e7f\u64ad In [ 93 ]: my_groupby ( df , 'Type' )[ 'Price' ] . transform ( lambda x : x . mean ()) . head () Out [ 93 ]: 0 7682.384615 1 7682.384615 2 7682.384615 3 7682.384615 4 7682.384615 Name : < lambda > , dtype : float64 In [ 94 ]: df . groupby ( 'Type' )[ 'Price' ] . transform ( lambda x : x . mean ()) . head () Out [ 94 ]: 0 7682.384615 1 7682.384615 2 7682.384615 3 7682.384615 4 7682.384615 Name : Price , dtype : float64 \u8de8\u5217\u8ba1\u7b97 In [ 95 ]: my_groupby ( df , 'Type' )[ 'Disp.' , 'HP' ] . transform ( .... : lambda x : x [ 'Disp.' ] / x . HP ) . head () .... : Out [ 95 ]: 0 0.858407 1 1.266667 2 1.285714 3 0.989130 4 1.097087 Name : < lambda > , dtype : float64","title":"Ex2\uff1a\u5b9e\u73b0 transform \u51fd\u6570"},{"location":"pandas/answer/#_4","text":"","title":"\u7b2c\u4e94\u7ae0 \u53d8\u5f62"},{"location":"pandas/answer/#ex1_4","text":"1 In [ 96 ]: df = pd . read_csv ( 'data/drugs.csv' ) . sort_values ([ .... : 'State' , 'COUNTY' , 'SubstanceName' ], ignore_index = True ) .... : In [ 97 ]: res = df . pivot ( index = [ 'State' , 'COUNTY' , 'SubstanceName' .... : ], columns = 'YYYY' , values = 'DrugReports' .... : ) . reset_index () . rename_axis ( columns = { 'YYYY' : '' }) .... : In [ 98 ]: res . head ( 5 ) Out [ 98 ]: State COUNTY SubstanceName 2010 2011 2012 2013 2014 2015 2016 2017 0 KY ADAIR Buprenorphine NaN 3.0 5.0 4.0 27.0 5.0 7.0 10.0 1 KY ADAIR Codeine NaN NaN 1.0 NaN NaN NaN NaN 1.0 2 KY ADAIR Fentanyl NaN NaN 1.0 NaN NaN NaN NaN NaN 3 KY ADAIR Heroin NaN NaN 1.0 2.0 NaN 1.0 NaN 2.0 4 KY ADAIR Hydrocodone 6.0 9.0 10.0 10.0 9.0 7.0 11.0 3.0 2 In [ 99 ]: res_melted = res . melt ( id_vars = [ 'State' , 'COUNTY' , 'SubstanceName' ], .... : value_vars = res . columns [ - 8 :], .... : var_name = 'YYYY' , .... : value_name = 'DrugReports' ) . dropna ( .... : subset = [ 'DrugReports' ]) .... : In [ 100 ]: res_melted = res_melted [ df . columns ] . sort_values ([ ..... : 'State' , 'COUNTY' , 'SubstanceName' ], ignore_index = True ..... : ) . astype ({ 'YYYY' : 'int64' , 'DrugReports' : 'int64' }) ..... : res_melted . equals ( df ) ..... : Out [ 100 ]: True 3-\u7b56\u75651 In [ 101 ]: res = df . pivot_table ( index = 'YYYY' , columns = 'State' , ..... : values = 'DrugReports' , aggfunc = 'sum' ) ..... : In [ 102 ]: res . head ( 3 ) Out [ 102 ]: State KY OH PA VA WV YYYY 2010 10453 19707 19814 8685 2890 2011 10289 20330 19987 6749 3271 2012 10722 23145 19959 7831 3376 3-\u7b56\u75652 In [ 103 ]: res = df . groupby ([ 'State' , 'YYYY' ])[ 'DrugReports' ] . sum ( ..... : ) . to_frame () . unstack ( 0 ) . droplevel ( 0 , axis = 1 ) ..... : In [ 104 ]: res . head ( 3 ) Out [ 104 ]: State KY OH PA VA WV YYYY 2010 10453 19707 19814 8685 2890 2011 10289 20330 19987 6749 3271 2012 10722 23145 19959 7831 3376","title":"Ex1\uff1a\u7f8e\u56fd\u975e\u6cd5\u836f\u7269\u6570\u636e\u96c6"},{"location":"pandas/answer/#ex2-wide_to_long","text":"In [ 105 ]: df = pd . DataFrame ({ 'Class' :[ 1 , 2 ], ..... : 'Name' :[ 'San Zhang' , 'Si Li' ], ..... : 'Chinese' :[ 80 , 90 ], ..... : 'Math' :[ 80 , 75 ]}) ..... : In [ 106 ]: df Out [ 106 ]: Class Name Chinese Math 0 1 San Zhang 80 80 1 2 Si Li 90 75 In [ 107 ]: df = df . rename ( columns = { 'Chinese' : 'pre_Chinese' , 'Math' : 'pre_Math' }) In [ 108 ]: pd . wide_to_long ( df , ..... : stubnames = [ 'pre' ], ..... : i = [ 'Class' , 'Name' ], ..... : j = 'Subject' , ..... : sep = '_' , ..... : suffix = '.+' ) . reset_index () . rename ( columns = { 'pre' : 'Grade' }) ..... : Out [ 108 ]: Class Name Subject Grade 0 1 San Zhang Chinese 80 1 1 San Zhang Math 80 2 2 Si Li Chinese 90 3 2 Si Li Math 75","title":"Ex2\uff1a\u7279\u6b8a\u7684 wide_to_long \u65b9\u6cd5"},{"location":"pandas/answer/#_5","text":"","title":"\u7b2c\u516d\u7ae0 \u8fde\u63a5"},{"location":"pandas/answer/#ex1_5","text":"In [ 109 ]: date = pd . date_range ( '20200412' , '20201116' ) . to_series () In [ 110 ]: date = date . dt . month . astype ( 'string' ) . str . zfill ( 2 ..... : ) + '-' + date . dt . day . astype ( 'string' ..... : ) . str . zfill ( 2 ) + '-' + '2020' ..... : In [ 111 ]: date = date . tolist () In [ 112 ]: L = [] In [ 113 ]: for d in date : ..... : df = pd . read_csv ( 'data/us_report/' + d + '.csv' , index_col = 'Province_State' ) ..... : data = df . loc [ 'New York' , [ 'Confirmed' , 'Deaths' , ..... : 'Recovered' , 'Active' ]] ..... : L . append ( data . to_frame () . T ) ..... : In [ 114 ]: res = pd . concat ( L ) In [ 115 ]: res . index = date In [ 116 ]: res . head () Out [ 116 ]: Confirmed Deaths Recovered Active 04 - 12 - 2020 189033 9385 23887.0 179648 04 - 13 - 2020 195749 10058 23887.0 185691.0 04 - 14 - 2020 203020 10842 23887.0 192178.0 04 - 15 - 2020 214454 11617 23887.0 202837.0 04 - 16 - 2020 223691 14832 23887.0 208859.0","title":"Ex1\uff1a\u7f8e\u56fd\u75ab\u60c5\u6570\u636e\u96c6"},{"location":"pandas/answer/#ex2-join","text":"In [ 117 ]: def join ( df1 , df2 , how = 'left' ): ..... : res_col = df1 . columns . tolist () + df2 . columns . tolist () ..... : dup = df1 . index . unique () . intersection ( df2 . index . unique ()) ..... : res_df = pd . DataFrame ( columns = res_col ) ..... : for label in dup : ..... : cartesian = [ list ( i ) + list ( j ) for i in df1 . loc [ label ..... : ] . values . reshape ( - 1 , 1 ) for j in df2 . loc [ ..... : label ] . values . reshape ( - 1 , 1 )] ..... : dup_df = pd . DataFrame ( cartesian , index = [ label ] * len ( ..... : cartesian ), columns = res_col ) ..... : res_df = pd . concat ([ res_df , dup_df ]) ..... : if how in [ 'left' , 'outer' ]: ..... : for label in df1 . index . unique () . difference ( dup ): ..... : if isinstance ( df1 . loc [ label ], pd . DataFrame ): ..... : cat = [ list ( i ) + [ np . nan ] * df2 . shape [ 1 ..... : ] for i in df1 . loc [ label ] . values ] ..... : else : cat = [ list ( i ) + [ np . nan ] * df2 . shape [ 1 ..... : ] for i in df1 . loc [ label ] . to_frame () . values ] ..... : dup_df = pd . DataFrame ( cat , index = [ label ..... : ] * len ( cat ), columns = res_col ) ..... : res_df = pd . concat ([ res_df , dup_df ]) ..... : if how in [ 'right' , 'outer' ]: ..... : for label in df2 . index . unique () . difference ( dup ): ..... : if isinstance ( df2 . loc [ label ], pd . DataFrame ): ..... : cat = [[ np . nan ] + list ( i ) * df1 . shape [ 1 ..... : ] for i in df2 . loc [ label ] . values ] ..... : else : cat = [[ np . nan ] + list ( i ) * df1 . shape [ 1 ..... : ] for i in df2 . loc [ label ] . to_frame () . values ] ..... : dup_df = pd . DataFrame ( cat , index = [ label ..... : ] * len ( cat ), columns = res_col ) ..... : res_df = pd . concat ([ res_df , dup_df ]) ..... : return res_df ..... : In [ 118 ]: df1 = pd . DataFrame ({ 'col1' :[ 1 , 2 , 3 , 4 , 5 ]}, index = list ( 'AABCD' )) In [ 119 ]: df1 Out [ 119 ]: col1 A 1 A 2 B 3 C 4 D 5 In [ 120 ]: df2 = pd . DataFrame ({ 'col2' : list ( 'opqrst' )}, index = list ( 'ABBCEE' )) In [ 121 ]: df2 Out [ 121 ]: col2 A o B p B q C r E s E t In [ 122 ]: join ( df1 , df2 , how = 'outer' ) Out [ 122 ]: col1 col2 A 1 o A 2 o B 3 p B 3 q C 4 r D 5 NaN E NaN s E NaN t","title":"Ex2\uff1a\u5b9e\u73b0 join \u51fd\u6570"},{"location":"pandas/answer/#_6","text":"","title":"\u7b2c\u4e03\u7ae0 \u7f3a\u5931\u6570\u636e"},{"location":"pandas/answer/#ex1_6","text":"In [ 123 ]: df = pd . read_csv ( 'data/missing_chi.csv' ) In [ 124 ]: cat_1 = df . X_1 . fillna ( 'NaN' ) . mask ( df . X_1 . notna ()) . fillna ( \"NotNaN\" ) In [ 125 ]: cat_2 = df . X_2 . fillna ( 'NaN' ) . mask ( df . X_2 . notna ()) . fillna ( \"NotNaN\" ) In [ 126 ]: df_1 = pd . crosstab ( cat_1 , df . y , margins = True ) In [ 127 ]: df_2 = pd . crosstab ( cat_2 , df . y , margins = True ) In [ 128 ]: def compute_S ( my_df ): ..... : S = [] ..... : for i in range ( 2 ): ..... : for j in range ( 2 ): ..... : E = my_df . iat [ i , j ] ..... : F = my_df . iat [ i , 2 ] * my_df . iat [ 2 , j ] / my_df . iat [ 2 , 2 ] ..... : S . append (( E - F ) ** 2 / F ) ..... : return sum ( S ) ..... : In [ 129 ]: res1 = compute_S ( df_1 ) In [ 130 ]: res2 = compute_S ( df_2 ) In [ 131 ]: from scipy.stats import chi2 In [ 132 ]: chi2 . sf ( res1 , 1 ) # X_1\u68c0\u9a8c\u7684p\u503c # \u4e0d\u80fd\u8ba4\u4e3a\u76f8\u5173\uff0c\u5254\u9664 Out [ 132 ]: 0.9712760884395901 In [ 133 ]: chi2 . sf ( res2 , 1 ) # X_2\u68c0\u9a8c\u7684p\u503c # \u8ba4\u4e3a\u76f8\u5173\uff0c\u4fdd\u7559 Out [ 133 ]: 7.459641265637543e-166 \u7ed3\u679c\u4e0e scipy.stats.chi2_contingency \u5728\u4e0d\u4f7f\u7528 \u4fee\u6b63\u7684\u60c5\u51b5\u4e0b\u5b8c\u5168\u4e00\u81f4\uff1a In [ 134 ]: from scipy.stats import chi2_contingency In [ 135 ]: chi2_contingency ( pd . crosstab ( cat_1 , df . y ), correction = False )[ 1 ] Out [ 135 ]: 0.9712760884395901 In [ 136 ]: chi2_contingency ( pd . crosstab ( cat_2 , df . y ), correction = False )[ 1 ] Out [ 136 ]: 7.459641265637543e-166","title":"Ex1\uff1a\u7f3a\u5931\u503c\u4e0e\u7c7b\u522b\u7684\u76f8\u5173\u6027\u68c0\u9a8c"},{"location":"pandas/answer/#ex2_3","text":"1 In [ 137 ]: from sklearn.neighbors import KNeighborsRegressor In [ 138 ]: df = pd . read_excel ( 'data/color.xlsx' ) In [ 139 ]: df_dummies = pd . get_dummies ( df . Color ) In [ 140 ]: stack_list = [] In [ 141 ]: for col in df_dummies . columns : ..... : clf = KNeighborsRegressor ( n_neighbors = 6 ) ..... : clf . fit ( df . iloc [:,: 2 ] . values , df_dummies [ col ] . values ) ..... : res = clf . predict ([[ 0.8 , - 0.2 ]]) . reshape ( - 1 , 1 ) ..... : stack_list . append ( res ) ..... : In [ 142 ]: code_res = pd . Series ( np . hstack ( stack_list ) . argmax ( 1 )) In [ 143 ]: df_dummies . columns [ code_res [ 0 ]] Out [ 143 ]: 'Yellow' 2 In [ 144 ]: from sklearn.neighbors import KNeighborsRegressor In [ 145 ]: df = pd . read_csv ( 'data/audit.csv' ) In [ 146 ]: res_df = df . copy () In [ 147 ]: df = pd . concat ([ pd . get_dummies ( df [[ 'Marital' , 'Gender' ]]), ..... : df [[ 'Age' , 'Income' , 'Hours' ]] . apply ( ..... : lambda x :( x - x . min ()) / ( x . max () - x . min ())), df . Employment ], 1 ) ..... : In [ 148 ]: X_train = df . query ( 'Employment.notna()' ) In [ 149 ]: X_test = df . query ( 'Employment.isna()' ) In [ 150 ]: df_dummies = pd . get_dummies ( X_train . Employment ) In [ 151 ]: stack_list = [] In [ 152 ]: for col in df_dummies . columns : ..... : clf = KNeighborsRegressor ( n_neighbors = 6 ) ..... : clf . fit ( X_train . iloc [:,: - 1 ] . values , df_dummies [ col ] . values ) ..... : res = clf . predict ( X_test . iloc [:,: - 1 ] . values ) . reshape ( - 1 , 1 ) ..... : stack_list . append ( res ) ..... : In [ 153 ]: code_res = pd . Series ( np . hstack ( stack_list ) . argmax ( 1 )) In [ 154 ]: cat_res = code_res . replace ( dict ( zip ( list ( ..... : range ( df_dummies . shape [ 0 ])), df_dummies . columns ))) ..... : In [ 155 ]: res_df . loc [ res_df . Employment . isna (), 'Employment' ] = cat_res . values In [ 156 ]: res_df . isna () . sum () Out [ 156 ]: ID 0 Age 0 Employment 0 Marital 0 Income 0 Gender 0 Hours 0 dtype : int64","title":"Ex2\uff1a\u7528\u56de\u5f52\u6a21\u578b\u89e3\u51b3\u5206\u7c7b\u95ee\u9898"},{"location":"pandas/answer/#_7","text":"","title":"\u7b2c\u516b\u7ae0 \u6587\u672c\u6570\u636e"},{"location":"pandas/answer/#ex1_7","text":"1 In [ 157 ]: df = pd . read_excel ( 'data/house_info.xls' , usecols = [ ..... : 'floor' , 'year' , 'area' , 'price' ]) ..... : In [ 158 ]: df . year = pd . to_numeric ( df . year . str [: - 2 ]) . astype ( 'Int64' ) In [ 159 ]: df . head ( 3 ) Out [ 159 ]: floor year area price 0 \u9ad8\u5c42 \uff08 \u51716\u5c42 \uff09 1986 58.23 \u33a1 155 \u4e07 1 \u4e2d\u5c42 \uff08 \u517120\u5c42 \uff09 2020 88 \u33a1 155 \u4e07 2 \u4f4e\u5c42 \uff08 \u517128\u5c42 \uff09 2010 89.33 \u33a1 365 \u4e07 2 In [ 160 ]: pat = '(\\w\u5c42)\uff08\u5171(\\d+)\u5c42\uff09' In [ 161 ]: new_cols = df . floor . str . extract ( pat ) . rename ( ..... : columns = { 0 : 'Level' , 1 : 'Highest' }) ..... : In [ 162 ]: df = pd . concat ([ df . drop ( columns = [ 'floor' ]), new_cols ], 1 ) In [ 163 ]: df . head ( 3 ) Out [ 163 ]: year area price Level Highest 0 1986 58.23 \u33a1 155 \u4e07 \u9ad8\u5c42 6 1 2020 88 \u33a1 155 \u4e07 \u4e2d\u5c42 20 2 2010 89.33 \u33a1 365 \u4e07 \u4f4e\u5c42 28 3 In [ 164 ]: s_area = pd . to_numeric ( df . area . str [: - 1 ]) In [ 165 ]: s_price = pd . to_numeric ( df . price . str [: - 1 ]) In [ 166 ]: df [ 'avg_price' ] = (( s_price / s_area ) * 10000 ) . astype ( ..... : 'int' ) . astype ( 'string' ) + '\u5143/\u5e73\u7c73' ..... : In [ 167 ]: df . head ( 3 ) Out [ 167 ]: year area price Level Highest avg_price 0 1986 58.23 \u33a1 155 \u4e07 \u9ad8\u5c42 6 26618 \u5143 / \u5e73\u7c73 1 2020 88 \u33a1 155 \u4e07 \u4e2d\u5c42 20 17613 \u5143 / \u5e73\u7c73 2 2010 89.33 \u33a1 365 \u4e07 \u4f4e\u5c42 28 40859 \u5143 / \u5e73\u7c73","title":"Ex1\uff1a\u623f\u5c4b\u4fe1\u606f\u6570\u636e\u96c6"},{"location":"pandas/answer/#ex2_4","text":"1 In [ 168 ]: df = pd . read_csv ( 'data/script.csv' ) In [ 169 ]: df . columns = df . columns . str . strip () In [ 170 ]: df . groupby ([ 'Season' , 'Episode' ])[ 'Sentence' ] . count () . head () Out [ 170 ]: Season Episode Season 1 Episode 1 327 Episode 10 266 Episode 2 283 Episode 3 353 Episode 4 404 Name : Sentence , dtype : int64 2 In [ 171 ]: df . set_index ( 'Name' ) . Sentence . str . split () . str . len ( ..... : ) . groupby ( 'Name' ) . mean () . sort_values ( ascending = False ) . head () ..... : Out [ 171 ]: Name male singer 109.000000 slave owner 77.000000 manderly 62.000000 lollys stokeworth 62.000000 dothraki matron 56.666667 Name : Sentence , dtype : float64 3 In [ 172 ]: s = pd . Series ( df . Sentence . values , index = df . Name . shift ( - 1 )) In [ 173 ]: s . str . count ( '\\?' ) . groupby ( 'Name' ) . sum () . sort_values ( ascending = False ) . head () Out [ 173 ]: Name tyrion lannister 527 jon snow 374 jaime lannister 283 arya stark 265 cersei lannister 246 dtype : int64","title":"Ex2\uff1a\u300a\u6743\u529b\u7684\u6e38\u620f\u300b\u5267\u672c\u6570\u636e\u96c6"},{"location":"pandas/answer/#_8","text":"","title":"\u7b2c\u4e5d\u7ae0 \u5206\u7c7b\u6570\u636e"},{"location":"pandas/answer/#ex1_8","text":"In [ 174 ]: def my_crosstab ( s1 , s2 , dropna = True ): ..... : idx1 = ( s1 . cat . categories if s1 . dtype . name == 'category' and ..... : not dropna else s1 . unique ()) ..... : idx2 = ( s2 . cat . categories if s2 . dtype . name == 'category' and ..... : not dropna else s2 . unique ()) ..... : res = pd . DataFrame ( np . zeros (( idx1 . shape [ 0 ], idx2 . shape [ 0 ])), ..... : index = idx1 , columns = idx2 ) ..... : for i , j in zip ( s1 , s2 ): ..... : res . at [ i , j ] += 1 ..... : res = res . rename_axis ( index = s1 . name , columns = s2 . name ) . astype ( 'int' ) ..... : return res ..... : In [ 175 ]: df = pd . DataFrame ({ 'A' :[ 'a' , 'b' , 'c' , 'a' ], ..... : 'B' :[ 'cat' , 'cat' , 'dog' , 'cat' ]}) ..... : In [ 176 ]: df . B = df . B . astype ( 'category' ) . cat . add_categories ( 'sheep' ) In [ 177 ]: my_crosstab ( df . A , df . B ) Out [ 177 ]: B cat dog A a 2 0 b 1 0 c 0 1 In [ 178 ]: my_crosstab ( df . A , df . B , dropna = False ) Out [ 178 ]: B cat dog sheep A a 2 0 0 b 1 0 0 c 0 1 0","title":"Ex1\uff1a\u7edf\u8ba1\u672a\u51fa\u73b0\u7684\u7c7b\u522b"},{"location":"pandas/answer/#ex2_5","text":"1 In [ 179 ]: df = pd . read_csv ( 'data/diamonds.csv' ) In [ 180 ]: s_obj , s_cat = df . cut , df . cut . astype ( 'category' ) In [ 181 ]: % timeit - n 30 s_obj . nunique () 4.21 ms +- 146 us per loop ( mean +- std . dev . of 7 runs , 30 loops each ) In [ 182 ]: % timeit - n 30 s_cat . nunique () 960 us +- 45.2 us per loop ( mean +- std . dev . of 7 runs , 30 loops each ) 2 In [ 183 ]: df . cut = df . cut . astype ( 'category' ) . cat . reorder_categories ([ ..... : 'Fair' , 'Good' , 'Very Good' , 'Premium' , 'Ideal' ], ordered = True ) ..... : In [ 184 ]: df . clarity = df . clarity . astype ( 'category' ) . cat . reorder_categories ([ ..... : 'I1' , 'SI2' , 'SI1' , 'VS2' , 'VS1' , 'VVS2' , 'VVS1' , 'IF' ], ordered = True ) ..... : In [ 185 ]: res = df . sort_values ([ 'cut' , 'clarity' ], ascending = [ False , True ]) In [ 186 ]: res . head ( 3 ) Out [ 186 ]: carat cut clarity price 315 0.96 Ideal I1 2801 535 0.96 Ideal I1 2826 551 0.97 Ideal I1 2830 In [ 187 ]: res . tail ( 3 ) Out [ 187 ]: carat cut clarity price 47407 0.52 Fair IF 1849 49683 0.52 Fair IF 2144 50126 0.47 Fair IF 2211 3 In [ 188 ]: df . cut = df . cut . cat . reorder_categories ( ..... : df . cut . cat . categories [:: - 1 ]) ..... : In [ 189 ]: df . clarity = df . clarity . cat . reorder_categories ( ..... : df . clarity . cat . categories [:: - 1 ]) ..... : In [ 190 ]: df . cut = df . cut . cat . codes # \u65b9\u6cd5\u4e00\uff1a\u5229\u7528cat.codes In [ 191 ]: clarity_cat = df . clarity . cat . categories In [ 192 ]: df . clarity = df . clarity . replace ( dict ( zip ( ..... : clarity_cat , np . arange ( ..... : len ( clarity_cat ))))) # \u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528replace\u6620\u5c04 ..... : In [ 193 ]: df . head ( 3 ) Out [ 193 ]: carat cut clarity price 0 0.23 0 6 326 1 0.21 1 5 326 2 0.23 3 3 327 4 In [ 194 ]: q = [ 0 , 0.2 , 0.4 , 0.6 , 0.8 , 1 ] In [ 195 ]: point = [ - np . infty , 1000 , 3500 , 5500 , 18000 , np . infty ] In [ 196 ]: avg = df . price / df . carat In [ 197 ]: df [ 'avg_cut' ] = pd . cut ( avg , bins = point , labels = [ ..... : 'Very Low' , 'Low' , 'Mid' , 'High' , 'Very High' ]) ..... : In [ 198 ]: df [ 'avg_qcut' ] = pd . qcut ( avg , q = q , labels = [ ..... : 'Very Low' , 'Low' , 'Mid' , 'High' , 'Very High' ]) ..... : In [ 199 ]: df . head () Out [ 199 ]: carat cut clarity price avg_cut avg_qcut 0 0.23 0 6 326 Low Very Low 1 0.21 1 5 326 Low Very Low 2 0.23 3 3 327 Low Very Low 3 0.29 1 4 334 Low Very Low 4 0.31 3 6 335 Low Very Low 5 In [ 200 ]: df . avg_cut . unique () Out [ 200 ]: [ 'Low' , 'Mid' , 'High' ] Categories ( 3 , object ): [ 'Low' < 'Mid' < 'High' ] In [ 201 ]: df . avg_cut . cat . categories Out [ 201 ]: Index ([ 'Very Low' , 'Low' , 'Mid' , 'High' , 'Very High' ], dtype = 'object' ) In [ 202 ]: df . avg_cut = df . avg_cut . cat . remove_categories ([ ..... : 'Very Low' , 'Very High' ]) ..... : In [ 203 ]: df . avg_cut . head ( 3 ) Out [ 203 ]: 0 Low 1 Low 2 Low Name : avg_cut , dtype : category Categories ( 3 , object ): [ 'Low' < 'Mid' < 'High' ] 6 In [ 204 ]: interval_avg = pd . IntervalIndex ( pd . qcut ( avg , q = q )) In [ 205 ]: interval_avg . right . to_series () . reset_index ( drop = True ) . head ( 3 ) Out [ 205 ]: 0 2295.0 1 2295.0 2 2295.0 dtype : float64 In [ 206 ]: interval_avg . left . to_series () . reset_index ( drop = True ) . head ( 3 ) Out [ 206 ]: 0 1051.162 1 1051.162 2 1051.162 dtype : float64 In [ 207 ]: interval_avg . length . to_series () . reset_index ( drop = True ) . head ( 3 ) Out [ 207 ]: 0 1243.838 1 1243.838 2 1243.838 dtype : float64","title":"Ex2\uff1a\u94bb\u77f3\u6570\u636e\u96c6"},{"location":"pandas/answer/#_9","text":"","title":"\u7b2c\u5341\u7ae0 \u65f6\u5e8f\u6570\u636e"},{"location":"pandas/answer/#ex1_9","text":"1 In [ 208 ]: df = pd . read_csv ( 'data/solar.csv' , usecols = [ 'Data' , 'Time' , ..... : 'Radiation' , 'Temperature' ]) ..... : In [ 209 ]: solar_date = df . Data . str . extract ( '([/|\\w]+\\s).+' )[ 0 ] In [ 210 ]: df [ 'Data' ] = pd . to_datetime ( solar_date + df . Time ) In [ 211 ]: df = df . drop ( columns = 'Time' ) . rename ( columns = { 'Data' : 'Datetime' } ..... : ) . set_index ( 'Datetime' ) . sort_index () ..... : In [ 212 ]: df . head ( 3 ) Out [ 212 ]: Radiation Temperature Datetime 2016 - 09 - 01 00 : 00 : 08 2.58 51 2016 - 09 - 01 00 : 05 : 10 2.83 51 2016 - 09 - 01 00 : 20 : 06 2.16 51 2-a In [ 213 ]: s = df . index . to_series () . reset_index ( drop = True ) . diff () . dt . total_seconds () In [ 214 ]: max_3 = s . nlargest ( 3 ) . index In [ 215 ]: df . index [ max_3 . union ( max_3 - 1 )] Out [ 215 ]: DatetimeIndex ([ '2016-09-29 23:55:26' , '2016-10-01 00:00:19' , '2016-11-29 19:05:02' , '2016-12-01 00:00:02' , '2016-12-05 20:45:53' , '2016-12-08 11:10:42' ], dtype = 'datetime64[ns]' , name = 'Datetime' , freq = None ) 2-b In [ 216 ]: res = s . mask (( s > s . quantile ( 0.99 )) | ( s < s . quantile ( 0.01 ))) In [ 217 ]: _ = plt . hist ( res , bins = 50 ) 3-a In [ 218 ]: res = df . Radiation . rolling ( '6H' ) . corr ( df . Temperature ) In [ 219 ]: res . tail ( 3 ) Out [ 219 ]: Datetime 2016 - 12 - 31 23 : 45 : 04 0.328574 2016 - 12 - 31 23 : 50 : 03 0.261883 2016 - 12 - 31 23 : 55 : 01 0.262406 dtype : float64 3-b In [ 220 ]: res = df . Temperature . resample ( '6H' , origin = '03:00:00' ) . mean () In [ 221 ]: res . head ( 3 ) Out [ 221 ]: Datetime 2016 - 08 - 31 21 : 00 : 00 51.218750 2016 - 09 - 01 03 : 00 : 00 50.033333 2016 - 09 - 01 09 : 00 : 00 59.379310 Freq : 6 H , Name : Temperature , dtype : float64 3-c # \u975e\u5e38\u6162 my_dt = df . index . shift ( freq = '-6H' ) int_loc = [ df . index . get_indexer ([ i ], method = 'nearest' ) for i in my_dt ] int_loc = np . array ( int_loc ) . reshape ( - 1 ) res = df . Radiation . iloc [ int_loc ] res . index = df . index res . tail ( 3 ) # \u7eb8\u8d28\u7248\u4e0a\u4ecb\u7ecd\u4e86merge_asof\uff0c\u6027\u80fd\u5dee\u8ddd\u53ef\u4ee5\u8fbe\u52303-4\u4e2a\u6570\u91cf\u7ea7 In [ 222 ]: target = pd . DataFrame ( ..... : { ..... : \"Time\" : df . index . shift ( freq = '-6H' ), ..... : \"Datetime\" : df . index , ..... : } ..... : ) ..... : In [ 223 ]: res = pd . merge_asof ( ..... : target , ..... : df . reset_index () . rename ( columns = { \"Datetime\" : \"Time\" }), ..... : left_on = \"Time\" , ..... : right_on = \"Time\" , ..... : direction = \"nearest\" ..... : ) . set_index ( \"Datetime\" ) . Radiation ..... : In [ 224 ]: res . tail ( 3 ) Out [ 224 ]: Datetime 2016 - 12 - 31 23 : 45 : 04 9.33 2016 - 12 - 31 23 : 50 : 03 8.49 2016 - 12 - 31 23 : 55 : 01 5.84 Name : Radiation , dtype : float64","title":"Ex1\uff1a\u592a\u9633\u8f90\u5c04\u6570\u636e\u96c6"},{"location":"pandas/answer/#ex2_6","text":"1-a In [ 225 ]: df = pd . read_csv ( 'data/fruit.csv' ) In [ 226 ]: df . Date = pd . to_datetime ( df . Date ) In [ 227 ]: df_grape = df . query ( \"Fruit == 'Grape'\" ) In [ 228 ]: res = df_grape . groupby ([ np . where ( df_grape . Date . dt . day <= 15 , ..... : 'First' , 'Second' ), df_grape . Date . dt . month ] ..... : )[ 'Sale' ] . mean () . to_frame () . unstack ( 0 ..... : ) . droplevel ( 0 , axis = 1 ) ..... : In [ 229 ]: res = ( res . First / res . Second ) . rename_axis ( 'Month' ) In [ 230 ]: res . head () Out [ 230 ]: Month 1 1.174998 2 0.968890 3 0.951351 4 1.020797 5 0.931061 dtype : float64 1-b In [ 231 ]: df [ df . Date . dt . is_month_end ] . query ( \"Fruit == 'Pear'\" ..... : ) . groupby ( 'Date' ) . Sale . sum () . head () ..... : Out [ 231 ]: Date 2019 - 01 - 31 847 2019 - 02 - 28 774 2019 - 03 - 31 761 2019 - 04 - 30 648 2019 - 05 - 31 616 Name : Sale , dtype : int64 1-c In [ 232 ]: df [ df . Date . isin ( pd . date_range ( '20190101' , '20191231' , ..... : freq = 'BM' ))] . query ( \"Fruit == 'Pear'\" ..... : ) . groupby ( 'Date' ) . Sale . sum () . head () ..... : Out [ 232 ]: Date 2019 - 01 - 31 847 2019 - 02 - 28 774 2019 - 03 - 29 510 2019 - 04 - 30 648 2019 - 05 - 31 616 Name : Sale , dtype : int64 1-d In [ 233 ]: target_dt = df . drop_duplicates () . groupby ( df . Date . drop_duplicates ( ..... : ) . dt . month )[ 'Date' ] . nlargest ( 5 ) . reset_index ( drop = True ) ..... : In [ 234 ]: res = df . set_index ( 'Date' ) . loc [ target_dt ] . reset_index ( ..... : ) . query ( \"Fruit == 'Apple'\" ) ..... : In [ 235 ]: res = res . groupby ( res . Date . dt . month )[ 'Sale' ] . mean ( ..... : ) . rename_axis ( 'Month' ) ..... : In [ 236 ]: res . head () Out [ 236 ]: Month 1 65.313725 2 54.061538 3 59.325581 4 65.795455 5 57.465116 Name : Sale , dtype : float64 2 In [ 237 ]: month_order = [ 'January' , 'February' , 'March' , 'April' , ..... : 'May' , 'June' , 'July' , 'August' , 'September' , ..... : 'October' , 'November' , 'December' ] ..... : In [ 238 ]: week_order = [ 'Mon' , 'Tue' , 'Wed' , 'Thu' , 'Fri' , 'Sat' , 'Sum' ] In [ 239 ]: group1 = df . Date . dt . month_name () . astype ( 'category' ) . cat . reorder_categories ( ..... : month_order , ordered = True ) ..... : In [ 240 ]: group2 = df . Fruit In [ 241 ]: group3 = df . Date . dt . dayofweek . replace ( dict ( zip ( range ( 7 ), week_order )) ..... : ) . astype ( 'category' ) . cat . reorder_categories ( ..... : week_order , ordered = True ) ..... : In [ 242 ]: res = df . groupby ([ group1 , group2 , group3 ])[ 'Sale' ] . count () . to_frame ( ..... : ) . unstack ( 0 ) . droplevel ( 0 , axis = 1 ) ..... : In [ 243 ]: res . head () Out [ 243 ]: Date January February March April May June July August September October November December Fruit Date Apple Mon 46 43 43 47 43 40 41 38 59 42 39 45 Tue 50 40 44 52 46 39 50 42 40 57 47 47 Wed 50 47 37 43 39 39 58 43 35 46 47 38 Thu 45 35 31 47 58 33 52 44 36 63 37 40 Fri 32 33 52 31 46 38 37 48 34 37 46 41 3 In [ 244 ]: df_apple = df [( df . Fruit == 'Apple' ) & ( ..... : ~ df . Date . dt . dayofweek . isin ([ 5 , 6 ]))] ..... : In [ 245 ]: s = pd . Series ( df_apple . Sale . values , ..... : index = df_apple . Date ) . groupby ( 'Date' ) . sum () ..... : In [ 246 ]: res = s . rolling ( '10D' ) . mean () . reindex ( ..... : pd . date_range ( '20190101' , '20191231' )) . fillna ( method = 'ffill' ) ..... : In [ 247 ]: res . head () Out [ 247 ]: 2019 - 01 - 01 189.000000 2019 - 01 - 02 335.500000 2019 - 01 - 03 520.333333 2019 - 01 - 04 527.750000 2019 - 01 - 05 527.750000 Freq : D , dtype : float64","title":"Ex2\uff1a\u6c34\u679c\u9500\u91cf\u6570\u636e\u96c6"},{"location":"pandas/part1/","text":"\u4e00\u3001Python \u57fa\u7840 1. \u5217\u8868\u63a8\u5bfc\u5f0f\u4e0e\u6761\u4ef6\u8d4b\u503c \u5728\u751f\u6210\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217\u7684\u65f6\u5019\uff0c\u5728 Python \u4e2d\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 1 ]: L = [] In [ 2 ]: def my_func ( x ): ... : return 2 * x ... : In [ 3 ]: for i in range ( 5 ): ... : L . append ( my_func ( i )) ... : In [ 4 ]: L Out [ 4 ]: [ 0 , 2 , 4 , 6 , 8 ] \u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u5229\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u8fdb\u884c\u5199\u6cd5\u4e0a\u7684\u7b80\u5316\uff1a [* for i in *] \u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a * \u4e3a\u6620\u5c04\u51fd\u6570\uff0c\u5176\u8f93\u5165\u4e3a\u540e\u9762 i \u6307\u4ee3\u7684\u5185\u5bb9\uff0c\u7b2c\u4e8c\u4e2a * \u8868\u793a\u8fed\u4ee3\u7684\u5bf9\u8c61\u3002 In [ 5 ]: [ my_func ( i ) for i in range ( 5 )] Out [ 5 ]: [ 0 , 2 , 4 , 6 , 8 ] \u5217\u8868\u8868\u8fbe\u5f0f\u8fd8\u652f\u6301\u591a\u5c42\u5d4c\u5957\uff0c\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u7b2c\u4e00\u4e2a for \u4e3a\u5916\u5c42\u5faa\u73af\uff0c\u7b2c\u4e8c\u4e2a\u4e3a\u5185\u5c42\u5faa\u73af\uff1a In [ 6 ]: [ m + '_' + n for m in [ 'a' , 'b' ] for n in [ 'c' , 'd' ]] Out [ 6 ]: [ 'a_c' , 'a_d' , 'b_c' , 'b_d' ] \u9664\u4e86\u5217\u8868\u63a8\u5bfc\u5f0f\uff0c\u53e6\u4e00\u4e2a\u5b9e\u7528\u7684\u8bed\u6cd5\u7cd6\u662f\u5e26\u6709 if \u9009\u62e9\u7684\u6761\u4ef6\u8d4b\u503c\uff0c\u5176\u5f62\u5f0f\u4e3a value = a if condition else b \uff1a In [ 7 ]: value = 'cat' if 2 > 1 else 'dog' In [ 8 ]: value Out [ 8 ]: 'cat' \u7b49\u4ef7\u4e8e\u5982\u4e0b\u7684\u5199\u6cd5\uff1a a , b = 'cat' , 'dog' condition = 2 > 1 # \u6b64\u65f6\u4e3aTrue if condition : value = a else : value = b \u4e0b\u9762\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u622a\u65ad\u5217\u8868\u4e2d\u8d85\u8fc7 5 \u7684\u5143\u7d20\uff0c\u5373\u8d85\u8fc7 5 \u7684\u7528 5 \u4ee3\u66ff\uff0c\u5c0f\u4e8e 5 \u7684\u4fdd\u7559\u539f\u6765\u7684\u503c\uff1a In [ 9 ]: L = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] In [ 10 ]: [ i if i <= 5 else 5 for i in L ] Out [ 10 ]: [ 1 , 2 , 3 , 4 , 5 , 5 , 5 ] 2. \u533f\u540d\u51fd\u6570\u4e0e map \u65b9\u6cd5 \u6709\u4e00\u4e9b\u51fd\u6570\u7684\u5b9a\u4e49\u5177\u6709\u6e05\u6670\u7b80\u5355\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u4f8b\u5982\u4e0a\u9762\u7684 my_func \u51fd\u6570\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u7528\u533f\u540d\u51fd\u6570\u7684\u65b9\u6cd5\u7b80\u6d01\u5730\u8868\u793a\uff1a In [ 11 ]: my_func = lambda x : 2 * x In [ 12 ]: my_func ( 3 ) Out [ 12 ]: 6 In [ 13 ]: multi_para_func = lambda a , b : a + b In [ 14 ]: multi_para_func ( 1 , 2 ) Out [ 14 ]: 3 \u4f46\u4e0a\u9762\u7684\u7528\u6cd5\u5176\u5b9e\u8fdd\u80cc\u4e86 \u201c\u533f\u540d\u201d \u7684\u542b\u4e49\uff0c\u4e8b\u5b9e\u4e0a\u5b83\u5f80\u5f80\u5728\u65e0\u9700\u591a\u5904\u8c03\u7528\u7684\u573a\u5408\u8fdb\u884c\u4f7f\u7528\uff0c\u4f8b\u5982\u4e0a\u9762\u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u7684\u4f8b\u5b50\uff0c\u7528\u6237\u4e0d\u5173\u5fc3\u51fd\u6570\u7684\u540d\u5b57\uff0c\u53ea\u5173\u5fc3\u8fd9\u79cd\u6620\u5c04\u7684\u5173\u7cfb\uff1a In [ 15 ]: [( lambda x : 2 * x )( i ) for i in range ( 5 )] Out [ 15 ]: [ 0 , 2 , 4 , 6 , 8 ] \u5bf9\u4e8e\u4e0a\u8ff0\u7684\u8fd9\u79cd\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u533f\u540d\u51fd\u6570\u6620\u5c04\uff0c Python \u4e2d\u63d0\u4f9b\u4e86 map \u51fd\u6570\u6765\u5b8c\u6210\uff0c\u5b83\u8fd4\u56de\u7684\u662f\u4e00\u4e2a map \u5bf9\u8c61\uff0c\u9700\u8981\u901a\u8fc7 list \u8f6c\u4e3a\u5217\u8868\uff1a In [ 16 ]: list ( map ( lambda x : 2 * x , range ( 5 ))) Out [ 16 ]: [ 0 , 2 , 4 , 6 , 8 ] \u5bf9\u4e8e\u591a\u4e2a\u8f93\u5165\u503c\u7684\u51fd\u6570\u6620\u5c04\uff0c\u53ef\u4ee5\u901a\u8fc7\u8ffd\u52a0\u8fed\u4ee3\u5bf9\u8c61\u5b9e\u73b0\uff1a In [ 17 ]: list ( map ( lambda x , y : str ( x ) + '_' + y , range ( 5 ), list ( 'abcde' ))) Out [ 17 ]: [ '0_a' , '1_b' , '2_c' , '3_d' , '4_e' ] 3. zip \u5bf9\u8c61\u4e0e enumerate \u65b9\u6cd5 zip \u51fd\u6570\u80fd\u591f\u628a\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u6253\u5305\u6210\u4e00\u4e2a\u5143\u7ec4\u6784\u6210\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5b83\u8fd4\u56de\u4e86\u4e00\u4e2a zip \u5bf9\u8c61\uff0c\u901a\u8fc7 tuple, list \u53ef\u4ee5\u5f97\u5230\u76f8\u5e94\u7684\u6253\u5305\u7ed3\u679c\uff1a In [ 18 ]: L1 , L2 , L3 = list ( 'abc' ), list ( 'def' ), list ( 'hij' ) In [ 19 ]: list ( zip ( L1 , L2 , L3 )) Out [ 19 ]: [( 'a' , 'd' , 'h' ), ( 'b' , 'e' , 'i' ), ( 'c' , 'f' , 'j' )] In [ 20 ]: tuple ( zip ( L1 , L2 , L3 )) Out [ 20 ]: (( 'a' , 'd' , 'h' ), ( 'b' , 'e' , 'i' ), ( 'c' , 'f' , 'j' )) \u5f80\u5f80\u4f1a\u5728\u5faa\u73af\u8fed\u4ee3\u7684\u65f6\u5019\u4f7f\u7528\u5230 zip \u51fd\u6570\uff1a In [ 21 ]: for i , j , k in zip ( L1 , L2 , L3 ): .... : print ( i , j , k ) .... : a d h b e i c f j enumerate \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6253\u5305\uff0c\u5b83\u53ef\u4ee5\u5728\u8fed\u4ee3\u65f6\u7ed1\u5b9a\u8fed\u4ee3\u5143\u7d20\u7684\u904d\u5386\u5e8f\u53f7\uff1a In [ 22 ]: L = list ( 'abcd' ) In [ 23 ]: for index , value in enumerate ( L ): .... : print ( index , value ) .... : 0 a 1 b 2 c 3 d \u7528 zip \u5bf9\u8c61\u4e5f\u80fd\u591f\u7b80\u5355\u5730\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff1a In [ 24 ]: for index , value in zip ( range ( len ( L )), L ): .... : print ( index , value ) .... : 0 a 1 b 2 c 3 d \u5f53\u9700\u8981\u5bf9\u4e24\u4e2a\u5217\u8868\u5efa\u7acb\u5b57\u5178\u6620\u5c04\u65f6\uff0c\u53ef\u4ee5\u5229\u7528 zip \u5bf9\u8c61\uff1a In [ 25 ]: dict ( zip ( L1 , L2 )) Out [ 25 ]: { 'a' : 'd' , 'b' : 'e' , 'c' : 'f' } \u65e2\u7136\u6709\u4e86\u538b\u7f29\u51fd\u6570\uff0c\u90a3\u4e48 Python \u4e5f\u63d0\u4f9b\u4e86 * \u64cd\u4f5c\u7b26\u548c zip \u8054\u5408\u4f7f\u7528\u6765\u8fdb\u884c\u89e3\u538b\u64cd\u4f5c\uff1a In [ 26 ]: zipped = list ( zip ( L1 , L2 , L3 )) In [ 27 ]: zipped Out [ 27 ]: [( 'a' , 'd' , 'h' ), ( 'b' , 'e' , 'i' ), ( 'c' , 'f' , 'j' )] In [ 28 ]: list ( zip ( * zipped )) # \u4e09\u4e2a\u5143\u7ec4\u5206\u522b\u5bf9\u5e94\u539f\u6765\u7684\u5217\u8868 Out [ 28 ]: [( 'a' , 'b' , 'c' ), ( 'd' , 'e' , 'f' ), ( 'h' , 'i' , 'j' )] \u4e8c\u3001Numpy \u57fa\u7840 1. np \u6570\u7ec4\u7684\u6784\u9020 \u6700\u4e00\u822c\u7684\u65b9\u6cd5\u662f\u901a\u8fc7 array \u6765\u6784\u9020\uff1a In [ 29 ]: import numpy as np In [ 30 ]: np . array ([ 1 , 2 , 3 ]) Out [ 30 ]: array ([ 1 , 2 , 3 ]) \u4e0b\u9762\u8ba8\u8bba\u4e00\u4e9b\u7279\u6b8a\u6570\u7ec4\u7684\u751f\u6210\u65b9\u5f0f\uff1a \u3010a\u3011\u7b49\u5dee\u5e8f\u5217\uff1a np.linspace, np.arange In [ 31 ]: np . linspace ( 1 , 5 , 11 ) # \u8d77\u59cb\u3001\u7ec8\u6b62\uff08\u5305\u542b\uff09\u3001\u6837\u672c\u4e2a\u6570 Out [ 31 ]: array ([ 1. , 1.4 , 1.8 , 2.2 , 2.6 , 3. , 3.4 , 3.8 , 4.2 , 4.6 , 5. ]) In [ 32 ]: np . arange ( 1 , 5 , 2 ) # \u8d77\u59cb\u3001\u7ec8\u6b62\uff08\u4e0d\u5305\u542b\uff09\u3001\u6b65\u957f Out [ 32 ]: array ([ 1 , 3 ]) \u3010b\u3011\u7279\u6b8a\u77e9\u9635\uff1a zeros, eye, full In [ 33 ]: np . zeros (( 2 , 3 )) # \u4f20\u5165\u5143\u7ec4\u8868\u793a\u5404\u7ef4\u5ea6\u5927\u5c0f Out [ 33 ]: array ([[ 0. , 0. , 0. ], [ 0. , 0. , 0. ]]) In [ 34 ]: np . eye ( 3 ) # 3*3\u7684\u5355\u4f4d\u77e9\u9635 Out [ 34 ]: array ([[ 1. , 0. , 0. ], [ 0. , 1. , 0. ], [ 0. , 0. , 1. ]]) In [ 35 ]: np . eye ( 3 , k = 1 ) # \u504f\u79fb\u4e3b\u5bf9\u89d2\u7ebf1\u4e2a\u5355\u4f4d\u7684\u4f2a\u5355\u4f4d\u77e9\u9635 Out [ 35 ]: array ([[ 0. , 1. , 0. ], [ 0. , 0. , 1. ], [ 0. , 0. , 0. ]]) In [ 36 ]: np . full (( 2 , 3 ), 10 ) # \u5143\u7ec4\u4f20\u5165\u5927\u5c0f\uff0c10\u8868\u793a\u586b\u5145\u6570\u503c Out [ 36 ]: array ([[ 10 , 10 , 10 ], [ 10 , 10 , 10 ]]) In [ 37 ]: np . full (( 2 , 3 ), [ 1 , 2 , 3 ]) # \u6bcf\u884c\u586b\u5165\u76f8\u540c\u7684\u5217\u8868 Out [ 37 ]: array ([[ 1 , 2 , 3 ], [ 1 , 2 , 3 ]]) \u3010c\u3011\u968f\u673a\u77e9\u9635\uff1a np.random \u6700\u5e38\u7528\u7684\u968f\u673a\u751f\u6210\u51fd\u6570\u4e3a rand, randn, randint, choice \uff0c\u5b83\u4eec\u5206\u522b\u8868\u793a 0-1 \u5747\u5300\u5206\u5e03\u7684\u968f\u673a\u6570\u7ec4\u3001\u6807\u51c6\u6b63\u6001\u7684\u968f\u673a\u6570\u7ec4\u3001\u968f\u673a\u6574\u6570\u7ec4\u548c\u968f\u673a\u5217\u8868\u62bd\u6837\uff1a In [ 38 ]: np . random . rand ( 3 ) # \u751f\u6210\u670d\u4ece0-1\u5747\u5300\u5206\u5e03\u7684\u4e09\u4e2a\u968f\u673a\u6570 Out [ 38 ]: array ([ 0.19908884 , 0.55135019 , 0.76566437 ]) In [ 39 ]: np . random . rand ( 3 , 3 ) # \u6ce8\u610f\u8fd9\u91cc\u4f20\u5165\u7684\u4e0d\u662f\u5143\u7ec4\uff0c\u6bcf\u4e2a\u7ef4\u5ea6\u5927\u5c0f\u5206\u5f00\u8f93\u5165 Out [ 39 ]: array ([[ 0.61246219 , 0.03864624 , 0.15647923 ], [ 0.29716293 , 0.48112703 , 0.18439327 ], [ 0.15341614 , 0.77366422 , 0.08495561 ]]) \u5bf9\u4e8e\u670d\u4ece\u533a\u95f4 \u5230 \u4e0a\u7684\u5747\u5300\u5206\u5e03\u53ef\u4ee5\u5982\u4e0b\u751f\u6210\uff1a In [ 40 ]: a , b = 5 , 15 In [ 41 ]: ( b - a ) * np . random . rand ( 3 ) + a Out [ 41 ]: array ([ 12.38736853 , 7.44562529 , 14.27012191 ]) \u4e00\u822c\u7684\uff0c\u53ef\u4ee5\u9009\u62e9\u5df2\u6709\u7684\u5e93\u51fd\u6570\uff1a In [ 42 ]: np . random . uniform ( 5 , 15 , 3 ) Out [ 42 ]: array ([ 5.33114814 , 6.5177482 , 10.41477191 ]) randn \u751f\u6210\u4e86 \u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff1a In [ 43 ]: np . random . randn ( 3 ) Out [ 43 ]: array ([ 1.11861262 , - 0.70754481 , 0.55462402 ]) In [ 44 ]: np . random . randn ( 2 , 2 ) Out [ 44 ]: array ([[ 0.54719631 , 0.94092513 ], [ - 1.88079513 , 0.26288158 ]]) \u5bf9\u4e8e\u670d\u4ece\u65b9\u5dee\u4e3a \u5747\u503c\u4e3a \u7684\u4e00\u5143\u6b63\u6001\u5206\u5e03\u53ef\u4ee5\u5982\u4e0b\u751f\u6210\uff1a In [ 45 ]: sigma , mu = 2.5 , 3 In [ 46 ]: mu + np . random . randn ( 3 ) * sigma Out [ 46 ]: array ([ 4.85332375 , 2.71921844 , 1.03059989 ]) \u540c\u6837\u7684\uff0c\u4e5f\u53ef\u9009\u62e9\u4ece\u5df2\u6709\u51fd\u6570\u751f\u6210\uff1a In [ 47 ]: np . random . normal ( 3 , 2.5 , 3 ) Out [ 47 ]: array ([ 0.99627249 , 2.55455614 , 3.16157716 ]) randint \u53ef\u4ee5\u6307\u5b9a\u751f\u6210\u968f\u673a\u6574\u6570\u7684\u6700\u5c0f\u503c\u6700\u5927\u503c\uff08\u4e0d\u5305\u542b\uff09\u548c\u7ef4\u5ea6\u5927\u5c0f\uff1a In [ 48 ]: low , high , size = 5 , 15 , ( 2 , 2 ) # \u751f\u62105\u523014\u7684\u968f\u673a\u6574\u6570 In [ 49 ]: np . random . randint ( low , high , size ) Out [ 49 ]: array ([[ 6 , 11 ], [ 8 , 14 ]]) choice \u53ef\u4ee5\u4ece\u7ed9\u5b9a\u7684\u5217\u8868\u4e2d\uff0c\u4ee5\u4e00\u5b9a\u6982\u7387\u548c\u65b9\u5f0f\u62bd\u53d6\u7ed3\u679c\uff0c\u5f53\u4e0d\u6307\u5b9a\u6982\u7387\u65f6\u4e3a\u5747\u5300\u91c7\u6837\uff0c\u9ed8\u8ba4\u62bd\u53d6\u65b9\u5f0f\u4e3a\u6709\u653e\u56de\u62bd\u6837\uff1a In [ 50 ]: my_list = [ 'a' , 'b' , 'c' , 'd' ] In [ 51 ]: np . random . choice ( my_list , 2 , replace = False , p = [ 0.1 , 0.7 , 0.1 , 0.1 ]) Out [ 51 ]: array ([ 'b' , 'd' ], dtype = '<U1' ) In [ 52 ]: np . random . choice ( my_list , ( 3 , 3 )) Out [ 52 ]: array ([[ 'b' , 'a' , 'b' ], [ 'b' , 'c' , 'c' ], [ 'd' , 'a' , 'b' ]], dtype = '<U1' ) \u5f53\u8fd4\u56de\u7684\u5143\u7d20\u4e2a\u6570\u4e0e\u539f\u5217\u8868\u76f8\u540c\u65f6\uff0c\u4e0d\u653e\u56de\u62bd\u6837\u7b49\u4ef7\u4e8e\u4f7f\u7528 permutation \u51fd\u6570\uff0c\u5373\u6253\u6563\u539f\u5217\u8868\uff1a In [ 53 ]: np . random . permutation ( my_list ) Out [ 53 ]: array ([ 'b' , 'a' , 'd' , 'c' ], dtype = '<U1' ) \u6700\u540e\uff0c\u9700\u8981\u63d0\u5230\u7684\u662f\u968f\u673a\u79cd\u5b50\uff0c\u5b83\u80fd\u591f\u56fa\u5b9a\u968f\u673a\u6570\u7684\u8f93\u51fa\u7ed3\u679c\uff1a In [ 54 ]: np . random . seed ( 0 ) In [ 55 ]: np . random . rand () Out [ 55 ]: 0.5488135039273248 In [ 56 ]: np . random . seed ( 0 ) In [ 57 ]: np . random . rand () Out [ 57 ]: 0.5488135039273248 2. np \u6570\u7ec4\u7684\u53d8\u5f62\u4e0e\u5408\u5e76 \u3010a\u3011\u8f6c\u7f6e\uff1a T In [ 58 ]: np . zeros (( 2 , 3 )) . T Out [ 58 ]: array ([[ 0. , 0. ], [ 0. , 0. ], [ 0. , 0. ]]) \u3010b\u3011\u5408\u5e76\u64cd\u4f5c\uff1a r_, c_ \u5bf9\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u800c\u8a00\uff0c r_ \u548c c_ \u5206\u522b\u8868\u793a\u4e0a\u4e0b\u5408\u5e76\u548c\u5de6\u53f3\u5408\u5e76\uff1a In [ 59 ]: np . r_ [ np . zeros (( 2 , 3 )), np . zeros (( 2 , 3 ))] Out [ 59 ]: array ([[ 0. , 0. , 0. ], [ 0. , 0. , 0. ], [ 0. , 0. , 0. ], [ 0. , 0. , 0. ]]) In [ 60 ]: np . c_ [ np . zeros (( 2 , 3 )), np . zeros (( 2 , 3 ))] Out [ 60 ]: array ([[ 0. , 0. , 0. , 0. , 0. , 0. ], [ 0. , 0. , 0. , 0. , 0. , 0. ]]) \u4e00\u7ef4\u6570\u7ec4\u548c\u4e8c\u7ef4\u6570\u7ec4\u8fdb\u884c\u5408\u5e76\u65f6\uff0c\u5e94\u5f53\u628a\u5176\u89c6\u4f5c\u5217\u5411\u91cf\uff0c\u5728\u957f\u5ea6\u5339\u914d\u7684\u60c5\u51b5\u4e0b\u53ea\u80fd\u591f\u4f7f\u7528\u5de6\u53f3\u5408\u5e76\u7684 c_ \u64cd\u4f5c\uff1a In [ 61 ]: try : .... : np . r_ [ np . array ([ 0 , 0 ]), np . zeros (( 2 , 1 ))] .... : except Exception as e : .... : Err_Msg = e .... : In [ 62 ]: Err_Msg Out [ 62 ]: ValueError ( 'all the input arrays must have same number of dimensions, but the array at index 0 has 1 dimension(s) and the array at index 1 has 2 dimension(s)' ) In [ 63 ]: np . r_ [ np . array ([ 0 , 0 ]), np . zeros ( 2 )] Out [ 63 ]: array ([ 0. , 0. , 0. , 0. ]) In [ 64 ]: np . c_ [ np . array ([ 0 , 0 ]), np . zeros (( 2 , 3 ))] Out [ 64 ]: array ([[ 0. , 0. , 0. , 0. ], [ 0. , 0. , 0. , 0. ]]) \u3010c\u3011\u7ef4\u5ea6\u53d8\u6362\uff1a reshape reshape \u80fd\u591f\u5e2e\u52a9\u7528\u6237\u628a\u539f\u6570\u7ec4\u6309\u7167\u65b0\u7684\u7ef4\u5ea6\u91cd\u65b0\u6392\u5217\u3002\u5728\u4f7f\u7528\u65f6\u6709\u4e24\u79cd\u6a21\u5f0f\uff0c\u5206\u522b\u4e3a C \u6a21\u5f0f\u548c F \u6a21\u5f0f\uff0c\u5206\u522b\u4ee5\u9010\u884c\u548c\u9010\u5217\u7684\u987a\u5e8f\u8fdb\u884c\u586b\u5145\u8bfb\u53d6\u3002 In [ 65 ]: target = np . arange ( 8 ) . reshape ( 2 , 4 ) In [ 66 ]: target Out [ 66 ]: array ([[ 0 , 1 , 2 , 3 ], [ 4 , 5 , 6 , 7 ]]) In [ 67 ]: target . reshape (( 4 , 2 ), order = 'C' ) # \u6309\u7167\u884c\u8bfb\u53d6\u548c\u586b\u5145 Out [ 67 ]: array ([[ 0 , 1 ], [ 2 , 3 ], [ 4 , 5 ], [ 6 , 7 ]]) In [ 68 ]: target . reshape (( 4 , 2 ), order = 'F' ) # \u6309\u7167\u5217\u8bfb\u53d6\u548c\u586b\u5145 Out [ 68 ]: array ([[ 0 , 2 ], [ 4 , 6 ], [ 1 , 3 ], [ 5 , 7 ]]) \u7279\u522b\u5730\uff0c\u7531\u4e8e\u88ab\u8c03\u7528\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u786e\u5b9a\u7684\uff0c reshape \u5141\u8bb8\u6709\u4e00\u4e2a\u7ef4\u5ea6\u5b58\u5728\u7a7a\u7f3a\uff0c\u6b64\u65f6\u53ea\u9700\u586b\u5145 - 1 \u5373\u53ef\uff1a In [ 69 ]: target . reshape (( 4 , - 1 )) Out [ 69 ]: array ([[ 0 , 1 ], [ 2 , 3 ], [ 4 , 5 ], [ 6 , 7 ]]) \u4e0b\u9762\u5c06 n*1 \u5927\u5c0f\u7684\u6570\u7ec4\u8f6c\u4e3a 1 \u7ef4\u6570\u7ec4\u7684\u64cd\u4f5c\u662f\u7ecf\u5e38\u4f7f\u7528\u7684\uff1a In [ 70 ]: target = np . ones (( 3 , 1 )) In [ 71 ]: target Out [ 71 ]: array ([[ 1. ], [ 1. ], [ 1. ]]) In [ 72 ]: target . reshape ( - 1 ) Out [ 72 ]: array ([ 1. , 1. , 1. ]) 3. np \u6570\u7ec4\u7684\u5207\u7247\u4e0e\u7d22\u5f15 \u6570\u7ec4\u7684\u5207\u7247\u6a21\u5f0f\u652f\u6301\u4f7f\u7528 slice \u7c7b\u578b\u7684 start:end:step \u5207\u7247\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u4f20\u5165\u5217\u8868\u6307\u5b9a\u67d0\u4e2a\u7ef4\u5ea6\u7684\u7d22\u5f15\u8fdb\u884c\u5207\u7247\uff1a In [ 73 ]: target = np . arange ( 9 ) . reshape ( 3 , 3 ) In [ 74 ]: target Out [ 74 ]: array ([[ 0 , 1 , 2 ], [ 3 , 4 , 5 ], [ 6 , 7 , 8 ]]) In [ 75 ]: target [: - 1 , [ 0 , 2 ]] Out [ 75 ]: array ([[ 0 , 2 ], [ 3 , 5 ]]) \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u5229\u7528 np.ix_ \u5728\u5bf9\u5e94\u7684\u7ef4\u5ea6\u4e0a\u4f7f\u7528\u5e03\u5c14\u7d22\u5f15\uff0c\u4f46\u6b64\u65f6\u4e0d\u80fd\u4f7f\u7528 slice \u5207\u7247\uff1a In [ 76 ]: target [ np . ix_ ([ True , False , True ], [ True , False , True ])] Out [ 76 ]: array ([[ 0 , 2 ], [ 6 , 8 ]]) In [ 77 ]: target [ np . ix_ ([ 1 , 2 ], [ True , False , True ])] Out [ 77 ]: array ([[ 3 , 5 ], [ 6 , 8 ]]) \u5f53\u6570\u7ec4\u7ef4\u5ea6\u4e3a 1 \u7ef4\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5e03\u5c14\u7d22\u5f15\uff0c\u800c\u65e0\u9700 np.ix_ \uff1a In [ 78 ]: new = target . reshape ( - 1 ) In [ 79 ]: new [ new % 2 == 0 ] Out [ 79 ]: array ([ 0 , 2 , 4 , 6 , 8 ]) 4. \u5e38\u7528\u51fd\u6570 \u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u8fd9\u91cc\u5047\u8bbe\u4e0b\u8ff0\u51fd\u6570\u8f93\u5165\u7684\u6570\u7ec4\u90fd\u662f\u4e00\u7ef4\u7684\u3002 \u3010a\u3011 where where \u662f\u4e00\u79cd\u6761\u4ef6\u51fd\u6570\uff0c\u53ef\u4ee5\u6307\u5b9a\u6ee1\u8db3\u6761\u4ef6\u4e0e\u4e0d\u6ee1\u8db3\u6761\u4ef6\u4f4d\u7f6e\u5bf9\u5e94\u7684\u586b\u5145\u503c\uff1a In [ 80 ]: a = np . array ([ - 1 , 1 , - 1 , 0 ]) In [ 81 ]: np . where ( a > 0 , a , 5 ) # \u5bf9\u5e94\u4f4d\u7f6e\u4e3aTrue\u65f6\u586b\u5145a\u5bf9\u5e94\u5143\u7d20\uff0c\u5426\u5219\u586b\u51455 Out [ 81 ]: array ([ 5 , 1 , 5 , 5 ]) \u3010b\u3011 nonzero, argmax, argmin \u8fd9\u4e09\u4e2a\u51fd\u6570\u8fd4\u56de\u7684\u90fd\u662f\u7d22\u5f15\uff0c nonzero \u8fd4\u56de\u975e\u96f6\u6570\u7684\u7d22\u5f15\uff0c argmax, argmin \u5206\u522b\u8fd4\u56de\u6700\u5927\u548c\u6700\u5c0f\u6570\u7684\u7d22\u5f15\uff1a In [ 82 ]: a = np . array ([ - 2 , - 5 , 0 , 1 , 3 , - 1 ]) In [ 83 ]: np . nonzero ( a ) Out [ 83 ]: ( array ([ 0 , 1 , 3 , 4 , 5 ], dtype = int64 ),) In [ 84 ]: a . argmax () Out [ 84 ]: 4 In [ 85 ]: a . argmin () Out [ 85 ]: 1 \u3010c\u3011 any, all any \u6307\u5f53\u5e8f\u5217\u81f3\u5c11 \u5b58\u5728\u4e00\u4e2a True \u6216\u975e\u96f6\u5143\u7d20\u65f6\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False all \u6307\u5f53\u5e8f\u5217\u5143\u7d20 \u5168\u4e3a True \u6216\u975e\u96f6\u5143\u7d20\u65f6\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False In [ 86 ]: a = np . array ([ 0 , 1 ]) In [ 87 ]: a . any () Out [ 87 ]: True In [ 88 ]: a . all () Out [ 88 ]: False \u3010d\u3011 cumprod, cumsum, diff cumprod, cumsum \u5206\u522b\u8868\u793a\u7d2f\u4e58\u548c\u7d2f\u52a0\u51fd\u6570\uff0c\u8fd4\u56de\u540c\u957f\u5ea6\u7684\u6570\u7ec4\uff0c diff \u8868\u793a\u548c\u524d\u4e00\u4e2a\u5143\u7d20\u505a\u5dee\uff0c\u7531\u4e8e\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a\u7f3a\u5931\u503c\uff0c\u56e0\u6b64\u5728\u9ed8\u8ba4\u53c2\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd4\u56de\u957f\u5ea6\u662f\u539f\u6570\u7ec4\u51cf 1 In [ 89 ]: a = np . array ([ 1 , 2 , 3 ]) In [ 90 ]: a . cumprod () Out [ 90 ]: array ([ 1 , 2 , 6 ]) In [ 91 ]: a . cumsum () Out [ 91 ]: array ([ 1 , 3 , 6 ]) In [ 92 ]: np . diff ( a ) Out [ 92 ]: array ([ 1 , 1 ]) \u3010e\u3011 \u7edf\u8ba1\u51fd\u6570 \u5e38\u7528\u7684\u7edf\u8ba1\u51fd\u6570\u5305\u62ec max, min, mean, median, std, var, sum, quantile \uff0c\u5176\u4e2d\u5206\u4f4d\u6570\u8ba1\u7b97\u662f\u5168\u5c40\u65b9\u6cd5\uff0c\u56e0\u6b64\u4e0d\u80fd\u901a\u8fc7 array.quantile \u7684\u65b9\u6cd5\u8c03\u7528\uff1a In [ 93 ]: target = np . arange ( 5 ) In [ 94 ]: target Out [ 94 ]: array ([ 0 , 1 , 2 , 3 , 4 ]) In [ 95 ]: target . max () Out [ 95 ]: 4 In [ 96 ]: np . quantile ( target , 0.5 ) # 0.5\u5206\u4f4d\u6570 Out [ 96 ]: 2.0 \u4f46\u662f\u5bf9\u4e8e\u542b\u6709\u7f3a\u5931\u503c\u7684\u6570\u7ec4\uff0c\u5b83\u4eec\u8fd4\u56de\u7684\u7ed3\u679c\u4e5f\u662f\u7f3a\u5931\u503c\uff0c\u5982\u679c\u9700\u8981\u7565\u8fc7\u7f3a\u5931\u503c\uff0c\u5fc5\u987b\u4f7f\u7528 nan* \u7c7b\u578b\u7684\u51fd\u6570\uff0c\u4e0a\u8ff0\u7684\u51e0\u4e2a\u7edf\u8ba1\u51fd\u6570\u90fd\u6709\u5bf9\u5e94\u7684 nan* \u51fd\u6570\u3002 In [ 97 ]: target = np . array ([ 1 , 2 , np . nan ]) In [ 98 ]: target Out [ 98 ]: array ([ 1. , 2. , nan ]) In [ 99 ]: target . max () Out [ 99 ]: nan In [ 100 ]: np . nanmax ( target ) Out [ 100 ]: 2.0 In [ 101 ]: np . nanquantile ( target , 0.5 ) Out [ 101 ]: 1.5 \u5bf9\u4e8e\u534f\u65b9\u5dee\u548c\u76f8\u5173\u7cfb\u6570\u5206\u522b\u53ef\u4ee5\u5229\u7528 cov, corrcoef \u5982\u4e0b\u8ba1\u7b97\uff1a In [ 102 ]: target1 = np . array ([ 1 , 3 , 5 , 9 ]) In [ 103 ]: target2 = np . array ([ 1 , 5 , 3 , - 9 ]) In [ 104 ]: np . cov ( target1 , target2 ) Out [ 104 ]: array ([[ 11.66666667 , - 16.66666667 ], [ - 16.66666667 , 38.66666667 ]]) In [ 105 ]: np . corrcoef ( target1 , target2 ) Out [ 105 ]: array ([[ 1. , - 0.78470603 ], [ - 0.78470603 , 1. ]]) \u6700\u540e\uff0c\u9700\u8981\u8bf4\u660e\u4e8c\u7ef4 Numpy \u6570\u7ec4\u4e2d\u7edf\u8ba1\u51fd\u6570\u7684 axis \u53c2\u6570\uff0c\u5b83\u80fd\u591f\u8fdb\u884c\u67d0\u4e00\u4e2a\u7ef4\u5ea6\u4e0b\u7684\u7edf\u8ba1\u7279\u5f81\u8ba1\u7b97\uff0c\u5f53 axis=0 \u65f6\u7ed3\u679c\u4e3a\u5217\u7684\u7edf\u8ba1\u6307\u6807\uff0c\u5f53 axis=1 \u65f6\u7ed3\u679c\u4e3a\u884c\u7684\u7edf\u8ba1\u6307\u6807\uff1a In [ 106 ]: target = np . arange ( 1 , 10 ) . reshape ( 3 , - 1 ) In [ 107 ]: target Out [ 107 ]: array ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]]) In [ 108 ]: target . sum ( 0 ) Out [ 108 ]: array ([ 12 , 15 , 18 ]) In [ 109 ]: target . sum ( 1 ) Out [ 109 ]: array ([ 6 , 15 , 24 ]) 5. \u5e7f\u64ad\u673a\u5236 \u5e7f\u64ad\u673a\u5236\u7528\u4e8e\u5904\u7406\u4e24\u4e2a\u4e0d\u540c\u7ef4\u5ea6\u6570\u7ec4\u4e4b\u95f4\u7684\u64cd\u4f5c\uff0c\u8fd9\u91cc\u53ea\u8ba8\u8bba\u4e0d\u8d85\u8fc7\u4e24\u7ef4\u7684\u6570\u7ec4\u5e7f\u64ad\u673a\u5236\u3002 \u3010a\u3011\u6807\u91cf\u548c\u6570\u7ec4\u7684\u64cd\u4f5c \u5f53\u4e00\u4e2a\u6807\u91cf\u548c\u6570\u7ec4\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u6807\u91cf\u4f1a\u81ea\u52a8\u628a\u5927\u5c0f\u6269\u5145\u4e3a\u6570\u7ec4\u5927\u5c0f\uff0c\u4e4b\u540e\u8fdb\u884c\u9010\u5143\u7d20\u64cd\u4f5c\uff1a In [ 110 ]: res = 3 * np . ones (( 2 , 2 )) + 1 In [ 111 ]: res Out [ 111 ]: array ([[ 4. , 4. ], [ 4. , 4. ]]) In [ 112 ]: res = 1 / res In [ 113 ]: res Out [ 113 ]: array ([[ 0.25 , 0.25 ], [ 0.25 , 0.25 ]]) \u3010b\u3011\u4e8c\u7ef4\u6570\u7ec4\u4e4b\u95f4\u7684\u64cd\u4f5c \u5f53\u4e24\u4e2a\u6570\u7ec4\u7ef4\u5ea6\u5b8c\u5168\u4e00\u81f4\u65f6\uff0c\u4f7f\u7528\u5bf9\u5e94\u5143\u7d20\u7684\u64cd\u4f5c\uff0c\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u9664\u975e\u5176\u4e2d\u7684\u67d0\u4e2a\u6570\u7ec4\u7684\u7ef4\u5ea6\u662f \u6216\u8005 \uff0c\u90a3\u4e48\u4f1a\u6269\u5145\u5176\u5177\u6709 \u7684\u7ef4\u5ea6\u4e3a\u53e6\u4e00\u4e2a\u6570\u7ec4\u5bf9\u5e94\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002\u4f8b\u5982\uff0c \u6570\u7ec4\u548c \u6570\u7ec4\u505a\u9010\u5143\u7d20\u8fd0\u7b97\u65f6\u4f1a\u628a\u7b2c\u4e00\u4e2a\u6570\u7ec4\u6269\u5145\u4e3a \uff0c\u6269\u5145\u65f6\u7684\u5bf9\u5e94\u6570\u503c\u8fdb\u884c\u8d4b\u503c\u3002\u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u7ec4\u7684\u7ef4\u5ea6\u662f \uff0c\u90a3\u4e48\u7531\u4e8e\u5728\u7b2c\u4e8c\u7ef4\u4e0a\u7684\u5927\u5c0f\u4e0d\u5339\u914d\u4e14\u4e0d\u4e3a \uff0c\u6b64\u65f6\u62a5\u9519\u3002 In [ 114 ]: res = np . ones (( 3 , 2 )) In [ 115 ]: res Out [ 115 ]: array ([[ 1. , 1. ], [ 1. , 1. ], [ 1. , 1. ]]) In [ 116 ]: res * np . array ([[ 2 , 3 ]]) # \u7b2c\u4e8c\u4e2a\u6570\u7ec4\u6269\u5145\u7b2c\u4e00\u7ef4\u5ea6\u4e3a3 Out [ 116 ]: array ([[ 2. , 3. ], [ 2. , 3. ], [ 2. , 3. ]]) In [ 117 ]: res * np . array ([[ 2 ],[ 3 ],[ 4 ]]) # \u7b2c\u4e8c\u4e2a\u6570\u7ec4\u6269\u5145\u7b2c\u4e8c\u7ef4\u5ea6\u4e3a2 Out [ 117 ]: array ([[ 2. , 2. ], [ 3. , 3. ], [ 4. , 4. ]]) In [ 118 ]: res * np . array ([[ 2 ]]) # \u7b49\u4ef7\u4e8e\u4e24\u6b21\u6269\u5145\uff0c\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e24\u4e2a\u7ef4\u5ea6\u5206\u522b\u6269\u5145\u4e3a3\u548c2 Out [ 118 ]: array ([[ 2. , 2. ], [ 2. , 2. ], [ 2. , 2. ]]) \u3010c\u3011\u4e00\u7ef4\u6570\u7ec4\u4e0e\u4e8c\u7ef4\u6570\u7ec4\u7684\u64cd\u4f5c \u5f53\u4e00\u7ef4\u6570\u7ec4 \u4e0e\u4e8c\u7ef4\u6570\u7ec4 \u64cd\u4f5c\u65f6\uff0c\u7b49\u4ef7\u4e8e\u628a\u4e00\u7ef4\u6570\u7ec4\u89c6\u4f5c \u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u4f7f\u7528\u7684\u5e7f\u64ad\u6cd5\u5219\u4e0e\u3010b\u3011\u4e2d\u4e00\u81f4\uff0c\u5f53 \u4e14 \u90fd\u4e0d\u662f \u65f6\u62a5\u9519\u3002 In [ 119 ]: np . ones ( 3 ) + np . ones (( 2 , 3 )) Out [ 119 ]: array ([[ 2. , 2. , 2. ], [ 2. , 2. , 2. ]]) In [ 120 ]: np . ones ( 3 ) + np . ones (( 2 , 1 )) Out [ 120 ]: array ([[ 2. , 2. , 2. ], [ 2. , 2. , 2. ]]) In [ 121 ]: np . ones ( 1 ) + np . ones (( 2 , 3 )) Out [ 121 ]: array ([[ 2. , 2. , 2. ], [ 2. , 2. , 2. ]]) 6. \u5411\u91cf\u4e0e\u77e9\u9635\u7684\u8ba1\u7b97 \u3010a\u3011\u5411\u91cf\u5185\u79ef\uff1a dot In [ 122 ]: a = np . array ([ 1 , 2 , 3 ]) In [ 123 ]: b = np . array ([ 1 , 3 , 5 ]) In [ 124 ]: a . dot ( b ) Out [ 124 ]: 22 \u3010b\u3011\u5411\u91cf\u8303\u6570\u548c\u77e9\u9635\u8303\u6570\uff1a np.linalg.norm \u5728\u77e9\u9635\u8303\u6570\u7684\u8ba1\u7b97\u4e2d\uff0c\u6700\u91cd\u8981\u7684\u662f ord \u53c2\u6570\uff0c\u53ef\u9009\u503c\u5982\u4e0b\uff1a ord norm for matrices norm for vectors None Frobenius norm 2-norm fro Frobenius norm \u2013 nuc nuclear norm \u2013 inf max(sum(abs(x), axis=1)) max(abs(x)) -inf min(sum(abs(x), axis=1)) min(abs(x)) 0 \u2013 sum(x != 0) 1 max(sum(abs(x), axis=0)) as below -1 min(sum(abs(x), axis=0)) as below 2 2-norm (largest sing. value) as below -2 smallest singular value as below other \u2013 sum(abs(x)**ord)**(1./ord) In [ 125 ]: matrix_target = np . arange ( 4 ) . reshape ( - 1 , 2 ) In [ 126 ]: matrix_target Out [ 126 ]: array ([[ 0 , 1 ], [ 2 , 3 ]]) In [ 127 ]: np . linalg . norm ( matrix_target , 'fro' ) Out [ 127 ]: 3.7416573867739413 In [ 128 ]: np . linalg . norm ( matrix_target , np . inf ) Out [ 128 ]: 5.0 In [ 129 ]: np . linalg . norm ( matrix_target , 2 ) Out [ 129 ]: 3.702459173643833 In [ 130 ]: vector_target = np . arange ( 4 ) In [ 131 ]: vector_target Out [ 131 ]: array ([ 0 , 1 , 2 , 3 ]) In [ 132 ]: np . linalg . norm ( vector_target , np . inf ) Out [ 132 ]: 3.0 In [ 133 ]: np . linalg . norm ( vector_target , 2 ) Out [ 133 ]: 3.7416573867739413 In [ 134 ]: np . linalg . norm ( vector_target , 3 ) Out [ 134 ]: 3.3019272488946263 \u3010c\u3011\u77e9\u9635\u4e58\u6cd5\uff1a @ In [ 135 ]: a = np . arange ( 4 ) . reshape ( - 1 , 2 ) In [ 136 ]: a Out [ 136 ]: array ([[ 0 , 1 ], [ 2 , 3 ]]) In [ 137 ]: b = np . arange ( - 4 , 0 ) . reshape ( - 1 , 2 ) In [ 138 ]: b Out [ 138 ]: array ([[ - 4 , - 3 ], [ - 2 , - 1 ]]) In [ 139 ]: a @b Out [ 139 ]: array ([[ - 2 , - 1 ], [ - 14 , - 9 ]]) \u4e09\u3001\u7ec3\u4e60 Ex1\uff1a\u5229\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u5199\u77e9\u9635\u4e58\u6cd5 \u4e00\u822c\u7684\u77e9\u9635\u4e58\u6cd5\u6839\u636e\u516c\u5f0f\uff0c\u53ef\u4ee5\u7531\u4e09\u91cd\u5faa\u73af\u5199\u51fa\uff1a In [ 140 ]: M1 = np . random . rand ( 2 , 3 ) In [ 141 ]: M2 = np . random . rand ( 3 , 4 ) In [ 142 ]: res = np . empty (( M1 . shape [ 0 ], M2 . shape [ 1 ])) In [ 143 ]: for i in range ( M1 . shape [ 0 ]): ..... : for j in range ( M2 . shape [ 1 ]): ..... : item = 0 ..... : for k in range ( M1 . shape [ 1 ]): ..... : item += M1 [ i ][ k ] * M2 [ k ][ j ] ..... : res [ i ][ j ] = item ..... : In [ 144 ]: ( np . abs (( M1 @M2 - res ) < 1e-15 )) . all () # \u6392\u9664\u6570\u503c\u8bef\u5dee Out [ 144 ]: True \u8bf7\u5c06\u5176\u6539\u5199\u4e3a\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u5f62\u5f0f\u3002 Ex2\uff1a\u66f4\u65b0\u77e9\u9635 \u8bbe\u77e9\u9635 \uff0c\u73b0\u5728\u5bf9 \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u66f4\u65b0\u751f\u6210\u77e9\u9635 \uff0c\u66f4\u65b0\u65b9\u6cd5\u662f \uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u77e9\u9635\u4e3a \uff0c\u5219 \uff0c\u8bf7\u5229\u7528 Numpy \u9ad8\u6548\u5b9e\u73b0\u3002 Ex3\uff1a\u5361\u65b9\u7edf\u8ba1\u91cf \u8bbe\u77e9\u9635 \uff0c\u8bb0 \uff0c\u5b9a\u4e49\u5361\u65b9\u503c\u5982\u4e0b\uff1a \u8bf7\u5229\u7528 Numpy \u5bf9\u7ed9\u5b9a\u7684\u77e9\u9635 \u8ba1\u7b97 \u3002 In [ 145 ]: np . random . seed ( 0 ) In [ 146 ]: A = np . random . randint ( 10 , 20 , ( 8 , 5 )) Ex4\uff1a\u6539\u8fdb\u77e9\u9635\u8ba1\u7b97\u7684\u6027\u80fd \u8bbe \u4e3a \u7684\u77e9\u9635\uff0c \u548c \u5206\u522b\u662f \u548c \u7684\u77e9\u9635\uff0c \u4e3a \u7684\u7b2c \u884c\uff0c \u4e3a \u7684\u7b2c \u5217\uff0c\u4e0b\u9762\u5b9a\u4e49 \uff0c\u5176\u4e2d \u8868\u793a\u5411\u91cf \u7684\u5206\u91cf\u5e73\u65b9\u548c \u3002 \u73b0\u6709\u67d0\u4eba\u6839\u636e\u5982\u4e0b\u7ed9\u5b9a\u7684\u6837\u4f8b\u6570\u636e\u8ba1\u7b97 \u7684\u503c\uff0c\u8bf7\u5145\u5206\u5229\u7528 Numpy \u4e2d\u7684\u51fd\u6570\uff0c\u57fa\u4e8e\u6b64\u95ee\u9898\u6539\u8fdb\u8fd9\u6bb5\u4ee3\u7801\u7684\u6027\u80fd\u3002 In [ 147 ]: np . random . seed ( 0 ) In [ 148 ]: m , n , p = 100 , 80 , 50 In [ 149 ]: B = np . random . randint ( 0 , 2 , ( m , p )) In [ 150 ]: U = np . random . randint ( 0 , 2 , ( p , n )) In [ 151 ]: Z = np . random . randint ( 0 , 2 , ( m , n )) In [ 152 ]: def solution ( B = B , U = U , Z = Z ): ..... : L_res = [] ..... : for i in range ( m ): ..... : for j in range ( n ): ..... : norm_value = (( B [ i ] - U [:, j ]) ** 2 ) . sum () ..... : L_res . append ( norm_value * Z [ i ][ j ]) ..... : return sum ( L_res ) ..... : In [ 153 ]: solution ( B , U , Z ) Out [ 153 ]: 100566 Ex5\uff1a\u8fde\u7eed\u6574\u6570\u7684\u6700\u5927\u957f\u5ea6 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u7684 Numpy \u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u4e2d\u4e25\u683c\u9012\u589e\u8fde\u7eed\u6574\u6570\u5b50\u6570\u7ec4\u7684\u6700\u5927\u957f\u5ea6\u3002\u4f8b\u5982\uff0c\u8f93\u5165 [1,2,5,6,7]\uff0c[5,6,7]\u4e3a\u5177\u6709\u6700\u5927\u957f\u5ea6\u7684\u9012\u589e\u8fde\u7eed\u6574\u6570\u5b50\u6570\u7ec4\uff0c\u56e0\u6b64\u8f93\u51fa 3\uff1b\u8f93\u5165 [3,2,1,2,3,4,6]\uff0c[1,2,3,4] \u4e3a\u5177\u6709\u6700\u5927\u957f\u5ea6\u7684\u9012\u589e\u8fde\u7eed\u6574\u6570\u5b50\u6570\u7ec4\uff0c\u56e0\u6b64\u8f93\u51fa 4\u3002\u8bf7\u5145\u5206\u5229\u7528 Numpy \u7684\u5185\u7f6e\u51fd\u6570\u5b8c\u6210\u3002\uff08\u63d0\u793a\uff1a\u8003\u8651\u4f7f\u7528 nonzero, diff \u51fd\u6570\uff09","title":"\u4e00\u3001Python\u57fa\u7840\u77e5\u8bc6"},{"location":"pandas/part1/#python","text":"","title":"\u4e00\u3001Python \u57fa\u7840"},{"location":"pandas/part1/#1","text":"\u5728\u751f\u6210\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217\u7684\u65f6\u5019\uff0c\u5728 Python \u4e2d\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 1 ]: L = [] In [ 2 ]: def my_func ( x ): ... : return 2 * x ... : In [ 3 ]: for i in range ( 5 ): ... : L . append ( my_func ( i )) ... : In [ 4 ]: L Out [ 4 ]: [ 0 , 2 , 4 , 6 , 8 ] \u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u5229\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u8fdb\u884c\u5199\u6cd5\u4e0a\u7684\u7b80\u5316\uff1a [* for i in *] \u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a * \u4e3a\u6620\u5c04\u51fd\u6570\uff0c\u5176\u8f93\u5165\u4e3a\u540e\u9762 i \u6307\u4ee3\u7684\u5185\u5bb9\uff0c\u7b2c\u4e8c\u4e2a * \u8868\u793a\u8fed\u4ee3\u7684\u5bf9\u8c61\u3002 In [ 5 ]: [ my_func ( i ) for i in range ( 5 )] Out [ 5 ]: [ 0 , 2 , 4 , 6 , 8 ] \u5217\u8868\u8868\u8fbe\u5f0f\u8fd8\u652f\u6301\u591a\u5c42\u5d4c\u5957\uff0c\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u7b2c\u4e00\u4e2a for \u4e3a\u5916\u5c42\u5faa\u73af\uff0c\u7b2c\u4e8c\u4e2a\u4e3a\u5185\u5c42\u5faa\u73af\uff1a In [ 6 ]: [ m + '_' + n for m in [ 'a' , 'b' ] for n in [ 'c' , 'd' ]] Out [ 6 ]: [ 'a_c' , 'a_d' , 'b_c' , 'b_d' ] \u9664\u4e86\u5217\u8868\u63a8\u5bfc\u5f0f\uff0c\u53e6\u4e00\u4e2a\u5b9e\u7528\u7684\u8bed\u6cd5\u7cd6\u662f\u5e26\u6709 if \u9009\u62e9\u7684\u6761\u4ef6\u8d4b\u503c\uff0c\u5176\u5f62\u5f0f\u4e3a value = a if condition else b \uff1a In [ 7 ]: value = 'cat' if 2 > 1 else 'dog' In [ 8 ]: value Out [ 8 ]: 'cat' \u7b49\u4ef7\u4e8e\u5982\u4e0b\u7684\u5199\u6cd5\uff1a a , b = 'cat' , 'dog' condition = 2 > 1 # \u6b64\u65f6\u4e3aTrue if condition : value = a else : value = b \u4e0b\u9762\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u622a\u65ad\u5217\u8868\u4e2d\u8d85\u8fc7 5 \u7684\u5143\u7d20\uff0c\u5373\u8d85\u8fc7 5 \u7684\u7528 5 \u4ee3\u66ff\uff0c\u5c0f\u4e8e 5 \u7684\u4fdd\u7559\u539f\u6765\u7684\u503c\uff1a In [ 9 ]: L = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] In [ 10 ]: [ i if i <= 5 else 5 for i in L ] Out [ 10 ]: [ 1 , 2 , 3 , 4 , 5 , 5 , 5 ]","title":"1. \u5217\u8868\u63a8\u5bfc\u5f0f\u4e0e\u6761\u4ef6\u8d4b\u503c"},{"location":"pandas/part1/#2-map","text":"\u6709\u4e00\u4e9b\u51fd\u6570\u7684\u5b9a\u4e49\u5177\u6709\u6e05\u6670\u7b80\u5355\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u4f8b\u5982\u4e0a\u9762\u7684 my_func \u51fd\u6570\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u7528\u533f\u540d\u51fd\u6570\u7684\u65b9\u6cd5\u7b80\u6d01\u5730\u8868\u793a\uff1a In [ 11 ]: my_func = lambda x : 2 * x In [ 12 ]: my_func ( 3 ) Out [ 12 ]: 6 In [ 13 ]: multi_para_func = lambda a , b : a + b In [ 14 ]: multi_para_func ( 1 , 2 ) Out [ 14 ]: 3 \u4f46\u4e0a\u9762\u7684\u7528\u6cd5\u5176\u5b9e\u8fdd\u80cc\u4e86 \u201c\u533f\u540d\u201d \u7684\u542b\u4e49\uff0c\u4e8b\u5b9e\u4e0a\u5b83\u5f80\u5f80\u5728\u65e0\u9700\u591a\u5904\u8c03\u7528\u7684\u573a\u5408\u8fdb\u884c\u4f7f\u7528\uff0c\u4f8b\u5982\u4e0a\u9762\u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u7684\u4f8b\u5b50\uff0c\u7528\u6237\u4e0d\u5173\u5fc3\u51fd\u6570\u7684\u540d\u5b57\uff0c\u53ea\u5173\u5fc3\u8fd9\u79cd\u6620\u5c04\u7684\u5173\u7cfb\uff1a In [ 15 ]: [( lambda x : 2 * x )( i ) for i in range ( 5 )] Out [ 15 ]: [ 0 , 2 , 4 , 6 , 8 ] \u5bf9\u4e8e\u4e0a\u8ff0\u7684\u8fd9\u79cd\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u533f\u540d\u51fd\u6570\u6620\u5c04\uff0c Python \u4e2d\u63d0\u4f9b\u4e86 map \u51fd\u6570\u6765\u5b8c\u6210\uff0c\u5b83\u8fd4\u56de\u7684\u662f\u4e00\u4e2a map \u5bf9\u8c61\uff0c\u9700\u8981\u901a\u8fc7 list \u8f6c\u4e3a\u5217\u8868\uff1a In [ 16 ]: list ( map ( lambda x : 2 * x , range ( 5 ))) Out [ 16 ]: [ 0 , 2 , 4 , 6 , 8 ] \u5bf9\u4e8e\u591a\u4e2a\u8f93\u5165\u503c\u7684\u51fd\u6570\u6620\u5c04\uff0c\u53ef\u4ee5\u901a\u8fc7\u8ffd\u52a0\u8fed\u4ee3\u5bf9\u8c61\u5b9e\u73b0\uff1a In [ 17 ]: list ( map ( lambda x , y : str ( x ) + '_' + y , range ( 5 ), list ( 'abcde' ))) Out [ 17 ]: [ '0_a' , '1_b' , '2_c' , '3_d' , '4_e' ]","title":"2. \u533f\u540d\u51fd\u6570\u4e0e map \u65b9\u6cd5"},{"location":"pandas/part1/#3-zip-enumerate","text":"zip \u51fd\u6570\u80fd\u591f\u628a\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u6253\u5305\u6210\u4e00\u4e2a\u5143\u7ec4\u6784\u6210\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5b83\u8fd4\u56de\u4e86\u4e00\u4e2a zip \u5bf9\u8c61\uff0c\u901a\u8fc7 tuple, list \u53ef\u4ee5\u5f97\u5230\u76f8\u5e94\u7684\u6253\u5305\u7ed3\u679c\uff1a In [ 18 ]: L1 , L2 , L3 = list ( 'abc' ), list ( 'def' ), list ( 'hij' ) In [ 19 ]: list ( zip ( L1 , L2 , L3 )) Out [ 19 ]: [( 'a' , 'd' , 'h' ), ( 'b' , 'e' , 'i' ), ( 'c' , 'f' , 'j' )] In [ 20 ]: tuple ( zip ( L1 , L2 , L3 )) Out [ 20 ]: (( 'a' , 'd' , 'h' ), ( 'b' , 'e' , 'i' ), ( 'c' , 'f' , 'j' )) \u5f80\u5f80\u4f1a\u5728\u5faa\u73af\u8fed\u4ee3\u7684\u65f6\u5019\u4f7f\u7528\u5230 zip \u51fd\u6570\uff1a In [ 21 ]: for i , j , k in zip ( L1 , L2 , L3 ): .... : print ( i , j , k ) .... : a d h b e i c f j enumerate \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6253\u5305\uff0c\u5b83\u53ef\u4ee5\u5728\u8fed\u4ee3\u65f6\u7ed1\u5b9a\u8fed\u4ee3\u5143\u7d20\u7684\u904d\u5386\u5e8f\u53f7\uff1a In [ 22 ]: L = list ( 'abcd' ) In [ 23 ]: for index , value in enumerate ( L ): .... : print ( index , value ) .... : 0 a 1 b 2 c 3 d \u7528 zip \u5bf9\u8c61\u4e5f\u80fd\u591f\u7b80\u5355\u5730\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff1a In [ 24 ]: for index , value in zip ( range ( len ( L )), L ): .... : print ( index , value ) .... : 0 a 1 b 2 c 3 d \u5f53\u9700\u8981\u5bf9\u4e24\u4e2a\u5217\u8868\u5efa\u7acb\u5b57\u5178\u6620\u5c04\u65f6\uff0c\u53ef\u4ee5\u5229\u7528 zip \u5bf9\u8c61\uff1a In [ 25 ]: dict ( zip ( L1 , L2 )) Out [ 25 ]: { 'a' : 'd' , 'b' : 'e' , 'c' : 'f' } \u65e2\u7136\u6709\u4e86\u538b\u7f29\u51fd\u6570\uff0c\u90a3\u4e48 Python \u4e5f\u63d0\u4f9b\u4e86 * \u64cd\u4f5c\u7b26\u548c zip \u8054\u5408\u4f7f\u7528\u6765\u8fdb\u884c\u89e3\u538b\u64cd\u4f5c\uff1a In [ 26 ]: zipped = list ( zip ( L1 , L2 , L3 )) In [ 27 ]: zipped Out [ 27 ]: [( 'a' , 'd' , 'h' ), ( 'b' , 'e' , 'i' ), ( 'c' , 'f' , 'j' )] In [ 28 ]: list ( zip ( * zipped )) # \u4e09\u4e2a\u5143\u7ec4\u5206\u522b\u5bf9\u5e94\u539f\u6765\u7684\u5217\u8868 Out [ 28 ]: [( 'a' , 'b' , 'c' ), ( 'd' , 'e' , 'f' ), ( 'h' , 'i' , 'j' )]","title":"3. zip \u5bf9\u8c61\u4e0e enumerate \u65b9\u6cd5"},{"location":"pandas/part1/#numpy","text":"","title":"\u4e8c\u3001Numpy \u57fa\u7840"},{"location":"pandas/part1/#1-np","text":"\u6700\u4e00\u822c\u7684\u65b9\u6cd5\u662f\u901a\u8fc7 array \u6765\u6784\u9020\uff1a In [ 29 ]: import numpy as np In [ 30 ]: np . array ([ 1 , 2 , 3 ]) Out [ 30 ]: array ([ 1 , 2 , 3 ]) \u4e0b\u9762\u8ba8\u8bba\u4e00\u4e9b\u7279\u6b8a\u6570\u7ec4\u7684\u751f\u6210\u65b9\u5f0f\uff1a \u3010a\u3011\u7b49\u5dee\u5e8f\u5217\uff1a np.linspace, np.arange In [ 31 ]: np . linspace ( 1 , 5 , 11 ) # \u8d77\u59cb\u3001\u7ec8\u6b62\uff08\u5305\u542b\uff09\u3001\u6837\u672c\u4e2a\u6570 Out [ 31 ]: array ([ 1. , 1.4 , 1.8 , 2.2 , 2.6 , 3. , 3.4 , 3.8 , 4.2 , 4.6 , 5. ]) In [ 32 ]: np . arange ( 1 , 5 , 2 ) # \u8d77\u59cb\u3001\u7ec8\u6b62\uff08\u4e0d\u5305\u542b\uff09\u3001\u6b65\u957f Out [ 32 ]: array ([ 1 , 3 ]) \u3010b\u3011\u7279\u6b8a\u77e9\u9635\uff1a zeros, eye, full In [ 33 ]: np . zeros (( 2 , 3 )) # \u4f20\u5165\u5143\u7ec4\u8868\u793a\u5404\u7ef4\u5ea6\u5927\u5c0f Out [ 33 ]: array ([[ 0. , 0. , 0. ], [ 0. , 0. , 0. ]]) In [ 34 ]: np . eye ( 3 ) # 3*3\u7684\u5355\u4f4d\u77e9\u9635 Out [ 34 ]: array ([[ 1. , 0. , 0. ], [ 0. , 1. , 0. ], [ 0. , 0. , 1. ]]) In [ 35 ]: np . eye ( 3 , k = 1 ) # \u504f\u79fb\u4e3b\u5bf9\u89d2\u7ebf1\u4e2a\u5355\u4f4d\u7684\u4f2a\u5355\u4f4d\u77e9\u9635 Out [ 35 ]: array ([[ 0. , 1. , 0. ], [ 0. , 0. , 1. ], [ 0. , 0. , 0. ]]) In [ 36 ]: np . full (( 2 , 3 ), 10 ) # \u5143\u7ec4\u4f20\u5165\u5927\u5c0f\uff0c10\u8868\u793a\u586b\u5145\u6570\u503c Out [ 36 ]: array ([[ 10 , 10 , 10 ], [ 10 , 10 , 10 ]]) In [ 37 ]: np . full (( 2 , 3 ), [ 1 , 2 , 3 ]) # \u6bcf\u884c\u586b\u5165\u76f8\u540c\u7684\u5217\u8868 Out [ 37 ]: array ([[ 1 , 2 , 3 ], [ 1 , 2 , 3 ]]) \u3010c\u3011\u968f\u673a\u77e9\u9635\uff1a np.random \u6700\u5e38\u7528\u7684\u968f\u673a\u751f\u6210\u51fd\u6570\u4e3a rand, randn, randint, choice \uff0c\u5b83\u4eec\u5206\u522b\u8868\u793a 0-1 \u5747\u5300\u5206\u5e03\u7684\u968f\u673a\u6570\u7ec4\u3001\u6807\u51c6\u6b63\u6001\u7684\u968f\u673a\u6570\u7ec4\u3001\u968f\u673a\u6574\u6570\u7ec4\u548c\u968f\u673a\u5217\u8868\u62bd\u6837\uff1a In [ 38 ]: np . random . rand ( 3 ) # \u751f\u6210\u670d\u4ece0-1\u5747\u5300\u5206\u5e03\u7684\u4e09\u4e2a\u968f\u673a\u6570 Out [ 38 ]: array ([ 0.19908884 , 0.55135019 , 0.76566437 ]) In [ 39 ]: np . random . rand ( 3 , 3 ) # \u6ce8\u610f\u8fd9\u91cc\u4f20\u5165\u7684\u4e0d\u662f\u5143\u7ec4\uff0c\u6bcf\u4e2a\u7ef4\u5ea6\u5927\u5c0f\u5206\u5f00\u8f93\u5165 Out [ 39 ]: array ([[ 0.61246219 , 0.03864624 , 0.15647923 ], [ 0.29716293 , 0.48112703 , 0.18439327 ], [ 0.15341614 , 0.77366422 , 0.08495561 ]]) \u5bf9\u4e8e\u670d\u4ece\u533a\u95f4 \u5230 \u4e0a\u7684\u5747\u5300\u5206\u5e03\u53ef\u4ee5\u5982\u4e0b\u751f\u6210\uff1a In [ 40 ]: a , b = 5 , 15 In [ 41 ]: ( b - a ) * np . random . rand ( 3 ) + a Out [ 41 ]: array ([ 12.38736853 , 7.44562529 , 14.27012191 ]) \u4e00\u822c\u7684\uff0c\u53ef\u4ee5\u9009\u62e9\u5df2\u6709\u7684\u5e93\u51fd\u6570\uff1a In [ 42 ]: np . random . uniform ( 5 , 15 , 3 ) Out [ 42 ]: array ([ 5.33114814 , 6.5177482 , 10.41477191 ]) randn \u751f\u6210\u4e86 \u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff1a In [ 43 ]: np . random . randn ( 3 ) Out [ 43 ]: array ([ 1.11861262 , - 0.70754481 , 0.55462402 ]) In [ 44 ]: np . random . randn ( 2 , 2 ) Out [ 44 ]: array ([[ 0.54719631 , 0.94092513 ], [ - 1.88079513 , 0.26288158 ]]) \u5bf9\u4e8e\u670d\u4ece\u65b9\u5dee\u4e3a \u5747\u503c\u4e3a \u7684\u4e00\u5143\u6b63\u6001\u5206\u5e03\u53ef\u4ee5\u5982\u4e0b\u751f\u6210\uff1a In [ 45 ]: sigma , mu = 2.5 , 3 In [ 46 ]: mu + np . random . randn ( 3 ) * sigma Out [ 46 ]: array ([ 4.85332375 , 2.71921844 , 1.03059989 ]) \u540c\u6837\u7684\uff0c\u4e5f\u53ef\u9009\u62e9\u4ece\u5df2\u6709\u51fd\u6570\u751f\u6210\uff1a In [ 47 ]: np . random . normal ( 3 , 2.5 , 3 ) Out [ 47 ]: array ([ 0.99627249 , 2.55455614 , 3.16157716 ]) randint \u53ef\u4ee5\u6307\u5b9a\u751f\u6210\u968f\u673a\u6574\u6570\u7684\u6700\u5c0f\u503c\u6700\u5927\u503c\uff08\u4e0d\u5305\u542b\uff09\u548c\u7ef4\u5ea6\u5927\u5c0f\uff1a In [ 48 ]: low , high , size = 5 , 15 , ( 2 , 2 ) # \u751f\u62105\u523014\u7684\u968f\u673a\u6574\u6570 In [ 49 ]: np . random . randint ( low , high , size ) Out [ 49 ]: array ([[ 6 , 11 ], [ 8 , 14 ]]) choice \u53ef\u4ee5\u4ece\u7ed9\u5b9a\u7684\u5217\u8868\u4e2d\uff0c\u4ee5\u4e00\u5b9a\u6982\u7387\u548c\u65b9\u5f0f\u62bd\u53d6\u7ed3\u679c\uff0c\u5f53\u4e0d\u6307\u5b9a\u6982\u7387\u65f6\u4e3a\u5747\u5300\u91c7\u6837\uff0c\u9ed8\u8ba4\u62bd\u53d6\u65b9\u5f0f\u4e3a\u6709\u653e\u56de\u62bd\u6837\uff1a In [ 50 ]: my_list = [ 'a' , 'b' , 'c' , 'd' ] In [ 51 ]: np . random . choice ( my_list , 2 , replace = False , p = [ 0.1 , 0.7 , 0.1 , 0.1 ]) Out [ 51 ]: array ([ 'b' , 'd' ], dtype = '<U1' ) In [ 52 ]: np . random . choice ( my_list , ( 3 , 3 )) Out [ 52 ]: array ([[ 'b' , 'a' , 'b' ], [ 'b' , 'c' , 'c' ], [ 'd' , 'a' , 'b' ]], dtype = '<U1' ) \u5f53\u8fd4\u56de\u7684\u5143\u7d20\u4e2a\u6570\u4e0e\u539f\u5217\u8868\u76f8\u540c\u65f6\uff0c\u4e0d\u653e\u56de\u62bd\u6837\u7b49\u4ef7\u4e8e\u4f7f\u7528 permutation \u51fd\u6570\uff0c\u5373\u6253\u6563\u539f\u5217\u8868\uff1a In [ 53 ]: np . random . permutation ( my_list ) Out [ 53 ]: array ([ 'b' , 'a' , 'd' , 'c' ], dtype = '<U1' ) \u6700\u540e\uff0c\u9700\u8981\u63d0\u5230\u7684\u662f\u968f\u673a\u79cd\u5b50\uff0c\u5b83\u80fd\u591f\u56fa\u5b9a\u968f\u673a\u6570\u7684\u8f93\u51fa\u7ed3\u679c\uff1a In [ 54 ]: np . random . seed ( 0 ) In [ 55 ]: np . random . rand () Out [ 55 ]: 0.5488135039273248 In [ 56 ]: np . random . seed ( 0 ) In [ 57 ]: np . random . rand () Out [ 57 ]: 0.5488135039273248","title":"1. np \u6570\u7ec4\u7684\u6784\u9020"},{"location":"pandas/part1/#2-np","text":"\u3010a\u3011\u8f6c\u7f6e\uff1a T In [ 58 ]: np . zeros (( 2 , 3 )) . T Out [ 58 ]: array ([[ 0. , 0. ], [ 0. , 0. ], [ 0. , 0. ]]) \u3010b\u3011\u5408\u5e76\u64cd\u4f5c\uff1a r_, c_ \u5bf9\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u800c\u8a00\uff0c r_ \u548c c_ \u5206\u522b\u8868\u793a\u4e0a\u4e0b\u5408\u5e76\u548c\u5de6\u53f3\u5408\u5e76\uff1a In [ 59 ]: np . r_ [ np . zeros (( 2 , 3 )), np . zeros (( 2 , 3 ))] Out [ 59 ]: array ([[ 0. , 0. , 0. ], [ 0. , 0. , 0. ], [ 0. , 0. , 0. ], [ 0. , 0. , 0. ]]) In [ 60 ]: np . c_ [ np . zeros (( 2 , 3 )), np . zeros (( 2 , 3 ))] Out [ 60 ]: array ([[ 0. , 0. , 0. , 0. , 0. , 0. ], [ 0. , 0. , 0. , 0. , 0. , 0. ]]) \u4e00\u7ef4\u6570\u7ec4\u548c\u4e8c\u7ef4\u6570\u7ec4\u8fdb\u884c\u5408\u5e76\u65f6\uff0c\u5e94\u5f53\u628a\u5176\u89c6\u4f5c\u5217\u5411\u91cf\uff0c\u5728\u957f\u5ea6\u5339\u914d\u7684\u60c5\u51b5\u4e0b\u53ea\u80fd\u591f\u4f7f\u7528\u5de6\u53f3\u5408\u5e76\u7684 c_ \u64cd\u4f5c\uff1a In [ 61 ]: try : .... : np . r_ [ np . array ([ 0 , 0 ]), np . zeros (( 2 , 1 ))] .... : except Exception as e : .... : Err_Msg = e .... : In [ 62 ]: Err_Msg Out [ 62 ]: ValueError ( 'all the input arrays must have same number of dimensions, but the array at index 0 has 1 dimension(s) and the array at index 1 has 2 dimension(s)' ) In [ 63 ]: np . r_ [ np . array ([ 0 , 0 ]), np . zeros ( 2 )] Out [ 63 ]: array ([ 0. , 0. , 0. , 0. ]) In [ 64 ]: np . c_ [ np . array ([ 0 , 0 ]), np . zeros (( 2 , 3 ))] Out [ 64 ]: array ([[ 0. , 0. , 0. , 0. ], [ 0. , 0. , 0. , 0. ]]) \u3010c\u3011\u7ef4\u5ea6\u53d8\u6362\uff1a reshape reshape \u80fd\u591f\u5e2e\u52a9\u7528\u6237\u628a\u539f\u6570\u7ec4\u6309\u7167\u65b0\u7684\u7ef4\u5ea6\u91cd\u65b0\u6392\u5217\u3002\u5728\u4f7f\u7528\u65f6\u6709\u4e24\u79cd\u6a21\u5f0f\uff0c\u5206\u522b\u4e3a C \u6a21\u5f0f\u548c F \u6a21\u5f0f\uff0c\u5206\u522b\u4ee5\u9010\u884c\u548c\u9010\u5217\u7684\u987a\u5e8f\u8fdb\u884c\u586b\u5145\u8bfb\u53d6\u3002 In [ 65 ]: target = np . arange ( 8 ) . reshape ( 2 , 4 ) In [ 66 ]: target Out [ 66 ]: array ([[ 0 , 1 , 2 , 3 ], [ 4 , 5 , 6 , 7 ]]) In [ 67 ]: target . reshape (( 4 , 2 ), order = 'C' ) # \u6309\u7167\u884c\u8bfb\u53d6\u548c\u586b\u5145 Out [ 67 ]: array ([[ 0 , 1 ], [ 2 , 3 ], [ 4 , 5 ], [ 6 , 7 ]]) In [ 68 ]: target . reshape (( 4 , 2 ), order = 'F' ) # \u6309\u7167\u5217\u8bfb\u53d6\u548c\u586b\u5145 Out [ 68 ]: array ([[ 0 , 2 ], [ 4 , 6 ], [ 1 , 3 ], [ 5 , 7 ]]) \u7279\u522b\u5730\uff0c\u7531\u4e8e\u88ab\u8c03\u7528\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u786e\u5b9a\u7684\uff0c reshape \u5141\u8bb8\u6709\u4e00\u4e2a\u7ef4\u5ea6\u5b58\u5728\u7a7a\u7f3a\uff0c\u6b64\u65f6\u53ea\u9700\u586b\u5145 - 1 \u5373\u53ef\uff1a In [ 69 ]: target . reshape (( 4 , - 1 )) Out [ 69 ]: array ([[ 0 , 1 ], [ 2 , 3 ], [ 4 , 5 ], [ 6 , 7 ]]) \u4e0b\u9762\u5c06 n*1 \u5927\u5c0f\u7684\u6570\u7ec4\u8f6c\u4e3a 1 \u7ef4\u6570\u7ec4\u7684\u64cd\u4f5c\u662f\u7ecf\u5e38\u4f7f\u7528\u7684\uff1a In [ 70 ]: target = np . ones (( 3 , 1 )) In [ 71 ]: target Out [ 71 ]: array ([[ 1. ], [ 1. ], [ 1. ]]) In [ 72 ]: target . reshape ( - 1 ) Out [ 72 ]: array ([ 1. , 1. , 1. ])","title":"2. np \u6570\u7ec4\u7684\u53d8\u5f62\u4e0e\u5408\u5e76"},{"location":"pandas/part1/#3-np","text":"\u6570\u7ec4\u7684\u5207\u7247\u6a21\u5f0f\u652f\u6301\u4f7f\u7528 slice \u7c7b\u578b\u7684 start:end:step \u5207\u7247\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u4f20\u5165\u5217\u8868\u6307\u5b9a\u67d0\u4e2a\u7ef4\u5ea6\u7684\u7d22\u5f15\u8fdb\u884c\u5207\u7247\uff1a In [ 73 ]: target = np . arange ( 9 ) . reshape ( 3 , 3 ) In [ 74 ]: target Out [ 74 ]: array ([[ 0 , 1 , 2 ], [ 3 , 4 , 5 ], [ 6 , 7 , 8 ]]) In [ 75 ]: target [: - 1 , [ 0 , 2 ]] Out [ 75 ]: array ([[ 0 , 2 ], [ 3 , 5 ]]) \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u5229\u7528 np.ix_ \u5728\u5bf9\u5e94\u7684\u7ef4\u5ea6\u4e0a\u4f7f\u7528\u5e03\u5c14\u7d22\u5f15\uff0c\u4f46\u6b64\u65f6\u4e0d\u80fd\u4f7f\u7528 slice \u5207\u7247\uff1a In [ 76 ]: target [ np . ix_ ([ True , False , True ], [ True , False , True ])] Out [ 76 ]: array ([[ 0 , 2 ], [ 6 , 8 ]]) In [ 77 ]: target [ np . ix_ ([ 1 , 2 ], [ True , False , True ])] Out [ 77 ]: array ([[ 3 , 5 ], [ 6 , 8 ]]) \u5f53\u6570\u7ec4\u7ef4\u5ea6\u4e3a 1 \u7ef4\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5e03\u5c14\u7d22\u5f15\uff0c\u800c\u65e0\u9700 np.ix_ \uff1a In [ 78 ]: new = target . reshape ( - 1 ) In [ 79 ]: new [ new % 2 == 0 ] Out [ 79 ]: array ([ 0 , 2 , 4 , 6 , 8 ])","title":"3. np \u6570\u7ec4\u7684\u5207\u7247\u4e0e\u7d22\u5f15"},{"location":"pandas/part1/#4","text":"\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u8fd9\u91cc\u5047\u8bbe\u4e0b\u8ff0\u51fd\u6570\u8f93\u5165\u7684\u6570\u7ec4\u90fd\u662f\u4e00\u7ef4\u7684\u3002 \u3010a\u3011 where where \u662f\u4e00\u79cd\u6761\u4ef6\u51fd\u6570\uff0c\u53ef\u4ee5\u6307\u5b9a\u6ee1\u8db3\u6761\u4ef6\u4e0e\u4e0d\u6ee1\u8db3\u6761\u4ef6\u4f4d\u7f6e\u5bf9\u5e94\u7684\u586b\u5145\u503c\uff1a In [ 80 ]: a = np . array ([ - 1 , 1 , - 1 , 0 ]) In [ 81 ]: np . where ( a > 0 , a , 5 ) # \u5bf9\u5e94\u4f4d\u7f6e\u4e3aTrue\u65f6\u586b\u5145a\u5bf9\u5e94\u5143\u7d20\uff0c\u5426\u5219\u586b\u51455 Out [ 81 ]: array ([ 5 , 1 , 5 , 5 ]) \u3010b\u3011 nonzero, argmax, argmin \u8fd9\u4e09\u4e2a\u51fd\u6570\u8fd4\u56de\u7684\u90fd\u662f\u7d22\u5f15\uff0c nonzero \u8fd4\u56de\u975e\u96f6\u6570\u7684\u7d22\u5f15\uff0c argmax, argmin \u5206\u522b\u8fd4\u56de\u6700\u5927\u548c\u6700\u5c0f\u6570\u7684\u7d22\u5f15\uff1a In [ 82 ]: a = np . array ([ - 2 , - 5 , 0 , 1 , 3 , - 1 ]) In [ 83 ]: np . nonzero ( a ) Out [ 83 ]: ( array ([ 0 , 1 , 3 , 4 , 5 ], dtype = int64 ),) In [ 84 ]: a . argmax () Out [ 84 ]: 4 In [ 85 ]: a . argmin () Out [ 85 ]: 1 \u3010c\u3011 any, all any \u6307\u5f53\u5e8f\u5217\u81f3\u5c11 \u5b58\u5728\u4e00\u4e2a True \u6216\u975e\u96f6\u5143\u7d20\u65f6\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False all \u6307\u5f53\u5e8f\u5217\u5143\u7d20 \u5168\u4e3a True \u6216\u975e\u96f6\u5143\u7d20\u65f6\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False In [ 86 ]: a = np . array ([ 0 , 1 ]) In [ 87 ]: a . any () Out [ 87 ]: True In [ 88 ]: a . all () Out [ 88 ]: False \u3010d\u3011 cumprod, cumsum, diff cumprod, cumsum \u5206\u522b\u8868\u793a\u7d2f\u4e58\u548c\u7d2f\u52a0\u51fd\u6570\uff0c\u8fd4\u56de\u540c\u957f\u5ea6\u7684\u6570\u7ec4\uff0c diff \u8868\u793a\u548c\u524d\u4e00\u4e2a\u5143\u7d20\u505a\u5dee\uff0c\u7531\u4e8e\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a\u7f3a\u5931\u503c\uff0c\u56e0\u6b64\u5728\u9ed8\u8ba4\u53c2\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd4\u56de\u957f\u5ea6\u662f\u539f\u6570\u7ec4\u51cf 1 In [ 89 ]: a = np . array ([ 1 , 2 , 3 ]) In [ 90 ]: a . cumprod () Out [ 90 ]: array ([ 1 , 2 , 6 ]) In [ 91 ]: a . cumsum () Out [ 91 ]: array ([ 1 , 3 , 6 ]) In [ 92 ]: np . diff ( a ) Out [ 92 ]: array ([ 1 , 1 ]) \u3010e\u3011 \u7edf\u8ba1\u51fd\u6570 \u5e38\u7528\u7684\u7edf\u8ba1\u51fd\u6570\u5305\u62ec max, min, mean, median, std, var, sum, quantile \uff0c\u5176\u4e2d\u5206\u4f4d\u6570\u8ba1\u7b97\u662f\u5168\u5c40\u65b9\u6cd5\uff0c\u56e0\u6b64\u4e0d\u80fd\u901a\u8fc7 array.quantile \u7684\u65b9\u6cd5\u8c03\u7528\uff1a In [ 93 ]: target = np . arange ( 5 ) In [ 94 ]: target Out [ 94 ]: array ([ 0 , 1 , 2 , 3 , 4 ]) In [ 95 ]: target . max () Out [ 95 ]: 4 In [ 96 ]: np . quantile ( target , 0.5 ) # 0.5\u5206\u4f4d\u6570 Out [ 96 ]: 2.0 \u4f46\u662f\u5bf9\u4e8e\u542b\u6709\u7f3a\u5931\u503c\u7684\u6570\u7ec4\uff0c\u5b83\u4eec\u8fd4\u56de\u7684\u7ed3\u679c\u4e5f\u662f\u7f3a\u5931\u503c\uff0c\u5982\u679c\u9700\u8981\u7565\u8fc7\u7f3a\u5931\u503c\uff0c\u5fc5\u987b\u4f7f\u7528 nan* \u7c7b\u578b\u7684\u51fd\u6570\uff0c\u4e0a\u8ff0\u7684\u51e0\u4e2a\u7edf\u8ba1\u51fd\u6570\u90fd\u6709\u5bf9\u5e94\u7684 nan* \u51fd\u6570\u3002 In [ 97 ]: target = np . array ([ 1 , 2 , np . nan ]) In [ 98 ]: target Out [ 98 ]: array ([ 1. , 2. , nan ]) In [ 99 ]: target . max () Out [ 99 ]: nan In [ 100 ]: np . nanmax ( target ) Out [ 100 ]: 2.0 In [ 101 ]: np . nanquantile ( target , 0.5 ) Out [ 101 ]: 1.5 \u5bf9\u4e8e\u534f\u65b9\u5dee\u548c\u76f8\u5173\u7cfb\u6570\u5206\u522b\u53ef\u4ee5\u5229\u7528 cov, corrcoef \u5982\u4e0b\u8ba1\u7b97\uff1a In [ 102 ]: target1 = np . array ([ 1 , 3 , 5 , 9 ]) In [ 103 ]: target2 = np . array ([ 1 , 5 , 3 , - 9 ]) In [ 104 ]: np . cov ( target1 , target2 ) Out [ 104 ]: array ([[ 11.66666667 , - 16.66666667 ], [ - 16.66666667 , 38.66666667 ]]) In [ 105 ]: np . corrcoef ( target1 , target2 ) Out [ 105 ]: array ([[ 1. , - 0.78470603 ], [ - 0.78470603 , 1. ]]) \u6700\u540e\uff0c\u9700\u8981\u8bf4\u660e\u4e8c\u7ef4 Numpy \u6570\u7ec4\u4e2d\u7edf\u8ba1\u51fd\u6570\u7684 axis \u53c2\u6570\uff0c\u5b83\u80fd\u591f\u8fdb\u884c\u67d0\u4e00\u4e2a\u7ef4\u5ea6\u4e0b\u7684\u7edf\u8ba1\u7279\u5f81\u8ba1\u7b97\uff0c\u5f53 axis=0 \u65f6\u7ed3\u679c\u4e3a\u5217\u7684\u7edf\u8ba1\u6307\u6807\uff0c\u5f53 axis=1 \u65f6\u7ed3\u679c\u4e3a\u884c\u7684\u7edf\u8ba1\u6307\u6807\uff1a In [ 106 ]: target = np . arange ( 1 , 10 ) . reshape ( 3 , - 1 ) In [ 107 ]: target Out [ 107 ]: array ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]]) In [ 108 ]: target . sum ( 0 ) Out [ 108 ]: array ([ 12 , 15 , 18 ]) In [ 109 ]: target . sum ( 1 ) Out [ 109 ]: array ([ 6 , 15 , 24 ])","title":"4. \u5e38\u7528\u51fd\u6570"},{"location":"pandas/part1/#5","text":"\u5e7f\u64ad\u673a\u5236\u7528\u4e8e\u5904\u7406\u4e24\u4e2a\u4e0d\u540c\u7ef4\u5ea6\u6570\u7ec4\u4e4b\u95f4\u7684\u64cd\u4f5c\uff0c\u8fd9\u91cc\u53ea\u8ba8\u8bba\u4e0d\u8d85\u8fc7\u4e24\u7ef4\u7684\u6570\u7ec4\u5e7f\u64ad\u673a\u5236\u3002 \u3010a\u3011\u6807\u91cf\u548c\u6570\u7ec4\u7684\u64cd\u4f5c \u5f53\u4e00\u4e2a\u6807\u91cf\u548c\u6570\u7ec4\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u6807\u91cf\u4f1a\u81ea\u52a8\u628a\u5927\u5c0f\u6269\u5145\u4e3a\u6570\u7ec4\u5927\u5c0f\uff0c\u4e4b\u540e\u8fdb\u884c\u9010\u5143\u7d20\u64cd\u4f5c\uff1a In [ 110 ]: res = 3 * np . ones (( 2 , 2 )) + 1 In [ 111 ]: res Out [ 111 ]: array ([[ 4. , 4. ], [ 4. , 4. ]]) In [ 112 ]: res = 1 / res In [ 113 ]: res Out [ 113 ]: array ([[ 0.25 , 0.25 ], [ 0.25 , 0.25 ]]) \u3010b\u3011\u4e8c\u7ef4\u6570\u7ec4\u4e4b\u95f4\u7684\u64cd\u4f5c \u5f53\u4e24\u4e2a\u6570\u7ec4\u7ef4\u5ea6\u5b8c\u5168\u4e00\u81f4\u65f6\uff0c\u4f7f\u7528\u5bf9\u5e94\u5143\u7d20\u7684\u64cd\u4f5c\uff0c\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u9664\u975e\u5176\u4e2d\u7684\u67d0\u4e2a\u6570\u7ec4\u7684\u7ef4\u5ea6\u662f \u6216\u8005 \uff0c\u90a3\u4e48\u4f1a\u6269\u5145\u5176\u5177\u6709 \u7684\u7ef4\u5ea6\u4e3a\u53e6\u4e00\u4e2a\u6570\u7ec4\u5bf9\u5e94\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002\u4f8b\u5982\uff0c \u6570\u7ec4\u548c \u6570\u7ec4\u505a\u9010\u5143\u7d20\u8fd0\u7b97\u65f6\u4f1a\u628a\u7b2c\u4e00\u4e2a\u6570\u7ec4\u6269\u5145\u4e3a \uff0c\u6269\u5145\u65f6\u7684\u5bf9\u5e94\u6570\u503c\u8fdb\u884c\u8d4b\u503c\u3002\u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u7ec4\u7684\u7ef4\u5ea6\u662f \uff0c\u90a3\u4e48\u7531\u4e8e\u5728\u7b2c\u4e8c\u7ef4\u4e0a\u7684\u5927\u5c0f\u4e0d\u5339\u914d\u4e14\u4e0d\u4e3a \uff0c\u6b64\u65f6\u62a5\u9519\u3002 In [ 114 ]: res = np . ones (( 3 , 2 )) In [ 115 ]: res Out [ 115 ]: array ([[ 1. , 1. ], [ 1. , 1. ], [ 1. , 1. ]]) In [ 116 ]: res * np . array ([[ 2 , 3 ]]) # \u7b2c\u4e8c\u4e2a\u6570\u7ec4\u6269\u5145\u7b2c\u4e00\u7ef4\u5ea6\u4e3a3 Out [ 116 ]: array ([[ 2. , 3. ], [ 2. , 3. ], [ 2. , 3. ]]) In [ 117 ]: res * np . array ([[ 2 ],[ 3 ],[ 4 ]]) # \u7b2c\u4e8c\u4e2a\u6570\u7ec4\u6269\u5145\u7b2c\u4e8c\u7ef4\u5ea6\u4e3a2 Out [ 117 ]: array ([[ 2. , 2. ], [ 3. , 3. ], [ 4. , 4. ]]) In [ 118 ]: res * np . array ([[ 2 ]]) # \u7b49\u4ef7\u4e8e\u4e24\u6b21\u6269\u5145\uff0c\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e24\u4e2a\u7ef4\u5ea6\u5206\u522b\u6269\u5145\u4e3a3\u548c2 Out [ 118 ]: array ([[ 2. , 2. ], [ 2. , 2. ], [ 2. , 2. ]]) \u3010c\u3011\u4e00\u7ef4\u6570\u7ec4\u4e0e\u4e8c\u7ef4\u6570\u7ec4\u7684\u64cd\u4f5c \u5f53\u4e00\u7ef4\u6570\u7ec4 \u4e0e\u4e8c\u7ef4\u6570\u7ec4 \u64cd\u4f5c\u65f6\uff0c\u7b49\u4ef7\u4e8e\u628a\u4e00\u7ef4\u6570\u7ec4\u89c6\u4f5c \u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u4f7f\u7528\u7684\u5e7f\u64ad\u6cd5\u5219\u4e0e\u3010b\u3011\u4e2d\u4e00\u81f4\uff0c\u5f53 \u4e14 \u90fd\u4e0d\u662f \u65f6\u62a5\u9519\u3002 In [ 119 ]: np . ones ( 3 ) + np . ones (( 2 , 3 )) Out [ 119 ]: array ([[ 2. , 2. , 2. ], [ 2. , 2. , 2. ]]) In [ 120 ]: np . ones ( 3 ) + np . ones (( 2 , 1 )) Out [ 120 ]: array ([[ 2. , 2. , 2. ], [ 2. , 2. , 2. ]]) In [ 121 ]: np . ones ( 1 ) + np . ones (( 2 , 3 )) Out [ 121 ]: array ([[ 2. , 2. , 2. ], [ 2. , 2. , 2. ]])","title":"5. \u5e7f\u64ad\u673a\u5236"},{"location":"pandas/part1/#6","text":"\u3010a\u3011\u5411\u91cf\u5185\u79ef\uff1a dot In [ 122 ]: a = np . array ([ 1 , 2 , 3 ]) In [ 123 ]: b = np . array ([ 1 , 3 , 5 ]) In [ 124 ]: a . dot ( b ) Out [ 124 ]: 22 \u3010b\u3011\u5411\u91cf\u8303\u6570\u548c\u77e9\u9635\u8303\u6570\uff1a np.linalg.norm \u5728\u77e9\u9635\u8303\u6570\u7684\u8ba1\u7b97\u4e2d\uff0c\u6700\u91cd\u8981\u7684\u662f ord \u53c2\u6570\uff0c\u53ef\u9009\u503c\u5982\u4e0b\uff1a ord norm for matrices norm for vectors None Frobenius norm 2-norm fro Frobenius norm \u2013 nuc nuclear norm \u2013 inf max(sum(abs(x), axis=1)) max(abs(x)) -inf min(sum(abs(x), axis=1)) min(abs(x)) 0 \u2013 sum(x != 0) 1 max(sum(abs(x), axis=0)) as below -1 min(sum(abs(x), axis=0)) as below 2 2-norm (largest sing. value) as below -2 smallest singular value as below other \u2013 sum(abs(x)**ord)**(1./ord) In [ 125 ]: matrix_target = np . arange ( 4 ) . reshape ( - 1 , 2 ) In [ 126 ]: matrix_target Out [ 126 ]: array ([[ 0 , 1 ], [ 2 , 3 ]]) In [ 127 ]: np . linalg . norm ( matrix_target , 'fro' ) Out [ 127 ]: 3.7416573867739413 In [ 128 ]: np . linalg . norm ( matrix_target , np . inf ) Out [ 128 ]: 5.0 In [ 129 ]: np . linalg . norm ( matrix_target , 2 ) Out [ 129 ]: 3.702459173643833 In [ 130 ]: vector_target = np . arange ( 4 ) In [ 131 ]: vector_target Out [ 131 ]: array ([ 0 , 1 , 2 , 3 ]) In [ 132 ]: np . linalg . norm ( vector_target , np . inf ) Out [ 132 ]: 3.0 In [ 133 ]: np . linalg . norm ( vector_target , 2 ) Out [ 133 ]: 3.7416573867739413 In [ 134 ]: np . linalg . norm ( vector_target , 3 ) Out [ 134 ]: 3.3019272488946263 \u3010c\u3011\u77e9\u9635\u4e58\u6cd5\uff1a @ In [ 135 ]: a = np . arange ( 4 ) . reshape ( - 1 , 2 ) In [ 136 ]: a Out [ 136 ]: array ([[ 0 , 1 ], [ 2 , 3 ]]) In [ 137 ]: b = np . arange ( - 4 , 0 ) . reshape ( - 1 , 2 ) In [ 138 ]: b Out [ 138 ]: array ([[ - 4 , - 3 ], [ - 2 , - 1 ]]) In [ 139 ]: a @b Out [ 139 ]: array ([[ - 2 , - 1 ], [ - 14 , - 9 ]])","title":"6. \u5411\u91cf\u4e0e\u77e9\u9635\u7684\u8ba1\u7b97"},{"location":"pandas/part1/#_1","text":"","title":"\u4e09\u3001\u7ec3\u4e60"},{"location":"pandas/part1/#ex1","text":"\u4e00\u822c\u7684\u77e9\u9635\u4e58\u6cd5\u6839\u636e\u516c\u5f0f\uff0c\u53ef\u4ee5\u7531\u4e09\u91cd\u5faa\u73af\u5199\u51fa\uff1a In [ 140 ]: M1 = np . random . rand ( 2 , 3 ) In [ 141 ]: M2 = np . random . rand ( 3 , 4 ) In [ 142 ]: res = np . empty (( M1 . shape [ 0 ], M2 . shape [ 1 ])) In [ 143 ]: for i in range ( M1 . shape [ 0 ]): ..... : for j in range ( M2 . shape [ 1 ]): ..... : item = 0 ..... : for k in range ( M1 . shape [ 1 ]): ..... : item += M1 [ i ][ k ] * M2 [ k ][ j ] ..... : res [ i ][ j ] = item ..... : In [ 144 ]: ( np . abs (( M1 @M2 - res ) < 1e-15 )) . all () # \u6392\u9664\u6570\u503c\u8bef\u5dee Out [ 144 ]: True \u8bf7\u5c06\u5176\u6539\u5199\u4e3a\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u5f62\u5f0f\u3002","title":"Ex1\uff1a\u5229\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u5199\u77e9\u9635\u4e58\u6cd5"},{"location":"pandas/part1/#ex2","text":"\u8bbe\u77e9\u9635 \uff0c\u73b0\u5728\u5bf9 \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u66f4\u65b0\u751f\u6210\u77e9\u9635 \uff0c\u66f4\u65b0\u65b9\u6cd5\u662f \uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u77e9\u9635\u4e3a \uff0c\u5219 \uff0c\u8bf7\u5229\u7528 Numpy \u9ad8\u6548\u5b9e\u73b0\u3002","title":"Ex2\uff1a\u66f4\u65b0\u77e9\u9635"},{"location":"pandas/part1/#ex3","text":"\u8bbe\u77e9\u9635 \uff0c\u8bb0 \uff0c\u5b9a\u4e49\u5361\u65b9\u503c\u5982\u4e0b\uff1a \u8bf7\u5229\u7528 Numpy \u5bf9\u7ed9\u5b9a\u7684\u77e9\u9635 \u8ba1\u7b97 \u3002 In [ 145 ]: np . random . seed ( 0 ) In [ 146 ]: A = np . random . randint ( 10 , 20 , ( 8 , 5 ))","title":"Ex3\uff1a\u5361\u65b9\u7edf\u8ba1\u91cf"},{"location":"pandas/part1/#ex4","text":"\u8bbe \u4e3a \u7684\u77e9\u9635\uff0c \u548c \u5206\u522b\u662f \u548c \u7684\u77e9\u9635\uff0c \u4e3a \u7684\u7b2c \u884c\uff0c \u4e3a \u7684\u7b2c \u5217\uff0c\u4e0b\u9762\u5b9a\u4e49 \uff0c\u5176\u4e2d \u8868\u793a\u5411\u91cf \u7684\u5206\u91cf\u5e73\u65b9\u548c \u3002 \u73b0\u6709\u67d0\u4eba\u6839\u636e\u5982\u4e0b\u7ed9\u5b9a\u7684\u6837\u4f8b\u6570\u636e\u8ba1\u7b97 \u7684\u503c\uff0c\u8bf7\u5145\u5206\u5229\u7528 Numpy \u4e2d\u7684\u51fd\u6570\uff0c\u57fa\u4e8e\u6b64\u95ee\u9898\u6539\u8fdb\u8fd9\u6bb5\u4ee3\u7801\u7684\u6027\u80fd\u3002 In [ 147 ]: np . random . seed ( 0 ) In [ 148 ]: m , n , p = 100 , 80 , 50 In [ 149 ]: B = np . random . randint ( 0 , 2 , ( m , p )) In [ 150 ]: U = np . random . randint ( 0 , 2 , ( p , n )) In [ 151 ]: Z = np . random . randint ( 0 , 2 , ( m , n )) In [ 152 ]: def solution ( B = B , U = U , Z = Z ): ..... : L_res = [] ..... : for i in range ( m ): ..... : for j in range ( n ): ..... : norm_value = (( B [ i ] - U [:, j ]) ** 2 ) . sum () ..... : L_res . append ( norm_value * Z [ i ][ j ]) ..... : return sum ( L_res ) ..... : In [ 153 ]: solution ( B , U , Z ) Out [ 153 ]: 100566","title":"Ex4\uff1a\u6539\u8fdb\u77e9\u9635\u8ba1\u7b97\u7684\u6027\u80fd"},{"location":"pandas/part1/#ex5","text":"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u7684 Numpy \u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u4e2d\u4e25\u683c\u9012\u589e\u8fde\u7eed\u6574\u6570\u5b50\u6570\u7ec4\u7684\u6700\u5927\u957f\u5ea6\u3002\u4f8b\u5982\uff0c\u8f93\u5165 [1,2,5,6,7]\uff0c[5,6,7]\u4e3a\u5177\u6709\u6700\u5927\u957f\u5ea6\u7684\u9012\u589e\u8fde\u7eed\u6574\u6570\u5b50\u6570\u7ec4\uff0c\u56e0\u6b64\u8f93\u51fa 3\uff1b\u8f93\u5165 [3,2,1,2,3,4,6]\uff0c[1,2,3,4] \u4e3a\u5177\u6709\u6700\u5927\u957f\u5ea6\u7684\u9012\u589e\u8fde\u7eed\u6574\u6570\u5b50\u6570\u7ec4\uff0c\u56e0\u6b64\u8f93\u51fa 4\u3002\u8bf7\u5145\u5206\u5229\u7528 Numpy \u7684\u5185\u7f6e\u51fd\u6570\u5b8c\u6210\u3002\uff08\u63d0\u793a\uff1a\u8003\u8651\u4f7f\u7528 nonzero, diff \u51fd\u6570\uff09","title":"Ex5\uff1a\u8fde\u7eed\u6574\u6570\u7684\u6700\u5927\u957f\u5ea6"},{"location":"pandas/part10/","text":"In [ 1 ]: import numpy as np In [ 2 ]: import pandas as pd \u4e00\u3001\u65f6\u5e8f\u4e2d\u7684\u57fa\u672c\u5bf9\u8c61 \u65f6\u95f4\u5e8f\u5217\u7684\u6982\u5ff5\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\u5341\u5206\u5e38\u89c1\uff0c\u4f46\u5bf9\u4e8e\u4e00\u4e2a\u5177\u4f53\u7684\u65f6\u5e8f\u4e8b\u4ef6\u800c\u8a00\uff0c\u53ef\u4ee5\u4ece\u591a\u4e2a\u65f6\u95f4\u5bf9\u8c61\u7684\u89d2\u5ea6\u6765\u63cf\u8ff0\u3002\u4f8b\u5982 2020 \u5e74 9 \u6708 7 \u65e5\u5468\u4e00\u65e9\u4e0a 8 \u70b9\u6574\u9700\u8981\u5230\u6559\u5ba4\u4e0a\u8bfe\uff0c\u8fd9\u4e2a\u8bfe\u4f1a\u5728\u5f53\u5929\u65e9\u4e0a 10 \u70b9\u7ed3\u675f\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u54ea\u4e9b\u65f6\u95f4\u6982\u5ff5\uff1f \u7b2c\u4e00\uff0c\u4f1a\u51fa\u73b0\u65f6\u95f4\u6233\uff08Date times\uff09\u7684\u6982\u5ff5\uff0c\u5373\u20192020-9-7 08:00:00\u2019\u548c\u20192020-9-7 10:00:00\u2019\u8fd9\u4e24\u4e2a\u65f6\u95f4\u70b9\u5206\u522b\u4ee3\u8868\u4e86\u4e0a\u8bfe\u548c\u4e0b\u8bfe\u7684\u65f6\u523b\uff0c\u5728 pandas \u4e2d\u79f0\u4e3a Timestamp \u3002\u540c\u65f6\uff0c\u4e00\u7cfb\u5217\u7684\u65f6\u95f4\u6233\u53ef\u4ee5\u7ec4\u6210 DatetimeIndex \uff0c\u800c\u5c06\u5b83\u653e\u5230 Series \u4e2d\u540e\uff0c Series \u7684\u7c7b\u578b\u5c31\u53d8\u4e3a\u4e86 datetime64[ns] \uff0c\u5982\u679c\u6709\u6d89\u53ca\u65f6\u533a\u5219\u4e3a datetime64[ns, tz] \uff0c\u5176\u4e2d tz \u662f timezone \u7684\u7b80\u5199\u3002 \u7b2c\u4e8c\uff0c\u4f1a\u51fa\u73b0\u65f6\u95f4\u5dee\uff08Time deltas\uff09\u7684\u6982\u5ff5\uff0c\u5373\u4e0a\u8bfe\u9700\u8981\u7684\u65f6\u95f4\uff0c\u4e24\u4e2a Timestamp \u505a\u5dee\u5c31\u5f97\u5230\u4e86\u65f6\u95f4\u5dee\uff0cpandas \u4e2d\u5229\u7528 Timedelta \u6765\u8868\u793a\u3002\u7c7b\u4f3c\u7684\uff0c\u4e00\u7cfb\u5217\u7684\u65f6\u95f4\u5dee\u5c31\u7ec4\u6210\u4e86 TimedeltaIndex \uff0c \u800c\u5c06\u5b83\u653e\u5230 Series \u4e2d\u540e\uff0c Series \u7684\u7c7b\u578b\u5c31\u53d8\u4e3a\u4e86 timedelta64[ns] \u3002 \u7b2c\u4e09\uff0c\u4f1a\u51fa\u73b0\u65f6\u95f4\u6bb5\uff08Time spans\uff09\u7684\u6982\u5ff5\uff0c\u5373\u5728 8 \u70b9\u5230 10 \u70b9\u8fd9\u4e2a\u533a\u95f4\u90fd\u4f1a\u6301\u7eed\u5730\u5728\u4e0a\u8bfe\uff0c\u5728 pandas \u5229\u7528 Period \u6765\u8868\u793a\u3002\u7c7b\u4f3c\u7684\uff0c\u4e00\u7cfb\u5217\u7684\u65f6\u95f4\u6bb5\u5c31\u7ec4\u6210\u4e86 PeriodIndex \uff0c \u800c\u5c06\u5b83\u653e\u5230 Series \u4e2d\u540e\uff0c Series \u7684\u7c7b\u578b\u5c31\u53d8\u4e3a\u4e86 Period \u3002 \u7b2c\u56db\uff0c\u4f1a\u51fa\u73b0\u65e5\u671f\u504f\u7f6e\uff08Date offsets\uff09\u7684\u6982\u5ff5\uff0c\u5047\u8bbe\u4f60\u53ea\u77e5\u9053 9 \u6708\u7684\u7b2c\u4e00\u4e2a\u5468\u4e00\u65e9\u4e0a 8 \u70b9\u8981\u53bb\u4e0a\u8bfe\uff0c\u4f46\u4e0d\u77e5\u9053\u5177\u4f53\u7684\u65e5\u671f\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u4e00\u4e2a\u7c7b\u578b\u6765\u5904\u7406\u6b64\u7c7b\u9700\u6c42\u3002\u518d\u4f8b\u5982\uff0c\u60f3\u8981\u77e5\u9053 2020 \u5e74 9 \u6708 7 \u65e5\u540e\u7684\u7b2c 30 \u4e2a\u5de5\u4f5c\u65e5\u662f\u54ea\u4e00\u5929\uff0c\u90a3\u4e48\u65f6\u95f4\u5dee\u5c31\u89e3\u51b3\u4e0d\u4e86\u4f60\u7684\u95ee\u9898\uff0c\u4ece\u800c pandas \u4e2d\u7684 DateOffset \u5c31\u51fa\u73b0\u4e86\u3002\u540c\u65f6\uff0c pandas \u4e2d\u6ca1\u6709\u4e3a\u4e00\u5217\u65f6\u95f4\u504f\u7f6e\u4e13\u95e8\u8bbe\u8ba1\u5b58\u50a8\u7c7b\u578b\uff0c\u7406\u7531\u4e5f\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u9700\u6c42\u6bd4\u8f83\u5947\u602a\uff0c\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u4e00\u6279\u65f6\u95f4\u7279\u5f81\u505a\u4e00\u4e2a\u7edf\u4e00\u7684\u7279\u6b8a\u65e5\u671f\u504f\u7f6e\u3002 \u901a\u8fc7\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5c31\u80fd\u591f\u5bb9\u6613\u5730\u603b\u7ed3\u51fa\u5b98\u65b9\u6587\u6863\u4e2d\u7684\u8fd9\u4e2a \u8868\u683c \uff1a \u6982\u5ff5 \u5355\u5143\u7d20\u7c7b\u578b \u6570\u7ec4\u7c7b\u578b pandas \u6570\u636e\u7c7b\u578b Date times Timestamp DatetimeIndex datetime64[ns] Time deltas Timedelta TimedeltaIndex timedelta64[ns] Time spans Period PeriodIndex period[freq] Date offsets DateOffset None None \u7531\u4e8e\u65f6\u95f4\u6bb5\u5bf9\u8c61 Period/PeriodIndex \u7684\u4f7f\u7528\u9891\u7387\u5e76\u4e0d\u9ad8\uff0c\u56e0\u6b64\u5c06\u4e0d\u8fdb\u884c\u8bb2\u89e3\uff0c\u800c\u53ea\u6d89\u53ca\u65f6\u95f4\u6233\u5e8f\u5217\u3001\u65f6\u95f4\u5dee\u5e8f\u5217\u548c\u65e5\u671f\u504f\u7f6e\u7684\u76f8\u5173\u5185\u5bb9\u3002 \u4e8c\u3001\u65f6\u95f4\u6233 1. Timestamp \u7684\u6784\u9020\u4e0e\u5c5e\u6027 \u5355\u4e2a\u65f6\u95f4\u6233\u7684\u751f\u6210\u5229\u7528 pd.Timestamp \u5b9e\u73b0\uff0c\u4e00\u822c\u800c\u8a00\u7684\u5e38\u89c1\u65e5\u671f\u683c\u5f0f\u90fd\u80fd\u88ab\u6210\u529f\u5730\u8f6c\u6362\uff1a In [ 3 ]: ts = pd . Timestamp ( '2020/1/1' ) In [ 4 ]: ts Out [ 4 ]: Timestamp ( '2020-01-01 00:00:00' ) In [ 5 ]: ts = pd . Timestamp ( '2020-1-1 08:10:30' ) In [ 6 ]: ts Out [ 6 ]: Timestamp ( '2020-01-01 08:10:30' ) \u901a\u8fc7 year, month, day, hour, min, second \u53ef\u4ee5\u83b7\u53d6\u5177\u4f53\u7684\u6570\u503c\uff1a In [ 7 ]: ts . year Out [ 7 ]: 2020 In [ 8 ]: ts . month Out [ 8 ]: 1 In [ 9 ]: ts . day Out [ 9 ]: 1 In [ 10 ]: ts . hour Out [ 10 ]: 8 In [ 11 ]: ts . minute Out [ 11 ]: 10 In [ 12 ]: ts . second Out [ 12 ]: 30 \u5728 pandas \u4e2d\uff0c\u65f6\u95f4\u6233\u7684\u6700\u5c0f\u7cbe\u5ea6\u4e3a\u7eb3\u79d2 ns \uff0c\u7531\u4e8e\u4f7f\u7528\u4e86 64 \u4f4d\u5b58\u50a8\uff0c\u53ef\u4ee5\u8868\u793a\u7684\u65f6\u95f4\u8303\u56f4\u5927\u7ea6\u53ef\u4ee5\u5982\u4e0b\u8ba1\u7b97\uff1a \u901a\u8fc7 pd.Timestamp.max \u548c pd.Timestamp.min \u53ef\u4ee5\u83b7\u53d6\u65f6\u95f4\u6233\u8868\u793a\u7684\u8303\u56f4\uff0c\u53ef\u4ee5\u770b\u5230\u786e\u5b9e\u8868\u793a\u7684\u533a\u95f4\u5e74\u6570\u5927\u5c0f\u6b63\u5982\u4e0a\u8ff0\u8ba1\u7b97\u7ed3\u679c\uff1a In [ 13 ]: pd . Timestamp . max Out [ 13 ]: Timestamp ( '2262-04-11 23:47:16.854775807' ) In [ 14 ]: pd . Timestamp . min Out [ 14 ]: Timestamp ( '1677-09-21 00:12:43.145225' ) In [ 15 ]: pd . Timestamp . max . year - pd . Timestamp . min . year Out [ 15 ]: 585 2. Datetime \u5e8f\u5217\u7684\u751f\u6210 \u4e00\u7ec4\u65f6\u95f4\u6233\u53ef\u4ee5\u7ec4\u6210\u65f6\u95f4\u5e8f\u5217\uff0c\u53ef\u4ee5\u7528 to_datetime \u548c date_range \u6765\u751f\u6210\u3002\u5176\u4e2d\uff0c to_datetime \u80fd\u591f\u628a\u4e00\u5217\u65f6\u95f4\u6233\u683c\u5f0f\u7684\u5bf9\u8c61\u8f6c\u6362\u6210\u4e3a datetime64[ns] \u7c7b\u578b\u7684\u65f6\u95f4\u5e8f\u5217\uff1a In [ 16 ]: pd . to_datetime ([ '2020-1-1' , '2020-1-3' , '2020-1-6' ]) Out [ 16 ]: DatetimeIndex ([ '2020-01-01' , '2020-01-03' , '2020-01-06' ], dtype = 'datetime64[ns]' , freq = None ) In [ 17 ]: df = pd . read_csv ( 'data/learn_pandas.csv' ) In [ 18 ]: s = pd . to_datetime ( df . Test_Date ) In [ 19 ]: s . head () Out [ 19 ]: 0 2019 - 10 - 05 1 2019 - 09 - 04 2 2019 - 09 - 12 3 2020 - 01 - 03 4 2019 - 11 - 06 Name : Test_Date , dtype : datetime64 [ ns ] \u5728\u6781\u5c11\u6570\u60c5\u51b5\uff0c\u65f6\u95f4\u6233\u7684\u683c\u5f0f\u4e0d\u6ee1\u8db3\u8f6c\u6362\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u4f7f\u7528 format \u8fdb\u884c\u5339\u914d\uff1a In [ 20 ]: temp = pd . to_datetime ([ '2020 \\\\ 1 \\\\ 1' , '2020 \\\\ 1 \\\\ 3' ], format = '%Y \\\\ %m \\\\ %d ' ) In [ 21 ]: temp Out [ 21 ]: DatetimeIndex ([ '2020-01-01' , '2020-01-03' ], dtype = 'datetime64[ns]' , freq = None ) \u6ce8\u610f\u4e0a\u9762\u7531\u4e8e\u4f20\u5165\u7684\u662f\u5217\u8868\uff0c\u800c\u975e pandas \u5185\u90e8\u7684 Series \uff0c\u56e0\u6b64\u8fd4\u56de\u7684\u662f DatetimeIndex \uff0c\u5982\u679c\u60f3\u8981\u8f6c\u4e3a datetime64[ns] \u7684\u5e8f\u5217\uff0c\u9700\u8981\u663e\u5f0f\u7528 Series \u8f6c\u5316\uff1a In [ 22 ]: pd . Series ( temp ) . head () Out [ 22 ]: 0 2020 - 01 - 01 1 2020 - 01 - 03 dtype : datetime64 [ ns ] \u53e6\u5916\uff0c\u8fd8\u5b58\u5728\u4e00\u79cd\u628a\u8868\u7684\u591a\u5217\u65f6\u95f4\u5c5e\u6027\u62fc\u63a5\u8f6c\u4e3a\u65f6\u95f4\u5e8f\u5217\u7684 to_datetime \u64cd\u4f5c\uff0c\u6b64\u65f6\u7684\u5217\u540d\u5fc5\u987b\u548c\u4ee5\u4e0b\u7ed9\u5b9a\u7684\u65f6\u95f4\u5173\u952e\u8bcd\u5217\u540d\u4e00\u81f4\uff1a In [ 23 ]: df_date_cols = pd . DataFrame ({ 'year' : [ 2020 , 2020 ], .... : 'month' : [ 1 , 1 ], .... : 'day' : [ 1 , 2 ], .... : 'hour' : [ 10 , 20 ], .... : 'minute' : [ 30 , 50 ], .... : 'second' : [ 20 , 40 ]}) .... : In [ 24 ]: pd . to_datetime ( df_date_cols ) Out [ 24 ]: 0 2020 - 01 - 01 10 : 30 : 20 1 2020 - 01 - 02 20 : 50 : 40 dtype : datetime64 [ ns ] date_range \u662f\u4e00\u79cd\u751f\u6210\u8fde\u7eed\u95f4\u9694\u65f6\u95f4\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u5176\u91cd\u8981\u7684\u53c2\u6570\u4e3a start, end, freq, periods \uff0c\u5b83\u4eec\u5206\u522b\u8868\u793a\u5f00\u59cb\u65f6\u95f4\uff0c\u7ed3\u675f\u65f6\u95f4\uff0c\u65f6\u95f4\u95f4\u9694\uff0c\u65f6\u95f4\u6233\u4e2a\u6570\u3002\u5176\u4e2d\uff0c\u56db\u4e2a\u4e2d\u7684\u4e09\u4e2a\u53c2\u6570\u51b3\u5b9a\u4e86\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u4e00\u4e2a\u5c31\u968f\u4e4b\u786e\u5b9a\u4e86\u3002\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u5f00\u59cb\u6216\u7ed3\u675f\u65e5\u671f\u5982\u679c\u4f5c\u4e3a\u7aef\u70b9\u5219\u5b83\u4f1a\u88ab\u5305\u542b\uff1a In [ 25 ]: pd . date_range ( '2020-1-1' , '2020-1-21' , freq = '10D' ) # \u5305\u542b Out [ 25 ]: DatetimeIndex ([ '2020-01-01' , '2020-01-11' , '2020-01-21' ], dtype = 'datetime64[ns]' , freq = '10D' ) In [ 26 ]: pd . date_range ( '2020-1-1' , '2020-2-28' , freq = '10D' ) Out [ 26 ]: DatetimeIndex ([ '2020-01-01' , '2020-01-11' , '2020-01-21' , '2020-01-31' , '2020-02-10' , '2020-02-20' ], dtype = 'datetime64[ns]' , freq = '10D' ) In [ 27 ]: pd . date_range ( '2020-1-1' , .... : '2020-2-28' , periods = 6 ) # \u7531\u4e8e\u7ed3\u675f\u65e5\u671f\u65e0\u6cd5\u53d6\u5230\uff0cfreq\u4e0d\u4e3a10\u5929 .... : Out [ 27 ]: DatetimeIndex ([ '2020-01-01 00:00:00' , '2020-01-12 14:24:00' , '2020-01-24 04:48:00' , '2020-02-04 19:12:00' , '2020-02-16 09:36:00' , '2020-02-28 00:00:00' ], dtype = 'datetime64[ns]' , freq = None ) \u8fd9\u91cc\u7684 freq \u53c2\u6570\u4e0e DateOffset \u5bf9\u8c61\u7d27\u5bc6\u76f8\u5173\uff0c\u5c06\u5728\u7b2c\u56db\u8282\u4ecb\u7ecd\u5176\u5177\u4f53\u7684\u7528\u6cd5\u3002 \u7ec3\u4e00\u7ec3 Timestamp \u4e0a\u5b9a\u4e49\u4e86\u4e00\u4e2a value \u5c5e\u6027\uff0c\u5176\u8fd4\u56de\u7684\u6574\u6570\u503c\u4ee3\u8868\u4e86\u4ece 1970 \u5e74 1 \u6708 1 \u65e5\u96f6\u70b9\u5230\u7ed9\u5b9a\u65f6\u95f4\u6233\u76f8\u5dee\u7684\u7eb3\u79d2\u6570\uff0c\u8bf7\u5229\u7528\u8fd9\u4e2a\u5c5e\u6027\u6784\u9020\u4e00\u4e2a\u968f\u673a\u751f\u6210\u7ed9\u5b9a\u65e5\u671f\u533a\u95f4\u5185\u65e5\u671f\u5e8f\u5217\u7684\u51fd\u6570\u3002 \u6700\u540e\uff0c\u8981\u4ecb\u7ecd\u4e00\u79cd\u6539\u53d8\u5e8f\u5217\u91c7\u6837\u9891\u7387\u7684\u65b9\u6cd5 asfreq \uff0c\u5b83\u80fd\u591f\u6839\u636e\u7ed9\u5b9a\u7684 freq \u5bf9\u5e8f\u5217\u8fdb\u884c\u7c7b\u4f3c\u4e8e reindex \u7684\u64cd\u4f5c\uff1a In [ 28 ]: s = pd . Series ( np . random . rand ( 5 ), .... : index = pd . to_datetime ([ .... : '2020-1- %d ' % i for i in range ( 1 , 10 , 2 )])) .... : In [ 29 ]: s . head () Out [ 29 ]: 2020 - 01 - 01 0.836578 2020 - 01 - 03 0.678419 2020 - 01 - 05 0.711897 2020 - 01 - 07 0.487429 2020 - 01 - 09 0.604705 dtype : float64 In [ 30 ]: s . asfreq ( 'D' ) . head () Out [ 30 ]: 2020 - 01 - 01 0.836578 2020 - 01 - 02 NaN 2020 - 01 - 03 0.678419 2020 - 01 - 04 NaN 2020 - 01 - 05 0.711897 Freq : D , dtype : float64 In [ 31 ]: s . asfreq ( '12H' ) . head () Out [ 31 ]: 2020 - 01 - 01 00 : 00 : 00 0.836578 2020 - 01 - 01 12 : 00 : 00 NaN 2020 - 01 - 02 00 : 00 : 00 NaN 2020 - 01 - 02 12 : 00 : 00 NaN 2020 - 01 - 03 00 : 00 : 00 0.678419 Freq : 12 H , dtype : float64 datetime64[ns] \u5e8f\u5217\u7684\u6700\u503c\u4e0e\u5747\u503c \u524d\u9762\u63d0\u5230\u4e86 datetime64[ns] \u672c\u8d28\u4e0a\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u5927\u6574\u6570\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8be5\u7c7b\u578b\u7684\u5e8f\u5217\uff0c\u53ef\u4ee5\u4f7f\u7528 max, min, mean \uff0c\u6765\u53d6\u5f97\u6700\u5927\u65f6\u95f4\u6233\u3001\u6700\u5c0f\u65f6\u95f4\u6233\u548c \u201c\u5e73\u5747\u201d \u65f6\u95f4\u6233\u3002 3. dt \u5bf9\u8c61 \u5982\u540c category, string \u7684\u5e8f\u5217\u4e0a\u5b9a\u4e49\u4e86 cat, str \u6765\u5b8c\u6210\u5206\u7c7b\u6570\u636e\u548c\u6587\u672c\u6570\u636e\u7684\u64cd\u4f5c\uff0c\u5728\u65f6\u5e8f\u7c7b\u578b\u7684\u5e8f\u5217\u4e0a\u5b9a\u4e49\u4e86 dt \u5bf9\u8c61\u6765\u5b8c\u6210\u8bb8\u591a\u65f6\u95f4\u5e8f\u5217\u7684\u76f8\u5173\u64cd\u4f5c\u3002\u8fd9\u91cc\u5bf9\u4e8e datetime64[ns] \u7c7b\u578b\u800c\u8a00\uff0c\u53ef\u4ee5\u5927\u81f4\u5206\u4e3a\u4e09\u7c7b\u64cd\u4f5c\uff1a\u53d6\u51fa\u65f6\u95f4\u76f8\u5173\u7684\u5c5e\u6027\u3001\u5224\u65ad\u65f6\u95f4\u6233\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3001\u53d6\u6574\u64cd\u4f5c\u3002 \u7b2c\u4e00\u7c7b\u64cd\u4f5c\u7684\u5e38\u7528\u5c5e\u6027\u5305\u62ec\uff1a date, time, year, month, day, hour, minute, second, microsecond, nanosecond, dayofweek, dayofyear, weekofyear, daysinmonth, quarter \uff0c\u5176\u4e2d daysinmonth, quarter \u5206\u522b\u8868\u793a\u8be5\u6708\u4e00\u5171\u6709\u51e0\u5929\u548c\u5b63\u5ea6\u3002 In [ 32 ]: s = pd . Series ( pd . date_range ( '2020-1-1' , '2020-1-3' , freq = 'D' )) In [ 33 ]: s . dt . date Out [ 33 ]: 0 2020 - 01 - 01 1 2020 - 01 - 02 2 2020 - 01 - 03 dtype : object In [ 34 ]: s . dt . time Out [ 34 ]: 0 00 : 00 : 00 1 00 : 00 : 00 2 00 : 00 : 00 dtype : object In [ 35 ]: s . dt . day Out [ 35 ]: 0 1 1 2 2 3 dtype : int64 In [ 36 ]: s . dt . daysinmonth Out [ 36 ]: 0 31 1 31 2 31 dtype : int64 \u5728\u8fd9\u4e9b\u5c5e\u6027\u4e2d\uff0c\u7ecf\u5e38\u4f7f\u7528\u7684\u662f dayofweek \uff0c\u5b83\u8fd4\u56de\u4e86\u5468\u4e2d\u7684\u661f\u671f\u60c5\u51b5\uff0c\u5468\u4e00\u4e3a 0\u3001\u5468\u4e8c\u4e3a 1\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff1a In [ 37 ]: s . dt . dayofweek Out [ 37 ]: 0 2 1 3 2 4 dtype : int64 \u6b64\u5916\uff0c\u53ef\u4ee5\u901a\u8fc7 month_name, day_name \u8fd4\u56de\u82f1\u6587\u7684\u6708\u540d\u548c\u661f\u671f\u540d\uff0c\u6ce8\u610f\u5b83\u4eec\u662f\u65b9\u6cd5\u800c\u4e0d\u662f\u5c5e\u6027\uff1a In [ 38 ]: s . dt . month_name () Out [ 38 ]: 0 January 1 January 2 January dtype : object In [ 39 ]: s . dt . day_name () Out [ 39 ]: 0 Wednesday 1 Thursday 2 Friday dtype : object \u7b2c\u4e8c\u7c7b\u5224\u65ad\u64cd\u4f5c\u4e3b\u8981\u7528\u4e8e\u6d4b\u8bd5\u662f\u5426\u4e3a\u6708 / \u5b63 / \u5e74\u7684\u7b2c\u4e00\u5929\u6216\u8005\u6700\u540e\u4e00\u5929\uff1a In [ 40 ]: s . dt . is_year_start # \u8fd8\u53ef\u9009 is_quarter/month_start Out [ 40 ]: 0 True 1 False 2 False dtype : bool In [ 41 ]: s . dt . is_year_end # \u8fd8\u53ef\u9009 is_quarter/month_end Out [ 41 ]: 0 False 1 False 2 False dtype : bool \u7b2c\u4e09\u7c7b\u7684\u53d6\u6574\u64cd\u4f5c\u5305\u542b round, ceil, floor \uff0c\u5b83\u4eec\u7684\u516c\u5171\u53c2\u6570\u4e3a freq \uff0c\u5e38\u7528\u7684\u5305\u62ec H, min, S \uff08\u5c0f\u65f6\u3001\u5206\u949f\u3001\u79d2\uff09\uff0c\u6240\u6709\u53ef\u9009\u7684 freq \u53ef\u53c2\u8003 \u6b64\u5904 \u3002 In [ 42 ]: s = pd . Series ( pd . date_range ( '2020-1-1 20:35:00' , .... : '2020-1-1 22:35:00' , .... : freq = '45min' )) .... : In [ 43 ]: s Out [ 43 ]: 0 2020 - 01 - 01 20 : 35 : 00 1 2020 - 01 - 01 21 : 20 : 00 2 2020 - 01 - 01 22 : 05 : 00 dtype : datetime64 [ ns ] In [ 44 ]: s . dt . round ( '1H' ) Out [ 44 ]: 0 2020 - 01 - 01 21 : 00 : 00 1 2020 - 01 - 01 21 : 00 : 00 2 2020 - 01 - 01 22 : 00 : 00 dtype : datetime64 [ ns ] In [ 45 ]: s . dt . ceil ( '1H' ) Out [ 45 ]: 0 2020 - 01 - 01 21 : 00 : 00 1 2020 - 01 - 01 22 : 00 : 00 2 2020 - 01 - 01 23 : 00 : 00 dtype : datetime64 [ ns ] In [ 46 ]: s . dt . floor ( '1H' ) Out [ 46 ]: 0 2020 - 01 - 01 20 : 00 : 00 1 2020 - 01 - 01 21 : 00 : 00 2 2020 - 01 - 01 22 : 00 : 00 dtype : datetime64 [ ns ] 4. \u65f6\u95f4\u6233\u7684\u5207\u7247\u4e0e\u7d22\u5f15 \u4e00\u822c\u800c\u8a00\uff0c\u65f6\u95f4\u6233\u5e8f\u5217\u4f5c\u4e3a\u7d22\u5f15\u4f7f\u7528\u3002\u5982\u679c\u60f3\u8981\u9009\u51fa\u67d0\u4e2a\u5b50\u65f6\u95f4\u6233\u5e8f\u5217\uff0c\u7b2c\u4e00\u7c7b\u65b9\u6cd5\u662f\u5229\u7528 dt \u5bf9\u8c61\u548c\u5e03\u5c14\u6761\u4ef6\u8054\u5408\u4f7f\u7528\uff0c\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u5229\u7528\u5207\u7247\uff0c\u540e\u8005\u5e38\u7528\u4e8e\u8fde\u7eed\u65f6\u95f4\u6233\u3002\u4e0b\u9762\uff0c\u4e3e\u4e00\u4e9b\u4f8b\u5b50\u8bf4\u660e\uff1a In [ 47 ]: s = pd . Series ( np . random . randint ( 2 , size = 366 ), .... : index = pd . date_range ( .... : '2020-01-01' , '2020-12-31' )) .... : In [ 48 ]: idx = pd . Series ( s . index ) . dt In [ 49 ]: s . head () Out [ 49 ]: 2020 - 01 - 01 1 2020 - 01 - 02 1 2020 - 01 - 03 0 2020 - 01 - 04 1 2020 - 01 - 05 0 Freq : D , dtype : int32 Example1\uff1a\u6bcf\u6708\u7684\u7b2c\u4e00\u5929\u6216\u8005\u6700\u540e\u4e00\u5929 In [ 50 ]: s [( idx . is_month_start | idx . is_month_end ) . values ] . head () Out [ 50 ]: 2020 - 01 - 01 1 2020 - 01 - 31 0 2020 - 02 - 01 1 2020 - 02 - 29 1 2020 - 03 - 01 0 dtype : int32 Example2\uff1a\u53cc\u4f11\u65e5 In [ 51 ]: s [ idx . dayofweek . isin ([ 5 , 6 ]) . values ] . head () Out [ 51 ]: 2020 - 01 - 04 1 2020 - 01 - 05 0 2020 - 01 - 11 0 2020 - 01 - 12 1 2020 - 01 - 18 1 dtype : int32 Example3\uff1a\u53d6\u51fa\u5355\u65e5\u503c In [ 52 ]: s [ '2020-01-01' ] Out [ 52 ]: 1 In [ 53 ]: s [ '20200101' ] # \u81ea\u52a8\u8f6c\u6362\u6807\u51c6\u683c\u5f0f Out [ 53 ]: 1 Example4\uff1a\u53d6\u51fa\u4e03\u6708 In [ 54 ]: s [ '2020-07' ] . head () Out [ 54 ]: 2020 - 07 - 01 0 2020 - 07 - 02 1 2020 - 07 - 03 0 2020 - 07 - 04 0 2020 - 07 - 05 0 Freq : D , dtype : int32 Example5\uff1a\u53d6\u51fa 5 \u6708\u521d\u81f3 7 \u6708 15 \u65e5 In [ 55 ]: s [ '2020-05' : '2020-7-15' ] . head () Out [ 55 ]: 2020 - 05 - 01 0 2020 - 05 - 02 1 2020 - 05 - 03 0 2020 - 05 - 04 1 2020 - 05 - 05 1 Freq : D , dtype : int32 In [ 56 ]: s [ '2020-05' : '2020-7-15' ] . tail () Out [ 56 ]: 2020 - 07 - 11 0 2020 - 07 - 12 0 2020 - 07 - 13 1 2020 - 07 - 14 0 2020 - 07 - 15 1 Freq : D , dtype : int32 \u4e09\u3001\u65f6\u95f4\u5dee 1. Timedelta \u7684\u751f\u6210 \u6b63\u5982\u5728\u7b2c\u4e00\u8282\u4e2d\u6240\u8bf4\uff0c\u65f6\u95f4\u5dee\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e24\u4e2a\u65f6\u95f4\u6233\u7684\u5dee\uff0c\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u901a\u8fc7 pd.Timedelta \u6765\u6784\u9020\uff1a In [ 57 ]: pd . Timestamp ( '20200102 08:00:00' ) - pd . Timestamp ( '20200101 07:35:00' ) Out [ 57 ]: Timedelta ( '1 days 00:25:00' ) In [ 58 ]: pd . Timedelta ( days = 1 , minutes = 25 ) # \u9700\u8981\u6ce8\u610f\u52a0s Out [ 58 ]: Timedelta ( '1 days 00:25:00' ) In [ 59 ]: pd . Timedelta ( '1 days 25 minutes' ) # \u5b57\u7b26\u4e32\u751f\u6210 Out [ 59 ]: Timedelta ( '1 days 00:25:00' ) \u751f\u6210\u65f6\u95f4\u5dee\u5e8f\u5217\u7684\u4e3b\u8981\u65b9\u5f0f\u662f pd.to_timedelta \uff0c\u5176\u7c7b\u578b\u4e3a timedelta64[ns] \uff1a In [ 60 ]: s = pd . to_timedelta ( df . Time_Record ) In [ 61 ]: s . head () Out [ 61 ]: 0 0 days 00 : 04 : 34 1 0 days 00 : 04 : 20 2 0 days 00 : 05 : 22 3 0 days 00 : 04 : 08 4 0 days 00 : 05 : 22 Name : Time_Record , dtype : timedelta64 [ ns ] \u4e0e date_range \u4e00\u6837\uff0c\u65f6\u95f4\u5dee\u5e8f\u5217\u4e5f\u53ef\u4ee5\u7528 timedelta_range \u6765\u751f\u6210\uff0c\u5b83\u4eec\u4e24\u8005\u5177\u6709\u4e00\u81f4\u7684\u53c2\u6570\uff1a In [ 62 ]: pd . timedelta_range ( '0s' , '1000s' , freq = '6min' ) Out [ 62 ]: TimedeltaIndex ([ '0 days 00:00:00' , '0 days 00:06:00' , '0 days 00:12:00' ], dtype = 'timedelta64[ns]' , freq = '6T' ) In [ 63 ]: pd . timedelta_range ( '0s' , '1000s' , periods = 3 ) Out [ 63 ]: TimedeltaIndex ([ '0 days 00:00:00' , '0 days 00:08:20' , '0 days 00:16:40' ], dtype = 'timedelta64[ns]' , freq = None ) \u5bf9\u4e8e Timedelta \u5e8f\u5217\uff0c\u540c\u6837\u4e5f\u5b9a\u4e49\u4e86 dt \u5bf9\u8c61\uff0c\u4e0a\u9762\u4e3b\u8981\u5b9a\u4e49\u4e86\u7684\u5c5e\u6027\u5305\u62ec days, seconds, mircroseconds, nanoseconds \uff0c\u5b83\u4eec\u5206\u522b\u8fd4\u56de\u4e86\u5bf9\u5e94\u7684\u65f6\u95f4\u5dee\u7279\u5f81\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684 seconds \u4e0d\u662f\u6307\u5355\u7eaf\u7684\u79d2\uff0c\u800c\u662f\u5bf9\u5929\u6570\u53d6\u4f59\u540e\u5269\u4f59\u7684\u79d2\u6570\uff1a In [ 64 ]: s . dt . seconds . head () Out [ 64 ]: 0 274 1 260 2 322 3 248 4 322 Name : Time_Record , dtype : int64 \u5982\u679c\u4e0d\u60f3\u5bf9\u5929\u6570\u53d6\u4f59\u800c\u76f4\u63a5\u5bf9\u5e94\u79d2\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 total_seconds In [ 65 ]: s . dt . total_seconds () . head () Out [ 65 ]: 0 274.0 1 260.0 2 322.0 3 248.0 4 322.0 Name : Time_Record , dtype : float64 \u4e0e\u65f6\u95f4\u6233\u5e8f\u5217\u7c7b\u4f3c\uff0c\u53d6\u6574\u51fd\u6570\u4e5f\u662f\u53ef\u4ee5\u5728 dt \u5bf9\u8c61\u4e0a\u4f7f\u7528\u7684\uff1a In [ 66 ]: pd . to_timedelta ( df . Time_Record ) . dt . round ( 'min' ) . head () Out [ 66 ]: 0 0 days 00 : 05 : 00 1 0 days 00 : 04 : 00 2 0 days 00 : 05 : 00 3 0 days 00 : 04 : 00 4 0 days 00 : 05 : 00 Name : Time_Record , dtype : timedelta64 [ ns ] 2. Timedelta \u7684\u8fd0\u7b97 \u65f6\u95f4\u5dee\u652f\u6301\u7684\u5e38\u7528\u8fd0\u7b97\u6709\u4e09\u7c7b\uff1a\u4e0e\u6807\u91cf\u7684\u4e58\u6cd5\u8fd0\u7b97\u3001\u4e0e\u65f6\u95f4\u6233\u7684\u52a0\u51cf\u6cd5\u8fd0\u7b97\u3001\u4e0e\u65f6\u95f4\u5dee\u7684\u52a0\u51cf\u6cd5\u4e0e\u9664\u6cd5\u8fd0\u7b97\uff1a In [ 67 ]: td1 = pd . Timedelta ( days = 1 ) In [ 68 ]: td2 = pd . Timedelta ( days = 3 ) In [ 69 ]: ts = pd . Timestamp ( '20200101' ) In [ 70 ]: td1 * 2 Out [ 70 ]: Timedelta ( '2 days 00:00:00' ) In [ 71 ]: td2 - td1 Out [ 71 ]: Timedelta ( '2 days 00:00:00' ) In [ 72 ]: ts + td1 Out [ 72 ]: Timestamp ( '2020-01-02 00:00:00' ) In [ 73 ]: ts - td1 Out [ 73 ]: Timestamp ( '2019-12-31 00:00:00' ) \u8fd9\u4e9b\u8fd0\u7b97\u90fd\u53ef\u4ee5\u79fb\u690d\u5230\u65f6\u95f4\u5dee\u7684\u5e8f\u5217\u4e0a\uff1a In [ 74 ]: td1 = pd . timedelta_range ( start = '1 days' , periods = 5 ) In [ 75 ]: td2 = pd . timedelta_range ( start = '12 hours' , .... : freq = '2H' , .... : periods = 5 ) .... : In [ 76 ]: ts = pd . date_range ( '20200101' , '20200105' ) In [ 77 ]: td1 * 5 Out [ 77 ]: TimedeltaIndex ([ '5 days' , '10 days' , '15 days' , '20 days' , '25 days' ], dtype = 'timedelta64[ns]' , freq = '5D' ) In [ 78 ]: td1 * pd . Series ( list ( range ( 5 ))) # \u9010\u4e2a\u76f8\u4e58 Out [ 78 ]: 0 0 days 1 2 days 2 6 days 3 12 days 4 20 days dtype : timedelta64 [ ns ] In [ 79 ]: td1 - td2 Out [ 79 ]: TimedeltaIndex ([ '0 days 12:00:00' , '1 days 10:00:00' , '2 days 08:00:00' , '3 days 06:00:00' , '4 days 04:00:00' ], dtype = 'timedelta64[ns]' , freq = None ) In [ 80 ]: td1 + pd . Timestamp ( '20200101' ) Out [ 80 ]: DatetimeIndex ([ '2020-01-02' , '2020-01-03' , '2020-01-04' , '2020-01-05' , '2020-01-06' ], dtype = 'datetime64[ns]' , freq = 'D' ) In [ 81 ]: td1 + ts # \u9010\u4e2a\u76f8\u52a0 Out [ 81 ]: DatetimeIndex ([ '2020-01-02' , '2020-01-04' , '2020-01-06' , '2020-01-08' , '2020-01-10' ], dtype = 'datetime64[ns]' , freq = None ) \u56db\u3001\u65e5\u671f\u504f\u7f6e 1. Offset \u5bf9\u8c61 \u65e5\u671f\u504f\u7f6e\u662f\u4e00\u79cd\u548c\u65e5\u5386\u76f8\u5173\u7684\u7279\u6b8a\u65f6\u95f4\u5dee\uff0c\u4f8b\u5982\u56de\u5230\u7b2c\u4e00\u8282\u4e2d\u7684\u4e24\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u6c42 2020 \u5e74 9 \u6708\u7b2c\u4e00\u4e2a\u5468\u4e00\u7684\u65e5\u671f\uff0c\u4ee5\u53ca\u5982\u4f55\u6c42 2020 \u5e74 9 \u6708 7 \u65e5\u540e\u7684\u7b2c 30 \u4e2a\u5de5\u4f5c\u65e5\u662f\u54ea\u4e00\u5929\u3002 In [ 82 ]: pd . Timestamp ( '20200831' ) + pd . offsets . WeekOfMonth ( week = 0 , weekday = 0 ) Out [ 82 ]: Timestamp ( '2020-09-07 00:00:00' ) In [ 83 ]: pd . Timestamp ( '20200907' ) + pd . offsets . BDay ( 30 ) Out [ 83 ]: Timestamp ( '2020-10-19 00:00:00' ) \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c Offset \u5bf9\u8c61\u5728 pd.offsets \u4e2d\u88ab\u5b9a\u4e49\u3002\u5f53\u4f7f\u7528 + \u65f6\u83b7\u53d6\u79bb\u5176\u6700\u8fd1\u7684\u4e0b\u4e00\u4e2a\u65e5\u671f\uff0c\u5f53\u4f7f\u7528 - \u65f6\u83b7\u53d6\u79bb\u5176\u6700\u8fd1\u7684\u4e0a\u4e00\u4e2a\u65e5\u671f\uff1a In [ 84 ]: pd . Timestamp ( '20200831' ) - pd . offsets . WeekOfMonth ( week = 0 , weekday = 0 ) Out [ 84 ]: Timestamp ( '2020-08-03 00:00:00' ) In [ 85 ]: pd . Timestamp ( '20200907' ) - pd . offsets . BDay ( 30 ) Out [ 85 ]: Timestamp ( '2020-07-27 00:00:00' ) In [ 86 ]: pd . Timestamp ( '20200907' ) + pd . offsets . MonthEnd () Out [ 86 ]: Timestamp ( '2020-09-30 00:00:00' ) \u5e38\u7528\u7684\u65e5\u671f\u504f\u7f6e\u5982\u4e0b\u53ef\u4ee5\u67e5\u9605\u8fd9\u91cc\u7684 \u6587\u6863 \u63cf\u8ff0\u3002\u5728\u6587\u6863\u7f57\u5217\u7684 Offset \u4e2d\uff0c\u9700\u8981\u4ecb\u7ecd\u4e00\u4e2a\u7279\u6b8a\u7684 Offset \u5bf9\u8c61 CDay \uff0c\u5176\u4e2d\u7684 holidays, weekmask \u53c2\u6570\u80fd\u591f\u5206\u522b\u5bf9\u81ea\u5b9a\u4e49\u7684\u65e5\u671f\u548c\u661f\u671f\u8fdb\u884c\u8fc7\u6ee4\uff0c\u524d\u8005\u4f20\u5165\u4e86\u9700\u8981\u8fc7\u6ee4\u7684\u65e5\u671f\u5217\u8868\uff0c\u540e\u8005\u4f20\u5165\u7684\u662f\u4e09\u4e2a\u5b57\u6bcd\u7684\u661f\u671f\u7f29\u5199\u6784\u6210\u7684\u661f\u671f\u5b57\u7b26\u4e32\uff0c\u5176\u4f5c\u7528\u662f\u53ea\u4fdd\u7559\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u661f\u671f\uff1a In [ 87 ]: my_filter = pd . offsets . CDay ( n = 1 , weekmask = 'Wed Fri' , holidays = [ '20200109' ]) In [ 88 ]: dr = pd . date_range ( '20200108' , '20200111' ) In [ 89 ]: dr . to_series () . dt . dayofweek Out [ 89 ]: 2020 - 01 - 08 2 2020 - 01 - 09 3 2020 - 01 - 10 4 2020 - 01 - 11 5 Freq : D , dtype : int64 In [ 90 ]: [ i + my_filter for i in dr ] Out [ 90 ]: [ Timestamp ( '2020-01-10 00:00:00' ), Timestamp ( '2020-01-10 00:00:00' ), Timestamp ( '2020-01-15 00:00:00' ), Timestamp ( '2020-01-15 00:00:00' )] \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c n \u8868\u793a\u589e\u52a0\u4e00\u5929 CDay \uff0c dr \u4e2d\u7684\u7b2c\u4e00\u5929\u4e3a 20200108 \uff0c\u4f46\u7531\u4e8e\u4e0b\u4e00\u5929 20200109 \u88ab\u6392\u9664\u4e86\uff0c\u5e76\u4e14 20200110 \u662f\u5408\u6cd5\u7684\u5468\u4e94\uff0c\u56e0\u6b64\u8f6c\u4e3a 20200110 \uff0c\u5176\u4ed6\u540e\u9762\u7684\u65e5\u671f\u5904\u7406\u7c7b\u4f3c\u3002 \u4e0d\u8981\u4f7f\u7528\u90e8\u5206 Offset \u5728\u5f53\u524d\u7248\u672c\u4e0b\u7531\u4e8e\u4e00\u4e9b bug \uff0c\u4e0d\u8981\u4f7f\u7528 Day \u7ea7\u522b\u4ee5\u4e0b\u7684 Offset \u5bf9\u8c61\uff0c\u6bd4\u5982 Hour, Second \u7b49\uff0c\u8bf7\u4f7f\u7528\u5bf9\u5e94\u7684 Timedelta \u5bf9\u8c61\u6765\u4ee3\u66ff\u3002 2. \u504f\u7f6e\u5b57\u7b26\u4e32 \u524d\u9762\u63d0\u5230\u4e86\u5173\u4e8e date_range \u7684 freq \u53d6\u503c\u53ef\u7528 Offset \u5bf9\u8c61\uff0c\u540c\u65f6\u5728 pandas \u4e2d\u51e0\u4e4e\u6bcf\u4e00\u4e2a Offset \u5bf9\u8c61\u7ed1\u5b9a\u4e86\u65e5\u671f\u504f\u7f6e\u5b57\u7b26\u4e32\uff08 frequencies strings/offset aliases \uff09\uff0c\u53ef\u4ee5\u6307\u5b9a Offset \u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u6765\u66ff\u4ee3\u4f7f\u7528\u3002\u4e0b\u9762\u4e3e\u4e00\u4e9b\u5e38\u89c1\u7684\u4f8b\u5b50\u3002 In [ 91 ]: pd . date_range ( '20200101' , '20200331' , freq = 'MS' ) # \u6708\u521d Out [ 91 ]: DatetimeIndex ([ '2020-01-01' , '2020-02-01' , '2020-03-01' ], dtype = 'datetime64[ns]' , freq = 'MS' ) In [ 92 ]: pd . date_range ( '20200101' , '20200331' , freq = 'M' ) # \u6708\u672b Out [ 92 ]: DatetimeIndex ([ '2020-01-31' , '2020-02-29' , '2020-03-31' ], dtype = 'datetime64[ns]' , freq = 'M' ) In [ 93 ]: pd . date_range ( '20200101' , '20200110' , freq = 'B' ) # \u5de5\u4f5c\u65e5 Out [ 93 ]: DatetimeIndex ([ '2020-01-01' , '2020-01-02' , '2020-01-03' , '2020-01-06' , '2020-01-07' , '2020-01-08' , '2020-01-09' , '2020-01-10' ], dtype = 'datetime64[ns]' , freq = 'B' ) In [ 94 ]: pd . date_range ( '20200101' , '20200201' , freq = 'W-MON' ) # \u5468\u4e00 Out [ 94 ]: DatetimeIndex ([ '2020-01-06' , '2020-01-13' , '2020-01-20' , '2020-01-27' ], dtype = 'datetime64[ns]' , freq = 'W-MON' ) In [ 95 ]: pd . date_range ( '20200101' , '20200201' , .... : freq = 'WOM-1MON' ) # \u6bcf\u6708\u7b2c\u4e00\u4e2a\u5468\u4e00 .... : Out [ 95 ]: DatetimeIndex ([ '2020-01-06' ], dtype = 'datetime64[ns]' , freq = 'WOM-1MON' ) \u4e0a\u9762\u7684\u8fd9\u4e9b\u5b57\u7b26\u4e32\uff0c\u7b49\u4ef7\u4e8e\u4f7f\u7528\u5982\u4e0b\u7684 Offset \u5bf9\u8c61\uff1a In [ 96 ]: pd . date_range ( '20200101' , '20200331' , .... : freq = pd . offsets . MonthBegin ()) .... : Out [ 96 ]: DatetimeIndex ([ '2020-01-01' , '2020-02-01' , '2020-03-01' ], dtype = 'datetime64[ns]' , freq = 'MS' ) In [ 97 ]: pd . date_range ( '20200101' , '20200331' , .... : freq = pd . offsets . MonthEnd ()) .... : Out [ 97 ]: DatetimeIndex ([ '2020-01-31' , '2020-02-29' , '2020-03-31' ], dtype = 'datetime64[ns]' , freq = 'M' ) In [ 98 ]: pd . date_range ( '20200101' , '20200110' , freq = pd . offsets . BDay ()) Out [ 98 ]: DatetimeIndex ([ '2020-01-01' , '2020-01-02' , '2020-01-03' , '2020-01-06' , '2020-01-07' , '2020-01-08' , '2020-01-09' , '2020-01-10' ], dtype = 'datetime64[ns]' , freq = 'B' ) In [ 99 ]: pd . date_range ( '20200101' , '20200201' , .... : freq = pd . offsets . CDay ( weekmask = 'Mon' )) .... : Out [ 99 ]: DatetimeIndex ([ '2020-01-06' , '2020-01-13' , '2020-01-20' , '2020-01-27' ], dtype = 'datetime64[ns]' , freq = 'C' ) In [ 100 ]: pd . date_range ( '20200101' , '20200201' , ..... : freq = pd . offsets . WeekOfMonth ( week = 0 , weekday = 0 )) ..... : Out [ 100 ]: DatetimeIndex ([ '2020-01-06' ], dtype = 'datetime64[ns]' , freq = 'WOM-1MON' ) \u5173\u4e8e\u65f6\u533a\u95ee\u9898\u7684\u8bf4\u660e \u5404\u7c7b\u65f6\u95f4\u5bf9\u8c61\u7684\u5f00\u53d1\uff0c\u9664\u4e86\u4f7f\u7528 python \u5185\u7f6e\u7684 datetime \u6a21\u5757\uff0c pandas \u8fd8\u5229\u7528\u4e86 dateutil \u6a21\u5757\uff0c\u5f88\u5927\u4e00\u90e8\u5206\u662f\u4e3a\u4e86\u5904\u7406\u65f6\u533a\u95ee\u9898\u3002\u603b\u6240\u5468\u77e5\uff0c\u6211\u56fd\u662f\u6ca1\u6709\u590f\u4ee4\u65f6\u8c03\u6574\u65f6\u95f4\u4e00\u8bf4\u7684\uff0c\u4f46\u6709\u4e9b\u56fd\u5bb6\u4f1a\u6709\u8fd9\u79cd\u505a\u6cd5\uff0c\u5bfc\u81f4\u4e86\u76f8\u5bf9\u800c\u8a00\u4e00\u5929\u91cc\u53ef\u80fd\u4f1a\u6709 23/24/25 \u4e2a\u5c0f\u65f6\uff0c\u4e5f\u5c31\u662f relativedelta \uff0c\u8fd9\u4f7f\u5f97 Offset \u5bf9\u8c61\u548c Timedelta \u5bf9\u8c61\u6709\u4e86\u5bf9\u540c\u4e00\u95ee\u9898\u5904\u7406\u4ea7\u751f\u4e0d\u540c\u7ed3\u679c\u7684\u73b0\u8c61\uff0c\u5176\u4e2d\u7684\u89c4\u5219\u4e5f\u8f83\u4e3a\u590d\u6742\uff0c\u5b98\u65b9\u6587\u6863\u7684\u5199\u6cd5\u5b58\u5728\u90e8\u5206\u63cf\u8ff0\u9519\u8bef\uff0c\u5e76\u4e14\u96be\u4ee5\u5bf9\u63cf\u8ff0\u505a\u51fa\u7edf\u4e00\u4fee\u6b63\uff0c\u56e0\u4e3a\u7275\u6d89\u5230\u4e86 Offset \u76f8\u5173\u7684\u5f88\u591a\u7ec4\u4ef6\u3002\u56e0\u6b64\uff0c\u672c\u6559\u7a0b\u5b8c\u5168\u4e0d\u8003\u8651\u65f6\u533a\u5904\u7406\uff0c\u5982\u679c\u5bf9\u65f6\u533a\u5904\u7406\u7684\u65f6\u95f4\u504f\u7f6e\u6709\u5174\u8da3\u4e86\u89e3\u8ba8\u8bba\uff0c\u53ef\u4ee5\u8054\u7cfb\u6211\u6216\u8005\u53c2\u89c1 \u8fd9\u91cc \u7684\u8ba8\u8bba\u3002 \u4e94\u3001\u65f6\u5e8f\u4e2d\u7684\u6ed1\u7a97\u4e0e\u5206\u7ec4 1. \u6ed1\u52a8\u7a97\u53e3 \u6240\u8c13\u65f6\u5e8f\u7684\u6ed1\u7a97\u51fd\u6570\uff0c\u5373\u628a\u6ed1\u52a8\u7a97\u53e3\u7528 freq \u5173\u952e\u8bcd\u4ee3\u66ff\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u5177\u4f53\u7684\u5e94\u7528\u6848\u4f8b\uff1a\u5728\u80a1\u7968\u5e02\u573a\u4e2d\u6709\u4e00\u4e2a\u6307\u6807\u4e3a BOLL \u6307\u6807\uff0c\u5b83\u7531\u4e2d\u8f68\u7ebf\u3001\u4e0a\u8f68\u7ebf\u3001\u4e0b\u8f68\u7ebf\u8fd9\u4e09\u6839\u7ebf\u6784\u6210\uff0c\u5177\u4f53\u7684\u8ba1\u7b97\u65b9\u6cd5\u5206\u522b\u662f N \u65e5\u5747\u503c\u7ebf\u3001 N \u65e5\u5747\u503c\u52a0\u4e24\u500d N \u65e5\u6807\u51c6\u5dee\u7ebf\u3001 N \u65e5\u5747\u503c\u51cf\u4e24\u500d N \u65e5\u6807\u51c6\u5dee\u7ebf\u3002\u5229\u7528 rolling \u5bf9\u8c61\u8ba1\u7b97 N=30 \u7684 BOLL \u6307\u6807\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 101 ]: import matplotlib.pyplot as plt In [ 102 ]: idx = pd . date_range ( '20200101' , '20201231' , freq = 'B' ) In [ 103 ]: np . random . seed ( 2020 ) In [ 104 ]: data = np . random . randint ( - 1 , 2 , len ( idx )) . cumsum () # \u968f\u673a\u6e38\u52a8\u6784\u9020\u6a21\u62df\u5e8f\u5217 In [ 105 ]: s = pd . Series ( data , index = idx ) In [ 106 ]: s . head () Out [ 106 ]: 2020 - 01 - 01 - 1 2020 - 01 - 02 - 2 2020 - 01 - 03 - 1 2020 - 01 - 06 - 1 2020 - 01 - 07 - 2 Freq : B , dtype : int32 In [ 107 ]: r = s . rolling ( '30D' ) In [ 108 ]: plt . plot ( s ) Out [ 108 ]: [ < matplotlib . lines . Line2D at 0x1363008af70 > ] In [ 109 ]: plt . title ( 'BOLL LINES' ) Out [ 109 ]: Text ( 0.5 , 1.0 , 'BOLL LINES' ) In [ 110 ]: plt . plot ( r . mean ()) Out [ 110 ]: [ < matplotlib . lines . Line2D at 0x136300a9070 > ] In [ 111 ]: plt . plot ( r . mean () + r . std () * 2 ) Out [ 111 ]: [ < matplotlib . lines . Line2D at 0x136300a9250 > ] In [ 112 ]: plt . plot ( r . mean () - r . std () * 2 ) Out [ 112 ]: [ < matplotlib . lines . Line2D at 0x136300a9550 > ] \u5bf9\u4e8e shift \u51fd\u6570\u800c\u8a00\uff0c\u4f5c\u7528\u5728 datetime64 \u4e3a\u7d22\u5f15\u7684\u5e8f\u5217\u4e0a\u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a freq \u5355\u4f4d\u8fdb\u884c\u6ed1\u52a8\uff1a In [ 113 ]: s . shift ( freq = '50D' ) . head () Out [ 113 ]: 2020 - 02 - 20 - 1 2020 - 02 - 21 - 2 2020 - 02 - 22 - 1 2020 - 02 - 25 - 1 2020 - 02 - 26 - 2 dtype : int32 \u53e6\u5916\uff0c datetime64[ns] \u7684\u5e8f\u5217\u8fdb\u884c diff \u540e\u5c31\u80fd\u591f\u5f97\u5230 timedelta64[ns] \u7684\u5e8f\u5217\uff0c\u8fd9\u80fd\u591f\u4f7f\u7528\u6237\u65b9\u4fbf\u5730\u89c2\u5bdf\u6709\u5e8f\u65f6\u95f4\u5e8f\u5217\u7684\u95f4\u9694\uff1a In [ 114 ]: my_series = pd . Series ( s . index ) In [ 115 ]: my_series . head () Out [ 115 ]: 0 2020 - 01 - 01 1 2020 - 01 - 02 2 2020 - 01 - 03 3 2020 - 01 - 06 4 2020 - 01 - 07 dtype : datetime64 [ ns ] In [ 116 ]: my_series . diff ( 1 ) . head () Out [ 116 ]: 0 NaT 1 1 days 2 1 days 3 3 days 4 1 days dtype : timedelta64 [ ns ] 2. \u91cd\u91c7\u6837 \u91cd\u91c7\u6837\u5bf9\u8c61 resample \u548c\u7b2c\u56db\u7ae0\u4e2d\u5206\u7ec4\u5bf9\u8c61 groupby \u7684\u7528\u6cd5\u7c7b\u4f3c\uff0c\u524d\u8005\u662f\u9488\u5bf9\u65f6\u95f4\u5e8f\u5217\u7684\u5206\u7ec4\u8ba1\u7b97\u800c\u8bbe\u8ba1\u7684\u5206\u7ec4\u5bf9\u8c61\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e0a\u9762\u7684\u5e8f\u5217\u8ba1\u7b97\u6bcf 10 \u5929\u7684\u5747\u503c\uff1a In [ 117 ]: s . resample ( '10D' ) . mean () . head () Out [ 117 ]: 2020 - 01 - 01 - 2.000000 2020 - 01 - 11 - 3.166667 2020 - 01 - 21 - 3.625000 2020 - 01 - 31 - 4.000000 2020 - 02 - 10 - 0.375000 Freq : 10 D , dtype : float64 \u540c\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u5185\u7f6e\u5b9a\u4e49\u7684\u5904\u7406\u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7 apply \u65b9\u6cd5\u81ea\u5b9a\u4e49\uff1a In [ 118 ]: s . resample ( '10D' ) . apply ( lambda x : x . max () - x . min ()) . head () # \u6781\u5dee Out [ 118 ]: 2020 - 01 - 01 3 2020 - 01 - 11 4 2020 - 01 - 21 4 2020 - 01 - 31 2 2020 - 02 - 10 4 Freq : 10 D , dtype : int32 \u5728 resample \u4e2d\u8981\u7279\u522b\u6ce8\u610f\u7ec4\u8fb9\u754c\u503c\u7684\u5904\u7406\u60c5\u51b5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8d77\u59cb\u503c\u7684\u8ba1\u7b97\u65b9\u6cd5\u662f\u4ece\u6700\u5c0f\u503c\u65f6\u95f4\u6233\u5bf9\u5e94\u65e5\u671f\u7684\u5348\u591c 00:00:00 \u5f00\u59cb\u589e\u52a0 freq \uff0c\u76f4\u5230\u4e0d\u8d85\u8fc7\u8be5\u6700\u5c0f\u65f6\u95f4\u6233\u7684\u6700\u5927\u65f6\u95f4\u6233\uff0c\u7531\u6b64\u5bf9\u5e94\u7684\u65f6\u95f4\u6233\u4e3a\u8d77\u59cb\u503c\uff0c\u7136\u540e\u6bcf\u6b21\u7d2f\u52a0 freq \u53c2\u6570\u4f5c\u4e3a\u5206\u5272\u7ed3\u70b9\u8fdb\u884c\u5206\u7ec4\uff0c\u533a\u95f4\u60c5\u51b5\u4e3a\u5de6\u95ed\u53f3\u5f00\u3002\u4e0b\u9762\u6784\u9020\u4e00\u4e2a\u4e0d\u5747\u5300\u7684\u4f8b\u5b50\uff1a In [ 119 ]: idx = pd . date_range ( '20200101 8:26:35' , '20200101 9:31:58' , freq = '77s' ) In [ 120 ]: data = np . random . randint ( - 1 , 2 , len ( idx )) . cumsum () In [ 121 ]: s = pd . Series ( data , index = idx ) In [ 122 ]: s . head () Out [ 122 ]: 2020 - 01 - 01 08 : 26 : 35 - 1 2020 - 01 - 01 08 : 27 : 52 - 1 2020 - 01 - 01 08 : 29 : 09 - 2 2020 - 01 - 01 08 : 30 : 26 - 3 2020 - 01 - 01 08 : 31 : 43 - 4 Freq : 77 S , dtype : int32 \u4e0b\u9762\u5bf9\u5e94\u7684\u7b2c\u4e00\u4e2a\u7ec4\u8d77\u59cb\u503c\u4e3a 08:24:00 \uff0c\u5176\u662f\u4ece\u5f53\u5929 0 \u70b9\u589e\u52a0 72 \u4e2a freq=7 min \u5f97\u5230\u7684\uff0c\u5982\u679c\u518d\u589e\u52a0\u4e00\u4e2a freq \u5219\u8d85\u51fa\u4e86\u5e8f\u5217\u7684\u6700\u5c0f\u65f6\u95f4\u6233 08:26:35 \uff1a In [ 123 ]: s . resample ( '7min' ) . mean () . head () Out [ 123 ]: 2020 - 01 - 01 08 : 24 : 00 - 1.750000 2020 - 01 - 01 08 : 31 : 00 - 2.600000 2020 - 01 - 01 08 : 38 : 00 - 2.166667 2020 - 01 - 01 08 : 45 : 00 0.200000 2020 - 01 - 01 08 : 52 : 00 2.833333 Freq : 7 T , dtype : float64 \u6709\u65f6\u5019\uff0c\u7528\u6237\u5e0c\u671b\u4ece\u5e8f\u5217\u7684\u6700\u5c0f\u65f6\u95f4\u6233\u5f00\u59cb\u4f9d\u6b21\u589e\u52a0 freq \u8fdb\u884c\u5206\u7ec4\uff0c\u6b64\u65f6\u53ef\u4ee5\u6307\u5b9a origin \u53c2\u6570\u4e3a start \uff1a In [ 124 ]: s . resample ( '7min' , origin = 'start' ) . mean () . head () Out [ 124 ]: 2020 - 01 - 01 08 : 26 : 35 - 2.333333 2020 - 01 - 01 08 : 33 : 35 - 2.400000 2020 - 01 - 01 08 : 40 : 35 - 1.333333 2020 - 01 - 01 08 : 47 : 35 1.200000 2020 - 01 - 01 08 : 54 : 35 3.166667 Freq : 7 T , dtype : float64 \u5728\u8fd4\u56de\u503c\u4e2d\uff0c\u8981\u6ce8\u610f\u7d22\u5f15\u4e00\u822c\u662f\u53d6\u7ec4\u7684\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u4f46 M, A, Q, BM, BA, BQ, W \u8fd9\u4e03\u4e2a\u662f\u53d6\u5bf9\u5e94\u533a\u95f4\u7684\u6700\u540e\u4e00\u4e2a\u65f6\u95f4\u6233\uff1a In [ 125 ]: s = pd . Series ( np . random . randint ( 2 , size = 366 ), ..... : index = pd . date_range ( '2020-01-01' , ..... : '2020-12-31' )) ..... : In [ 126 ]: s . resample ( 'M' ) . mean () . head () Out [ 126 ]: 2020 - 01 - 31 0.451613 2020 - 02 - 29 0.448276 2020 - 03 - 31 0.516129 2020 - 04 - 30 0.566667 2020 - 05 - 31 0.451613 Freq : M , dtype : float64 In [ 127 ]: s . resample ( 'MS' ) . mean () . head () # \u7ed3\u679c\u4e00\u6837\uff0c\u4f46\u7d22\u5f15\u4e0d\u540c Out [ 127 ]: 2020 - 01 - 01 0.451613 2020 - 02 - 01 0.448276 2020 - 03 - 01 0.516129 2020 - 04 - 01 0.566667 2020 - 05 - 01 0.451613 Freq : MS , dtype : float64 \u516d\u3001\u7ec3\u4e60 Ex1\uff1a\u592a\u9633\u8f90\u5c04\u6570\u636e\u96c6 \u73b0\u6709\u4e00\u4efd\u5173\u4e8e\u592a\u9633\u8f90\u5c04\u7684\u6570\u636e\u96c6\uff1a In [ 128 ]: df = pd . read_csv ( 'data/solar.csv' , usecols = [ 'Data' , 'Time' , ..... : 'Radiation' , 'Temperature' ]) ..... : In [ 129 ]: df . head ( 3 ) Out [ 129 ]: Data Time Radiation Temperature 0 9 / 29 / 2016 12 : 00 : 00 AM 23 : 55 : 26 1.21 48 1 9 / 29 / 2016 12 : 00 : 00 AM 23 : 50 : 23 1.21 48 2 9 / 29 / 2016 12 : 00 : 00 AM 23 : 45 : 26 1.23 48 \u5c06 Datetime, Time \u5408\u5e76\u4e3a\u4e00\u4e2a\u65f6\u95f4\u5217 Datetime \uff0c\u540c\u65f6\u628a\u5b83\u4f5c\u4e3a\u7d22\u5f15\u540e\u6392\u5e8f\u3002 \u6bcf\u6761\u8bb0\u5f55\u65f6\u95f4\u7684\u95f4\u9694\u663e\u7136\u5e76\u4e0d\u4e00\u81f4\uff0c\u8bf7\u89e3\u51b3\u5982\u4e0b\u95ee\u9898\uff1a a. \u627e\u51fa\u95f4\u9694\u65f6\u95f4\u7684\u524d\u4e09\u4e2a\u6700\u5927\u503c\u6240\u5bf9\u5e94\u7684\u4e09\u7ec4\u65f6\u95f4\u6233\u3002 b. \u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5927\u81f4\u7684\u8303\u56f4\uff0c\u4f7f\u5f97\u7edd\u5927\u591a\u6570\u7684\u95f4\u9694\u65f6\u95f4\u90fd\u843d\u5728\u8fd9\u4e2a\u533a\u95f4\u4e2d\uff1f\u5982\u679c\u5b58\u5728\uff0c\u8bf7\u5bf9\u6b64\u8303\u56f4\u5185\u7684\u6837\u672c\u95f4\u9694\u79d2\u6570\u753b\u51fa\u67f1\u72b6\u56fe\uff0c\u8bbe\u7f6e bins=50 \u3002 \u6c42\u5982\u4e0b\u6307\u6807\u5bf9\u5e94\u7684 Series \uff1a a. \u6e29\u5ea6\u4e0e\u8f90\u5c04\u91cf\u7684 6 \u5c0f\u65f6\u6ed1\u52a8\u76f8\u5173\u7cfb\u6570 b. \u4ee5\u4e09\u70b9\u3001\u4e5d\u70b9\u3001\u5341\u4e94\u70b9\u3001\u4e8c\u5341\u4e00\u70b9\u4e3a\u5206\u5272\uff0c\u8be5\u89c2\u6d4b\u6240\u5728\u65f6\u95f4\u533a\u95f4\u7684\u6e29\u5ea6\u5747\u503c\u5e8f\u5217 c. \u6bcf\u4e2a\u89c2\u6d4b 6 \u5c0f\u65f6\u524d\u7684\u8f90\u5c04\u91cf\uff08\u4e00\u822c\u800c\u8a00\u4e0d\u4f1a\u6070\u597d\u53d6\u5230\uff0c\u6b64\u65f6\u53d6\u6700\u8fd1\u65f6\u95f4\u6233\u5bf9\u5e94\u7684\u8f90\u5c04\u91cf\uff09 Ex2\uff1a\u6c34\u679c\u9500\u91cf\u6570\u636e\u96c6 \u73b0\u6709\u4e00\u4efd 2019 \u5e74\u6bcf\u65e5\u6c34\u679c\u9500\u91cf\u8bb0\u5f55\u8868\uff1a In [ 130 ]: df = pd . read_csv ( 'data/fruit.csv' ) In [ 131 ]: df . head ( 3 ) Out [ 131 ]: Date Fruit Sale 0 2019 - 04 - 18 Peach 15 1 2019 - 12 - 29 Peach 15 2 2019 - 06 - 05 Peach 19 \u7edf\u8ba1\u5982\u4e0b\u6307\u6807\uff1a a. \u6bcf\u6708\u4e0a\u534a\u6708\uff0815 \u53f7\u53ca\u4e4b\u524d\uff09\u4e0e\u4e0b\u534a\u6708\u8461\u8404\u9500\u91cf\u7684\u6bd4\u503c b. \u6bcf\u6708\u6700\u540e\u4e00\u5929\u7684\u751f\u68a8\u9500\u91cf\u603b\u548c c. \u6bcf\u6708\u6700\u540e\u4e00\u5929\u5de5\u4f5c\u65e5\u7684\u751f\u68a8\u9500\u91cf\u603b\u548c d. \u6bcf\u6708\u6700\u540e\u4e94\u5929\u7684\u82f9\u679c\u9500\u91cf\u5747\u503c \u6309\u6708\u8ba1\u7b97\u5468\u4e00\u81f3\u5468\u65e5\u5404\u54c1\u79cd\u6c34\u679c\u7684\u5e73\u5747\u8bb0\u5f55\u6761\u6570\uff0c\u884c\u7d22\u5f15\u5916\u5c42\u4e3a\u6c34\u679c\u540d\u79f0\uff0c\u5185\u5c42\u4e3a\u6708\u4efd\uff0c\u5217\u7d22\u5f15\u4e3a\u661f\u671f\u3002 \u6309\u5929\u8ba1\u7b97\u5411\u524d 10 \u4e2a\u5de5\u4f5c\u65e5\u7a97\u53e3\u7684\u82f9\u679c\u9500\u91cf\u5747\u503c\u5e8f\u5217\uff0c\u975e\u5de5\u4f5c\u65e5\u7684\u503c\u7528\u4e0a\u4e00\u4e2a\u5de5\u4f5c\u65e5\u7684\u7ed3\u679c\u586b\u5145\u3002","title":"\u5341\u3001\u65f6\u5e8f\u6570\u636e"},{"location":"pandas/part10/#_1","text":"\u65f6\u95f4\u5e8f\u5217\u7684\u6982\u5ff5\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\u5341\u5206\u5e38\u89c1\uff0c\u4f46\u5bf9\u4e8e\u4e00\u4e2a\u5177\u4f53\u7684\u65f6\u5e8f\u4e8b\u4ef6\u800c\u8a00\uff0c\u53ef\u4ee5\u4ece\u591a\u4e2a\u65f6\u95f4\u5bf9\u8c61\u7684\u89d2\u5ea6\u6765\u63cf\u8ff0\u3002\u4f8b\u5982 2020 \u5e74 9 \u6708 7 \u65e5\u5468\u4e00\u65e9\u4e0a 8 \u70b9\u6574\u9700\u8981\u5230\u6559\u5ba4\u4e0a\u8bfe\uff0c\u8fd9\u4e2a\u8bfe\u4f1a\u5728\u5f53\u5929\u65e9\u4e0a 10 \u70b9\u7ed3\u675f\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u54ea\u4e9b\u65f6\u95f4\u6982\u5ff5\uff1f \u7b2c\u4e00\uff0c\u4f1a\u51fa\u73b0\u65f6\u95f4\u6233\uff08Date times\uff09\u7684\u6982\u5ff5\uff0c\u5373\u20192020-9-7 08:00:00\u2019\u548c\u20192020-9-7 10:00:00\u2019\u8fd9\u4e24\u4e2a\u65f6\u95f4\u70b9\u5206\u522b\u4ee3\u8868\u4e86\u4e0a\u8bfe\u548c\u4e0b\u8bfe\u7684\u65f6\u523b\uff0c\u5728 pandas \u4e2d\u79f0\u4e3a Timestamp \u3002\u540c\u65f6\uff0c\u4e00\u7cfb\u5217\u7684\u65f6\u95f4\u6233\u53ef\u4ee5\u7ec4\u6210 DatetimeIndex \uff0c\u800c\u5c06\u5b83\u653e\u5230 Series \u4e2d\u540e\uff0c Series \u7684\u7c7b\u578b\u5c31\u53d8\u4e3a\u4e86 datetime64[ns] \uff0c\u5982\u679c\u6709\u6d89\u53ca\u65f6\u533a\u5219\u4e3a datetime64[ns, tz] \uff0c\u5176\u4e2d tz \u662f timezone \u7684\u7b80\u5199\u3002 \u7b2c\u4e8c\uff0c\u4f1a\u51fa\u73b0\u65f6\u95f4\u5dee\uff08Time deltas\uff09\u7684\u6982\u5ff5\uff0c\u5373\u4e0a\u8bfe\u9700\u8981\u7684\u65f6\u95f4\uff0c\u4e24\u4e2a Timestamp \u505a\u5dee\u5c31\u5f97\u5230\u4e86\u65f6\u95f4\u5dee\uff0cpandas \u4e2d\u5229\u7528 Timedelta \u6765\u8868\u793a\u3002\u7c7b\u4f3c\u7684\uff0c\u4e00\u7cfb\u5217\u7684\u65f6\u95f4\u5dee\u5c31\u7ec4\u6210\u4e86 TimedeltaIndex \uff0c \u800c\u5c06\u5b83\u653e\u5230 Series \u4e2d\u540e\uff0c Series \u7684\u7c7b\u578b\u5c31\u53d8\u4e3a\u4e86 timedelta64[ns] \u3002 \u7b2c\u4e09\uff0c\u4f1a\u51fa\u73b0\u65f6\u95f4\u6bb5\uff08Time spans\uff09\u7684\u6982\u5ff5\uff0c\u5373\u5728 8 \u70b9\u5230 10 \u70b9\u8fd9\u4e2a\u533a\u95f4\u90fd\u4f1a\u6301\u7eed\u5730\u5728\u4e0a\u8bfe\uff0c\u5728 pandas \u5229\u7528 Period \u6765\u8868\u793a\u3002\u7c7b\u4f3c\u7684\uff0c\u4e00\u7cfb\u5217\u7684\u65f6\u95f4\u6bb5\u5c31\u7ec4\u6210\u4e86 PeriodIndex \uff0c \u800c\u5c06\u5b83\u653e\u5230 Series \u4e2d\u540e\uff0c Series \u7684\u7c7b\u578b\u5c31\u53d8\u4e3a\u4e86 Period \u3002 \u7b2c\u56db\uff0c\u4f1a\u51fa\u73b0\u65e5\u671f\u504f\u7f6e\uff08Date offsets\uff09\u7684\u6982\u5ff5\uff0c\u5047\u8bbe\u4f60\u53ea\u77e5\u9053 9 \u6708\u7684\u7b2c\u4e00\u4e2a\u5468\u4e00\u65e9\u4e0a 8 \u70b9\u8981\u53bb\u4e0a\u8bfe\uff0c\u4f46\u4e0d\u77e5\u9053\u5177\u4f53\u7684\u65e5\u671f\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u4e00\u4e2a\u7c7b\u578b\u6765\u5904\u7406\u6b64\u7c7b\u9700\u6c42\u3002\u518d\u4f8b\u5982\uff0c\u60f3\u8981\u77e5\u9053 2020 \u5e74 9 \u6708 7 \u65e5\u540e\u7684\u7b2c 30 \u4e2a\u5de5\u4f5c\u65e5\u662f\u54ea\u4e00\u5929\uff0c\u90a3\u4e48\u65f6\u95f4\u5dee\u5c31\u89e3\u51b3\u4e0d\u4e86\u4f60\u7684\u95ee\u9898\uff0c\u4ece\u800c pandas \u4e2d\u7684 DateOffset \u5c31\u51fa\u73b0\u4e86\u3002\u540c\u65f6\uff0c pandas \u4e2d\u6ca1\u6709\u4e3a\u4e00\u5217\u65f6\u95f4\u504f\u7f6e\u4e13\u95e8\u8bbe\u8ba1\u5b58\u50a8\u7c7b\u578b\uff0c\u7406\u7531\u4e5f\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u9700\u6c42\u6bd4\u8f83\u5947\u602a\uff0c\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u4e00\u6279\u65f6\u95f4\u7279\u5f81\u505a\u4e00\u4e2a\u7edf\u4e00\u7684\u7279\u6b8a\u65e5\u671f\u504f\u7f6e\u3002 \u901a\u8fc7\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5c31\u80fd\u591f\u5bb9\u6613\u5730\u603b\u7ed3\u51fa\u5b98\u65b9\u6587\u6863\u4e2d\u7684\u8fd9\u4e2a \u8868\u683c \uff1a \u6982\u5ff5 \u5355\u5143\u7d20\u7c7b\u578b \u6570\u7ec4\u7c7b\u578b pandas \u6570\u636e\u7c7b\u578b Date times Timestamp DatetimeIndex datetime64[ns] Time deltas Timedelta TimedeltaIndex timedelta64[ns] Time spans Period PeriodIndex period[freq] Date offsets DateOffset None None \u7531\u4e8e\u65f6\u95f4\u6bb5\u5bf9\u8c61 Period/PeriodIndex \u7684\u4f7f\u7528\u9891\u7387\u5e76\u4e0d\u9ad8\uff0c\u56e0\u6b64\u5c06\u4e0d\u8fdb\u884c\u8bb2\u89e3\uff0c\u800c\u53ea\u6d89\u53ca\u65f6\u95f4\u6233\u5e8f\u5217\u3001\u65f6\u95f4\u5dee\u5e8f\u5217\u548c\u65e5\u671f\u504f\u7f6e\u7684\u76f8\u5173\u5185\u5bb9\u3002","title":"\u4e00\u3001\u65f6\u5e8f\u4e2d\u7684\u57fa\u672c\u5bf9\u8c61"},{"location":"pandas/part10/#_2","text":"","title":"\u4e8c\u3001\u65f6\u95f4\u6233"},{"location":"pandas/part10/#1-timestamp","text":"\u5355\u4e2a\u65f6\u95f4\u6233\u7684\u751f\u6210\u5229\u7528 pd.Timestamp \u5b9e\u73b0\uff0c\u4e00\u822c\u800c\u8a00\u7684\u5e38\u89c1\u65e5\u671f\u683c\u5f0f\u90fd\u80fd\u88ab\u6210\u529f\u5730\u8f6c\u6362\uff1a In [ 3 ]: ts = pd . Timestamp ( '2020/1/1' ) In [ 4 ]: ts Out [ 4 ]: Timestamp ( '2020-01-01 00:00:00' ) In [ 5 ]: ts = pd . Timestamp ( '2020-1-1 08:10:30' ) In [ 6 ]: ts Out [ 6 ]: Timestamp ( '2020-01-01 08:10:30' ) \u901a\u8fc7 year, month, day, hour, min, second \u53ef\u4ee5\u83b7\u53d6\u5177\u4f53\u7684\u6570\u503c\uff1a In [ 7 ]: ts . year Out [ 7 ]: 2020 In [ 8 ]: ts . month Out [ 8 ]: 1 In [ 9 ]: ts . day Out [ 9 ]: 1 In [ 10 ]: ts . hour Out [ 10 ]: 8 In [ 11 ]: ts . minute Out [ 11 ]: 10 In [ 12 ]: ts . second Out [ 12 ]: 30 \u5728 pandas \u4e2d\uff0c\u65f6\u95f4\u6233\u7684\u6700\u5c0f\u7cbe\u5ea6\u4e3a\u7eb3\u79d2 ns \uff0c\u7531\u4e8e\u4f7f\u7528\u4e86 64 \u4f4d\u5b58\u50a8\uff0c\u53ef\u4ee5\u8868\u793a\u7684\u65f6\u95f4\u8303\u56f4\u5927\u7ea6\u53ef\u4ee5\u5982\u4e0b\u8ba1\u7b97\uff1a \u901a\u8fc7 pd.Timestamp.max \u548c pd.Timestamp.min \u53ef\u4ee5\u83b7\u53d6\u65f6\u95f4\u6233\u8868\u793a\u7684\u8303\u56f4\uff0c\u53ef\u4ee5\u770b\u5230\u786e\u5b9e\u8868\u793a\u7684\u533a\u95f4\u5e74\u6570\u5927\u5c0f\u6b63\u5982\u4e0a\u8ff0\u8ba1\u7b97\u7ed3\u679c\uff1a In [ 13 ]: pd . Timestamp . max Out [ 13 ]: Timestamp ( '2262-04-11 23:47:16.854775807' ) In [ 14 ]: pd . Timestamp . min Out [ 14 ]: Timestamp ( '1677-09-21 00:12:43.145225' ) In [ 15 ]: pd . Timestamp . max . year - pd . Timestamp . min . year Out [ 15 ]: 585","title":"1. Timestamp \u7684\u6784\u9020\u4e0e\u5c5e\u6027"},{"location":"pandas/part10/#2-datetime","text":"\u4e00\u7ec4\u65f6\u95f4\u6233\u53ef\u4ee5\u7ec4\u6210\u65f6\u95f4\u5e8f\u5217\uff0c\u53ef\u4ee5\u7528 to_datetime \u548c date_range \u6765\u751f\u6210\u3002\u5176\u4e2d\uff0c to_datetime \u80fd\u591f\u628a\u4e00\u5217\u65f6\u95f4\u6233\u683c\u5f0f\u7684\u5bf9\u8c61\u8f6c\u6362\u6210\u4e3a datetime64[ns] \u7c7b\u578b\u7684\u65f6\u95f4\u5e8f\u5217\uff1a In [ 16 ]: pd . to_datetime ([ '2020-1-1' , '2020-1-3' , '2020-1-6' ]) Out [ 16 ]: DatetimeIndex ([ '2020-01-01' , '2020-01-03' , '2020-01-06' ], dtype = 'datetime64[ns]' , freq = None ) In [ 17 ]: df = pd . read_csv ( 'data/learn_pandas.csv' ) In [ 18 ]: s = pd . to_datetime ( df . Test_Date ) In [ 19 ]: s . head () Out [ 19 ]: 0 2019 - 10 - 05 1 2019 - 09 - 04 2 2019 - 09 - 12 3 2020 - 01 - 03 4 2019 - 11 - 06 Name : Test_Date , dtype : datetime64 [ ns ] \u5728\u6781\u5c11\u6570\u60c5\u51b5\uff0c\u65f6\u95f4\u6233\u7684\u683c\u5f0f\u4e0d\u6ee1\u8db3\u8f6c\u6362\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u4f7f\u7528 format \u8fdb\u884c\u5339\u914d\uff1a In [ 20 ]: temp = pd . to_datetime ([ '2020 \\\\ 1 \\\\ 1' , '2020 \\\\ 1 \\\\ 3' ], format = '%Y \\\\ %m \\\\ %d ' ) In [ 21 ]: temp Out [ 21 ]: DatetimeIndex ([ '2020-01-01' , '2020-01-03' ], dtype = 'datetime64[ns]' , freq = None ) \u6ce8\u610f\u4e0a\u9762\u7531\u4e8e\u4f20\u5165\u7684\u662f\u5217\u8868\uff0c\u800c\u975e pandas \u5185\u90e8\u7684 Series \uff0c\u56e0\u6b64\u8fd4\u56de\u7684\u662f DatetimeIndex \uff0c\u5982\u679c\u60f3\u8981\u8f6c\u4e3a datetime64[ns] \u7684\u5e8f\u5217\uff0c\u9700\u8981\u663e\u5f0f\u7528 Series \u8f6c\u5316\uff1a In [ 22 ]: pd . Series ( temp ) . head () Out [ 22 ]: 0 2020 - 01 - 01 1 2020 - 01 - 03 dtype : datetime64 [ ns ] \u53e6\u5916\uff0c\u8fd8\u5b58\u5728\u4e00\u79cd\u628a\u8868\u7684\u591a\u5217\u65f6\u95f4\u5c5e\u6027\u62fc\u63a5\u8f6c\u4e3a\u65f6\u95f4\u5e8f\u5217\u7684 to_datetime \u64cd\u4f5c\uff0c\u6b64\u65f6\u7684\u5217\u540d\u5fc5\u987b\u548c\u4ee5\u4e0b\u7ed9\u5b9a\u7684\u65f6\u95f4\u5173\u952e\u8bcd\u5217\u540d\u4e00\u81f4\uff1a In [ 23 ]: df_date_cols = pd . DataFrame ({ 'year' : [ 2020 , 2020 ], .... : 'month' : [ 1 , 1 ], .... : 'day' : [ 1 , 2 ], .... : 'hour' : [ 10 , 20 ], .... : 'minute' : [ 30 , 50 ], .... : 'second' : [ 20 , 40 ]}) .... : In [ 24 ]: pd . to_datetime ( df_date_cols ) Out [ 24 ]: 0 2020 - 01 - 01 10 : 30 : 20 1 2020 - 01 - 02 20 : 50 : 40 dtype : datetime64 [ ns ] date_range \u662f\u4e00\u79cd\u751f\u6210\u8fde\u7eed\u95f4\u9694\u65f6\u95f4\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u5176\u91cd\u8981\u7684\u53c2\u6570\u4e3a start, end, freq, periods \uff0c\u5b83\u4eec\u5206\u522b\u8868\u793a\u5f00\u59cb\u65f6\u95f4\uff0c\u7ed3\u675f\u65f6\u95f4\uff0c\u65f6\u95f4\u95f4\u9694\uff0c\u65f6\u95f4\u6233\u4e2a\u6570\u3002\u5176\u4e2d\uff0c\u56db\u4e2a\u4e2d\u7684\u4e09\u4e2a\u53c2\u6570\u51b3\u5b9a\u4e86\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u4e00\u4e2a\u5c31\u968f\u4e4b\u786e\u5b9a\u4e86\u3002\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u5f00\u59cb\u6216\u7ed3\u675f\u65e5\u671f\u5982\u679c\u4f5c\u4e3a\u7aef\u70b9\u5219\u5b83\u4f1a\u88ab\u5305\u542b\uff1a In [ 25 ]: pd . date_range ( '2020-1-1' , '2020-1-21' , freq = '10D' ) # \u5305\u542b Out [ 25 ]: DatetimeIndex ([ '2020-01-01' , '2020-01-11' , '2020-01-21' ], dtype = 'datetime64[ns]' , freq = '10D' ) In [ 26 ]: pd . date_range ( '2020-1-1' , '2020-2-28' , freq = '10D' ) Out [ 26 ]: DatetimeIndex ([ '2020-01-01' , '2020-01-11' , '2020-01-21' , '2020-01-31' , '2020-02-10' , '2020-02-20' ], dtype = 'datetime64[ns]' , freq = '10D' ) In [ 27 ]: pd . date_range ( '2020-1-1' , .... : '2020-2-28' , periods = 6 ) # \u7531\u4e8e\u7ed3\u675f\u65e5\u671f\u65e0\u6cd5\u53d6\u5230\uff0cfreq\u4e0d\u4e3a10\u5929 .... : Out [ 27 ]: DatetimeIndex ([ '2020-01-01 00:00:00' , '2020-01-12 14:24:00' , '2020-01-24 04:48:00' , '2020-02-04 19:12:00' , '2020-02-16 09:36:00' , '2020-02-28 00:00:00' ], dtype = 'datetime64[ns]' , freq = None ) \u8fd9\u91cc\u7684 freq \u53c2\u6570\u4e0e DateOffset \u5bf9\u8c61\u7d27\u5bc6\u76f8\u5173\uff0c\u5c06\u5728\u7b2c\u56db\u8282\u4ecb\u7ecd\u5176\u5177\u4f53\u7684\u7528\u6cd5\u3002 \u7ec3\u4e00\u7ec3 Timestamp \u4e0a\u5b9a\u4e49\u4e86\u4e00\u4e2a value \u5c5e\u6027\uff0c\u5176\u8fd4\u56de\u7684\u6574\u6570\u503c\u4ee3\u8868\u4e86\u4ece 1970 \u5e74 1 \u6708 1 \u65e5\u96f6\u70b9\u5230\u7ed9\u5b9a\u65f6\u95f4\u6233\u76f8\u5dee\u7684\u7eb3\u79d2\u6570\uff0c\u8bf7\u5229\u7528\u8fd9\u4e2a\u5c5e\u6027\u6784\u9020\u4e00\u4e2a\u968f\u673a\u751f\u6210\u7ed9\u5b9a\u65e5\u671f\u533a\u95f4\u5185\u65e5\u671f\u5e8f\u5217\u7684\u51fd\u6570\u3002 \u6700\u540e\uff0c\u8981\u4ecb\u7ecd\u4e00\u79cd\u6539\u53d8\u5e8f\u5217\u91c7\u6837\u9891\u7387\u7684\u65b9\u6cd5 asfreq \uff0c\u5b83\u80fd\u591f\u6839\u636e\u7ed9\u5b9a\u7684 freq \u5bf9\u5e8f\u5217\u8fdb\u884c\u7c7b\u4f3c\u4e8e reindex \u7684\u64cd\u4f5c\uff1a In [ 28 ]: s = pd . Series ( np . random . rand ( 5 ), .... : index = pd . to_datetime ([ .... : '2020-1- %d ' % i for i in range ( 1 , 10 , 2 )])) .... : In [ 29 ]: s . head () Out [ 29 ]: 2020 - 01 - 01 0.836578 2020 - 01 - 03 0.678419 2020 - 01 - 05 0.711897 2020 - 01 - 07 0.487429 2020 - 01 - 09 0.604705 dtype : float64 In [ 30 ]: s . asfreq ( 'D' ) . head () Out [ 30 ]: 2020 - 01 - 01 0.836578 2020 - 01 - 02 NaN 2020 - 01 - 03 0.678419 2020 - 01 - 04 NaN 2020 - 01 - 05 0.711897 Freq : D , dtype : float64 In [ 31 ]: s . asfreq ( '12H' ) . head () Out [ 31 ]: 2020 - 01 - 01 00 : 00 : 00 0.836578 2020 - 01 - 01 12 : 00 : 00 NaN 2020 - 01 - 02 00 : 00 : 00 NaN 2020 - 01 - 02 12 : 00 : 00 NaN 2020 - 01 - 03 00 : 00 : 00 0.678419 Freq : 12 H , dtype : float64 datetime64[ns] \u5e8f\u5217\u7684\u6700\u503c\u4e0e\u5747\u503c \u524d\u9762\u63d0\u5230\u4e86 datetime64[ns] \u672c\u8d28\u4e0a\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u5927\u6574\u6570\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8be5\u7c7b\u578b\u7684\u5e8f\u5217\uff0c\u53ef\u4ee5\u4f7f\u7528 max, min, mean \uff0c\u6765\u53d6\u5f97\u6700\u5927\u65f6\u95f4\u6233\u3001\u6700\u5c0f\u65f6\u95f4\u6233\u548c \u201c\u5e73\u5747\u201d \u65f6\u95f4\u6233\u3002","title":"2. Datetime \u5e8f\u5217\u7684\u751f\u6210"},{"location":"pandas/part10/#3-dt","text":"\u5982\u540c category, string \u7684\u5e8f\u5217\u4e0a\u5b9a\u4e49\u4e86 cat, str \u6765\u5b8c\u6210\u5206\u7c7b\u6570\u636e\u548c\u6587\u672c\u6570\u636e\u7684\u64cd\u4f5c\uff0c\u5728\u65f6\u5e8f\u7c7b\u578b\u7684\u5e8f\u5217\u4e0a\u5b9a\u4e49\u4e86 dt \u5bf9\u8c61\u6765\u5b8c\u6210\u8bb8\u591a\u65f6\u95f4\u5e8f\u5217\u7684\u76f8\u5173\u64cd\u4f5c\u3002\u8fd9\u91cc\u5bf9\u4e8e datetime64[ns] \u7c7b\u578b\u800c\u8a00\uff0c\u53ef\u4ee5\u5927\u81f4\u5206\u4e3a\u4e09\u7c7b\u64cd\u4f5c\uff1a\u53d6\u51fa\u65f6\u95f4\u76f8\u5173\u7684\u5c5e\u6027\u3001\u5224\u65ad\u65f6\u95f4\u6233\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3001\u53d6\u6574\u64cd\u4f5c\u3002 \u7b2c\u4e00\u7c7b\u64cd\u4f5c\u7684\u5e38\u7528\u5c5e\u6027\u5305\u62ec\uff1a date, time, year, month, day, hour, minute, second, microsecond, nanosecond, dayofweek, dayofyear, weekofyear, daysinmonth, quarter \uff0c\u5176\u4e2d daysinmonth, quarter \u5206\u522b\u8868\u793a\u8be5\u6708\u4e00\u5171\u6709\u51e0\u5929\u548c\u5b63\u5ea6\u3002 In [ 32 ]: s = pd . Series ( pd . date_range ( '2020-1-1' , '2020-1-3' , freq = 'D' )) In [ 33 ]: s . dt . date Out [ 33 ]: 0 2020 - 01 - 01 1 2020 - 01 - 02 2 2020 - 01 - 03 dtype : object In [ 34 ]: s . dt . time Out [ 34 ]: 0 00 : 00 : 00 1 00 : 00 : 00 2 00 : 00 : 00 dtype : object In [ 35 ]: s . dt . day Out [ 35 ]: 0 1 1 2 2 3 dtype : int64 In [ 36 ]: s . dt . daysinmonth Out [ 36 ]: 0 31 1 31 2 31 dtype : int64 \u5728\u8fd9\u4e9b\u5c5e\u6027\u4e2d\uff0c\u7ecf\u5e38\u4f7f\u7528\u7684\u662f dayofweek \uff0c\u5b83\u8fd4\u56de\u4e86\u5468\u4e2d\u7684\u661f\u671f\u60c5\u51b5\uff0c\u5468\u4e00\u4e3a 0\u3001\u5468\u4e8c\u4e3a 1\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff1a In [ 37 ]: s . dt . dayofweek Out [ 37 ]: 0 2 1 3 2 4 dtype : int64 \u6b64\u5916\uff0c\u53ef\u4ee5\u901a\u8fc7 month_name, day_name \u8fd4\u56de\u82f1\u6587\u7684\u6708\u540d\u548c\u661f\u671f\u540d\uff0c\u6ce8\u610f\u5b83\u4eec\u662f\u65b9\u6cd5\u800c\u4e0d\u662f\u5c5e\u6027\uff1a In [ 38 ]: s . dt . month_name () Out [ 38 ]: 0 January 1 January 2 January dtype : object In [ 39 ]: s . dt . day_name () Out [ 39 ]: 0 Wednesday 1 Thursday 2 Friday dtype : object \u7b2c\u4e8c\u7c7b\u5224\u65ad\u64cd\u4f5c\u4e3b\u8981\u7528\u4e8e\u6d4b\u8bd5\u662f\u5426\u4e3a\u6708 / \u5b63 / \u5e74\u7684\u7b2c\u4e00\u5929\u6216\u8005\u6700\u540e\u4e00\u5929\uff1a In [ 40 ]: s . dt . is_year_start # \u8fd8\u53ef\u9009 is_quarter/month_start Out [ 40 ]: 0 True 1 False 2 False dtype : bool In [ 41 ]: s . dt . is_year_end # \u8fd8\u53ef\u9009 is_quarter/month_end Out [ 41 ]: 0 False 1 False 2 False dtype : bool \u7b2c\u4e09\u7c7b\u7684\u53d6\u6574\u64cd\u4f5c\u5305\u542b round, ceil, floor \uff0c\u5b83\u4eec\u7684\u516c\u5171\u53c2\u6570\u4e3a freq \uff0c\u5e38\u7528\u7684\u5305\u62ec H, min, S \uff08\u5c0f\u65f6\u3001\u5206\u949f\u3001\u79d2\uff09\uff0c\u6240\u6709\u53ef\u9009\u7684 freq \u53ef\u53c2\u8003 \u6b64\u5904 \u3002 In [ 42 ]: s = pd . Series ( pd . date_range ( '2020-1-1 20:35:00' , .... : '2020-1-1 22:35:00' , .... : freq = '45min' )) .... : In [ 43 ]: s Out [ 43 ]: 0 2020 - 01 - 01 20 : 35 : 00 1 2020 - 01 - 01 21 : 20 : 00 2 2020 - 01 - 01 22 : 05 : 00 dtype : datetime64 [ ns ] In [ 44 ]: s . dt . round ( '1H' ) Out [ 44 ]: 0 2020 - 01 - 01 21 : 00 : 00 1 2020 - 01 - 01 21 : 00 : 00 2 2020 - 01 - 01 22 : 00 : 00 dtype : datetime64 [ ns ] In [ 45 ]: s . dt . ceil ( '1H' ) Out [ 45 ]: 0 2020 - 01 - 01 21 : 00 : 00 1 2020 - 01 - 01 22 : 00 : 00 2 2020 - 01 - 01 23 : 00 : 00 dtype : datetime64 [ ns ] In [ 46 ]: s . dt . floor ( '1H' ) Out [ 46 ]: 0 2020 - 01 - 01 20 : 00 : 00 1 2020 - 01 - 01 21 : 00 : 00 2 2020 - 01 - 01 22 : 00 : 00 dtype : datetime64 [ ns ]","title":"3. dt \u5bf9\u8c61"},{"location":"pandas/part10/#4","text":"\u4e00\u822c\u800c\u8a00\uff0c\u65f6\u95f4\u6233\u5e8f\u5217\u4f5c\u4e3a\u7d22\u5f15\u4f7f\u7528\u3002\u5982\u679c\u60f3\u8981\u9009\u51fa\u67d0\u4e2a\u5b50\u65f6\u95f4\u6233\u5e8f\u5217\uff0c\u7b2c\u4e00\u7c7b\u65b9\u6cd5\u662f\u5229\u7528 dt \u5bf9\u8c61\u548c\u5e03\u5c14\u6761\u4ef6\u8054\u5408\u4f7f\u7528\uff0c\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u5229\u7528\u5207\u7247\uff0c\u540e\u8005\u5e38\u7528\u4e8e\u8fde\u7eed\u65f6\u95f4\u6233\u3002\u4e0b\u9762\uff0c\u4e3e\u4e00\u4e9b\u4f8b\u5b50\u8bf4\u660e\uff1a In [ 47 ]: s = pd . Series ( np . random . randint ( 2 , size = 366 ), .... : index = pd . date_range ( .... : '2020-01-01' , '2020-12-31' )) .... : In [ 48 ]: idx = pd . Series ( s . index ) . dt In [ 49 ]: s . head () Out [ 49 ]: 2020 - 01 - 01 1 2020 - 01 - 02 1 2020 - 01 - 03 0 2020 - 01 - 04 1 2020 - 01 - 05 0 Freq : D , dtype : int32 Example1\uff1a\u6bcf\u6708\u7684\u7b2c\u4e00\u5929\u6216\u8005\u6700\u540e\u4e00\u5929 In [ 50 ]: s [( idx . is_month_start | idx . is_month_end ) . values ] . head () Out [ 50 ]: 2020 - 01 - 01 1 2020 - 01 - 31 0 2020 - 02 - 01 1 2020 - 02 - 29 1 2020 - 03 - 01 0 dtype : int32 Example2\uff1a\u53cc\u4f11\u65e5 In [ 51 ]: s [ idx . dayofweek . isin ([ 5 , 6 ]) . values ] . head () Out [ 51 ]: 2020 - 01 - 04 1 2020 - 01 - 05 0 2020 - 01 - 11 0 2020 - 01 - 12 1 2020 - 01 - 18 1 dtype : int32 Example3\uff1a\u53d6\u51fa\u5355\u65e5\u503c In [ 52 ]: s [ '2020-01-01' ] Out [ 52 ]: 1 In [ 53 ]: s [ '20200101' ] # \u81ea\u52a8\u8f6c\u6362\u6807\u51c6\u683c\u5f0f Out [ 53 ]: 1 Example4\uff1a\u53d6\u51fa\u4e03\u6708 In [ 54 ]: s [ '2020-07' ] . head () Out [ 54 ]: 2020 - 07 - 01 0 2020 - 07 - 02 1 2020 - 07 - 03 0 2020 - 07 - 04 0 2020 - 07 - 05 0 Freq : D , dtype : int32 Example5\uff1a\u53d6\u51fa 5 \u6708\u521d\u81f3 7 \u6708 15 \u65e5 In [ 55 ]: s [ '2020-05' : '2020-7-15' ] . head () Out [ 55 ]: 2020 - 05 - 01 0 2020 - 05 - 02 1 2020 - 05 - 03 0 2020 - 05 - 04 1 2020 - 05 - 05 1 Freq : D , dtype : int32 In [ 56 ]: s [ '2020-05' : '2020-7-15' ] . tail () Out [ 56 ]: 2020 - 07 - 11 0 2020 - 07 - 12 0 2020 - 07 - 13 1 2020 - 07 - 14 0 2020 - 07 - 15 1 Freq : D , dtype : int32","title":"4. \u65f6\u95f4\u6233\u7684\u5207\u7247\u4e0e\u7d22\u5f15"},{"location":"pandas/part10/#_3","text":"","title":"\u4e09\u3001\u65f6\u95f4\u5dee"},{"location":"pandas/part10/#1-timedelta","text":"\u6b63\u5982\u5728\u7b2c\u4e00\u8282\u4e2d\u6240\u8bf4\uff0c\u65f6\u95f4\u5dee\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e24\u4e2a\u65f6\u95f4\u6233\u7684\u5dee\uff0c\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u901a\u8fc7 pd.Timedelta \u6765\u6784\u9020\uff1a In [ 57 ]: pd . Timestamp ( '20200102 08:00:00' ) - pd . Timestamp ( '20200101 07:35:00' ) Out [ 57 ]: Timedelta ( '1 days 00:25:00' ) In [ 58 ]: pd . Timedelta ( days = 1 , minutes = 25 ) # \u9700\u8981\u6ce8\u610f\u52a0s Out [ 58 ]: Timedelta ( '1 days 00:25:00' ) In [ 59 ]: pd . Timedelta ( '1 days 25 minutes' ) # \u5b57\u7b26\u4e32\u751f\u6210 Out [ 59 ]: Timedelta ( '1 days 00:25:00' ) \u751f\u6210\u65f6\u95f4\u5dee\u5e8f\u5217\u7684\u4e3b\u8981\u65b9\u5f0f\u662f pd.to_timedelta \uff0c\u5176\u7c7b\u578b\u4e3a timedelta64[ns] \uff1a In [ 60 ]: s = pd . to_timedelta ( df . Time_Record ) In [ 61 ]: s . head () Out [ 61 ]: 0 0 days 00 : 04 : 34 1 0 days 00 : 04 : 20 2 0 days 00 : 05 : 22 3 0 days 00 : 04 : 08 4 0 days 00 : 05 : 22 Name : Time_Record , dtype : timedelta64 [ ns ] \u4e0e date_range \u4e00\u6837\uff0c\u65f6\u95f4\u5dee\u5e8f\u5217\u4e5f\u53ef\u4ee5\u7528 timedelta_range \u6765\u751f\u6210\uff0c\u5b83\u4eec\u4e24\u8005\u5177\u6709\u4e00\u81f4\u7684\u53c2\u6570\uff1a In [ 62 ]: pd . timedelta_range ( '0s' , '1000s' , freq = '6min' ) Out [ 62 ]: TimedeltaIndex ([ '0 days 00:00:00' , '0 days 00:06:00' , '0 days 00:12:00' ], dtype = 'timedelta64[ns]' , freq = '6T' ) In [ 63 ]: pd . timedelta_range ( '0s' , '1000s' , periods = 3 ) Out [ 63 ]: TimedeltaIndex ([ '0 days 00:00:00' , '0 days 00:08:20' , '0 days 00:16:40' ], dtype = 'timedelta64[ns]' , freq = None ) \u5bf9\u4e8e Timedelta \u5e8f\u5217\uff0c\u540c\u6837\u4e5f\u5b9a\u4e49\u4e86 dt \u5bf9\u8c61\uff0c\u4e0a\u9762\u4e3b\u8981\u5b9a\u4e49\u4e86\u7684\u5c5e\u6027\u5305\u62ec days, seconds, mircroseconds, nanoseconds \uff0c\u5b83\u4eec\u5206\u522b\u8fd4\u56de\u4e86\u5bf9\u5e94\u7684\u65f6\u95f4\u5dee\u7279\u5f81\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684 seconds \u4e0d\u662f\u6307\u5355\u7eaf\u7684\u79d2\uff0c\u800c\u662f\u5bf9\u5929\u6570\u53d6\u4f59\u540e\u5269\u4f59\u7684\u79d2\u6570\uff1a In [ 64 ]: s . dt . seconds . head () Out [ 64 ]: 0 274 1 260 2 322 3 248 4 322 Name : Time_Record , dtype : int64 \u5982\u679c\u4e0d\u60f3\u5bf9\u5929\u6570\u53d6\u4f59\u800c\u76f4\u63a5\u5bf9\u5e94\u79d2\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 total_seconds In [ 65 ]: s . dt . total_seconds () . head () Out [ 65 ]: 0 274.0 1 260.0 2 322.0 3 248.0 4 322.0 Name : Time_Record , dtype : float64 \u4e0e\u65f6\u95f4\u6233\u5e8f\u5217\u7c7b\u4f3c\uff0c\u53d6\u6574\u51fd\u6570\u4e5f\u662f\u53ef\u4ee5\u5728 dt \u5bf9\u8c61\u4e0a\u4f7f\u7528\u7684\uff1a In [ 66 ]: pd . to_timedelta ( df . Time_Record ) . dt . round ( 'min' ) . head () Out [ 66 ]: 0 0 days 00 : 05 : 00 1 0 days 00 : 04 : 00 2 0 days 00 : 05 : 00 3 0 days 00 : 04 : 00 4 0 days 00 : 05 : 00 Name : Time_Record , dtype : timedelta64 [ ns ]","title":"1. Timedelta \u7684\u751f\u6210"},{"location":"pandas/part10/#2-timedelta","text":"\u65f6\u95f4\u5dee\u652f\u6301\u7684\u5e38\u7528\u8fd0\u7b97\u6709\u4e09\u7c7b\uff1a\u4e0e\u6807\u91cf\u7684\u4e58\u6cd5\u8fd0\u7b97\u3001\u4e0e\u65f6\u95f4\u6233\u7684\u52a0\u51cf\u6cd5\u8fd0\u7b97\u3001\u4e0e\u65f6\u95f4\u5dee\u7684\u52a0\u51cf\u6cd5\u4e0e\u9664\u6cd5\u8fd0\u7b97\uff1a In [ 67 ]: td1 = pd . Timedelta ( days = 1 ) In [ 68 ]: td2 = pd . Timedelta ( days = 3 ) In [ 69 ]: ts = pd . Timestamp ( '20200101' ) In [ 70 ]: td1 * 2 Out [ 70 ]: Timedelta ( '2 days 00:00:00' ) In [ 71 ]: td2 - td1 Out [ 71 ]: Timedelta ( '2 days 00:00:00' ) In [ 72 ]: ts + td1 Out [ 72 ]: Timestamp ( '2020-01-02 00:00:00' ) In [ 73 ]: ts - td1 Out [ 73 ]: Timestamp ( '2019-12-31 00:00:00' ) \u8fd9\u4e9b\u8fd0\u7b97\u90fd\u53ef\u4ee5\u79fb\u690d\u5230\u65f6\u95f4\u5dee\u7684\u5e8f\u5217\u4e0a\uff1a In [ 74 ]: td1 = pd . timedelta_range ( start = '1 days' , periods = 5 ) In [ 75 ]: td2 = pd . timedelta_range ( start = '12 hours' , .... : freq = '2H' , .... : periods = 5 ) .... : In [ 76 ]: ts = pd . date_range ( '20200101' , '20200105' ) In [ 77 ]: td1 * 5 Out [ 77 ]: TimedeltaIndex ([ '5 days' , '10 days' , '15 days' , '20 days' , '25 days' ], dtype = 'timedelta64[ns]' , freq = '5D' ) In [ 78 ]: td1 * pd . Series ( list ( range ( 5 ))) # \u9010\u4e2a\u76f8\u4e58 Out [ 78 ]: 0 0 days 1 2 days 2 6 days 3 12 days 4 20 days dtype : timedelta64 [ ns ] In [ 79 ]: td1 - td2 Out [ 79 ]: TimedeltaIndex ([ '0 days 12:00:00' , '1 days 10:00:00' , '2 days 08:00:00' , '3 days 06:00:00' , '4 days 04:00:00' ], dtype = 'timedelta64[ns]' , freq = None ) In [ 80 ]: td1 + pd . Timestamp ( '20200101' ) Out [ 80 ]: DatetimeIndex ([ '2020-01-02' , '2020-01-03' , '2020-01-04' , '2020-01-05' , '2020-01-06' ], dtype = 'datetime64[ns]' , freq = 'D' ) In [ 81 ]: td1 + ts # \u9010\u4e2a\u76f8\u52a0 Out [ 81 ]: DatetimeIndex ([ '2020-01-02' , '2020-01-04' , '2020-01-06' , '2020-01-08' , '2020-01-10' ], dtype = 'datetime64[ns]' , freq = None )","title":"2. Timedelta \u7684\u8fd0\u7b97"},{"location":"pandas/part10/#_4","text":"","title":"\u56db\u3001\u65e5\u671f\u504f\u7f6e"},{"location":"pandas/part10/#1-offset","text":"\u65e5\u671f\u504f\u7f6e\u662f\u4e00\u79cd\u548c\u65e5\u5386\u76f8\u5173\u7684\u7279\u6b8a\u65f6\u95f4\u5dee\uff0c\u4f8b\u5982\u56de\u5230\u7b2c\u4e00\u8282\u4e2d\u7684\u4e24\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u6c42 2020 \u5e74 9 \u6708\u7b2c\u4e00\u4e2a\u5468\u4e00\u7684\u65e5\u671f\uff0c\u4ee5\u53ca\u5982\u4f55\u6c42 2020 \u5e74 9 \u6708 7 \u65e5\u540e\u7684\u7b2c 30 \u4e2a\u5de5\u4f5c\u65e5\u662f\u54ea\u4e00\u5929\u3002 In [ 82 ]: pd . Timestamp ( '20200831' ) + pd . offsets . WeekOfMonth ( week = 0 , weekday = 0 ) Out [ 82 ]: Timestamp ( '2020-09-07 00:00:00' ) In [ 83 ]: pd . Timestamp ( '20200907' ) + pd . offsets . BDay ( 30 ) Out [ 83 ]: Timestamp ( '2020-10-19 00:00:00' ) \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c Offset \u5bf9\u8c61\u5728 pd.offsets \u4e2d\u88ab\u5b9a\u4e49\u3002\u5f53\u4f7f\u7528 + \u65f6\u83b7\u53d6\u79bb\u5176\u6700\u8fd1\u7684\u4e0b\u4e00\u4e2a\u65e5\u671f\uff0c\u5f53\u4f7f\u7528 - \u65f6\u83b7\u53d6\u79bb\u5176\u6700\u8fd1\u7684\u4e0a\u4e00\u4e2a\u65e5\u671f\uff1a In [ 84 ]: pd . Timestamp ( '20200831' ) - pd . offsets . WeekOfMonth ( week = 0 , weekday = 0 ) Out [ 84 ]: Timestamp ( '2020-08-03 00:00:00' ) In [ 85 ]: pd . Timestamp ( '20200907' ) - pd . offsets . BDay ( 30 ) Out [ 85 ]: Timestamp ( '2020-07-27 00:00:00' ) In [ 86 ]: pd . Timestamp ( '20200907' ) + pd . offsets . MonthEnd () Out [ 86 ]: Timestamp ( '2020-09-30 00:00:00' ) \u5e38\u7528\u7684\u65e5\u671f\u504f\u7f6e\u5982\u4e0b\u53ef\u4ee5\u67e5\u9605\u8fd9\u91cc\u7684 \u6587\u6863 \u63cf\u8ff0\u3002\u5728\u6587\u6863\u7f57\u5217\u7684 Offset \u4e2d\uff0c\u9700\u8981\u4ecb\u7ecd\u4e00\u4e2a\u7279\u6b8a\u7684 Offset \u5bf9\u8c61 CDay \uff0c\u5176\u4e2d\u7684 holidays, weekmask \u53c2\u6570\u80fd\u591f\u5206\u522b\u5bf9\u81ea\u5b9a\u4e49\u7684\u65e5\u671f\u548c\u661f\u671f\u8fdb\u884c\u8fc7\u6ee4\uff0c\u524d\u8005\u4f20\u5165\u4e86\u9700\u8981\u8fc7\u6ee4\u7684\u65e5\u671f\u5217\u8868\uff0c\u540e\u8005\u4f20\u5165\u7684\u662f\u4e09\u4e2a\u5b57\u6bcd\u7684\u661f\u671f\u7f29\u5199\u6784\u6210\u7684\u661f\u671f\u5b57\u7b26\u4e32\uff0c\u5176\u4f5c\u7528\u662f\u53ea\u4fdd\u7559\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u661f\u671f\uff1a In [ 87 ]: my_filter = pd . offsets . CDay ( n = 1 , weekmask = 'Wed Fri' , holidays = [ '20200109' ]) In [ 88 ]: dr = pd . date_range ( '20200108' , '20200111' ) In [ 89 ]: dr . to_series () . dt . dayofweek Out [ 89 ]: 2020 - 01 - 08 2 2020 - 01 - 09 3 2020 - 01 - 10 4 2020 - 01 - 11 5 Freq : D , dtype : int64 In [ 90 ]: [ i + my_filter for i in dr ] Out [ 90 ]: [ Timestamp ( '2020-01-10 00:00:00' ), Timestamp ( '2020-01-10 00:00:00' ), Timestamp ( '2020-01-15 00:00:00' ), Timestamp ( '2020-01-15 00:00:00' )] \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c n \u8868\u793a\u589e\u52a0\u4e00\u5929 CDay \uff0c dr \u4e2d\u7684\u7b2c\u4e00\u5929\u4e3a 20200108 \uff0c\u4f46\u7531\u4e8e\u4e0b\u4e00\u5929 20200109 \u88ab\u6392\u9664\u4e86\uff0c\u5e76\u4e14 20200110 \u662f\u5408\u6cd5\u7684\u5468\u4e94\uff0c\u56e0\u6b64\u8f6c\u4e3a 20200110 \uff0c\u5176\u4ed6\u540e\u9762\u7684\u65e5\u671f\u5904\u7406\u7c7b\u4f3c\u3002 \u4e0d\u8981\u4f7f\u7528\u90e8\u5206 Offset \u5728\u5f53\u524d\u7248\u672c\u4e0b\u7531\u4e8e\u4e00\u4e9b bug \uff0c\u4e0d\u8981\u4f7f\u7528 Day \u7ea7\u522b\u4ee5\u4e0b\u7684 Offset \u5bf9\u8c61\uff0c\u6bd4\u5982 Hour, Second \u7b49\uff0c\u8bf7\u4f7f\u7528\u5bf9\u5e94\u7684 Timedelta \u5bf9\u8c61\u6765\u4ee3\u66ff\u3002","title":"1. Offset \u5bf9\u8c61"},{"location":"pandas/part10/#2","text":"\u524d\u9762\u63d0\u5230\u4e86\u5173\u4e8e date_range \u7684 freq \u53d6\u503c\u53ef\u7528 Offset \u5bf9\u8c61\uff0c\u540c\u65f6\u5728 pandas \u4e2d\u51e0\u4e4e\u6bcf\u4e00\u4e2a Offset \u5bf9\u8c61\u7ed1\u5b9a\u4e86\u65e5\u671f\u504f\u7f6e\u5b57\u7b26\u4e32\uff08 frequencies strings/offset aliases \uff09\uff0c\u53ef\u4ee5\u6307\u5b9a Offset \u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u6765\u66ff\u4ee3\u4f7f\u7528\u3002\u4e0b\u9762\u4e3e\u4e00\u4e9b\u5e38\u89c1\u7684\u4f8b\u5b50\u3002 In [ 91 ]: pd . date_range ( '20200101' , '20200331' , freq = 'MS' ) # \u6708\u521d Out [ 91 ]: DatetimeIndex ([ '2020-01-01' , '2020-02-01' , '2020-03-01' ], dtype = 'datetime64[ns]' , freq = 'MS' ) In [ 92 ]: pd . date_range ( '20200101' , '20200331' , freq = 'M' ) # \u6708\u672b Out [ 92 ]: DatetimeIndex ([ '2020-01-31' , '2020-02-29' , '2020-03-31' ], dtype = 'datetime64[ns]' , freq = 'M' ) In [ 93 ]: pd . date_range ( '20200101' , '20200110' , freq = 'B' ) # \u5de5\u4f5c\u65e5 Out [ 93 ]: DatetimeIndex ([ '2020-01-01' , '2020-01-02' , '2020-01-03' , '2020-01-06' , '2020-01-07' , '2020-01-08' , '2020-01-09' , '2020-01-10' ], dtype = 'datetime64[ns]' , freq = 'B' ) In [ 94 ]: pd . date_range ( '20200101' , '20200201' , freq = 'W-MON' ) # \u5468\u4e00 Out [ 94 ]: DatetimeIndex ([ '2020-01-06' , '2020-01-13' , '2020-01-20' , '2020-01-27' ], dtype = 'datetime64[ns]' , freq = 'W-MON' ) In [ 95 ]: pd . date_range ( '20200101' , '20200201' , .... : freq = 'WOM-1MON' ) # \u6bcf\u6708\u7b2c\u4e00\u4e2a\u5468\u4e00 .... : Out [ 95 ]: DatetimeIndex ([ '2020-01-06' ], dtype = 'datetime64[ns]' , freq = 'WOM-1MON' ) \u4e0a\u9762\u7684\u8fd9\u4e9b\u5b57\u7b26\u4e32\uff0c\u7b49\u4ef7\u4e8e\u4f7f\u7528\u5982\u4e0b\u7684 Offset \u5bf9\u8c61\uff1a In [ 96 ]: pd . date_range ( '20200101' , '20200331' , .... : freq = pd . offsets . MonthBegin ()) .... : Out [ 96 ]: DatetimeIndex ([ '2020-01-01' , '2020-02-01' , '2020-03-01' ], dtype = 'datetime64[ns]' , freq = 'MS' ) In [ 97 ]: pd . date_range ( '20200101' , '20200331' , .... : freq = pd . offsets . MonthEnd ()) .... : Out [ 97 ]: DatetimeIndex ([ '2020-01-31' , '2020-02-29' , '2020-03-31' ], dtype = 'datetime64[ns]' , freq = 'M' ) In [ 98 ]: pd . date_range ( '20200101' , '20200110' , freq = pd . offsets . BDay ()) Out [ 98 ]: DatetimeIndex ([ '2020-01-01' , '2020-01-02' , '2020-01-03' , '2020-01-06' , '2020-01-07' , '2020-01-08' , '2020-01-09' , '2020-01-10' ], dtype = 'datetime64[ns]' , freq = 'B' ) In [ 99 ]: pd . date_range ( '20200101' , '20200201' , .... : freq = pd . offsets . CDay ( weekmask = 'Mon' )) .... : Out [ 99 ]: DatetimeIndex ([ '2020-01-06' , '2020-01-13' , '2020-01-20' , '2020-01-27' ], dtype = 'datetime64[ns]' , freq = 'C' ) In [ 100 ]: pd . date_range ( '20200101' , '20200201' , ..... : freq = pd . offsets . WeekOfMonth ( week = 0 , weekday = 0 )) ..... : Out [ 100 ]: DatetimeIndex ([ '2020-01-06' ], dtype = 'datetime64[ns]' , freq = 'WOM-1MON' ) \u5173\u4e8e\u65f6\u533a\u95ee\u9898\u7684\u8bf4\u660e \u5404\u7c7b\u65f6\u95f4\u5bf9\u8c61\u7684\u5f00\u53d1\uff0c\u9664\u4e86\u4f7f\u7528 python \u5185\u7f6e\u7684 datetime \u6a21\u5757\uff0c pandas \u8fd8\u5229\u7528\u4e86 dateutil \u6a21\u5757\uff0c\u5f88\u5927\u4e00\u90e8\u5206\u662f\u4e3a\u4e86\u5904\u7406\u65f6\u533a\u95ee\u9898\u3002\u603b\u6240\u5468\u77e5\uff0c\u6211\u56fd\u662f\u6ca1\u6709\u590f\u4ee4\u65f6\u8c03\u6574\u65f6\u95f4\u4e00\u8bf4\u7684\uff0c\u4f46\u6709\u4e9b\u56fd\u5bb6\u4f1a\u6709\u8fd9\u79cd\u505a\u6cd5\uff0c\u5bfc\u81f4\u4e86\u76f8\u5bf9\u800c\u8a00\u4e00\u5929\u91cc\u53ef\u80fd\u4f1a\u6709 23/24/25 \u4e2a\u5c0f\u65f6\uff0c\u4e5f\u5c31\u662f relativedelta \uff0c\u8fd9\u4f7f\u5f97 Offset \u5bf9\u8c61\u548c Timedelta \u5bf9\u8c61\u6709\u4e86\u5bf9\u540c\u4e00\u95ee\u9898\u5904\u7406\u4ea7\u751f\u4e0d\u540c\u7ed3\u679c\u7684\u73b0\u8c61\uff0c\u5176\u4e2d\u7684\u89c4\u5219\u4e5f\u8f83\u4e3a\u590d\u6742\uff0c\u5b98\u65b9\u6587\u6863\u7684\u5199\u6cd5\u5b58\u5728\u90e8\u5206\u63cf\u8ff0\u9519\u8bef\uff0c\u5e76\u4e14\u96be\u4ee5\u5bf9\u63cf\u8ff0\u505a\u51fa\u7edf\u4e00\u4fee\u6b63\uff0c\u56e0\u4e3a\u7275\u6d89\u5230\u4e86 Offset \u76f8\u5173\u7684\u5f88\u591a\u7ec4\u4ef6\u3002\u56e0\u6b64\uff0c\u672c\u6559\u7a0b\u5b8c\u5168\u4e0d\u8003\u8651\u65f6\u533a\u5904\u7406\uff0c\u5982\u679c\u5bf9\u65f6\u533a\u5904\u7406\u7684\u65f6\u95f4\u504f\u7f6e\u6709\u5174\u8da3\u4e86\u89e3\u8ba8\u8bba\uff0c\u53ef\u4ee5\u8054\u7cfb\u6211\u6216\u8005\u53c2\u89c1 \u8fd9\u91cc \u7684\u8ba8\u8bba\u3002","title":"2. \u504f\u7f6e\u5b57\u7b26\u4e32"},{"location":"pandas/part10/#_5","text":"","title":"\u4e94\u3001\u65f6\u5e8f\u4e2d\u7684\u6ed1\u7a97\u4e0e\u5206\u7ec4"},{"location":"pandas/part10/#1","text":"\u6240\u8c13\u65f6\u5e8f\u7684\u6ed1\u7a97\u51fd\u6570\uff0c\u5373\u628a\u6ed1\u52a8\u7a97\u53e3\u7528 freq \u5173\u952e\u8bcd\u4ee3\u66ff\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u5177\u4f53\u7684\u5e94\u7528\u6848\u4f8b\uff1a\u5728\u80a1\u7968\u5e02\u573a\u4e2d\u6709\u4e00\u4e2a\u6307\u6807\u4e3a BOLL \u6307\u6807\uff0c\u5b83\u7531\u4e2d\u8f68\u7ebf\u3001\u4e0a\u8f68\u7ebf\u3001\u4e0b\u8f68\u7ebf\u8fd9\u4e09\u6839\u7ebf\u6784\u6210\uff0c\u5177\u4f53\u7684\u8ba1\u7b97\u65b9\u6cd5\u5206\u522b\u662f N \u65e5\u5747\u503c\u7ebf\u3001 N \u65e5\u5747\u503c\u52a0\u4e24\u500d N \u65e5\u6807\u51c6\u5dee\u7ebf\u3001 N \u65e5\u5747\u503c\u51cf\u4e24\u500d N \u65e5\u6807\u51c6\u5dee\u7ebf\u3002\u5229\u7528 rolling \u5bf9\u8c61\u8ba1\u7b97 N=30 \u7684 BOLL \u6307\u6807\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 101 ]: import matplotlib.pyplot as plt In [ 102 ]: idx = pd . date_range ( '20200101' , '20201231' , freq = 'B' ) In [ 103 ]: np . random . seed ( 2020 ) In [ 104 ]: data = np . random . randint ( - 1 , 2 , len ( idx )) . cumsum () # \u968f\u673a\u6e38\u52a8\u6784\u9020\u6a21\u62df\u5e8f\u5217 In [ 105 ]: s = pd . Series ( data , index = idx ) In [ 106 ]: s . head () Out [ 106 ]: 2020 - 01 - 01 - 1 2020 - 01 - 02 - 2 2020 - 01 - 03 - 1 2020 - 01 - 06 - 1 2020 - 01 - 07 - 2 Freq : B , dtype : int32 In [ 107 ]: r = s . rolling ( '30D' ) In [ 108 ]: plt . plot ( s ) Out [ 108 ]: [ < matplotlib . lines . Line2D at 0x1363008af70 > ] In [ 109 ]: plt . title ( 'BOLL LINES' ) Out [ 109 ]: Text ( 0.5 , 1.0 , 'BOLL LINES' ) In [ 110 ]: plt . plot ( r . mean ()) Out [ 110 ]: [ < matplotlib . lines . Line2D at 0x136300a9070 > ] In [ 111 ]: plt . plot ( r . mean () + r . std () * 2 ) Out [ 111 ]: [ < matplotlib . lines . Line2D at 0x136300a9250 > ] In [ 112 ]: plt . plot ( r . mean () - r . std () * 2 ) Out [ 112 ]: [ < matplotlib . lines . Line2D at 0x136300a9550 > ] \u5bf9\u4e8e shift \u51fd\u6570\u800c\u8a00\uff0c\u4f5c\u7528\u5728 datetime64 \u4e3a\u7d22\u5f15\u7684\u5e8f\u5217\u4e0a\u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a freq \u5355\u4f4d\u8fdb\u884c\u6ed1\u52a8\uff1a In [ 113 ]: s . shift ( freq = '50D' ) . head () Out [ 113 ]: 2020 - 02 - 20 - 1 2020 - 02 - 21 - 2 2020 - 02 - 22 - 1 2020 - 02 - 25 - 1 2020 - 02 - 26 - 2 dtype : int32 \u53e6\u5916\uff0c datetime64[ns] \u7684\u5e8f\u5217\u8fdb\u884c diff \u540e\u5c31\u80fd\u591f\u5f97\u5230 timedelta64[ns] \u7684\u5e8f\u5217\uff0c\u8fd9\u80fd\u591f\u4f7f\u7528\u6237\u65b9\u4fbf\u5730\u89c2\u5bdf\u6709\u5e8f\u65f6\u95f4\u5e8f\u5217\u7684\u95f4\u9694\uff1a In [ 114 ]: my_series = pd . Series ( s . index ) In [ 115 ]: my_series . head () Out [ 115 ]: 0 2020 - 01 - 01 1 2020 - 01 - 02 2 2020 - 01 - 03 3 2020 - 01 - 06 4 2020 - 01 - 07 dtype : datetime64 [ ns ] In [ 116 ]: my_series . diff ( 1 ) . head () Out [ 116 ]: 0 NaT 1 1 days 2 1 days 3 3 days 4 1 days dtype : timedelta64 [ ns ]","title":"1. \u6ed1\u52a8\u7a97\u53e3"},{"location":"pandas/part10/#2_1","text":"\u91cd\u91c7\u6837\u5bf9\u8c61 resample \u548c\u7b2c\u56db\u7ae0\u4e2d\u5206\u7ec4\u5bf9\u8c61 groupby \u7684\u7528\u6cd5\u7c7b\u4f3c\uff0c\u524d\u8005\u662f\u9488\u5bf9\u65f6\u95f4\u5e8f\u5217\u7684\u5206\u7ec4\u8ba1\u7b97\u800c\u8bbe\u8ba1\u7684\u5206\u7ec4\u5bf9\u8c61\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e0a\u9762\u7684\u5e8f\u5217\u8ba1\u7b97\u6bcf 10 \u5929\u7684\u5747\u503c\uff1a In [ 117 ]: s . resample ( '10D' ) . mean () . head () Out [ 117 ]: 2020 - 01 - 01 - 2.000000 2020 - 01 - 11 - 3.166667 2020 - 01 - 21 - 3.625000 2020 - 01 - 31 - 4.000000 2020 - 02 - 10 - 0.375000 Freq : 10 D , dtype : float64 \u540c\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u5185\u7f6e\u5b9a\u4e49\u7684\u5904\u7406\u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7 apply \u65b9\u6cd5\u81ea\u5b9a\u4e49\uff1a In [ 118 ]: s . resample ( '10D' ) . apply ( lambda x : x . max () - x . min ()) . head () # \u6781\u5dee Out [ 118 ]: 2020 - 01 - 01 3 2020 - 01 - 11 4 2020 - 01 - 21 4 2020 - 01 - 31 2 2020 - 02 - 10 4 Freq : 10 D , dtype : int32 \u5728 resample \u4e2d\u8981\u7279\u522b\u6ce8\u610f\u7ec4\u8fb9\u754c\u503c\u7684\u5904\u7406\u60c5\u51b5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8d77\u59cb\u503c\u7684\u8ba1\u7b97\u65b9\u6cd5\u662f\u4ece\u6700\u5c0f\u503c\u65f6\u95f4\u6233\u5bf9\u5e94\u65e5\u671f\u7684\u5348\u591c 00:00:00 \u5f00\u59cb\u589e\u52a0 freq \uff0c\u76f4\u5230\u4e0d\u8d85\u8fc7\u8be5\u6700\u5c0f\u65f6\u95f4\u6233\u7684\u6700\u5927\u65f6\u95f4\u6233\uff0c\u7531\u6b64\u5bf9\u5e94\u7684\u65f6\u95f4\u6233\u4e3a\u8d77\u59cb\u503c\uff0c\u7136\u540e\u6bcf\u6b21\u7d2f\u52a0 freq \u53c2\u6570\u4f5c\u4e3a\u5206\u5272\u7ed3\u70b9\u8fdb\u884c\u5206\u7ec4\uff0c\u533a\u95f4\u60c5\u51b5\u4e3a\u5de6\u95ed\u53f3\u5f00\u3002\u4e0b\u9762\u6784\u9020\u4e00\u4e2a\u4e0d\u5747\u5300\u7684\u4f8b\u5b50\uff1a In [ 119 ]: idx = pd . date_range ( '20200101 8:26:35' , '20200101 9:31:58' , freq = '77s' ) In [ 120 ]: data = np . random . randint ( - 1 , 2 , len ( idx )) . cumsum () In [ 121 ]: s = pd . Series ( data , index = idx ) In [ 122 ]: s . head () Out [ 122 ]: 2020 - 01 - 01 08 : 26 : 35 - 1 2020 - 01 - 01 08 : 27 : 52 - 1 2020 - 01 - 01 08 : 29 : 09 - 2 2020 - 01 - 01 08 : 30 : 26 - 3 2020 - 01 - 01 08 : 31 : 43 - 4 Freq : 77 S , dtype : int32 \u4e0b\u9762\u5bf9\u5e94\u7684\u7b2c\u4e00\u4e2a\u7ec4\u8d77\u59cb\u503c\u4e3a 08:24:00 \uff0c\u5176\u662f\u4ece\u5f53\u5929 0 \u70b9\u589e\u52a0 72 \u4e2a freq=7 min \u5f97\u5230\u7684\uff0c\u5982\u679c\u518d\u589e\u52a0\u4e00\u4e2a freq \u5219\u8d85\u51fa\u4e86\u5e8f\u5217\u7684\u6700\u5c0f\u65f6\u95f4\u6233 08:26:35 \uff1a In [ 123 ]: s . resample ( '7min' ) . mean () . head () Out [ 123 ]: 2020 - 01 - 01 08 : 24 : 00 - 1.750000 2020 - 01 - 01 08 : 31 : 00 - 2.600000 2020 - 01 - 01 08 : 38 : 00 - 2.166667 2020 - 01 - 01 08 : 45 : 00 0.200000 2020 - 01 - 01 08 : 52 : 00 2.833333 Freq : 7 T , dtype : float64 \u6709\u65f6\u5019\uff0c\u7528\u6237\u5e0c\u671b\u4ece\u5e8f\u5217\u7684\u6700\u5c0f\u65f6\u95f4\u6233\u5f00\u59cb\u4f9d\u6b21\u589e\u52a0 freq \u8fdb\u884c\u5206\u7ec4\uff0c\u6b64\u65f6\u53ef\u4ee5\u6307\u5b9a origin \u53c2\u6570\u4e3a start \uff1a In [ 124 ]: s . resample ( '7min' , origin = 'start' ) . mean () . head () Out [ 124 ]: 2020 - 01 - 01 08 : 26 : 35 - 2.333333 2020 - 01 - 01 08 : 33 : 35 - 2.400000 2020 - 01 - 01 08 : 40 : 35 - 1.333333 2020 - 01 - 01 08 : 47 : 35 1.200000 2020 - 01 - 01 08 : 54 : 35 3.166667 Freq : 7 T , dtype : float64 \u5728\u8fd4\u56de\u503c\u4e2d\uff0c\u8981\u6ce8\u610f\u7d22\u5f15\u4e00\u822c\u662f\u53d6\u7ec4\u7684\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u4f46 M, A, Q, BM, BA, BQ, W \u8fd9\u4e03\u4e2a\u662f\u53d6\u5bf9\u5e94\u533a\u95f4\u7684\u6700\u540e\u4e00\u4e2a\u65f6\u95f4\u6233\uff1a In [ 125 ]: s = pd . Series ( np . random . randint ( 2 , size = 366 ), ..... : index = pd . date_range ( '2020-01-01' , ..... : '2020-12-31' )) ..... : In [ 126 ]: s . resample ( 'M' ) . mean () . head () Out [ 126 ]: 2020 - 01 - 31 0.451613 2020 - 02 - 29 0.448276 2020 - 03 - 31 0.516129 2020 - 04 - 30 0.566667 2020 - 05 - 31 0.451613 Freq : M , dtype : float64 In [ 127 ]: s . resample ( 'MS' ) . mean () . head () # \u7ed3\u679c\u4e00\u6837\uff0c\u4f46\u7d22\u5f15\u4e0d\u540c Out [ 127 ]: 2020 - 01 - 01 0.451613 2020 - 02 - 01 0.448276 2020 - 03 - 01 0.516129 2020 - 04 - 01 0.566667 2020 - 05 - 01 0.451613 Freq : MS , dtype : float64","title":"2. \u91cd\u91c7\u6837"},{"location":"pandas/part10/#_6","text":"","title":"\u516d\u3001\u7ec3\u4e60"},{"location":"pandas/part10/#ex1","text":"\u73b0\u6709\u4e00\u4efd\u5173\u4e8e\u592a\u9633\u8f90\u5c04\u7684\u6570\u636e\u96c6\uff1a In [ 128 ]: df = pd . read_csv ( 'data/solar.csv' , usecols = [ 'Data' , 'Time' , ..... : 'Radiation' , 'Temperature' ]) ..... : In [ 129 ]: df . head ( 3 ) Out [ 129 ]: Data Time Radiation Temperature 0 9 / 29 / 2016 12 : 00 : 00 AM 23 : 55 : 26 1.21 48 1 9 / 29 / 2016 12 : 00 : 00 AM 23 : 50 : 23 1.21 48 2 9 / 29 / 2016 12 : 00 : 00 AM 23 : 45 : 26 1.23 48 \u5c06 Datetime, Time \u5408\u5e76\u4e3a\u4e00\u4e2a\u65f6\u95f4\u5217 Datetime \uff0c\u540c\u65f6\u628a\u5b83\u4f5c\u4e3a\u7d22\u5f15\u540e\u6392\u5e8f\u3002 \u6bcf\u6761\u8bb0\u5f55\u65f6\u95f4\u7684\u95f4\u9694\u663e\u7136\u5e76\u4e0d\u4e00\u81f4\uff0c\u8bf7\u89e3\u51b3\u5982\u4e0b\u95ee\u9898\uff1a a. \u627e\u51fa\u95f4\u9694\u65f6\u95f4\u7684\u524d\u4e09\u4e2a\u6700\u5927\u503c\u6240\u5bf9\u5e94\u7684\u4e09\u7ec4\u65f6\u95f4\u6233\u3002 b. \u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5927\u81f4\u7684\u8303\u56f4\uff0c\u4f7f\u5f97\u7edd\u5927\u591a\u6570\u7684\u95f4\u9694\u65f6\u95f4\u90fd\u843d\u5728\u8fd9\u4e2a\u533a\u95f4\u4e2d\uff1f\u5982\u679c\u5b58\u5728\uff0c\u8bf7\u5bf9\u6b64\u8303\u56f4\u5185\u7684\u6837\u672c\u95f4\u9694\u79d2\u6570\u753b\u51fa\u67f1\u72b6\u56fe\uff0c\u8bbe\u7f6e bins=50 \u3002 \u6c42\u5982\u4e0b\u6307\u6807\u5bf9\u5e94\u7684 Series \uff1a a. \u6e29\u5ea6\u4e0e\u8f90\u5c04\u91cf\u7684 6 \u5c0f\u65f6\u6ed1\u52a8\u76f8\u5173\u7cfb\u6570 b. \u4ee5\u4e09\u70b9\u3001\u4e5d\u70b9\u3001\u5341\u4e94\u70b9\u3001\u4e8c\u5341\u4e00\u70b9\u4e3a\u5206\u5272\uff0c\u8be5\u89c2\u6d4b\u6240\u5728\u65f6\u95f4\u533a\u95f4\u7684\u6e29\u5ea6\u5747\u503c\u5e8f\u5217 c. \u6bcf\u4e2a\u89c2\u6d4b 6 \u5c0f\u65f6\u524d\u7684\u8f90\u5c04\u91cf\uff08\u4e00\u822c\u800c\u8a00\u4e0d\u4f1a\u6070\u597d\u53d6\u5230\uff0c\u6b64\u65f6\u53d6\u6700\u8fd1\u65f6\u95f4\u6233\u5bf9\u5e94\u7684\u8f90\u5c04\u91cf\uff09","title":"Ex1\uff1a\u592a\u9633\u8f90\u5c04\u6570\u636e\u96c6"},{"location":"pandas/part10/#ex2","text":"\u73b0\u6709\u4e00\u4efd 2019 \u5e74\u6bcf\u65e5\u6c34\u679c\u9500\u91cf\u8bb0\u5f55\u8868\uff1a In [ 130 ]: df = pd . read_csv ( 'data/fruit.csv' ) In [ 131 ]: df . head ( 3 ) Out [ 131 ]: Date Fruit Sale 0 2019 - 04 - 18 Peach 15 1 2019 - 12 - 29 Peach 15 2 2019 - 06 - 05 Peach 19 \u7edf\u8ba1\u5982\u4e0b\u6307\u6807\uff1a a. \u6bcf\u6708\u4e0a\u534a\u6708\uff0815 \u53f7\u53ca\u4e4b\u524d\uff09\u4e0e\u4e0b\u534a\u6708\u8461\u8404\u9500\u91cf\u7684\u6bd4\u503c b. \u6bcf\u6708\u6700\u540e\u4e00\u5929\u7684\u751f\u68a8\u9500\u91cf\u603b\u548c c. \u6bcf\u6708\u6700\u540e\u4e00\u5929\u5de5\u4f5c\u65e5\u7684\u751f\u68a8\u9500\u91cf\u603b\u548c d. \u6bcf\u6708\u6700\u540e\u4e94\u5929\u7684\u82f9\u679c\u9500\u91cf\u5747\u503c \u6309\u6708\u8ba1\u7b97\u5468\u4e00\u81f3\u5468\u65e5\u5404\u54c1\u79cd\u6c34\u679c\u7684\u5e73\u5747\u8bb0\u5f55\u6761\u6570\uff0c\u884c\u7d22\u5f15\u5916\u5c42\u4e3a\u6c34\u679c\u540d\u79f0\uff0c\u5185\u5c42\u4e3a\u6708\u4efd\uff0c\u5217\u7d22\u5f15\u4e3a\u661f\u671f\u3002 \u6309\u5929\u8ba1\u7b97\u5411\u524d 10 \u4e2a\u5de5\u4f5c\u65e5\u7a97\u53e3\u7684\u82f9\u679c\u9500\u91cf\u5747\u503c\u5e8f\u5217\uff0c\u975e\u5de5\u4f5c\u65e5\u7684\u503c\u7528\u4e0a\u4e00\u4e2a\u5de5\u4f5c\u65e5\u7684\u7ed3\u679c\u586b\u5145\u3002","title":"Ex2\uff1a\u6c34\u679c\u9500\u91cf\u6570\u636e\u96c6"},{"location":"pandas/part2/","text":"In [ 1 ]: import numpy as np In [ 2 ]: import pandas as pd \u5728\u5f00\u59cb\u5b66\u4e60\u524d\uff0c\u8bf7\u4fdd\u8bc1 pandas \u7684\u7248\u672c\u53f7\u4e0d\u4f4e\u4e8e\u5982\u4e0b\u6240\u793a\u7684\u7248\u672c\uff0c\u5426\u5219\u8bf7\u52a1\u5fc5\u5347\u7ea7\uff01\u8bf7\u786e\u8ba4\u5df2\u7ecf\u5b89\u88c5\u4e86 xlrd, xlwt, openpyxl \u8fd9\u4e09\u4e2a\u5305\u3002\u5176\u4e2d\uff0c\u5f53 pandas \u7248\u672c\u4e3a 1.2.x \u65f6\uff0cxlrd \u7248\u672c\u4e0d\u5f97\u9ad8\u4e8e 2.0.0 \u3002\u82e5 pandas \u7248\u672c\u5728 1.3.x \u6216\u4ee5\u4e0a\u65f6\uff0cxlrd \u6b63\u5e38\u5b89\u88c5\u5373\u53ef\u3002 In [ 3 ]: pd . __version__ Out [ 3 ]: '1.2.0' \u4e00\u3001\u6587\u4ef6\u7684\u8bfb\u53d6\u548c\u5199\u5165 1. \u6587\u4ef6\u8bfb\u53d6 pandas \u53ef\u4ee5\u8bfb\u53d6\u7684\u6587\u4ef6\u683c\u5f0f\u6709\u5f88\u591a\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u8bfb\u53d6 csv, excel, txt \u6587\u4ef6\u3002 In [ 4 ]: df_csv = pd . read_csv ( 'data/my_csv.csv' ) In [ 5 ]: df_csv Out [ 5 ]: col1 col2 col3 col4 col5 0 2 a 1.4 apple 2020 / 1 / 1 1 3 b 3.4 banana 2020 / 1 / 2 2 6 c 2.5 orange 2020 / 1 / 5 3 5 d 3.2 lemon 2020 / 1 / 7 In [ 6 ]: df_txt = pd . read_table ( 'data/my_table.txt' ) In [ 7 ]: df_txt Out [ 7 ]: col1 col2 col3 col4 0 2 a 1.4 apple 2020 / 1 / 1 1 3 b 3.4 banana 2020 / 1 / 2 2 6 c 2.5 orange 2020 / 1 / 5 3 5 d 3.2 lemon 2020 / 1 / 7 In [ 8 ]: df_excel = pd . read_excel ( 'data/my_excel.xlsx' ) In [ 9 ]: df_excel Out [ 9 ]: col1 col2 col3 col4 col5 0 2 a 1.4 apple 2020 / 1 / 1 1 3 b 3.4 banana 2020 / 1 / 2 2 6 c 2.5 orange 2020 / 1 / 5 3 5 d 3.2 lemon 2020 / 1 / 7 \u8fd9\u91cc\u6709\u4e00\u4e9b\u5e38\u7528\u7684\u516c\u5171\u53c2\u6570\uff0c header=None \u8868\u793a\u7b2c\u4e00\u884c\u4e0d\u4f5c\u4e3a\u5217\u540d\uff0c index_col \u8868\u793a\u628a\u67d0\u4e00\u5217\u6216\u51e0\u5217\u4f5c\u4e3a\u7d22\u5f15\uff0c\u7d22\u5f15\u7684\u5185\u5bb9\u5c06\u4f1a\u5728\u7b2c\u4e09\u7ae0\u8fdb\u884c\u8be6\u8ff0\uff0c usecols \u8868\u793a\u8bfb\u53d6\u5217\u7684\u96c6\u5408\uff0c\u9ed8\u8ba4\u8bfb\u53d6\u6240\u6709\u7684\u5217\uff0c parse_dates \u8868\u793a\u9700\u8981\u8f6c\u5316\u4e3a\u65f6\u95f4\u7684\u5217\uff0c\u5173\u4e8e\u65f6\u95f4\u5e8f\u5217\u7684\u6709\u5173\u5185\u5bb9\u5c06\u5728\u7b2c\u5341\u7ae0\u8bb2\u89e3\uff0c nrows \u8868\u793a\u8bfb\u53d6\u7684\u6570\u636e\u884c\u6570\u3002\u4e0a\u9762\u8fd9\u4e9b\u53c2\u6570\u5728\u4e0a\u8ff0\u7684\u4e09\u4e2a\u51fd\u6570\u91cc\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002 In [ 10 ]: pd . read_table ( 'data/my_table.txt' , header = None ) Out [ 10 ]: 0 1 2 3 0 col1 col2 col3 col4 1 2 a 1.4 apple 2020 / 1 / 1 2 3 b 3.4 banana 2020 / 1 / 2 3 6 c 2.5 orange 2020 / 1 / 5 4 5 d 3.2 lemon 2020 / 1 / 7 In [ 11 ]: pd . read_csv ( 'data/my_csv.csv' , index_col = [ 'col1' , 'col2' ]) Out [ 11 ]: col3 col4 col5 col1 col2 2 a 1.4 apple 2020 / 1 / 1 3 b 3.4 banana 2020 / 1 / 2 6 c 2.5 orange 2020 / 1 / 5 5 d 3.2 lemon 2020 / 1 / 7 In [ 12 ]: pd . read_table ( 'data/my_table.txt' , usecols = [ 'col1' , 'col2' ]) Out [ 12 ]: col1 col2 0 2 a 1 3 b 2 6 c 3 5 d In [ 13 ]: pd . read_csv ( 'data/my_csv.csv' , parse_dates = [ 'col5' ]) Out [ 13 ]: col1 col2 col3 col4 col5 0 2 a 1.4 apple 2020 - 01 - 01 1 3 b 3.4 banana 2020 - 01 - 02 2 6 c 2.5 orange 2020 - 01 - 05 3 5 d 3.2 lemon 2020 - 01 - 07 In [ 14 ]: pd . read_excel ( 'data/my_excel.xlsx' , nrows = 2 ) Out [ 14 ]: col1 col2 col3 col4 col5 0 2 a 1.4 apple 2020 / 1 / 1 1 3 b 3.4 banana 2020 / 1 / 2 \u5728\u8bfb\u53d6 txt \u6587\u4ef6\u65f6\uff0c\u7ecf\u5e38\u9047\u5230\u5206\u9694\u7b26\u975e\u7a7a\u683c\u7684\u60c5\u51b5\uff0c read_table \u6709\u4e00\u4e2a\u5206\u5272\u53c2\u6570 sep \uff0c\u5b83\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5206\u5272\u7b26\u53f7\uff0c\u8fdb\u884c txt \u6570\u636e\u7684\u8bfb\u53d6\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u8bfb\u53d6\u7684\u8868\u4ee5 |||| \u4e3a\u5206\u5272\uff1a In [ 15 ]: pd . read_table ( 'data/my_table_special_sep.txt' ) Out [ 15 ]: col1 |||| col2 0 TS |||| This is an apple . 1 GQ |||| My name is Bob . 2 WT |||| Well done ! 3 PT |||| May I help you ? \u4e0a\u9762\u7684\u7ed3\u679c\u663e\u7136\u4e0d\u662f\u7406\u60f3\u7684\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 sep \uff0c\u540c\u65f6\u9700\u8981\u6307\u5b9a\u5f15\u64ce\u4e3a python \uff1a In [ 16 ]: pd . read_table ( 'data/my_table_special_sep.txt' , .... : sep = ' \\|\\|\\|\\| ' , engine = 'python' ) .... : Out [ 16 ]: col1 col2 0 TS This is an apple . 1 GQ My name is Bob . 2 WT Well done ! 3 PT May I help you ? sep \u662f\u6b63\u5219\u53c2\u6570 \u5728\u4f7f\u7528 read_table \u7684\u65f6\u5019\u9700\u8981\u6ce8\u610f\uff0c\u53c2\u6570 sep \u4e2d\u4f7f\u7528\u7684\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u56e0\u6b64\u9700\u8981\u5bf9 | \u8fdb\u884c\u8f6c\u4e49\u53d8\u6210 \\| \uff0c\u5426\u5219\u65e0\u6cd5\u8bfb\u53d6\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002\u6709\u5173\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u57fa\u672c\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003\u7b2c\u516b\u7ae0\u6216\u8005\u5176\u4ed6\u76f8\u5173\u8d44\u6599\u3002 2. \u6570\u636e\u5199\u5165 \u4e00\u822c\u5728\u6570\u636e\u5199\u5165\u4e2d\uff0c\u6700\u5e38\u7528\u7684\u64cd\u4f5c\u662f\u628a index \u8bbe\u7f6e\u4e3a False \uff0c\u7279\u522b\u5f53\u7d22\u5f15\u6ca1\u6709\u7279\u6b8a\u610f\u4e49\u7684\u65f6\u5019\uff0c\u8fd9\u6837\u7684\u884c\u4e3a\u80fd\u628a\u7d22\u5f15\u5728\u4fdd\u5b58\u7684\u65f6\u5019\u53bb\u9664\u3002 In [ 17 ]: df_csv . to_csv ( 'data/my_csv_saved.csv' , index = False ) In [ 18 ]: df_excel . to_excel ( 'data/my_excel_saved.xlsx' , index = False ) pandas \u4e2d\u6ca1\u6709\u5b9a\u4e49 to_table \u51fd\u6570\uff0c\u4f46\u662f to_csv \u53ef\u4ee5\u4fdd\u5b58\u4e3a txt \u6587\u4ef6\uff0c\u5e76\u4e14\u5141\u8bb8\u81ea\u5b9a\u4e49\u5206\u9694\u7b26\uff0c\u5e38\u7528\u5236\u8868\u7b26 \\t \u5206\u5272\uff1a In [ 19 ]: df_txt . to_csv ( 'data/my_txt_saved.txt' , sep = ' \\t ' , index = False ) \u5982\u679c\u60f3\u8981\u628a\u8868\u683c\u5feb\u901f\u8f6c\u6362\u4e3a markdown \u548c latex \u8bed\u8a00\uff0c\u53ef\u4ee5\u4f7f\u7528 to_markdown \u548c to_latex \u51fd\u6570\uff0c\u6b64\u5904\u9700\u8981\u5b89\u88c5 tabulate \u5305\u3002 In [ 20 ]: print ( df_csv . to_markdown ()) | | col1 | col2 | col3 | col4 | col5 | |--- : |------- : | : -------|------- : | : -------| : ---------| | 0 | 2 | a | 1.4 | apple | 2020 / 1 / 1 | | 1 | 3 | b | 3.4 | banana | 2020 / 1 / 2 | | 2 | 6 | c | 2.5 | orange | 2020 / 1 / 5 | | 3 | 5 | d | 3.2 | lemon | 2020 / 1 / 7 | In [ 21 ]: print ( df_csv . to_latex ()) \\ begin { tabular }{ lrlrll } \\ toprule {} & col1 & col2 & col3 & col4 & col5 \\\\ \\ midrule 0 & 2 & a & 1.4 & apple & 2020 / 1 / 1 \\\\ 1 & 3 & b & 3.4 & banana & 2020 / 1 / 2 \\\\ 2 & 6 & c & 2.5 & orange & 2020 / 1 / 5 \\\\ 3 & 5 & d & 3.2 & lemon & 2020 / 1 / 7 \\\\ \\ bottomrule \\ end { tabular } \u4e8c\u3001\u57fa\u672c\u6570\u636e\u7ed3\u6784 pandas \u4e2d\u5177\u6709\u4e24\u79cd\u57fa\u672c\u7684\u6570\u636e\u5b58\u50a8\u7ed3\u6784\uff0c\u5b58\u50a8\u4e00\u7ef4 values \u7684 Series \u548c\u5b58\u50a8\u4e8c\u7ef4 values \u7684 DataFrame \uff0c\u5728\u8fd9\u4e24\u79cd\u7ed3\u6784\u4e0a\u5b9a\u4e49\u4e86\u5f88\u591a\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 1. Series Series \u4e00\u822c\u7531\u56db\u4e2a\u90e8\u5206\u7ec4\u6210\uff0c\u5206\u522b\u662f\u5e8f\u5217\u7684\u503c data \u3001\u7d22\u5f15 index \u3001\u5b58\u50a8\u7c7b\u578b dtype \u3001\u5e8f\u5217\u7684\u540d\u5b57 name \u3002\u5176\u4e2d\uff0c\u7d22\u5f15\u4e5f\u53ef\u4ee5\u6307\u5b9a\u5b83\u7684\u540d\u5b57\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u3002 In [ 22 ]: s = pd . Series ( data = [ 100 , 'a' , { 'dic1' : 5 }], .... : index = pd . Index ([ 'id1' , 20 , 'third' ], name = 'my_idx' ), .... : dtype = 'object' , .... : name = 'my_name' ) .... : In [ 23 ]: s Out [ 23 ]: my_idx id1 100 20 a third { 'dic1' : 5 } Name : my_name , dtype : object object \u7c7b\u578b object \u4ee3\u8868\u4e86\u4e00\u79cd\u6df7\u5408\u7c7b\u578b\uff0c\u6b63\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5b58\u50a8\u4e86\u6574\u6570\u3001\u5b57\u7b26\u4e32\u4ee5\u53ca Python \u7684\u5b57\u5178\u6570\u636e\u7ed3\u6784\u3002\u6b64\u5916\uff0c\u76ee\u524d pandas \u628a\u7eaf\u5b57\u7b26\u4e32\u5e8f\u5217\u4e5f\u9ed8\u8ba4\u8ba4\u4e3a\u662f\u4e00\u79cd object \u7c7b\u578b\u7684\u5e8f\u5217\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u7528 string \u7c7b\u578b\u5b58\u50a8\uff0c\u6587\u672c\u5e8f\u5217\u7684\u5185\u5bb9\u4f1a\u5728\u7b2c\u516b\u7ae0\u4e2d\u8ba8\u8bba\u3002 \u5bf9\u4e8e\u8fd9\u4e9b\u5c5e\u6027\uff0c\u53ef\u4ee5\u901a\u8fc7 . \u7684\u65b9\u5f0f\u6765\u83b7\u53d6\uff1a In [ 24 ]: s . values Out [ 24 ]: array ([ 100 , 'a' , { 'dic1' : 5 }], dtype = object ) In [ 25 ]: s . index Out [ 25 ]: Index ([ 'id1' , 20 , 'third' ], dtype = 'object' , name = 'my_idx' ) In [ 26 ]: s . dtype Out [ 26 ]: dtype ( 'O' ) In [ 27 ]: s . name Out [ 27 ]: 'my_name' \u5229\u7528 .shape \u53ef\u4ee5\u83b7\u53d6\u5e8f\u5217\u7684\u957f\u5ea6\uff1a In [ 28 ]: s . shape Out [ 28 ]: ( 3 ,) \u7d22\u5f15\u662f pandas \u4e2d\u6700\u91cd\u8981\u7684\u6982\u5ff5\u4e4b\u4e00\uff0c\u5b83\u5c06\u5728\u7b2c\u4e09\u7ae0\u4e2d\u88ab\u8be6\u7ec6\u5730\u8ba8\u8bba\u3002\u5982\u679c\u60f3\u8981\u53d6\u51fa\u5355\u4e2a\u7d22\u5f15\u5bf9\u5e94\u7684\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7 [index_item] \u53ef\u4ee5\u53d6\u51fa\u3002 In [ 29 ]: s [ 'third' ] Out [ 29 ]: { 'dic1' : 5 } 2. DataFrame DataFrame \u5728 Series \u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u5217\u7d22\u5f15\uff0c\u4e00\u4e2a\u6570\u636e\u6846\u53ef\u4ee5\u7531\u4e8c\u7ef4\u7684 data \u4e0e\u884c\u5217\u7d22\u5f15\u6765\u6784\u9020\uff1a In [ 30 ]: data = [[ 1 , 'a' , 1.2 ], [ 2 , 'b' , 2.2 ], [ 3 , 'c' , 3.2 ]] In [ 31 ]: df = pd . DataFrame ( data = data , .... : index = [ 'row_ %d ' % i for i in range ( 3 )], .... : columns = [ 'col_0' , 'col_1' , 'col_2' ]) .... : In [ 32 ]: df Out [ 32 ]: col_0 col_1 col_2 row_0 1 a 1.2 row_1 2 b 2.2 row_2 3 c 3.2 \u4f46\u4e00\u822c\u800c\u8a00\uff0c\u66f4\u591a\u7684\u65f6\u5019\u4f1a\u91c7\u7528\u4ece\u5217\u7d22\u5f15\u540d\u5230\u6570\u636e\u7684\u6620\u5c04\u6765\u6784\u9020\u6570\u636e\u6846\uff0c\u540c\u65f6\u518d\u52a0\u4e0a\u884c\u7d22\u5f15\uff1a In [ 33 ]: df = pd . DataFrame ( data = { 'col_0' : [ 1 , 2 , 3 ], 'col_1' : list ( 'abc' ), .... : 'col_2' : [ 1.2 , 2.2 , 3.2 ]}, .... : index = [ 'row_ %d ' % i for i in range ( 3 )]) .... : In [ 34 ]: df Out [ 34 ]: col_0 col_1 col_2 row_0 1 a 1.2 row_1 2 b 2.2 row_2 3 c 3.2 \u7531\u4e8e\u8fd9\u79cd\u6620\u5c04\u5173\u7cfb\uff0c\u5728 DataFrame \u4e2d\u53ef\u4ee5\u7528 [col_name] \u4e0e [col_list] \u6765\u53d6\u51fa\u76f8\u5e94\u7684\u5217\u4e0e\u7531\u591a\u4e2a\u5217\u7ec4\u6210\u7684\u8868\uff0c\u7ed3\u679c\u5206\u522b\u4e3a Series \u548c DataFrame \uff1a In [ 35 ]: df [ 'col_0' ] Out [ 35 ]: row_0 1 row_1 2 row_2 3 Name : col_0 , dtype : int64 In [ 36 ]: df [[ 'col_0' , 'col_1' ]] Out [ 36 ]: col_0 col_1 row_0 1 a row_1 2 b row_2 3 c \u4e0e Series \u7c7b\u4f3c\uff0c\u5728\u6570\u636e\u6846\u4e2d\u540c\u6837\u53ef\u4ee5\u53d6\u51fa\u76f8\u5e94\u7684\u5c5e\u6027\uff1a In [ 37 ]: df . values Out [ 37 ]: array ([[ 1 , 'a' , 1.2 ], [ 2 , 'b' , 2.2 ], [ 3 , 'c' , 3.2 ]], dtype = object ) In [ 38 ]: df . index Out [ 38 ]: Index ([ 'row_0' , 'row_1' , 'row_2' ], dtype = 'object' ) In [ 39 ]: df . columns Out [ 39 ]: Index ([ 'col_0' , 'col_1' , 'col_2' ], dtype = 'object' ) In [ 40 ]: df . dtypes # \u8fd4\u56de\u7684\u662f\u503c\u4e3a\u76f8\u5e94\u5217\u6570\u636e\u7c7b\u578b\u7684Series Out [ 40 ]: col_0 int64 col_1 object col_2 float64 dtype : object In [ 41 ]: df . shape Out [ 41 ]: ( 3 , 3 ) \u901a\u8fc7 .T \u53ef\u4ee5\u628a DataFrame \u8fdb\u884c\u8f6c\u7f6e\uff1a In [ 42 ]: df . T Out [ 42 ]: row_0 row_1 row_2 col_0 1 2 3 col_1 a b c col_2 1.2 2.2 3.2 \u4e09\u3001\u5e38\u7528\u57fa\u672c\u51fd\u6570 \u4e3a\u4e86\u8fdb\u884c\u4e3e\u4f8b\u8bf4\u660e\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u548c\u5176\u4f59\u7ae0\u8282\u90fd\u5c06\u4f1a\u4f7f\u7528\u4e00\u4efd learn_pandas.csv \u7684\u865a\u62df\u6570\u636e\u96c6\uff0c\u5b83\u8bb0\u5f55\u4e86\u56db\u6240\u5b66\u6821\u5b66\u751f\u7684\u4f53\u6d4b\u4e2a\u4eba\u4fe1\u606f\u3002 In [ 43 ]: df = pd . read_csv ( 'data/learn_pandas.csv' ) In [ 44 ]: df . columns Out [ 44 ]: Index ([ 'School' , 'Grade' , 'Name' , 'Gender' , 'Height' , 'Weight' , 'Transfer' , 'Test_Number' , 'Test_Date' , 'Time_Record' ], dtype = 'object' ) \u4e0a\u8ff0\u5217\u540d\u4f9d\u6b21\u4ee3\u8868\u5b66\u6821\u3001\u5e74\u7ea7\u3001\u59d3\u540d\u3001\u6027\u522b\u3001\u8eab\u9ad8\u3001\u4f53\u91cd\u3001\u662f\u5426\u4e3a\u8f6c\u7cfb\u751f\u3001\u4f53\u6d4b\u573a\u6b21\u3001\u6d4b\u8bd5\u65f6\u95f4\u30011000 \u7c73\u6210\u7ee9\uff0c\u672c\u7ae0\u53ea\u9700\u4f7f\u7528\u5176\u4e2d\u7684\u524d\u4e03\u5217\u3002 In [ 45 ]: df = df [ df . columns [: 7 ]] 1. \u6c47\u603b\u51fd\u6570 head, tail \u51fd\u6570\u5206\u522b\u8868\u793a\u8fd4\u56de\u8868\u6216\u8005\u5e8f\u5217\u7684\u524d n \u884c\u548c\u540e n \u884c\uff0c\u5176\u4e2d n \u9ed8\u8ba4\u4e3a 5\uff1a In [ 46 ]: df . head ( 2 ) Out [ 46 ]: School Grade Name Gender Height Weight Transfer 0 Shanghai Jiao Tong University Freshman Gaopeng Yang Female 158.9 46.0 N 1 Peking University Freshman Changqiang You Male 166.5 70.0 N In [ 47 ]: df . tail ( 3 ) Out [ 47 ]: School Grade Name Gender Height Weight Transfer 197 Shanghai Jiao Tong University Senior Chengqiang Chu Female 153.9 45.0 N 198 Shanghai Jiao Tong University Senior Chengmei Shen Male 175.3 71.0 N 199 Tsinghua University Sophomore Chunpeng Lv Male 155.7 51.0 N info, describe \u5206\u522b\u8fd4\u56de\u8868\u7684 \u4fe1\u606f\u6982\u51b5 \u548c\u8868\u4e2d \u6570\u503c\u5217\u5bf9\u5e94\u7684\u4e3b\u8981\u7edf\u8ba1\u91cf \uff1a In [ 48 ]: df . info () < class ' pandas . core . frame . DataFrame '> RangeIndex : 200 entries , 0 to 199 Data columns ( total 7 columns ): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 School 200 non - null object 1 Grade 200 non - null object 2 Name 200 non - null object 3 Gender 200 non - null object 4 Height 183 non - null float64 5 Weight 189 non - null float64 6 Transfer 188 non - null object dtypes : float64 ( 2 ), object ( 5 ) memory usage : 11.1 + KB In [ 49 ]: df . describe () Out [ 49 ]: Height Weight count 183.000000 189.000000 mean 163.218033 55.015873 std 8.608879 12.824294 min 145.400000 34.000000 25 % 157.150000 46.000000 50 % 161.900000 51.000000 75 % 167.500000 65.000000 max 193.900000 89.000000 \u66f4\u5168\u9762\u7684\u6570\u636e\u6c47\u603b info, describe \u53ea\u80fd\u5b9e\u73b0\u8f83\u5c11\u4fe1\u606f\u7684\u5c55\u793a\uff0c\u5982\u679c\u60f3\u8981\u5bf9\u4e00\u4efd\u6570\u636e\u96c6\u8fdb\u884c\u5168\u9762\u4e14\u6709\u6548\u7684\u89c2\u5bdf\uff0c\u7279\u522b\u662f\u5728\u5217\u8f83\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u63a8\u8350\u4f7f\u7528 pandas-profiling \u5305\uff0c\u5b83\u5c06\u5728\u7b2c\u5341\u4e00\u7ae0\u88ab\u518d\u6b21\u63d0\u5230\u3002 2. \u7279\u5f81\u7edf\u8ba1\u51fd\u6570 \u5728 Series \u548c DataFrame \u4e0a\u5b9a\u4e49\u4e86\u8bb8\u591a\u7edf\u8ba1\u51fd\u6570\uff0c\u6700\u5e38\u89c1\u7684\u662f sum, mean, median, var, std, max, min \u3002\u4f8b\u5982\uff0c\u9009\u51fa\u8eab\u9ad8\u548c\u4f53\u91cd\u5217\u8fdb\u884c\u6f14\u793a\uff1a In [ 50 ]: df_demo = df [[ 'Height' , 'Weight' ]] In [ 51 ]: df_demo . mean () Out [ 51 ]: Height 163.218033 Weight 55.015873 dtype : float64 In [ 52 ]: df_demo . max () Out [ 52 ]: Height 193.9 Weight 89.0 dtype : float64 \u6b64\u5916\uff0c\u9700\u8981\u4ecb\u7ecd\u7684\u662f quantile, count, idxmax \u8fd9\u4e09\u4e2a\u51fd\u6570\uff0c\u5b83\u4eec\u5206\u522b\u8fd4\u56de\u7684\u662f\u5206\u4f4d\u6570\u3001\u975e\u7f3a\u5931\u503c\u4e2a\u6570\u3001\u6700\u5927\u503c\u5bf9\u5e94\u7684\u7d22\u5f15\uff1a In [ 53 ]: df_demo . quantile ( 0.75 ) Out [ 53 ]: Height 167.5 Weight 65.0 Name : 0.75 , dtype : float64 In [ 54 ]: df_demo . count () Out [ 54 ]: Height 183 Weight 189 dtype : int64 In [ 55 ]: df_demo . idxmax () # idxmin\u662f\u5bf9\u5e94\u7684\u51fd\u6570 Out [ 55 ]: Height 193 Weight 2 dtype : int64 \u4e0a\u9762\u8fd9\u4e9b\u6240\u6709\u7684\u51fd\u6570\uff0c\u7531\u4e8e\u64cd\u4f5c\u540e\u8fd4\u56de\u7684\u662f\u6807\u91cf\uff0c\u6240\u4ee5\u53c8\u79f0\u4e3a\u805a\u5408\u51fd\u6570\uff0c\u5b83\u4eec\u6709\u4e00\u4e2a\u516c\u5171\u53c2\u6570 axis \uff0c\u9ed8\u8ba4\u4e3a 0 \u4ee3\u8868\u9010\u5217\u805a\u5408\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a 1 \u5219\u8868\u793a\u9010\u884c\u805a\u5408\uff1a In [ 56 ]: df_demo . mean ( axis = 1 ) . head () # \u5728\u8fd9\u4e2a\u6570\u636e\u96c6\u4e0a\u4f53\u91cd\u548c\u8eab\u9ad8\u7684\u5747\u503c\u5e76\u6ca1\u6709\u610f\u4e49 Out [ 56 ]: 0 102.45 1 118.25 2 138.95 3 41.00 4 124.00 dtype : float64 3. \u552f\u4e00\u503c\u51fd\u6570 \u5bf9\u5e8f\u5217\u4f7f\u7528 unique \u548c nunique \u53ef\u4ee5\u5206\u522b\u5f97\u5230\u5176\u552f\u4e00\u503c\u7ec4\u6210\u7684\u5217\u8868\u548c\u552f\u4e00\u503c\u7684\u4e2a\u6570\uff1a In [ 57 ]: df [ 'School' ] . unique () Out [ 57 ]: array ([ 'Shanghai Jiao Tong University' , 'Peking University' , 'Fudan University' , 'Tsinghua University' ], dtype = object ) In [ 58 ]: df [ 'School' ] . nunique () Out [ 58 ]: 4 value_counts \u53ef\u4ee5\u5f97\u5230\u552f\u4e00\u503c\u548c\u5176\u5bf9\u5e94\u51fa\u73b0\u7684\u9891\u6570\uff1a In [ 59 ]: df [ 'School' ] . value_counts () Out [ 59 ]: Tsinghua University 69 Shanghai Jiao Tong University 57 Fudan University 40 Peking University 34 Name : School , dtype : int64 \u5982\u679c\u60f3\u8981\u89c2\u5bdf\u591a\u4e2a\u5217\u7ec4\u5408\u7684\u552f\u4e00\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 drop_duplicates \u3002\u5176\u4e2d\u7684\u5173\u952e\u53c2\u6570\u662f keep \uff0c\u9ed8\u8ba4\u503c first \u8868\u793a\u6bcf\u4e2a\u7ec4\u5408\u4fdd\u7559\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u6240\u5728\u884c\uff0c last \u8868\u793a\u4fdd\u7559\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u6240\u5728\u884c\uff0c False \u8868\u793a\u628a\u6240\u6709\u91cd\u590d\u7ec4\u5408\u6240\u5728\u7684\u884c\u5254\u9664\u3002 In [ 60 ]: df_demo = df [[ 'Gender' , 'Transfer' , 'Name' ]] In [ 61 ]: df_demo . drop_duplicates ([ 'Gender' , 'Transfer' ]) Out [ 61 ]: Gender Transfer Name 0 Female N Gaopeng Yang 1 Male N Changqiang You 12 Female NaN Peng You 21 Male NaN Xiaopeng Shen 36 Male Y Xiaojuan Qin 43 Female Y Gaoli Feng In [ 62 ]: df_demo . drop_duplicates ([ 'Gender' , 'Transfer' ], keep = 'last' ) Out [ 62 ]: Gender Transfer Name 147 Male NaN Juan You 150 Male Y Chengpeng You 169 Female Y Chengquan Qin 194 Female NaN Yanmei Qian 197 Female N Chengqiang Chu 199 Male N Chunpeng Lv In [ 63 ]: df_demo . drop_duplicates ([ 'Name' , 'Gender' ], .... : keep = False ) . head () # \u4fdd\u7559\u53ea\u51fa\u73b0\u8fc7\u4e00\u6b21\u7684\u6027\u522b\u548c\u59d3\u540d\u7ec4\u5408 .... : Out [ 63 ]: Gender Transfer Name 0 Female N Gaopeng Yang 1 Male N Changqiang You 2 Male N Mei Sun 4 Male N Gaojuan You 5 Female N Xiaoli Qian In [ 64 ]: df [ 'School' ] . drop_duplicates () # \u5728Series\u4e0a\u4e5f\u53ef\u4ee5\u4f7f\u7528 Out [ 64 ]: 0 Shanghai Jiao Tong University 1 Peking University 3 Fudan University 5 Tsinghua University Name : School , dtype : object \u6b64\u5916\uff0c duplicated \u548c drop_duplicates \u7684\u529f\u80fd\u7c7b\u4f3c\uff0c\u4f46\u524d\u8005\u8fd4\u56de\u4e86\u662f\u5426\u4e3a\u552f\u4e00\u503c\u7684\u5e03\u5c14\u5217\u8868\uff0c\u5176 keep \u53c2\u6570\u4e0e\u540e\u8005\u4e00\u81f4\u3002\u5176\u8fd4\u56de\u7684\u5e8f\u5217\uff0c\u628a\u91cd\u590d\u5143\u7d20\u8bbe\u4e3a True \uff0c\u5426\u5219\u4e3a False \u3002 drop_duplicates \u7b49\u4ef7\u4e8e\u628a duplicated \u4e3a True \u7684\u5bf9\u5e94\u884c\u5254\u9664\u3002 In [ 65 ]: df_demo . duplicated ([ 'Gender' , 'Transfer' ]) . head () Out [ 65 ]: 0 False 1 False 2 True 3 True 4 True dtype : bool In [ 66 ]: df [ 'School' ] . duplicated () . head () # \u5728Series\u4e0a\u4e5f\u53ef\u4ee5\u4f7f\u7528 Out [ 66 ]: 0 False 1 False 2 True 3 False 4 True Name : School , dtype : bool 4. \u66ff\u6362\u51fd\u6570 \u4e00\u822c\u800c\u8a00\uff0c\u66ff\u6362\u64cd\u4f5c\u662f\u9488\u5bf9\u67d0\u4e00\u4e2a\u5217\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\u4e0b\u9762\u7684\u4f8b\u5b50\u90fd\u4ee5 Series \u4e3e\u4f8b\u3002 pandas \u4e2d\u7684\u66ff\u6362\u51fd\u6570\u53ef\u4ee5\u5f52\u7eb3\u4e3a\u4e09\u7c7b\uff1a\u6620\u5c04\u66ff\u6362\u3001\u903b\u8f91\u66ff\u6362\u3001\u6570\u503c\u66ff\u6362\u3002\u5176\u4e2d\u6620\u5c04\u66ff\u6362\u5305\u542b replace \u65b9\u6cd5\u3001\u7b2c\u516b\u7ae0\u4e2d\u7684 str.replace \u65b9\u6cd5\u4ee5\u53ca\u7b2c\u4e5d\u7ae0\u4e2d\u7684 cat.codes \u65b9\u6cd5\uff0c\u6b64\u5904\u4ecb\u7ecd replace \u7684\u7528\u6cd5\u3002 \u5728 replace \u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b57\u5178\u6784\u9020\uff0c\u6216\u8005\u4f20\u5165\u4e24\u4e2a\u5217\u8868\u6765\u8fdb\u884c\u66ff\u6362\uff1a In [ 67 ]: df [ 'Gender' ] . replace ({ 'Female' : 0 , 'Male' : 1 }) . head () Out [ 67 ]: 0 0 1 1 2 1 3 0 4 1 Name : Gender , dtype : int64 In [ 68 ]: df [ 'Gender' ] . replace ([ 'Female' , 'Male' ], [ 0 , 1 ]) . head () Out [ 68 ]: 0 0 1 1 2 1 3 0 4 1 Name : Gender , dtype : int64 \u53e6\u5916\uff0c replace \u8fd8\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u65b9\u5411\u66ff\u6362\uff0c\u6307\u5b9a method \u53c2\u6570\u4e3a ffill \u5219\u4e3a\u7528\u524d\u9762\u4e00\u4e2a\u6700\u8fd1\u7684\u672a\u88ab\u66ff\u6362\u7684\u503c\u8fdb\u884c\u66ff\u6362\uff0c bfill \u5219\u4f7f\u7528\u540e\u9762\u6700\u8fd1\u7684\u672a\u88ab\u66ff\u6362\u7684\u503c\u8fdb\u884c\u66ff\u6362\u3002\u4ece\u4e0b\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u5230\uff0c\u5b83\u4eec\u7684\u7ed3\u679c\u662f\u4e0d\u540c\u7684\uff1a In [ 69 ]: s = pd . Series ([ 'a' , 1 , 'b' , 2 , 1 , 1 , 'a' ]) In [ 70 ]: s . replace ([ 1 , 2 ], method = 'ffill' ) Out [ 70 ]: 0 a 1 a 2 b 3 b 4 b 5 b 6 a dtype : object In [ 71 ]: s . replace ([ 1 , 2 ], method = 'bfill' ) Out [ 71 ]: 0 a 1 b 2 b 3 a 4 a 5 a 6 a dtype : object \u6b63\u5219\u66ff\u6362\u8bf7\u4f7f\u7528 str.replace \u867d\u7136\u5bf9\u4e8e replace \u800c\u8a00\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u66ff\u6362\uff0c\u4f46\u662f\u5f53\u524d\u7248\u672c\u4e0b\u5bf9\u4e8e string \u7c7b\u578b\u7684\u6b63\u5219\u66ff\u6362\u8fd8\u5b58\u5728 bug \uff0c\u56e0\u6b64\u5982\u6709\u6b64\u9700\u6c42\uff0c\u8bf7\u9009\u62e9 str.replace \u8fdb\u884c\u66ff\u6362\u64cd\u4f5c\uff0c\u5177\u4f53\u7684\u65b9\u5f0f\u5c06\u5728\u7b2c\u516b\u7ae0\u4e2d\u8bb2\u89e3\u3002 \u903b\u8f91\u66ff\u6362\u5305\u62ec\u4e86 where \u548c mask \uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u662f\u5b8c\u5168\u5bf9\u79f0\u7684\uff1a where \u51fd\u6570\u5728\u4f20\u5165\u6761\u4ef6\u4e3a False \u7684\u5bf9\u5e94\u884c\u8fdb\u884c\u66ff\u6362\uff0c\u800c mask \u5728\u4f20\u5165\u6761\u4ef6\u4e3a True \u7684\u5bf9\u5e94\u884c\u8fdb\u884c\u66ff\u6362\uff0c\u5f53\u4e0d\u6307\u5b9a\u66ff\u6362\u503c\u65f6\uff0c\u66ff\u6362\u4e3a\u7f3a\u5931\u503c\u3002 In [ 72 ]: s = pd . Series ([ - 1 , 1.2345 , 100 , - 50 ]) In [ 73 ]: s . where ( s < 0 ) Out [ 73 ]: 0 - 1.0 1 NaN 2 NaN 3 - 50.0 dtype : float64 In [ 74 ]: s . where ( s < 0 , 100 ) Out [ 74 ]: 0 - 1.0 1 100.0 2 100.0 3 - 50.0 dtype : float64 In [ 75 ]: s . mask ( s < 0 ) Out [ 75 ]: 0 NaN 1 1.2345 2 100.0000 3 NaN dtype : float64 In [ 76 ]: s . mask ( s < 0 , - 50 ) Out [ 76 ]: 0 - 50.0000 1 1.2345 2 100.0000 3 - 50.0000 dtype : float64 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f20\u5165\u7684\u6761\u4ef6\u53ea\u9700\u662f\u4e0e\u88ab\u8c03\u7528\u7684 Series \u7d22\u5f15\u4e00\u81f4\u7684\u5e03\u5c14\u5e8f\u5217\u5373\u53ef\uff1a In [ 77 ]: s_condition = pd . Series ([ True , False , False , True ], index = s . index ) In [ 78 ]: s . mask ( s_condition , - 50 ) Out [ 78 ]: 0 - 50.0000 1 1.2345 2 100.0000 3 - 50.0000 dtype : float64 \u6570\u503c\u66ff\u6362\u5305\u542b\u4e86 round, abs, clip \u65b9\u6cd5\uff0c\u5b83\u4eec\u5206\u522b\u8868\u793a\u6309\u7167\u7ed9\u5b9a\u7cbe\u5ea6\u56db\u820d\u4e94\u5165\u3001\u53d6\u7edd\u5bf9\u503c\u548c\u622a\u65ad\uff1a In [ 79 ]: s = pd . Series ([ - 1 , 1.2345 , 100 , - 50 ]) In [ 80 ]: s . round ( 2 ) Out [ 80 ]: 0 - 1.00 1 1.23 2 100.00 3 - 50.00 dtype : float64 In [ 81 ]: s . abs () Out [ 81 ]: 0 1.0000 1 1.2345 2 100.0000 3 50.0000 dtype : float64 In [ 82 ]: s . clip ( 0 , 2 ) # \u524d\u4e24\u4e2a\u6570\u5206\u522b\u8868\u793a\u4e0a\u4e0b\u622a\u65ad\u8fb9\u754c Out [ 82 ]: 0 0.0000 1 1.2345 2 2.0000 3 0.0000 dtype : float64 \u7ec3\u4e00\u7ec3 \u5728 clip \u4e2d\uff0c\u8d85\u8fc7\u8fb9\u754c\u7684\u53ea\u80fd\u622a\u65ad\u4e3a\u8fb9\u754c\u503c\uff0c\u5982\u679c\u8981\u628a\u8d85\u51fa\u8fb9\u754c\u7684\u66ff\u6362\u4e3a\u81ea\u5b9a\u4e49\u7684\u503c\uff0c\u5e94\u5f53\u5982\u4f55\u505a\uff1f 5. \u6392\u5e8f\u51fd\u6570 \u6392\u5e8f\u5171\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u5176\u4e00\u4e3a\u503c\u6392\u5e8f\uff0c\u5176\u4e8c\u4e3a\u7d22\u5f15\u6392\u5e8f\uff0c\u5bf9\u5e94\u7684\u51fd\u6570\u662f sort_values \u548c sort_index \u3002 \u4e3a\u4e86\u6f14\u793a\u6392\u5e8f\u51fd\u6570\uff0c\u4e0b\u9762\u5148\u5229\u7528 set_index \u65b9\u6cd5\u628a\u5e74\u7ea7\u548c\u59d3\u540d\u4e24\u5217\u4f5c\u4e3a\u7d22\u5f15\uff0c\u591a\u7ea7\u7d22\u5f15\u7684\u5185\u5bb9\u548c\u7d22\u5f15\u8bbe\u7f6e\u7684\u65b9\u6cd5\u5c06\u5728\u7b2c\u4e09\u7ae0\u8fdb\u884c\u8be6\u7ec6\u8bb2\u89e3\u3002 In [ 83 ]: df_demo = df [[ 'Grade' , 'Name' , 'Height' , .... : 'Weight' ]] . set_index ([ 'Grade' , 'Name' ]) .... : \u5bf9\u8eab\u9ad8\u8fdb\u884c\u6392\u5e8f\uff0c\u9ed8\u8ba4\u53c2\u6570 ascending=True \u4e3a\u5347\u5e8f\uff1a In [ 84 ]: df_demo . sort_values ( 'Height' ) . head () Out [ 84 ]: Height Weight Grade Name Junior Xiaoli Chu 145.4 34.0 Senior Gaomei Lv 147.3 34.0 Sophomore Peng Han 147.8 34.0 Senior Changli Lv 148.7 41.0 Sophomore Changjuan You 150.5 40.0 In [ 85 ]: df_demo . sort_values ( 'Height' , ascending = False ) . head () Out [ 85 ]: Height Weight Grade Name Senior Xiaoqiang Qin 193.9 79.0 Mei Sun 188.9 89.0 Gaoli Zhao 186.5 83.0 Freshman Qiang Han 185.3 87.0 Senior Qiang Zheng 183.9 87.0 \u5728\u6392\u5e8f\u4e2d\uff0c\u7ecf\u5e38\u9047\u5230\u591a\u5217\u6392\u5e8f\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u5728\u4f53\u91cd\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u8eab\u9ad8\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u4e14\u4fdd\u6301\u8eab\u9ad8\u964d\u5e8f\u6392\u5217\uff0c\u4f53\u91cd\u5347\u5e8f\u6392\u5217\uff1a In [ 86 ]: df_demo . sort_values ([ 'Weight' , 'Height' ], ascending = [ True , False ]) . head () Out [ 86 ]: Height Weight Grade Name Sophomore Peng Han 147.8 34.0 Senior Gaomei Lv 147.3 34.0 Junior Xiaoli Chu 145.4 34.0 Sophomore Qiang Zhou 150.5 36.0 Freshman Yanqiang Xu 152.4 38.0 \u7d22\u5f15\u6392\u5e8f\u7684\u7528\u6cd5\u548c\u503c\u6392\u5e8f\u5b8c\u5168\u4e00\u81f4\uff0c\u53ea\u4e0d\u8fc7\u5143\u7d20\u7684\u503c\u5728\u7d22\u5f15\u4e2d\uff0c\u6b64\u65f6\u9700\u8981\u6307\u5b9a\u7d22\u5f15\u5c42\u7684\u540d\u5b57\u6216\u8005\u5c42\u53f7\uff0c\u7528\u53c2\u6570 level \u8868\u793a\u3002\u53e6\u5916\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5b57\u7b26\u4e32\u7684\u6392\u5217\u987a\u5e8f\u7531\u5b57\u6bcd\u987a\u5e8f\u51b3\u5b9a\u3002 In [ 87 ]: df_demo . sort_index ( level = [ 'Grade' , 'Name' ], ascending = [ True , False ]) . head () Out [ 87 ]: Height Weight Grade Name Freshman Yanquan Wang 163.5 55.0 Yanqiang Xu 152.4 38.0 Yanqiang Feng 162.3 51.0 Yanpeng Lv NaN 65.0 Yanli Zhang 165.1 52.0 6. apply \u65b9\u6cd5 apply \u65b9\u6cd5\u5e38\u7528\u4e8e DataFrame \u7684\u884c\u8fed\u4ee3\u6216\u8005\u5217\u8fed\u4ee3\uff0c\u5b83\u7684 axis \u542b\u4e49\u4e0e\u7b2c 2 \u5c0f\u8282\u4e2d\u7684\u7edf\u8ba1\u805a\u5408\u51fd\u6570\u4e00\u81f4\uff0c apply \u7684\u53c2\u6570\u5f80\u5f80\u662f\u4e00\u4e2a\u4ee5\u5e8f\u5217\u4e3a\u8f93\u5165\u7684\u51fd\u6570\u3002\u4f8b\u5982\u5bf9\u4e8e .mean() \uff0c\u4f7f\u7528 apply \u53ef\u4ee5\u5982\u4e0b\u5730\u5199\u51fa\uff1a In [ 88 ]: df_demo = df [[ 'Height' , 'Weight' ]] In [ 89 ]: def my_mean ( x ): .... : res = x . mean () .... : return res .... : In [ 90 ]: df_demo . apply ( my_mean ) Out [ 90 ]: Height 163.218033 Weight 55.015873 dtype : float64 \u540c\u6837\u7684\uff0c\u53ef\u4ee5\u5229\u7528 lambda \u8868\u8fbe\u5f0f\u4f7f\u5f97\u4e66\u5199\u7b80\u6d01\uff0c\u8fd9\u91cc\u7684 x \u5c31\u6307\u4ee3\u88ab\u8c03\u7528\u7684 df_demo \u8868\u4e2d\u9010\u4e2a\u8f93\u5165\u7684\u5e8f\u5217\uff1a In [ 91 ]: df_demo . apply ( lambda x : x . mean ()) Out [ 91 ]: Height 163.218033 Weight 55.015873 dtype : float64 \u82e5\u6307\u5b9a axis=1 \uff0c\u90a3\u4e48\u6bcf\u6b21\u4f20\u5165\u51fd\u6570\u7684\u5c31\u662f\u884c\u5143\u7d20\u7ec4\u6210\u7684 Series \uff0c\u5176\u7ed3\u679c\u4e0e\u4e4b\u524d\u7684\u9010\u884c\u5747\u503c\u7ed3\u679c\u4e00\u81f4\u3002 In [ 92 ]: df_demo . apply ( lambda x : x . mean (), axis = 1 ) . head () Out [ 92 ]: 0 102.45 1 118.25 2 138.95 3 41.00 4 124.00 dtype : float64 \u8fd9\u91cc\u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a mad \u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5e8f\u5217\u4e2d\u504f\u79bb\u8be5\u5e8f\u5217\u5747\u503c\u7684\u7edd\u5bf9\u503c\u5927\u5c0f\u7684\u5747\u503c\uff0c\u4f8b\u5982\u5e8f\u5217 1,3,7,10 \u4e2d\uff0c\u5747\u503c\u4e3a 5.25\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u504f\u79bb\u7684\u7edd\u5bf9\u503c\u4e3a 4.25,2.25,1.75,4.75\uff0c\u8fd9\u4e2a\u504f\u79bb\u5e8f\u5217\u7684\u5747\u503c\u4e3a 3.25\u3002\u73b0\u5728\u5229\u7528 apply \u8ba1\u7b97\u5347\u9ad8\u548c\u4f53\u91cd\u7684 mad \u6307\u6807\uff1a In [ 93 ]: df_demo . apply ( lambda x :( x - x . mean ()) . abs () . mean ()) Out [ 93 ]: Height 6.707229 Weight 10.391870 dtype : float64 \u8fd9\u4e0e\u4f7f\u7528\u5185\u7f6e\u7684 mad \u51fd\u6570\u8ba1\u7b97\u7ed3\u679c\u4e00\u81f4\uff1a In [ 94 ]: df_demo . mad () Out [ 94 ]: Height 6.707229 Weight 10.391870 dtype : float64 \u8c28\u614e\u4f7f\u7528 apply \u5f97\u76ca\u4e8e\u4f20\u5165\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u5904\u7406\uff0c apply \u7684\u81ea\u7531\u5ea6\u5f88\u9ad8\uff0c\u4f46\u8fd9\u662f\u4ee5\u6027\u80fd\u4e3a\u4ee3\u4ef7\u7684\u3002\u4e00\u822c\u800c\u8a00\uff0c\u4f7f\u7528 pandas \u7684\u5185\u7f6e\u51fd\u6570\u5904\u7406\u548c apply \u6765\u5904\u7406\u540c\u4e00\u4e2a\u4efb\u52a1\uff0c\u5176\u901f\u5ea6\u4f1a\u76f8\u5dee\u8f83\u591a\uff0c\u56e0\u6b64\u53ea\u6709\u5728\u786e\u5b9e\u5b58\u5728\u81ea\u5b9a\u4e49\u9700\u6c42\u7684\u60c5\u5883\u4e0b\u624d\u8003\u8651\u4f7f\u7528 apply \u3002 \u56db\u3001\u7a97\u53e3\u5bf9\u8c61 pandas \u4e2d\u6709 3 \u7c7b\u7a97\u53e3\uff0c\u5206\u522b\u662f\u6ed1\u52a8\u7a97\u53e3 rolling \u3001\u6269\u5f20\u7a97\u53e3 expanding \u4ee5\u53ca\u6307\u6570\u52a0\u6743\u7a97\u53e3 ewm \u3002\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u4ee5\u65e5\u671f\u504f\u7f6e\u4e3a\u7a97\u53e3\u5927\u5c0f\u7684\u6ed1\u52a8\u7a97\u53e3\u5c06\u5728\u7b2c\u5341\u7ae0\u8ba8\u8bba\uff0c\u6307\u6570\u52a0\u6743\u7a97\u53e3\u89c1\u672c\u7ae0\u7ec3\u4e60\u3002 1. \u6ed1\u7a97\u5bf9\u8c61 \u8981\u4f7f\u7528\u6ed1\u7a97\u51fd\u6570\uff0c\u5c31\u5fc5\u987b\u5148\u8981\u5bf9\u4e00\u4e2a\u5e8f\u5217\u4f7f\u7528 .rolling \u5f97\u5230\u6ed1\u7a97\u5bf9\u8c61\uff0c\u5176\u6700\u91cd\u8981\u7684\u53c2\u6570\u4e3a\u7a97\u53e3\u5927\u5c0f window \u3002 In [ 95 ]: s = pd . Series ([ 1 , 2 , 3 , 4 , 5 ]) In [ 96 ]: roller = s . rolling ( window = 3 ) In [ 97 ]: roller Out [ 97 ]: Rolling [ window = 3 , center = False , axis = 0 ] \u5728\u5f97\u5230\u4e86\u6ed1\u7a97\u5bf9\u8c61\u540e\uff0c\u80fd\u591f\u4f7f\u7528\u76f8\u5e94\u7684\u805a\u5408\u51fd\u6570\u8fdb\u884c\u8ba1\u7b97\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u7a97\u53e3\u5305\u542b\u5f53\u524d\u884c\u6240\u5728\u7684\u5143\u7d20\uff0c\u4f8b\u5982\u5728\u7b2c\u56db\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u5747\u503c\u8fd0\u7b97\u65f6\uff0c\u5e94\u5f53\u8ba1\u7b97 (2+3+4)/3\uff0c\u800c\u4e0d\u662f (1+2+3)/3\uff1a In [ 98 ]: roller . mean () Out [ 98 ]: 0 NaN 1 NaN 2 2.0 3 3.0 4 4.0 dtype : float64 In [ 99 ]: roller . sum () Out [ 99 ]: 0 NaN 1 NaN 2 6.0 3 9.0 4 12.0 dtype : float64 \u5bf9\u4e8e\u6ed1\u52a8\u76f8\u5173\u7cfb\u6570\u6216\u6ed1\u52a8\u534f\u65b9\u5dee\u7684\u8ba1\u7b97\uff0c\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 100 ]: s2 = pd . Series ([ 1 , 2 , 6 , 16 , 30 ]) In [ 101 ]: roller . cov ( s2 ) Out [ 101 ]: 0 NaN 1 NaN 2 2.5 3 7.0 4 12.0 dtype : float64 In [ 102 ]: roller . corr ( s2 ) Out [ 102 ]: 0 NaN 1 NaN 2 0.944911 3 0.970725 4 0.995402 dtype : float64 \u6b64\u5916\uff0c\u8fd8\u652f\u6301\u4f7f\u7528 apply \u4f20\u5165\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u5176\u4f20\u5165\u503c\u662f\u5bf9\u5e94\u7a97\u53e3\u7684 Series \uff0c\u4f8b\u5982\u4e0a\u8ff0\u7684\u5747\u503c\u51fd\u6570\u53ef\u4ee5\u7b49\u6548\u8868\u793a\uff1a In [ 103 ]: roller . apply ( lambda x : x . mean ()) Out [ 103 ]: 0 NaN 1 NaN 2 2.0 3 3.0 4 4.0 dtype : float64 shift, diff, pct_change \u662f\u4e00\u7ec4\u7c7b\u6ed1\u7a97\u51fd\u6570\uff0c\u5b83\u4eec\u7684\u516c\u5171\u53c2\u6570\u4e3a periods=n \uff0c\u9ed8\u8ba4\u4e3a 1\uff0c\u5206\u522b\u8868\u793a\u53d6\u5411\u524d\u7b2c n \u4e2a\u5143\u7d20\u7684\u503c\u3001\u4e0e\u5411\u524d\u7b2c n \u4e2a\u5143\u7d20\u505a\u5dee\uff08\u4e0e Numpy \u4e2d\u4e0d\u540c\uff0c\u540e\u8005\u8868\u793a n \u9636\u5dee\u5206\uff09\u3001\u4e0e\u5411\u524d\u7b2c n \u4e2a\u5143\u7d20\u76f8\u6bd4\u8ba1\u7b97\u589e\u957f\u7387\u3002\u8fd9\u91cc\u7684 n \u53ef\u4ee5\u4e3a\u8d1f\uff0c\u8868\u793a\u53cd\u65b9\u5411\u7684\u7c7b\u4f3c\u64cd\u4f5c\u3002 In [ 104 ]: s = pd . Series ([ 1 , 3 , 6 , 10 , 15 ]) In [ 105 ]: s . shift ( 2 ) Out [ 105 ]: 0 NaN 1 NaN 2 1.0 3 3.0 4 6.0 dtype : float64 In [ 106 ]: s . diff ( 3 ) Out [ 106 ]: 0 NaN 1 NaN 2 NaN 3 9.0 4 12.0 dtype : float64 In [ 107 ]: s . pct_change () Out [ 107 ]: 0 NaN 1 2.000000 2 1.000000 3 0.666667 4 0.500000 dtype : float64 In [ 108 ]: s . shift ( - 1 ) Out [ 108 ]: 0 3.0 1 6.0 2 10.0 3 15.0 4 NaN dtype : float64 In [ 109 ]: s . diff ( - 2 ) Out [ 109 ]: 0 - 5.0 1 - 7.0 2 - 9.0 3 NaN 4 NaN dtype : float64 \u5c06\u5176\u89c6\u4f5c\u7c7b\u6ed1\u7a97\u51fd\u6570\u7684\u539f\u56e0\u662f\uff0c\u5b83\u4eec\u7684\u529f\u80fd\u53ef\u4ee5\u7528\u7a97\u53e3\u5927\u5c0f\u4e3a n+1 \u7684 rolling \u65b9\u6cd5\u7b49\u4ef7\u4ee3\u66ff\uff1a In [ 110 ]: s . rolling ( 3 ) . apply ( lambda x : list ( x )[ 0 ]) # s.shift(2) Out [ 110 ]: 0 NaN 1 NaN 2 1.0 3 3.0 4 6.0 dtype : float64 In [ 111 ]: s . rolling ( 4 ) . apply ( lambda x : list ( x )[ - 1 ] - list ( x )[ 0 ]) # s.diff(3) Out [ 111 ]: 0 NaN 1 NaN 2 NaN 3 9.0 4 12.0 dtype : float64 In [ 112 ]: def my_pct ( x ): ..... : L = list ( x ) ..... : return L [ - 1 ] / L [ 0 ] - 1 ..... : In [ 113 ]: s . rolling ( 2 ) . apply ( my_pct ) # s.pct_change() Out [ 113 ]: 0 NaN 1 2.000000 2 1.000000 3 0.666667 4 0.500000 dtype : float64 \u7ec3\u4e00\u7ec3 rolling \u5bf9\u8c61\u7684\u9ed8\u8ba4\u7a97\u53e3\u65b9\u5411\u90fd\u662f\u5411\u524d\u7684\uff0c\u67d0\u4e9b\u60c5\u51b5\u4e0b\u7528\u6237\u9700\u8981\u5411\u540e\u7684\u7a97\u53e3\uff0c\u4f8b\u5982\u5bf9 1,2,3 \u8bbe\u5b9a\u5411\u540e\u7a97\u53e3\u4e3a 2 \u7684 sum \u64cd\u4f5c\uff0c\u7ed3\u679c\u4e3a 3,5,NaN\uff0c\u6b64\u65f6\u5e94\u8be5\u5982\u4f55\u5b9e\u73b0\u5411\u540e\u7684\u6ed1\u7a97\u64cd\u4f5c\uff1f 2. \u6269\u5f20\u7a97\u53e3 \u6269\u5f20\u7a97\u53e3\u53c8\u79f0\u7d2f\u8ba1\u7a97\u53e3\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u52a8\u6001\u957f\u5ea6\u7684\u7a97\u53e3\uff0c\u5176\u7a97\u53e3\u7684\u5927\u5c0f\u5c31\u662f\u4ece\u5e8f\u5217\u5f00\u59cb\u5904\u5230\u5177\u4f53\u64cd\u4f5c\u7684\u5bf9\u5e94\u4f4d\u7f6e\uff0c\u5176\u4f7f\u7528\u7684\u805a\u5408\u51fd\u6570\u4f1a\u4f5c\u7528\u4e8e\u8fd9\u4e9b\u9010\u6b65\u6269\u5f20\u7684\u7a97\u53e3\u4e0a\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u8bbe\u5e8f\u5217\u4e3a a1, a2, a3, a4\uff0c\u5219\u5176\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u7a97\u53e3\u5373 [a1]\u3001[a1, a2]\u3001[a1, a2, a3]\u3001[a1, a2, a3, a4]\u3002 In [ 114 ]: s = pd . Series ([ 1 , 3 , 6 , 10 ]) In [ 115 ]: s . expanding () . mean () Out [ 115 ]: 0 1.000000 1 2.000000 2 3.333333 3 5.000000 dtype : float64 \u7ec3\u4e00\u7ec3 cummax, cumsum, cumprod \u51fd\u6570\u662f\u5178\u578b\u7684\u7c7b\u6269\u5f20\u7a97\u53e3\u51fd\u6570\uff0c\u8bf7\u4f7f\u7528 expanding \u5bf9\u8c61\u4f9d\u6b21\u5b9e\u73b0\u5b83\u4eec\u3002 \u4e94\u3001\u7ec3\u4e60 Ex1\uff1a\u53e3\u888b\u5996\u602a\u6570\u636e\u96c6 \u73b0\u6709\u4e00\u4efd\u53e3\u888b\u5996\u602a\u7684\u6570\u636e\u96c6\uff0c\u4e0b\u9762\u8fdb\u884c\u4e00\u4e9b\u80cc\u666f\u8bf4\u660e\uff1a # \u4ee3\u8868\u5168\u56fd\u56fe\u9274\u7f16\u53f7\uff0c\u4e0d\u540c\u884c\u5b58\u5728\u76f8\u540c\u6570\u5b57\u5219\u8868\u793a\u4e3a\u8be5\u5996\u602a\u7684\u4e0d\u540c\u72b6\u6001 \u5996\u602a\u5177\u6709\u5355\u5c5e\u6027\u548c\u53cc\u5c5e\u6027\u4e24\u79cd\uff0c\u5bf9\u4e8e\u5355\u5c5e\u6027\u7684\u5996\u602a\uff0c Type 2 \u4e3a\u7f3a\u5931\u503c Total, HP, Attack, Defense, Sp. Atk, Sp. Def, Speed \u5206\u522b\u4ee3\u8868\u79cd\u65cf\u503c\u3001\u4f53\u529b\u3001\u7269\u653b\u3001\u9632\u5fa1\u3001\u7279\u653b\u3001\u7279\u9632\u3001\u901f\u5ea6\uff0c\u5176\u4e2d\u79cd\u65cf\u503c\u4e3a\u540e 6 \u9879\u4e4b\u548c In [ 116 ]: df = pd . read_csv ( 'data/pokemon.csv' ) In [ 117 ]: df . head ( 3 ) Out [ 117 ]: # Name Type 1 Type 2 Total HP Attack Defense Sp. Atk Sp. Def Speed 0 1 Bulbasaur Grass Poison 318 45 49 49 65 65 45 1 2 Ivysaur Grass Poison 405 60 62 63 80 80 60 2 3 Venusaur Grass Poison 525 80 82 83 100 100 80 \u5bf9 HP, Attack, Defense, Sp. Atk, Sp. Def, Speed \u8fdb\u884c\u52a0\u603b\uff0c\u9a8c\u8bc1\u662f\u5426\u4e3a Total \u503c\u3002 \u5bf9\u4e8e # \u91cd\u590d\u7684\u5996\u602a\u53ea\u4fdd\u7559\u7b2c\u4e00\u6761\u8bb0\u5f55\uff0c\u89e3\u51b3\u4ee5\u4e0b\u95ee\u9898\uff1a a. \u6c42\u7b2c\u4e00\u5c5e\u6027\u7684\u79cd\u7c7b\u6570\u91cf\u548c\u524d\u4e09\u591a\u6570\u91cf\u5bf9\u5e94\u7684\u79cd\u7c7b b. \u6c42\u7b2c\u4e00\u5c5e\u6027\u548c\u7b2c\u4e8c\u5c5e\u6027\u7684\u7ec4\u5408\u79cd\u7c7b c. \u6c42\u5c1a\u672a\u51fa\u73b0\u8fc7\u7684\u5c5e\u6027\u7ec4\u5408 \u6309\u7167\u4e0b\u8ff0\u8981\u6c42\uff0c\u6784\u9020 Series \uff1a a. \u53d6\u51fa\u7269\u653b\uff0c\u8d85\u8fc7 120 \u7684\u66ff\u6362\u4e3a high \uff0c\u4e0d\u8db3 50 \u7684\u66ff\u6362\u4e3a low \uff0c\u5426\u5219\u8bbe\u4e3a mid b. \u53d6\u51fa\u7b2c\u4e00\u5c5e\u6027\uff0c\u5206\u522b\u7528 replace \u548c apply \u66ff\u6362\u6240\u6709\u5b57\u6bcd\u4e3a\u5927\u5199 c. \u6c42\u6bcf\u4e2a\u5996\u602a\u516d\u9879\u80fd\u529b\u7684\u79bb\u5dee\uff0c\u5373\u6240\u6709\u80fd\u529b\u4e2d\u504f\u79bb\u4e2d\u4f4d\u6570\u6700\u5927\u7684\u503c\uff0c\u6dfb\u52a0\u5230 df \u5e76\u4ece\u5927\u5230\u5c0f\u6392\u5e8f Ex2\uff1a\u6307\u6570\u52a0\u6743\u7a97\u53e3 \u4f5c\u4e3a\u6269\u5f20\u7a97\u53e3\u7684 ewm \u7a97\u53e3 \u5728\u6269\u5f20\u7a97\u53e3\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5404\u7c7b\u51fd\u6570\u8fdb\u884c\u5386\u53f2\u7684\u7d2f\u8ba1\u6307\u6807\u7edf\u8ba1\uff0c\u4f46\u8fd9\u4e9b\u5185\u7f6e\u7684\u7edf\u8ba1\u51fd\u6570\u5f80\u5f80\u628a\u7a97\u53e3\u4e2d\u7684\u6240\u6709\u5143\u7d20\u8d4b\u4e88\u4e86\u540c\u6837\u7684\u6743\u91cd\u3002\u4e8b\u5b9e\u4e0a\uff0c\u53ef\u4ee5\u7ed9\u51fa\u4e0d\u540c\u7684\u6743\u91cd\u6765\u8d4b\u7ed9\u7a97\u53e3\u4e2d\u7684\u5143\u7d20\uff0c\u6307\u6570\u52a0\u6743\u7a97\u53e3\u5c31\u662f\u8fd9\u6837\u4e00\u79cd\u7279\u6b8a\u7684\u6269\u5f20\u7a97\u53e3\u3002 \u5176\u4e2d\uff0c\u6700\u91cd\u8981\u7684\u53c2\u6570\u662f alpha \uff0c\u5b83\u51b3\u5b9a\u4e86\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7684\u7a97\u53e3\u6743\u91cd\u4e3a \uff0c\u5176\u4e2d \u8868\u793a\u5f53\u524d\u5143\u7d20\uff0c \u8868\u793a\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u4ece\u6743\u91cd\u516c\u5f0f\u53ef\u4ee5\u770b\u51fa\uff0c\u79bb\u5f00\u5f53\u524d\u503c\u8d8a\u8fdc\u5219\u6743\u91cd\u8d8a\u5c0f\uff0c\u82e5\u8bb0\u539f\u5e8f\u5217\u4e3a x \uff0c\u66f4\u65b0\u540e\u7684\u5f53\u524d\u5143\u7d20\u4e3a \uff0c\u6b64\u65f6\u901a\u8fc7\u52a0\u6743\u516c\u5f0f\u5f52\u4e00\u5316\u540e\u53ef\u77e5\uff1a \u5bf9\u4e8e Series \u800c\u8a00\uff0c\u53ef\u4ee5\u7528 ewm \u5bf9\u8c61\u5982\u4e0b\u8ba1\u7b97\u6307\u6570\u5e73\u6ed1\u540e\u7684\u5e8f\u5217\uff1a In [ 118 ]: np . random . seed ( 0 ) In [ 119 ]: s = pd . Series ( np . random . randint ( - 1 , 2 , 30 ) . cumsum ()) In [ 120 ]: s . head () Out [ 120 ]: 0 - 1 1 - 1 2 - 2 3 - 2 4 - 2 dtype : int32 In [ 121 ]: s . ewm ( alpha = 0.2 ) . mean () . head () Out [ 121 ]: 0 - 1.000000 1 - 1.000000 2 - 1.409836 3 - 1.609756 4 - 1.725845 dtype : float64 \u8bf7\u7528 expanding \u7a97\u53e3\u5b9e\u73b0\u3002 2\u3002 \u4f5c\u4e3a\u6ed1\u52a8\u7a97\u53e3\u7684 ewm \u7a97\u53e3 \u4ece\u7b2c 1 \u95ee\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c ewm \u4f5c\u4e3a\u4e00\u79cd\u6269\u5f20\u7a97\u53e3\u7684\u7279\u4f8b\uff0c\u53ea\u80fd\u4ece\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u52a0\u6743\u3002\u73b0\u5728\u5e0c\u671b\u7ed9\u5b9a\u4e00\u4e2a\u9650\u5236\u7a97\u53e3 n \uff0c\u53ea\u5bf9\u5305\u542b\u81ea\u8eab\u7684\u6700\u8fd1\u7684 n \u4e2a\u5143\u7d20\u4f5c\u4e3a\u7a97\u53e3\u8fdb\u884c\u6ed1\u52a8\u52a0\u6743\u5e73\u6ed1\u3002\u8bf7\u6839\u636e\u6ed1\u7a97\u51fd\u6570\uff0c\u7ed9\u51fa\u65b0\u7684 \u4e0e \u7684\u66f4\u65b0\u516c\u5f0f\uff0c\u5e76\u901a\u8fc7 rolling \u7a97\u53e3\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\u3002","title":"\u4e8c\u3001pandas\u57fa\u7840"},{"location":"pandas/part2/#_1","text":"","title":"\u4e00\u3001\u6587\u4ef6\u7684\u8bfb\u53d6\u548c\u5199\u5165"},{"location":"pandas/part2/#1","text":"pandas \u53ef\u4ee5\u8bfb\u53d6\u7684\u6587\u4ef6\u683c\u5f0f\u6709\u5f88\u591a\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u8bfb\u53d6 csv, excel, txt \u6587\u4ef6\u3002 In [ 4 ]: df_csv = pd . read_csv ( 'data/my_csv.csv' ) In [ 5 ]: df_csv Out [ 5 ]: col1 col2 col3 col4 col5 0 2 a 1.4 apple 2020 / 1 / 1 1 3 b 3.4 banana 2020 / 1 / 2 2 6 c 2.5 orange 2020 / 1 / 5 3 5 d 3.2 lemon 2020 / 1 / 7 In [ 6 ]: df_txt = pd . read_table ( 'data/my_table.txt' ) In [ 7 ]: df_txt Out [ 7 ]: col1 col2 col3 col4 0 2 a 1.4 apple 2020 / 1 / 1 1 3 b 3.4 banana 2020 / 1 / 2 2 6 c 2.5 orange 2020 / 1 / 5 3 5 d 3.2 lemon 2020 / 1 / 7 In [ 8 ]: df_excel = pd . read_excel ( 'data/my_excel.xlsx' ) In [ 9 ]: df_excel Out [ 9 ]: col1 col2 col3 col4 col5 0 2 a 1.4 apple 2020 / 1 / 1 1 3 b 3.4 banana 2020 / 1 / 2 2 6 c 2.5 orange 2020 / 1 / 5 3 5 d 3.2 lemon 2020 / 1 / 7 \u8fd9\u91cc\u6709\u4e00\u4e9b\u5e38\u7528\u7684\u516c\u5171\u53c2\u6570\uff0c header=None \u8868\u793a\u7b2c\u4e00\u884c\u4e0d\u4f5c\u4e3a\u5217\u540d\uff0c index_col \u8868\u793a\u628a\u67d0\u4e00\u5217\u6216\u51e0\u5217\u4f5c\u4e3a\u7d22\u5f15\uff0c\u7d22\u5f15\u7684\u5185\u5bb9\u5c06\u4f1a\u5728\u7b2c\u4e09\u7ae0\u8fdb\u884c\u8be6\u8ff0\uff0c usecols \u8868\u793a\u8bfb\u53d6\u5217\u7684\u96c6\u5408\uff0c\u9ed8\u8ba4\u8bfb\u53d6\u6240\u6709\u7684\u5217\uff0c parse_dates \u8868\u793a\u9700\u8981\u8f6c\u5316\u4e3a\u65f6\u95f4\u7684\u5217\uff0c\u5173\u4e8e\u65f6\u95f4\u5e8f\u5217\u7684\u6709\u5173\u5185\u5bb9\u5c06\u5728\u7b2c\u5341\u7ae0\u8bb2\u89e3\uff0c nrows \u8868\u793a\u8bfb\u53d6\u7684\u6570\u636e\u884c\u6570\u3002\u4e0a\u9762\u8fd9\u4e9b\u53c2\u6570\u5728\u4e0a\u8ff0\u7684\u4e09\u4e2a\u51fd\u6570\u91cc\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002 In [ 10 ]: pd . read_table ( 'data/my_table.txt' , header = None ) Out [ 10 ]: 0 1 2 3 0 col1 col2 col3 col4 1 2 a 1.4 apple 2020 / 1 / 1 2 3 b 3.4 banana 2020 / 1 / 2 3 6 c 2.5 orange 2020 / 1 / 5 4 5 d 3.2 lemon 2020 / 1 / 7 In [ 11 ]: pd . read_csv ( 'data/my_csv.csv' , index_col = [ 'col1' , 'col2' ]) Out [ 11 ]: col3 col4 col5 col1 col2 2 a 1.4 apple 2020 / 1 / 1 3 b 3.4 banana 2020 / 1 / 2 6 c 2.5 orange 2020 / 1 / 5 5 d 3.2 lemon 2020 / 1 / 7 In [ 12 ]: pd . read_table ( 'data/my_table.txt' , usecols = [ 'col1' , 'col2' ]) Out [ 12 ]: col1 col2 0 2 a 1 3 b 2 6 c 3 5 d In [ 13 ]: pd . read_csv ( 'data/my_csv.csv' , parse_dates = [ 'col5' ]) Out [ 13 ]: col1 col2 col3 col4 col5 0 2 a 1.4 apple 2020 - 01 - 01 1 3 b 3.4 banana 2020 - 01 - 02 2 6 c 2.5 orange 2020 - 01 - 05 3 5 d 3.2 lemon 2020 - 01 - 07 In [ 14 ]: pd . read_excel ( 'data/my_excel.xlsx' , nrows = 2 ) Out [ 14 ]: col1 col2 col3 col4 col5 0 2 a 1.4 apple 2020 / 1 / 1 1 3 b 3.4 banana 2020 / 1 / 2 \u5728\u8bfb\u53d6 txt \u6587\u4ef6\u65f6\uff0c\u7ecf\u5e38\u9047\u5230\u5206\u9694\u7b26\u975e\u7a7a\u683c\u7684\u60c5\u51b5\uff0c read_table \u6709\u4e00\u4e2a\u5206\u5272\u53c2\u6570 sep \uff0c\u5b83\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5206\u5272\u7b26\u53f7\uff0c\u8fdb\u884c txt \u6570\u636e\u7684\u8bfb\u53d6\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u8bfb\u53d6\u7684\u8868\u4ee5 |||| \u4e3a\u5206\u5272\uff1a In [ 15 ]: pd . read_table ( 'data/my_table_special_sep.txt' ) Out [ 15 ]: col1 |||| col2 0 TS |||| This is an apple . 1 GQ |||| My name is Bob . 2 WT |||| Well done ! 3 PT |||| May I help you ? \u4e0a\u9762\u7684\u7ed3\u679c\u663e\u7136\u4e0d\u662f\u7406\u60f3\u7684\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 sep \uff0c\u540c\u65f6\u9700\u8981\u6307\u5b9a\u5f15\u64ce\u4e3a python \uff1a In [ 16 ]: pd . read_table ( 'data/my_table_special_sep.txt' , .... : sep = ' \\|\\|\\|\\| ' , engine = 'python' ) .... : Out [ 16 ]: col1 col2 0 TS This is an apple . 1 GQ My name is Bob . 2 WT Well done ! 3 PT May I help you ? sep \u662f\u6b63\u5219\u53c2\u6570 \u5728\u4f7f\u7528 read_table \u7684\u65f6\u5019\u9700\u8981\u6ce8\u610f\uff0c\u53c2\u6570 sep \u4e2d\u4f7f\u7528\u7684\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u56e0\u6b64\u9700\u8981\u5bf9 | \u8fdb\u884c\u8f6c\u4e49\u53d8\u6210 \\| \uff0c\u5426\u5219\u65e0\u6cd5\u8bfb\u53d6\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002\u6709\u5173\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u57fa\u672c\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003\u7b2c\u516b\u7ae0\u6216\u8005\u5176\u4ed6\u76f8\u5173\u8d44\u6599\u3002","title":"1. \u6587\u4ef6\u8bfb\u53d6"},{"location":"pandas/part2/#2","text":"\u4e00\u822c\u5728\u6570\u636e\u5199\u5165\u4e2d\uff0c\u6700\u5e38\u7528\u7684\u64cd\u4f5c\u662f\u628a index \u8bbe\u7f6e\u4e3a False \uff0c\u7279\u522b\u5f53\u7d22\u5f15\u6ca1\u6709\u7279\u6b8a\u610f\u4e49\u7684\u65f6\u5019\uff0c\u8fd9\u6837\u7684\u884c\u4e3a\u80fd\u628a\u7d22\u5f15\u5728\u4fdd\u5b58\u7684\u65f6\u5019\u53bb\u9664\u3002 In [ 17 ]: df_csv . to_csv ( 'data/my_csv_saved.csv' , index = False ) In [ 18 ]: df_excel . to_excel ( 'data/my_excel_saved.xlsx' , index = False ) pandas \u4e2d\u6ca1\u6709\u5b9a\u4e49 to_table \u51fd\u6570\uff0c\u4f46\u662f to_csv \u53ef\u4ee5\u4fdd\u5b58\u4e3a txt \u6587\u4ef6\uff0c\u5e76\u4e14\u5141\u8bb8\u81ea\u5b9a\u4e49\u5206\u9694\u7b26\uff0c\u5e38\u7528\u5236\u8868\u7b26 \\t \u5206\u5272\uff1a In [ 19 ]: df_txt . to_csv ( 'data/my_txt_saved.txt' , sep = ' \\t ' , index = False ) \u5982\u679c\u60f3\u8981\u628a\u8868\u683c\u5feb\u901f\u8f6c\u6362\u4e3a markdown \u548c latex \u8bed\u8a00\uff0c\u53ef\u4ee5\u4f7f\u7528 to_markdown \u548c to_latex \u51fd\u6570\uff0c\u6b64\u5904\u9700\u8981\u5b89\u88c5 tabulate \u5305\u3002 In [ 20 ]: print ( df_csv . to_markdown ()) | | col1 | col2 | col3 | col4 | col5 | |--- : |------- : | : -------|------- : | : -------| : ---------| | 0 | 2 | a | 1.4 | apple | 2020 / 1 / 1 | | 1 | 3 | b | 3.4 | banana | 2020 / 1 / 2 | | 2 | 6 | c | 2.5 | orange | 2020 / 1 / 5 | | 3 | 5 | d | 3.2 | lemon | 2020 / 1 / 7 | In [ 21 ]: print ( df_csv . to_latex ()) \\ begin { tabular }{ lrlrll } \\ toprule {} & col1 & col2 & col3 & col4 & col5 \\\\ \\ midrule 0 & 2 & a & 1.4 & apple & 2020 / 1 / 1 \\\\ 1 & 3 & b & 3.4 & banana & 2020 / 1 / 2 \\\\ 2 & 6 & c & 2.5 & orange & 2020 / 1 / 5 \\\\ 3 & 5 & d & 3.2 & lemon & 2020 / 1 / 7 \\\\ \\ bottomrule \\ end { tabular }","title":"2. \u6570\u636e\u5199\u5165"},{"location":"pandas/part2/#_2","text":"pandas \u4e2d\u5177\u6709\u4e24\u79cd\u57fa\u672c\u7684\u6570\u636e\u5b58\u50a8\u7ed3\u6784\uff0c\u5b58\u50a8\u4e00\u7ef4 values \u7684 Series \u548c\u5b58\u50a8\u4e8c\u7ef4 values \u7684 DataFrame \uff0c\u5728\u8fd9\u4e24\u79cd\u7ed3\u6784\u4e0a\u5b9a\u4e49\u4e86\u5f88\u591a\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002","title":"\u4e8c\u3001\u57fa\u672c\u6570\u636e\u7ed3\u6784"},{"location":"pandas/part2/#1-series","text":"Series \u4e00\u822c\u7531\u56db\u4e2a\u90e8\u5206\u7ec4\u6210\uff0c\u5206\u522b\u662f\u5e8f\u5217\u7684\u503c data \u3001\u7d22\u5f15 index \u3001\u5b58\u50a8\u7c7b\u578b dtype \u3001\u5e8f\u5217\u7684\u540d\u5b57 name \u3002\u5176\u4e2d\uff0c\u7d22\u5f15\u4e5f\u53ef\u4ee5\u6307\u5b9a\u5b83\u7684\u540d\u5b57\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u3002 In [ 22 ]: s = pd . Series ( data = [ 100 , 'a' , { 'dic1' : 5 }], .... : index = pd . Index ([ 'id1' , 20 , 'third' ], name = 'my_idx' ), .... : dtype = 'object' , .... : name = 'my_name' ) .... : In [ 23 ]: s Out [ 23 ]: my_idx id1 100 20 a third { 'dic1' : 5 } Name : my_name , dtype : object object \u7c7b\u578b object \u4ee3\u8868\u4e86\u4e00\u79cd\u6df7\u5408\u7c7b\u578b\uff0c\u6b63\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5b58\u50a8\u4e86\u6574\u6570\u3001\u5b57\u7b26\u4e32\u4ee5\u53ca Python \u7684\u5b57\u5178\u6570\u636e\u7ed3\u6784\u3002\u6b64\u5916\uff0c\u76ee\u524d pandas \u628a\u7eaf\u5b57\u7b26\u4e32\u5e8f\u5217\u4e5f\u9ed8\u8ba4\u8ba4\u4e3a\u662f\u4e00\u79cd object \u7c7b\u578b\u7684\u5e8f\u5217\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u7528 string \u7c7b\u578b\u5b58\u50a8\uff0c\u6587\u672c\u5e8f\u5217\u7684\u5185\u5bb9\u4f1a\u5728\u7b2c\u516b\u7ae0\u4e2d\u8ba8\u8bba\u3002 \u5bf9\u4e8e\u8fd9\u4e9b\u5c5e\u6027\uff0c\u53ef\u4ee5\u901a\u8fc7 . \u7684\u65b9\u5f0f\u6765\u83b7\u53d6\uff1a In [ 24 ]: s . values Out [ 24 ]: array ([ 100 , 'a' , { 'dic1' : 5 }], dtype = object ) In [ 25 ]: s . index Out [ 25 ]: Index ([ 'id1' , 20 , 'third' ], dtype = 'object' , name = 'my_idx' ) In [ 26 ]: s . dtype Out [ 26 ]: dtype ( 'O' ) In [ 27 ]: s . name Out [ 27 ]: 'my_name' \u5229\u7528 .shape \u53ef\u4ee5\u83b7\u53d6\u5e8f\u5217\u7684\u957f\u5ea6\uff1a In [ 28 ]: s . shape Out [ 28 ]: ( 3 ,) \u7d22\u5f15\u662f pandas \u4e2d\u6700\u91cd\u8981\u7684\u6982\u5ff5\u4e4b\u4e00\uff0c\u5b83\u5c06\u5728\u7b2c\u4e09\u7ae0\u4e2d\u88ab\u8be6\u7ec6\u5730\u8ba8\u8bba\u3002\u5982\u679c\u60f3\u8981\u53d6\u51fa\u5355\u4e2a\u7d22\u5f15\u5bf9\u5e94\u7684\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7 [index_item] \u53ef\u4ee5\u53d6\u51fa\u3002 In [ 29 ]: s [ 'third' ] Out [ 29 ]: { 'dic1' : 5 }","title":"1. Series"},{"location":"pandas/part2/#2-dataframe","text":"DataFrame \u5728 Series \u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u5217\u7d22\u5f15\uff0c\u4e00\u4e2a\u6570\u636e\u6846\u53ef\u4ee5\u7531\u4e8c\u7ef4\u7684 data \u4e0e\u884c\u5217\u7d22\u5f15\u6765\u6784\u9020\uff1a In [ 30 ]: data = [[ 1 , 'a' , 1.2 ], [ 2 , 'b' , 2.2 ], [ 3 , 'c' , 3.2 ]] In [ 31 ]: df = pd . DataFrame ( data = data , .... : index = [ 'row_ %d ' % i for i in range ( 3 )], .... : columns = [ 'col_0' , 'col_1' , 'col_2' ]) .... : In [ 32 ]: df Out [ 32 ]: col_0 col_1 col_2 row_0 1 a 1.2 row_1 2 b 2.2 row_2 3 c 3.2 \u4f46\u4e00\u822c\u800c\u8a00\uff0c\u66f4\u591a\u7684\u65f6\u5019\u4f1a\u91c7\u7528\u4ece\u5217\u7d22\u5f15\u540d\u5230\u6570\u636e\u7684\u6620\u5c04\u6765\u6784\u9020\u6570\u636e\u6846\uff0c\u540c\u65f6\u518d\u52a0\u4e0a\u884c\u7d22\u5f15\uff1a In [ 33 ]: df = pd . DataFrame ( data = { 'col_0' : [ 1 , 2 , 3 ], 'col_1' : list ( 'abc' ), .... : 'col_2' : [ 1.2 , 2.2 , 3.2 ]}, .... : index = [ 'row_ %d ' % i for i in range ( 3 )]) .... : In [ 34 ]: df Out [ 34 ]: col_0 col_1 col_2 row_0 1 a 1.2 row_1 2 b 2.2 row_2 3 c 3.2 \u7531\u4e8e\u8fd9\u79cd\u6620\u5c04\u5173\u7cfb\uff0c\u5728 DataFrame \u4e2d\u53ef\u4ee5\u7528 [col_name] \u4e0e [col_list] \u6765\u53d6\u51fa\u76f8\u5e94\u7684\u5217\u4e0e\u7531\u591a\u4e2a\u5217\u7ec4\u6210\u7684\u8868\uff0c\u7ed3\u679c\u5206\u522b\u4e3a Series \u548c DataFrame \uff1a In [ 35 ]: df [ 'col_0' ] Out [ 35 ]: row_0 1 row_1 2 row_2 3 Name : col_0 , dtype : int64 In [ 36 ]: df [[ 'col_0' , 'col_1' ]] Out [ 36 ]: col_0 col_1 row_0 1 a row_1 2 b row_2 3 c \u4e0e Series \u7c7b\u4f3c\uff0c\u5728\u6570\u636e\u6846\u4e2d\u540c\u6837\u53ef\u4ee5\u53d6\u51fa\u76f8\u5e94\u7684\u5c5e\u6027\uff1a In [ 37 ]: df . values Out [ 37 ]: array ([[ 1 , 'a' , 1.2 ], [ 2 , 'b' , 2.2 ], [ 3 , 'c' , 3.2 ]], dtype = object ) In [ 38 ]: df . index Out [ 38 ]: Index ([ 'row_0' , 'row_1' , 'row_2' ], dtype = 'object' ) In [ 39 ]: df . columns Out [ 39 ]: Index ([ 'col_0' , 'col_1' , 'col_2' ], dtype = 'object' ) In [ 40 ]: df . dtypes # \u8fd4\u56de\u7684\u662f\u503c\u4e3a\u76f8\u5e94\u5217\u6570\u636e\u7c7b\u578b\u7684Series Out [ 40 ]: col_0 int64 col_1 object col_2 float64 dtype : object In [ 41 ]: df . shape Out [ 41 ]: ( 3 , 3 ) \u901a\u8fc7 .T \u53ef\u4ee5\u628a DataFrame \u8fdb\u884c\u8f6c\u7f6e\uff1a In [ 42 ]: df . T Out [ 42 ]: row_0 row_1 row_2 col_0 1 2 3 col_1 a b c col_2 1.2 2.2 3.2","title":"2. DataFrame"},{"location":"pandas/part2/#_3","text":"\u4e3a\u4e86\u8fdb\u884c\u4e3e\u4f8b\u8bf4\u660e\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u548c\u5176\u4f59\u7ae0\u8282\u90fd\u5c06\u4f1a\u4f7f\u7528\u4e00\u4efd learn_pandas.csv \u7684\u865a\u62df\u6570\u636e\u96c6\uff0c\u5b83\u8bb0\u5f55\u4e86\u56db\u6240\u5b66\u6821\u5b66\u751f\u7684\u4f53\u6d4b\u4e2a\u4eba\u4fe1\u606f\u3002 In [ 43 ]: df = pd . read_csv ( 'data/learn_pandas.csv' ) In [ 44 ]: df . columns Out [ 44 ]: Index ([ 'School' , 'Grade' , 'Name' , 'Gender' , 'Height' , 'Weight' , 'Transfer' , 'Test_Number' , 'Test_Date' , 'Time_Record' ], dtype = 'object' ) \u4e0a\u8ff0\u5217\u540d\u4f9d\u6b21\u4ee3\u8868\u5b66\u6821\u3001\u5e74\u7ea7\u3001\u59d3\u540d\u3001\u6027\u522b\u3001\u8eab\u9ad8\u3001\u4f53\u91cd\u3001\u662f\u5426\u4e3a\u8f6c\u7cfb\u751f\u3001\u4f53\u6d4b\u573a\u6b21\u3001\u6d4b\u8bd5\u65f6\u95f4\u30011000 \u7c73\u6210\u7ee9\uff0c\u672c\u7ae0\u53ea\u9700\u4f7f\u7528\u5176\u4e2d\u7684\u524d\u4e03\u5217\u3002 In [ 45 ]: df = df [ df . columns [: 7 ]]","title":"\u4e09\u3001\u5e38\u7528\u57fa\u672c\u51fd\u6570"},{"location":"pandas/part2/#1_1","text":"head, tail \u51fd\u6570\u5206\u522b\u8868\u793a\u8fd4\u56de\u8868\u6216\u8005\u5e8f\u5217\u7684\u524d n \u884c\u548c\u540e n \u884c\uff0c\u5176\u4e2d n \u9ed8\u8ba4\u4e3a 5\uff1a In [ 46 ]: df . head ( 2 ) Out [ 46 ]: School Grade Name Gender Height Weight Transfer 0 Shanghai Jiao Tong University Freshman Gaopeng Yang Female 158.9 46.0 N 1 Peking University Freshman Changqiang You Male 166.5 70.0 N In [ 47 ]: df . tail ( 3 ) Out [ 47 ]: School Grade Name Gender Height Weight Transfer 197 Shanghai Jiao Tong University Senior Chengqiang Chu Female 153.9 45.0 N 198 Shanghai Jiao Tong University Senior Chengmei Shen Male 175.3 71.0 N 199 Tsinghua University Sophomore Chunpeng Lv Male 155.7 51.0 N info, describe \u5206\u522b\u8fd4\u56de\u8868\u7684 \u4fe1\u606f\u6982\u51b5 \u548c\u8868\u4e2d \u6570\u503c\u5217\u5bf9\u5e94\u7684\u4e3b\u8981\u7edf\u8ba1\u91cf \uff1a In [ 48 ]: df . info () < class ' pandas . core . frame . DataFrame '> RangeIndex : 200 entries , 0 to 199 Data columns ( total 7 columns ): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 School 200 non - null object 1 Grade 200 non - null object 2 Name 200 non - null object 3 Gender 200 non - null object 4 Height 183 non - null float64 5 Weight 189 non - null float64 6 Transfer 188 non - null object dtypes : float64 ( 2 ), object ( 5 ) memory usage : 11.1 + KB In [ 49 ]: df . describe () Out [ 49 ]: Height Weight count 183.000000 189.000000 mean 163.218033 55.015873 std 8.608879 12.824294 min 145.400000 34.000000 25 % 157.150000 46.000000 50 % 161.900000 51.000000 75 % 167.500000 65.000000 max 193.900000 89.000000 \u66f4\u5168\u9762\u7684\u6570\u636e\u6c47\u603b info, describe \u53ea\u80fd\u5b9e\u73b0\u8f83\u5c11\u4fe1\u606f\u7684\u5c55\u793a\uff0c\u5982\u679c\u60f3\u8981\u5bf9\u4e00\u4efd\u6570\u636e\u96c6\u8fdb\u884c\u5168\u9762\u4e14\u6709\u6548\u7684\u89c2\u5bdf\uff0c\u7279\u522b\u662f\u5728\u5217\u8f83\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u63a8\u8350\u4f7f\u7528 pandas-profiling \u5305\uff0c\u5b83\u5c06\u5728\u7b2c\u5341\u4e00\u7ae0\u88ab\u518d\u6b21\u63d0\u5230\u3002","title":"1. \u6c47\u603b\u51fd\u6570"},{"location":"pandas/part2/#2_1","text":"\u5728 Series \u548c DataFrame \u4e0a\u5b9a\u4e49\u4e86\u8bb8\u591a\u7edf\u8ba1\u51fd\u6570\uff0c\u6700\u5e38\u89c1\u7684\u662f sum, mean, median, var, std, max, min \u3002\u4f8b\u5982\uff0c\u9009\u51fa\u8eab\u9ad8\u548c\u4f53\u91cd\u5217\u8fdb\u884c\u6f14\u793a\uff1a In [ 50 ]: df_demo = df [[ 'Height' , 'Weight' ]] In [ 51 ]: df_demo . mean () Out [ 51 ]: Height 163.218033 Weight 55.015873 dtype : float64 In [ 52 ]: df_demo . max () Out [ 52 ]: Height 193.9 Weight 89.0 dtype : float64 \u6b64\u5916\uff0c\u9700\u8981\u4ecb\u7ecd\u7684\u662f quantile, count, idxmax \u8fd9\u4e09\u4e2a\u51fd\u6570\uff0c\u5b83\u4eec\u5206\u522b\u8fd4\u56de\u7684\u662f\u5206\u4f4d\u6570\u3001\u975e\u7f3a\u5931\u503c\u4e2a\u6570\u3001\u6700\u5927\u503c\u5bf9\u5e94\u7684\u7d22\u5f15\uff1a In [ 53 ]: df_demo . quantile ( 0.75 ) Out [ 53 ]: Height 167.5 Weight 65.0 Name : 0.75 , dtype : float64 In [ 54 ]: df_demo . count () Out [ 54 ]: Height 183 Weight 189 dtype : int64 In [ 55 ]: df_demo . idxmax () # idxmin\u662f\u5bf9\u5e94\u7684\u51fd\u6570 Out [ 55 ]: Height 193 Weight 2 dtype : int64 \u4e0a\u9762\u8fd9\u4e9b\u6240\u6709\u7684\u51fd\u6570\uff0c\u7531\u4e8e\u64cd\u4f5c\u540e\u8fd4\u56de\u7684\u662f\u6807\u91cf\uff0c\u6240\u4ee5\u53c8\u79f0\u4e3a\u805a\u5408\u51fd\u6570\uff0c\u5b83\u4eec\u6709\u4e00\u4e2a\u516c\u5171\u53c2\u6570 axis \uff0c\u9ed8\u8ba4\u4e3a 0 \u4ee3\u8868\u9010\u5217\u805a\u5408\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a 1 \u5219\u8868\u793a\u9010\u884c\u805a\u5408\uff1a In [ 56 ]: df_demo . mean ( axis = 1 ) . head () # \u5728\u8fd9\u4e2a\u6570\u636e\u96c6\u4e0a\u4f53\u91cd\u548c\u8eab\u9ad8\u7684\u5747\u503c\u5e76\u6ca1\u6709\u610f\u4e49 Out [ 56 ]: 0 102.45 1 118.25 2 138.95 3 41.00 4 124.00 dtype : float64","title":"2. \u7279\u5f81\u7edf\u8ba1\u51fd\u6570"},{"location":"pandas/part2/#3","text":"\u5bf9\u5e8f\u5217\u4f7f\u7528 unique \u548c nunique \u53ef\u4ee5\u5206\u522b\u5f97\u5230\u5176\u552f\u4e00\u503c\u7ec4\u6210\u7684\u5217\u8868\u548c\u552f\u4e00\u503c\u7684\u4e2a\u6570\uff1a In [ 57 ]: df [ 'School' ] . unique () Out [ 57 ]: array ([ 'Shanghai Jiao Tong University' , 'Peking University' , 'Fudan University' , 'Tsinghua University' ], dtype = object ) In [ 58 ]: df [ 'School' ] . nunique () Out [ 58 ]: 4 value_counts \u53ef\u4ee5\u5f97\u5230\u552f\u4e00\u503c\u548c\u5176\u5bf9\u5e94\u51fa\u73b0\u7684\u9891\u6570\uff1a In [ 59 ]: df [ 'School' ] . value_counts () Out [ 59 ]: Tsinghua University 69 Shanghai Jiao Tong University 57 Fudan University 40 Peking University 34 Name : School , dtype : int64 \u5982\u679c\u60f3\u8981\u89c2\u5bdf\u591a\u4e2a\u5217\u7ec4\u5408\u7684\u552f\u4e00\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 drop_duplicates \u3002\u5176\u4e2d\u7684\u5173\u952e\u53c2\u6570\u662f keep \uff0c\u9ed8\u8ba4\u503c first \u8868\u793a\u6bcf\u4e2a\u7ec4\u5408\u4fdd\u7559\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u6240\u5728\u884c\uff0c last \u8868\u793a\u4fdd\u7559\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u6240\u5728\u884c\uff0c False \u8868\u793a\u628a\u6240\u6709\u91cd\u590d\u7ec4\u5408\u6240\u5728\u7684\u884c\u5254\u9664\u3002 In [ 60 ]: df_demo = df [[ 'Gender' , 'Transfer' , 'Name' ]] In [ 61 ]: df_demo . drop_duplicates ([ 'Gender' , 'Transfer' ]) Out [ 61 ]: Gender Transfer Name 0 Female N Gaopeng Yang 1 Male N Changqiang You 12 Female NaN Peng You 21 Male NaN Xiaopeng Shen 36 Male Y Xiaojuan Qin 43 Female Y Gaoli Feng In [ 62 ]: df_demo . drop_duplicates ([ 'Gender' , 'Transfer' ], keep = 'last' ) Out [ 62 ]: Gender Transfer Name 147 Male NaN Juan You 150 Male Y Chengpeng You 169 Female Y Chengquan Qin 194 Female NaN Yanmei Qian 197 Female N Chengqiang Chu 199 Male N Chunpeng Lv In [ 63 ]: df_demo . drop_duplicates ([ 'Name' , 'Gender' ], .... : keep = False ) . head () # \u4fdd\u7559\u53ea\u51fa\u73b0\u8fc7\u4e00\u6b21\u7684\u6027\u522b\u548c\u59d3\u540d\u7ec4\u5408 .... : Out [ 63 ]: Gender Transfer Name 0 Female N Gaopeng Yang 1 Male N Changqiang You 2 Male N Mei Sun 4 Male N Gaojuan You 5 Female N Xiaoli Qian In [ 64 ]: df [ 'School' ] . drop_duplicates () # \u5728Series\u4e0a\u4e5f\u53ef\u4ee5\u4f7f\u7528 Out [ 64 ]: 0 Shanghai Jiao Tong University 1 Peking University 3 Fudan University 5 Tsinghua University Name : School , dtype : object \u6b64\u5916\uff0c duplicated \u548c drop_duplicates \u7684\u529f\u80fd\u7c7b\u4f3c\uff0c\u4f46\u524d\u8005\u8fd4\u56de\u4e86\u662f\u5426\u4e3a\u552f\u4e00\u503c\u7684\u5e03\u5c14\u5217\u8868\uff0c\u5176 keep \u53c2\u6570\u4e0e\u540e\u8005\u4e00\u81f4\u3002\u5176\u8fd4\u56de\u7684\u5e8f\u5217\uff0c\u628a\u91cd\u590d\u5143\u7d20\u8bbe\u4e3a True \uff0c\u5426\u5219\u4e3a False \u3002 drop_duplicates \u7b49\u4ef7\u4e8e\u628a duplicated \u4e3a True \u7684\u5bf9\u5e94\u884c\u5254\u9664\u3002 In [ 65 ]: df_demo . duplicated ([ 'Gender' , 'Transfer' ]) . head () Out [ 65 ]: 0 False 1 False 2 True 3 True 4 True dtype : bool In [ 66 ]: df [ 'School' ] . duplicated () . head () # \u5728Series\u4e0a\u4e5f\u53ef\u4ee5\u4f7f\u7528 Out [ 66 ]: 0 False 1 False 2 True 3 False 4 True Name : School , dtype : bool","title":"3. \u552f\u4e00\u503c\u51fd\u6570"},{"location":"pandas/part2/#4","text":"\u4e00\u822c\u800c\u8a00\uff0c\u66ff\u6362\u64cd\u4f5c\u662f\u9488\u5bf9\u67d0\u4e00\u4e2a\u5217\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\u4e0b\u9762\u7684\u4f8b\u5b50\u90fd\u4ee5 Series \u4e3e\u4f8b\u3002 pandas \u4e2d\u7684\u66ff\u6362\u51fd\u6570\u53ef\u4ee5\u5f52\u7eb3\u4e3a\u4e09\u7c7b\uff1a\u6620\u5c04\u66ff\u6362\u3001\u903b\u8f91\u66ff\u6362\u3001\u6570\u503c\u66ff\u6362\u3002\u5176\u4e2d\u6620\u5c04\u66ff\u6362\u5305\u542b replace \u65b9\u6cd5\u3001\u7b2c\u516b\u7ae0\u4e2d\u7684 str.replace \u65b9\u6cd5\u4ee5\u53ca\u7b2c\u4e5d\u7ae0\u4e2d\u7684 cat.codes \u65b9\u6cd5\uff0c\u6b64\u5904\u4ecb\u7ecd replace \u7684\u7528\u6cd5\u3002 \u5728 replace \u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b57\u5178\u6784\u9020\uff0c\u6216\u8005\u4f20\u5165\u4e24\u4e2a\u5217\u8868\u6765\u8fdb\u884c\u66ff\u6362\uff1a In [ 67 ]: df [ 'Gender' ] . replace ({ 'Female' : 0 , 'Male' : 1 }) . head () Out [ 67 ]: 0 0 1 1 2 1 3 0 4 1 Name : Gender , dtype : int64 In [ 68 ]: df [ 'Gender' ] . replace ([ 'Female' , 'Male' ], [ 0 , 1 ]) . head () Out [ 68 ]: 0 0 1 1 2 1 3 0 4 1 Name : Gender , dtype : int64 \u53e6\u5916\uff0c replace \u8fd8\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u65b9\u5411\u66ff\u6362\uff0c\u6307\u5b9a method \u53c2\u6570\u4e3a ffill \u5219\u4e3a\u7528\u524d\u9762\u4e00\u4e2a\u6700\u8fd1\u7684\u672a\u88ab\u66ff\u6362\u7684\u503c\u8fdb\u884c\u66ff\u6362\uff0c bfill \u5219\u4f7f\u7528\u540e\u9762\u6700\u8fd1\u7684\u672a\u88ab\u66ff\u6362\u7684\u503c\u8fdb\u884c\u66ff\u6362\u3002\u4ece\u4e0b\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u5230\uff0c\u5b83\u4eec\u7684\u7ed3\u679c\u662f\u4e0d\u540c\u7684\uff1a In [ 69 ]: s = pd . Series ([ 'a' , 1 , 'b' , 2 , 1 , 1 , 'a' ]) In [ 70 ]: s . replace ([ 1 , 2 ], method = 'ffill' ) Out [ 70 ]: 0 a 1 a 2 b 3 b 4 b 5 b 6 a dtype : object In [ 71 ]: s . replace ([ 1 , 2 ], method = 'bfill' ) Out [ 71 ]: 0 a 1 b 2 b 3 a 4 a 5 a 6 a dtype : object \u6b63\u5219\u66ff\u6362\u8bf7\u4f7f\u7528 str.replace \u867d\u7136\u5bf9\u4e8e replace \u800c\u8a00\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u66ff\u6362\uff0c\u4f46\u662f\u5f53\u524d\u7248\u672c\u4e0b\u5bf9\u4e8e string \u7c7b\u578b\u7684\u6b63\u5219\u66ff\u6362\u8fd8\u5b58\u5728 bug \uff0c\u56e0\u6b64\u5982\u6709\u6b64\u9700\u6c42\uff0c\u8bf7\u9009\u62e9 str.replace \u8fdb\u884c\u66ff\u6362\u64cd\u4f5c\uff0c\u5177\u4f53\u7684\u65b9\u5f0f\u5c06\u5728\u7b2c\u516b\u7ae0\u4e2d\u8bb2\u89e3\u3002 \u903b\u8f91\u66ff\u6362\u5305\u62ec\u4e86 where \u548c mask \uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u662f\u5b8c\u5168\u5bf9\u79f0\u7684\uff1a where \u51fd\u6570\u5728\u4f20\u5165\u6761\u4ef6\u4e3a False \u7684\u5bf9\u5e94\u884c\u8fdb\u884c\u66ff\u6362\uff0c\u800c mask \u5728\u4f20\u5165\u6761\u4ef6\u4e3a True \u7684\u5bf9\u5e94\u884c\u8fdb\u884c\u66ff\u6362\uff0c\u5f53\u4e0d\u6307\u5b9a\u66ff\u6362\u503c\u65f6\uff0c\u66ff\u6362\u4e3a\u7f3a\u5931\u503c\u3002 In [ 72 ]: s = pd . Series ([ - 1 , 1.2345 , 100 , - 50 ]) In [ 73 ]: s . where ( s < 0 ) Out [ 73 ]: 0 - 1.0 1 NaN 2 NaN 3 - 50.0 dtype : float64 In [ 74 ]: s . where ( s < 0 , 100 ) Out [ 74 ]: 0 - 1.0 1 100.0 2 100.0 3 - 50.0 dtype : float64 In [ 75 ]: s . mask ( s < 0 ) Out [ 75 ]: 0 NaN 1 1.2345 2 100.0000 3 NaN dtype : float64 In [ 76 ]: s . mask ( s < 0 , - 50 ) Out [ 76 ]: 0 - 50.0000 1 1.2345 2 100.0000 3 - 50.0000 dtype : float64 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f20\u5165\u7684\u6761\u4ef6\u53ea\u9700\u662f\u4e0e\u88ab\u8c03\u7528\u7684 Series \u7d22\u5f15\u4e00\u81f4\u7684\u5e03\u5c14\u5e8f\u5217\u5373\u53ef\uff1a In [ 77 ]: s_condition = pd . Series ([ True , False , False , True ], index = s . index ) In [ 78 ]: s . mask ( s_condition , - 50 ) Out [ 78 ]: 0 - 50.0000 1 1.2345 2 100.0000 3 - 50.0000 dtype : float64 \u6570\u503c\u66ff\u6362\u5305\u542b\u4e86 round, abs, clip \u65b9\u6cd5\uff0c\u5b83\u4eec\u5206\u522b\u8868\u793a\u6309\u7167\u7ed9\u5b9a\u7cbe\u5ea6\u56db\u820d\u4e94\u5165\u3001\u53d6\u7edd\u5bf9\u503c\u548c\u622a\u65ad\uff1a In [ 79 ]: s = pd . Series ([ - 1 , 1.2345 , 100 , - 50 ]) In [ 80 ]: s . round ( 2 ) Out [ 80 ]: 0 - 1.00 1 1.23 2 100.00 3 - 50.00 dtype : float64 In [ 81 ]: s . abs () Out [ 81 ]: 0 1.0000 1 1.2345 2 100.0000 3 50.0000 dtype : float64 In [ 82 ]: s . clip ( 0 , 2 ) # \u524d\u4e24\u4e2a\u6570\u5206\u522b\u8868\u793a\u4e0a\u4e0b\u622a\u65ad\u8fb9\u754c Out [ 82 ]: 0 0.0000 1 1.2345 2 2.0000 3 0.0000 dtype : float64 \u7ec3\u4e00\u7ec3 \u5728 clip \u4e2d\uff0c\u8d85\u8fc7\u8fb9\u754c\u7684\u53ea\u80fd\u622a\u65ad\u4e3a\u8fb9\u754c\u503c\uff0c\u5982\u679c\u8981\u628a\u8d85\u51fa\u8fb9\u754c\u7684\u66ff\u6362\u4e3a\u81ea\u5b9a\u4e49\u7684\u503c\uff0c\u5e94\u5f53\u5982\u4f55\u505a\uff1f","title":"4. \u66ff\u6362\u51fd\u6570"},{"location":"pandas/part2/#5","text":"\u6392\u5e8f\u5171\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u5176\u4e00\u4e3a\u503c\u6392\u5e8f\uff0c\u5176\u4e8c\u4e3a\u7d22\u5f15\u6392\u5e8f\uff0c\u5bf9\u5e94\u7684\u51fd\u6570\u662f sort_values \u548c sort_index \u3002 \u4e3a\u4e86\u6f14\u793a\u6392\u5e8f\u51fd\u6570\uff0c\u4e0b\u9762\u5148\u5229\u7528 set_index \u65b9\u6cd5\u628a\u5e74\u7ea7\u548c\u59d3\u540d\u4e24\u5217\u4f5c\u4e3a\u7d22\u5f15\uff0c\u591a\u7ea7\u7d22\u5f15\u7684\u5185\u5bb9\u548c\u7d22\u5f15\u8bbe\u7f6e\u7684\u65b9\u6cd5\u5c06\u5728\u7b2c\u4e09\u7ae0\u8fdb\u884c\u8be6\u7ec6\u8bb2\u89e3\u3002 In [ 83 ]: df_demo = df [[ 'Grade' , 'Name' , 'Height' , .... : 'Weight' ]] . set_index ([ 'Grade' , 'Name' ]) .... : \u5bf9\u8eab\u9ad8\u8fdb\u884c\u6392\u5e8f\uff0c\u9ed8\u8ba4\u53c2\u6570 ascending=True \u4e3a\u5347\u5e8f\uff1a In [ 84 ]: df_demo . sort_values ( 'Height' ) . head () Out [ 84 ]: Height Weight Grade Name Junior Xiaoli Chu 145.4 34.0 Senior Gaomei Lv 147.3 34.0 Sophomore Peng Han 147.8 34.0 Senior Changli Lv 148.7 41.0 Sophomore Changjuan You 150.5 40.0 In [ 85 ]: df_demo . sort_values ( 'Height' , ascending = False ) . head () Out [ 85 ]: Height Weight Grade Name Senior Xiaoqiang Qin 193.9 79.0 Mei Sun 188.9 89.0 Gaoli Zhao 186.5 83.0 Freshman Qiang Han 185.3 87.0 Senior Qiang Zheng 183.9 87.0 \u5728\u6392\u5e8f\u4e2d\uff0c\u7ecf\u5e38\u9047\u5230\u591a\u5217\u6392\u5e8f\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u5728\u4f53\u91cd\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u8eab\u9ad8\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u4e14\u4fdd\u6301\u8eab\u9ad8\u964d\u5e8f\u6392\u5217\uff0c\u4f53\u91cd\u5347\u5e8f\u6392\u5217\uff1a In [ 86 ]: df_demo . sort_values ([ 'Weight' , 'Height' ], ascending = [ True , False ]) . head () Out [ 86 ]: Height Weight Grade Name Sophomore Peng Han 147.8 34.0 Senior Gaomei Lv 147.3 34.0 Junior Xiaoli Chu 145.4 34.0 Sophomore Qiang Zhou 150.5 36.0 Freshman Yanqiang Xu 152.4 38.0 \u7d22\u5f15\u6392\u5e8f\u7684\u7528\u6cd5\u548c\u503c\u6392\u5e8f\u5b8c\u5168\u4e00\u81f4\uff0c\u53ea\u4e0d\u8fc7\u5143\u7d20\u7684\u503c\u5728\u7d22\u5f15\u4e2d\uff0c\u6b64\u65f6\u9700\u8981\u6307\u5b9a\u7d22\u5f15\u5c42\u7684\u540d\u5b57\u6216\u8005\u5c42\u53f7\uff0c\u7528\u53c2\u6570 level \u8868\u793a\u3002\u53e6\u5916\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5b57\u7b26\u4e32\u7684\u6392\u5217\u987a\u5e8f\u7531\u5b57\u6bcd\u987a\u5e8f\u51b3\u5b9a\u3002 In [ 87 ]: df_demo . sort_index ( level = [ 'Grade' , 'Name' ], ascending = [ True , False ]) . head () Out [ 87 ]: Height Weight Grade Name Freshman Yanquan Wang 163.5 55.0 Yanqiang Xu 152.4 38.0 Yanqiang Feng 162.3 51.0 Yanpeng Lv NaN 65.0 Yanli Zhang 165.1 52.0","title":"5. \u6392\u5e8f\u51fd\u6570"},{"location":"pandas/part2/#6-apply","text":"apply \u65b9\u6cd5\u5e38\u7528\u4e8e DataFrame \u7684\u884c\u8fed\u4ee3\u6216\u8005\u5217\u8fed\u4ee3\uff0c\u5b83\u7684 axis \u542b\u4e49\u4e0e\u7b2c 2 \u5c0f\u8282\u4e2d\u7684\u7edf\u8ba1\u805a\u5408\u51fd\u6570\u4e00\u81f4\uff0c apply \u7684\u53c2\u6570\u5f80\u5f80\u662f\u4e00\u4e2a\u4ee5\u5e8f\u5217\u4e3a\u8f93\u5165\u7684\u51fd\u6570\u3002\u4f8b\u5982\u5bf9\u4e8e .mean() \uff0c\u4f7f\u7528 apply \u53ef\u4ee5\u5982\u4e0b\u5730\u5199\u51fa\uff1a In [ 88 ]: df_demo = df [[ 'Height' , 'Weight' ]] In [ 89 ]: def my_mean ( x ): .... : res = x . mean () .... : return res .... : In [ 90 ]: df_demo . apply ( my_mean ) Out [ 90 ]: Height 163.218033 Weight 55.015873 dtype : float64 \u540c\u6837\u7684\uff0c\u53ef\u4ee5\u5229\u7528 lambda \u8868\u8fbe\u5f0f\u4f7f\u5f97\u4e66\u5199\u7b80\u6d01\uff0c\u8fd9\u91cc\u7684 x \u5c31\u6307\u4ee3\u88ab\u8c03\u7528\u7684 df_demo \u8868\u4e2d\u9010\u4e2a\u8f93\u5165\u7684\u5e8f\u5217\uff1a In [ 91 ]: df_demo . apply ( lambda x : x . mean ()) Out [ 91 ]: Height 163.218033 Weight 55.015873 dtype : float64 \u82e5\u6307\u5b9a axis=1 \uff0c\u90a3\u4e48\u6bcf\u6b21\u4f20\u5165\u51fd\u6570\u7684\u5c31\u662f\u884c\u5143\u7d20\u7ec4\u6210\u7684 Series \uff0c\u5176\u7ed3\u679c\u4e0e\u4e4b\u524d\u7684\u9010\u884c\u5747\u503c\u7ed3\u679c\u4e00\u81f4\u3002 In [ 92 ]: df_demo . apply ( lambda x : x . mean (), axis = 1 ) . head () Out [ 92 ]: 0 102.45 1 118.25 2 138.95 3 41.00 4 124.00 dtype : float64 \u8fd9\u91cc\u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a mad \u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5e8f\u5217\u4e2d\u504f\u79bb\u8be5\u5e8f\u5217\u5747\u503c\u7684\u7edd\u5bf9\u503c\u5927\u5c0f\u7684\u5747\u503c\uff0c\u4f8b\u5982\u5e8f\u5217 1,3,7,10 \u4e2d\uff0c\u5747\u503c\u4e3a 5.25\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u504f\u79bb\u7684\u7edd\u5bf9\u503c\u4e3a 4.25,2.25,1.75,4.75\uff0c\u8fd9\u4e2a\u504f\u79bb\u5e8f\u5217\u7684\u5747\u503c\u4e3a 3.25\u3002\u73b0\u5728\u5229\u7528 apply \u8ba1\u7b97\u5347\u9ad8\u548c\u4f53\u91cd\u7684 mad \u6307\u6807\uff1a In [ 93 ]: df_demo . apply ( lambda x :( x - x . mean ()) . abs () . mean ()) Out [ 93 ]: Height 6.707229 Weight 10.391870 dtype : float64 \u8fd9\u4e0e\u4f7f\u7528\u5185\u7f6e\u7684 mad \u51fd\u6570\u8ba1\u7b97\u7ed3\u679c\u4e00\u81f4\uff1a In [ 94 ]: df_demo . mad () Out [ 94 ]: Height 6.707229 Weight 10.391870 dtype : float64 \u8c28\u614e\u4f7f\u7528 apply \u5f97\u76ca\u4e8e\u4f20\u5165\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u5904\u7406\uff0c apply \u7684\u81ea\u7531\u5ea6\u5f88\u9ad8\uff0c\u4f46\u8fd9\u662f\u4ee5\u6027\u80fd\u4e3a\u4ee3\u4ef7\u7684\u3002\u4e00\u822c\u800c\u8a00\uff0c\u4f7f\u7528 pandas \u7684\u5185\u7f6e\u51fd\u6570\u5904\u7406\u548c apply \u6765\u5904\u7406\u540c\u4e00\u4e2a\u4efb\u52a1\uff0c\u5176\u901f\u5ea6\u4f1a\u76f8\u5dee\u8f83\u591a\uff0c\u56e0\u6b64\u53ea\u6709\u5728\u786e\u5b9e\u5b58\u5728\u81ea\u5b9a\u4e49\u9700\u6c42\u7684\u60c5\u5883\u4e0b\u624d\u8003\u8651\u4f7f\u7528 apply \u3002","title":"6. apply \u65b9\u6cd5"},{"location":"pandas/part2/#_4","text":"pandas \u4e2d\u6709 3 \u7c7b\u7a97\u53e3\uff0c\u5206\u522b\u662f\u6ed1\u52a8\u7a97\u53e3 rolling \u3001\u6269\u5f20\u7a97\u53e3 expanding \u4ee5\u53ca\u6307\u6570\u52a0\u6743\u7a97\u53e3 ewm \u3002\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u4ee5\u65e5\u671f\u504f\u7f6e\u4e3a\u7a97\u53e3\u5927\u5c0f\u7684\u6ed1\u52a8\u7a97\u53e3\u5c06\u5728\u7b2c\u5341\u7ae0\u8ba8\u8bba\uff0c\u6307\u6570\u52a0\u6743\u7a97\u53e3\u89c1\u672c\u7ae0\u7ec3\u4e60\u3002","title":"\u56db\u3001\u7a97\u53e3\u5bf9\u8c61"},{"location":"pandas/part2/#1_2","text":"\u8981\u4f7f\u7528\u6ed1\u7a97\u51fd\u6570\uff0c\u5c31\u5fc5\u987b\u5148\u8981\u5bf9\u4e00\u4e2a\u5e8f\u5217\u4f7f\u7528 .rolling \u5f97\u5230\u6ed1\u7a97\u5bf9\u8c61\uff0c\u5176\u6700\u91cd\u8981\u7684\u53c2\u6570\u4e3a\u7a97\u53e3\u5927\u5c0f window \u3002 In [ 95 ]: s = pd . Series ([ 1 , 2 , 3 , 4 , 5 ]) In [ 96 ]: roller = s . rolling ( window = 3 ) In [ 97 ]: roller Out [ 97 ]: Rolling [ window = 3 , center = False , axis = 0 ] \u5728\u5f97\u5230\u4e86\u6ed1\u7a97\u5bf9\u8c61\u540e\uff0c\u80fd\u591f\u4f7f\u7528\u76f8\u5e94\u7684\u805a\u5408\u51fd\u6570\u8fdb\u884c\u8ba1\u7b97\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u7a97\u53e3\u5305\u542b\u5f53\u524d\u884c\u6240\u5728\u7684\u5143\u7d20\uff0c\u4f8b\u5982\u5728\u7b2c\u56db\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u5747\u503c\u8fd0\u7b97\u65f6\uff0c\u5e94\u5f53\u8ba1\u7b97 (2+3+4)/3\uff0c\u800c\u4e0d\u662f (1+2+3)/3\uff1a In [ 98 ]: roller . mean () Out [ 98 ]: 0 NaN 1 NaN 2 2.0 3 3.0 4 4.0 dtype : float64 In [ 99 ]: roller . sum () Out [ 99 ]: 0 NaN 1 NaN 2 6.0 3 9.0 4 12.0 dtype : float64 \u5bf9\u4e8e\u6ed1\u52a8\u76f8\u5173\u7cfb\u6570\u6216\u6ed1\u52a8\u534f\u65b9\u5dee\u7684\u8ba1\u7b97\uff0c\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 100 ]: s2 = pd . Series ([ 1 , 2 , 6 , 16 , 30 ]) In [ 101 ]: roller . cov ( s2 ) Out [ 101 ]: 0 NaN 1 NaN 2 2.5 3 7.0 4 12.0 dtype : float64 In [ 102 ]: roller . corr ( s2 ) Out [ 102 ]: 0 NaN 1 NaN 2 0.944911 3 0.970725 4 0.995402 dtype : float64 \u6b64\u5916\uff0c\u8fd8\u652f\u6301\u4f7f\u7528 apply \u4f20\u5165\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u5176\u4f20\u5165\u503c\u662f\u5bf9\u5e94\u7a97\u53e3\u7684 Series \uff0c\u4f8b\u5982\u4e0a\u8ff0\u7684\u5747\u503c\u51fd\u6570\u53ef\u4ee5\u7b49\u6548\u8868\u793a\uff1a In [ 103 ]: roller . apply ( lambda x : x . mean ()) Out [ 103 ]: 0 NaN 1 NaN 2 2.0 3 3.0 4 4.0 dtype : float64 shift, diff, pct_change \u662f\u4e00\u7ec4\u7c7b\u6ed1\u7a97\u51fd\u6570\uff0c\u5b83\u4eec\u7684\u516c\u5171\u53c2\u6570\u4e3a periods=n \uff0c\u9ed8\u8ba4\u4e3a 1\uff0c\u5206\u522b\u8868\u793a\u53d6\u5411\u524d\u7b2c n \u4e2a\u5143\u7d20\u7684\u503c\u3001\u4e0e\u5411\u524d\u7b2c n \u4e2a\u5143\u7d20\u505a\u5dee\uff08\u4e0e Numpy \u4e2d\u4e0d\u540c\uff0c\u540e\u8005\u8868\u793a n \u9636\u5dee\u5206\uff09\u3001\u4e0e\u5411\u524d\u7b2c n \u4e2a\u5143\u7d20\u76f8\u6bd4\u8ba1\u7b97\u589e\u957f\u7387\u3002\u8fd9\u91cc\u7684 n \u53ef\u4ee5\u4e3a\u8d1f\uff0c\u8868\u793a\u53cd\u65b9\u5411\u7684\u7c7b\u4f3c\u64cd\u4f5c\u3002 In [ 104 ]: s = pd . Series ([ 1 , 3 , 6 , 10 , 15 ]) In [ 105 ]: s . shift ( 2 ) Out [ 105 ]: 0 NaN 1 NaN 2 1.0 3 3.0 4 6.0 dtype : float64 In [ 106 ]: s . diff ( 3 ) Out [ 106 ]: 0 NaN 1 NaN 2 NaN 3 9.0 4 12.0 dtype : float64 In [ 107 ]: s . pct_change () Out [ 107 ]: 0 NaN 1 2.000000 2 1.000000 3 0.666667 4 0.500000 dtype : float64 In [ 108 ]: s . shift ( - 1 ) Out [ 108 ]: 0 3.0 1 6.0 2 10.0 3 15.0 4 NaN dtype : float64 In [ 109 ]: s . diff ( - 2 ) Out [ 109 ]: 0 - 5.0 1 - 7.0 2 - 9.0 3 NaN 4 NaN dtype : float64 \u5c06\u5176\u89c6\u4f5c\u7c7b\u6ed1\u7a97\u51fd\u6570\u7684\u539f\u56e0\u662f\uff0c\u5b83\u4eec\u7684\u529f\u80fd\u53ef\u4ee5\u7528\u7a97\u53e3\u5927\u5c0f\u4e3a n+1 \u7684 rolling \u65b9\u6cd5\u7b49\u4ef7\u4ee3\u66ff\uff1a In [ 110 ]: s . rolling ( 3 ) . apply ( lambda x : list ( x )[ 0 ]) # s.shift(2) Out [ 110 ]: 0 NaN 1 NaN 2 1.0 3 3.0 4 6.0 dtype : float64 In [ 111 ]: s . rolling ( 4 ) . apply ( lambda x : list ( x )[ - 1 ] - list ( x )[ 0 ]) # s.diff(3) Out [ 111 ]: 0 NaN 1 NaN 2 NaN 3 9.0 4 12.0 dtype : float64 In [ 112 ]: def my_pct ( x ): ..... : L = list ( x ) ..... : return L [ - 1 ] / L [ 0 ] - 1 ..... : In [ 113 ]: s . rolling ( 2 ) . apply ( my_pct ) # s.pct_change() Out [ 113 ]: 0 NaN 1 2.000000 2 1.000000 3 0.666667 4 0.500000 dtype : float64 \u7ec3\u4e00\u7ec3 rolling \u5bf9\u8c61\u7684\u9ed8\u8ba4\u7a97\u53e3\u65b9\u5411\u90fd\u662f\u5411\u524d\u7684\uff0c\u67d0\u4e9b\u60c5\u51b5\u4e0b\u7528\u6237\u9700\u8981\u5411\u540e\u7684\u7a97\u53e3\uff0c\u4f8b\u5982\u5bf9 1,2,3 \u8bbe\u5b9a\u5411\u540e\u7a97\u53e3\u4e3a 2 \u7684 sum \u64cd\u4f5c\uff0c\u7ed3\u679c\u4e3a 3,5,NaN\uff0c\u6b64\u65f6\u5e94\u8be5\u5982\u4f55\u5b9e\u73b0\u5411\u540e\u7684\u6ed1\u7a97\u64cd\u4f5c\uff1f","title":"1. \u6ed1\u7a97\u5bf9\u8c61"},{"location":"pandas/part2/#2_2","text":"\u6269\u5f20\u7a97\u53e3\u53c8\u79f0\u7d2f\u8ba1\u7a97\u53e3\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u52a8\u6001\u957f\u5ea6\u7684\u7a97\u53e3\uff0c\u5176\u7a97\u53e3\u7684\u5927\u5c0f\u5c31\u662f\u4ece\u5e8f\u5217\u5f00\u59cb\u5904\u5230\u5177\u4f53\u64cd\u4f5c\u7684\u5bf9\u5e94\u4f4d\u7f6e\uff0c\u5176\u4f7f\u7528\u7684\u805a\u5408\u51fd\u6570\u4f1a\u4f5c\u7528\u4e8e\u8fd9\u4e9b\u9010\u6b65\u6269\u5f20\u7684\u7a97\u53e3\u4e0a\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u8bbe\u5e8f\u5217\u4e3a a1, a2, a3, a4\uff0c\u5219\u5176\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u7a97\u53e3\u5373 [a1]\u3001[a1, a2]\u3001[a1, a2, a3]\u3001[a1, a2, a3, a4]\u3002 In [ 114 ]: s = pd . Series ([ 1 , 3 , 6 , 10 ]) In [ 115 ]: s . expanding () . mean () Out [ 115 ]: 0 1.000000 1 2.000000 2 3.333333 3 5.000000 dtype : float64 \u7ec3\u4e00\u7ec3 cummax, cumsum, cumprod \u51fd\u6570\u662f\u5178\u578b\u7684\u7c7b\u6269\u5f20\u7a97\u53e3\u51fd\u6570\uff0c\u8bf7\u4f7f\u7528 expanding \u5bf9\u8c61\u4f9d\u6b21\u5b9e\u73b0\u5b83\u4eec\u3002","title":"2. \u6269\u5f20\u7a97\u53e3"},{"location":"pandas/part2/#_5","text":"","title":"\u4e94\u3001\u7ec3\u4e60"},{"location":"pandas/part2/#ex1","text":"\u73b0\u6709\u4e00\u4efd\u53e3\u888b\u5996\u602a\u7684\u6570\u636e\u96c6\uff0c\u4e0b\u9762\u8fdb\u884c\u4e00\u4e9b\u80cc\u666f\u8bf4\u660e\uff1a # \u4ee3\u8868\u5168\u56fd\u56fe\u9274\u7f16\u53f7\uff0c\u4e0d\u540c\u884c\u5b58\u5728\u76f8\u540c\u6570\u5b57\u5219\u8868\u793a\u4e3a\u8be5\u5996\u602a\u7684\u4e0d\u540c\u72b6\u6001 \u5996\u602a\u5177\u6709\u5355\u5c5e\u6027\u548c\u53cc\u5c5e\u6027\u4e24\u79cd\uff0c\u5bf9\u4e8e\u5355\u5c5e\u6027\u7684\u5996\u602a\uff0c Type 2 \u4e3a\u7f3a\u5931\u503c Total, HP, Attack, Defense, Sp. Atk, Sp. Def, Speed \u5206\u522b\u4ee3\u8868\u79cd\u65cf\u503c\u3001\u4f53\u529b\u3001\u7269\u653b\u3001\u9632\u5fa1\u3001\u7279\u653b\u3001\u7279\u9632\u3001\u901f\u5ea6\uff0c\u5176\u4e2d\u79cd\u65cf\u503c\u4e3a\u540e 6 \u9879\u4e4b\u548c In [ 116 ]: df = pd . read_csv ( 'data/pokemon.csv' ) In [ 117 ]: df . head ( 3 ) Out [ 117 ]: # Name Type 1 Type 2 Total HP Attack Defense Sp. Atk Sp. Def Speed 0 1 Bulbasaur Grass Poison 318 45 49 49 65 65 45 1 2 Ivysaur Grass Poison 405 60 62 63 80 80 60 2 3 Venusaur Grass Poison 525 80 82 83 100 100 80 \u5bf9 HP, Attack, Defense, Sp. Atk, Sp. Def, Speed \u8fdb\u884c\u52a0\u603b\uff0c\u9a8c\u8bc1\u662f\u5426\u4e3a Total \u503c\u3002 \u5bf9\u4e8e # \u91cd\u590d\u7684\u5996\u602a\u53ea\u4fdd\u7559\u7b2c\u4e00\u6761\u8bb0\u5f55\uff0c\u89e3\u51b3\u4ee5\u4e0b\u95ee\u9898\uff1a a. \u6c42\u7b2c\u4e00\u5c5e\u6027\u7684\u79cd\u7c7b\u6570\u91cf\u548c\u524d\u4e09\u591a\u6570\u91cf\u5bf9\u5e94\u7684\u79cd\u7c7b b. \u6c42\u7b2c\u4e00\u5c5e\u6027\u548c\u7b2c\u4e8c\u5c5e\u6027\u7684\u7ec4\u5408\u79cd\u7c7b c. \u6c42\u5c1a\u672a\u51fa\u73b0\u8fc7\u7684\u5c5e\u6027\u7ec4\u5408 \u6309\u7167\u4e0b\u8ff0\u8981\u6c42\uff0c\u6784\u9020 Series \uff1a a. \u53d6\u51fa\u7269\u653b\uff0c\u8d85\u8fc7 120 \u7684\u66ff\u6362\u4e3a high \uff0c\u4e0d\u8db3 50 \u7684\u66ff\u6362\u4e3a low \uff0c\u5426\u5219\u8bbe\u4e3a mid b. \u53d6\u51fa\u7b2c\u4e00\u5c5e\u6027\uff0c\u5206\u522b\u7528 replace \u548c apply \u66ff\u6362\u6240\u6709\u5b57\u6bcd\u4e3a\u5927\u5199 c. \u6c42\u6bcf\u4e2a\u5996\u602a\u516d\u9879\u80fd\u529b\u7684\u79bb\u5dee\uff0c\u5373\u6240\u6709\u80fd\u529b\u4e2d\u504f\u79bb\u4e2d\u4f4d\u6570\u6700\u5927\u7684\u503c\uff0c\u6dfb\u52a0\u5230 df \u5e76\u4ece\u5927\u5230\u5c0f\u6392\u5e8f","title":"Ex1\uff1a\u53e3\u888b\u5996\u602a\u6570\u636e\u96c6"},{"location":"pandas/part2/#ex2","text":"\u4f5c\u4e3a\u6269\u5f20\u7a97\u53e3\u7684 ewm \u7a97\u53e3 \u5728\u6269\u5f20\u7a97\u53e3\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5404\u7c7b\u51fd\u6570\u8fdb\u884c\u5386\u53f2\u7684\u7d2f\u8ba1\u6307\u6807\u7edf\u8ba1\uff0c\u4f46\u8fd9\u4e9b\u5185\u7f6e\u7684\u7edf\u8ba1\u51fd\u6570\u5f80\u5f80\u628a\u7a97\u53e3\u4e2d\u7684\u6240\u6709\u5143\u7d20\u8d4b\u4e88\u4e86\u540c\u6837\u7684\u6743\u91cd\u3002\u4e8b\u5b9e\u4e0a\uff0c\u53ef\u4ee5\u7ed9\u51fa\u4e0d\u540c\u7684\u6743\u91cd\u6765\u8d4b\u7ed9\u7a97\u53e3\u4e2d\u7684\u5143\u7d20\uff0c\u6307\u6570\u52a0\u6743\u7a97\u53e3\u5c31\u662f\u8fd9\u6837\u4e00\u79cd\u7279\u6b8a\u7684\u6269\u5f20\u7a97\u53e3\u3002 \u5176\u4e2d\uff0c\u6700\u91cd\u8981\u7684\u53c2\u6570\u662f alpha \uff0c\u5b83\u51b3\u5b9a\u4e86\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7684\u7a97\u53e3\u6743\u91cd\u4e3a \uff0c\u5176\u4e2d \u8868\u793a\u5f53\u524d\u5143\u7d20\uff0c \u8868\u793a\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u4ece\u6743\u91cd\u516c\u5f0f\u53ef\u4ee5\u770b\u51fa\uff0c\u79bb\u5f00\u5f53\u524d\u503c\u8d8a\u8fdc\u5219\u6743\u91cd\u8d8a\u5c0f\uff0c\u82e5\u8bb0\u539f\u5e8f\u5217\u4e3a x \uff0c\u66f4\u65b0\u540e\u7684\u5f53\u524d\u5143\u7d20\u4e3a \uff0c\u6b64\u65f6\u901a\u8fc7\u52a0\u6743\u516c\u5f0f\u5f52\u4e00\u5316\u540e\u53ef\u77e5\uff1a \u5bf9\u4e8e Series \u800c\u8a00\uff0c\u53ef\u4ee5\u7528 ewm \u5bf9\u8c61\u5982\u4e0b\u8ba1\u7b97\u6307\u6570\u5e73\u6ed1\u540e\u7684\u5e8f\u5217\uff1a In [ 118 ]: np . random . seed ( 0 ) In [ 119 ]: s = pd . Series ( np . random . randint ( - 1 , 2 , 30 ) . cumsum ()) In [ 120 ]: s . head () Out [ 120 ]: 0 - 1 1 - 1 2 - 2 3 - 2 4 - 2 dtype : int32 In [ 121 ]: s . ewm ( alpha = 0.2 ) . mean () . head () Out [ 121 ]: 0 - 1.000000 1 - 1.000000 2 - 1.409836 3 - 1.609756 4 - 1.725845 dtype : float64 \u8bf7\u7528 expanding \u7a97\u53e3\u5b9e\u73b0\u3002 2\u3002 \u4f5c\u4e3a\u6ed1\u52a8\u7a97\u53e3\u7684 ewm \u7a97\u53e3 \u4ece\u7b2c 1 \u95ee\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c ewm \u4f5c\u4e3a\u4e00\u79cd\u6269\u5f20\u7a97\u53e3\u7684\u7279\u4f8b\uff0c\u53ea\u80fd\u4ece\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u52a0\u6743\u3002\u73b0\u5728\u5e0c\u671b\u7ed9\u5b9a\u4e00\u4e2a\u9650\u5236\u7a97\u53e3 n \uff0c\u53ea\u5bf9\u5305\u542b\u81ea\u8eab\u7684\u6700\u8fd1\u7684 n \u4e2a\u5143\u7d20\u4f5c\u4e3a\u7a97\u53e3\u8fdb\u884c\u6ed1\u52a8\u52a0\u6743\u5e73\u6ed1\u3002\u8bf7\u6839\u636e\u6ed1\u7a97\u51fd\u6570\uff0c\u7ed9\u51fa\u65b0\u7684 \u4e0e \u7684\u66f4\u65b0\u516c\u5f0f\uff0c\u5e76\u901a\u8fc7 rolling \u7a97\u53e3\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\u3002","title":"Ex2\uff1a\u6307\u6570\u52a0\u6743\u7a97\u53e3"},{"location":"pandas/part3/","text":"In [ 1 ]: import numpy as np In [ 2 ]: import pandas as pd \u4e00\u3001\u7d22\u5f15\u5668 1. \u8868\u7684\u5217\u7d22\u5f15 \u5217\u7d22\u5f15\u662f\u6700\u5e38\u89c1\u7684\u7d22\u5f15\u5f62\u5f0f\uff0c\u4e00\u822c\u901a\u8fc7 [] \u6765\u5b9e\u73b0\u3002\u901a\u8fc7 [\u5217\u540d] \u53ef\u4ee5\u4ece DataFrame \u4e2d\u53d6\u51fa\u76f8\u5e94\u7684\u5217\uff0c\u8fd4\u56de\u503c\u4e3a Series \uff0c\u4f8b\u5982\u4ece\u8868\u4e2d\u53d6\u51fa\u59d3\u540d\u4e00\u5217\uff1a In [ 3 ]: df = pd . read_csv ( 'data/learn_pandas.csv' , ... : usecols = [ 'School' , 'Grade' , 'Name' , 'Gender' , ... : 'Weight' , 'Transfer' ]) ... : In [ 4 ]: df [ 'Name' ] . head () Out [ 4 ]: 0 Gaopeng Yang 1 Changqiang You 2 Mei Sun 3 Xiaojuan Sun 4 Gaojuan You Name : Name , dtype : object \u5982\u679c\u8981\u53d6\u51fa\u591a\u4e2a\u5217\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7 [\u5217\u540d\u7ec4\u6210\u7684\u5217\u8868] \uff0c\u5176\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a DataFrame \uff0c\u4f8b\u5982\u4ece\u8868\u4e2d\u53d6\u51fa\u6027\u522b\u548c\u59d3\u540d\u4e24\u5217\uff1a In [ 5 ]: df [[ 'Gender' , 'Name' ]] . head () Out [ 5 ]: Gender Name 0 Female Gaopeng Yang 1 Male Changqiang You 2 Male Mei Sun 3 Female Xiaojuan Sun 4 Male Gaojuan You \u6b64\u5916\uff0c\u82e5\u8981\u53d6\u51fa\u5355\u5217\uff0c\u4e14\u5217\u540d\u4e2d\u4e0d\u5305\u542b\u7a7a\u683c\uff0c\u5219\u53ef\u4ee5\u7528 .\u5217\u540d \u53d6\u51fa\uff0c\u8fd9\u548c [\u5217\u540d] \u662f\u7b49\u4ef7\u7684\uff1a In [ 6 ]: df . Name . head () Out [ 6 ]: 0 Gaopeng Yang 1 Changqiang You 2 Mei Sun 3 Xiaojuan Sun 4 Gaojuan You Name : Name , dtype : object 2. \u5e8f\u5217\u7684\u884c\u7d22\u5f15 \u3010a\u3011\u4ee5\u5b57\u7b26\u4e32\u4e3a\u7d22\u5f15\u7684 Series \u5982\u679c\u53d6\u51fa\u5355\u4e2a\u7d22\u5f15\u7684\u5bf9\u5e94\u5143\u7d20\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 [item] \uff0c\u82e5 Series \u53ea\u6709\u5355\u4e2a\u503c\u5bf9\u5e94\uff0c\u5219\u8fd4\u56de\u8fd9\u4e2a\u6807\u91cf\u503c\uff0c\u5982\u679c\u6709\u591a\u4e2a\u503c\u5bf9\u5e94\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a Series \uff1a In [ 7 ]: s = pd . Series ([ 1 , 2 , 3 , 4 , 5 , 6 ], ... : index = [ 'a' , 'b' , 'a' , 'a' , 'a' , 'c' ]) ... : In [ 8 ]: s [ 'a' ] Out [ 8 ]: a 1 a 3 a 4 a 5 dtype : int64 In [ 9 ]: s [ 'b' ] Out [ 9 ]: 2 \u5982\u679c\u53d6\u51fa\u591a\u4e2a\u7d22\u5f15\u7684\u5bf9\u5e94\u5143\u7d20\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 [items\u7684\u5217\u8868] \uff1a In [ 10 ]: s [[ 'c' , 'b' ]] Out [ 10 ]: c 6 b 2 dtype : int64 \u5982\u679c\u60f3\u8981\u53d6\u51fa\u67d0\u4e24\u4e2a\u7d22\u5f15\u4e4b\u95f4\u7684\u5143\u7d20\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a\u7d22\u5f15\u662f\u5728\u6574\u4e2a\u7d22\u5f15\u4e2d\u552f\u4e00\u51fa\u73b0\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u5207\u7247\uff0c\u540c\u65f6\u9700\u8981\u6ce8\u610f\u8fd9\u91cc\u7684\u5207\u7247\u4f1a\u5305\u542b\u4e24\u4e2a\u7aef\u70b9\uff1a In [ 11 ]: s [ 'c' : 'b' : - 2 ] Out [ 11 ]: c 6 a 4 b 2 dtype : int64 \u5982\u679c\u524d\u540e\u7aef\u70b9\u7684\u503c\u5b58\u5728\u91cd\u590d\uff0c\u5373\u975e\u552f\u4e00\u503c\uff0c\u90a3\u4e48\u9700\u8981\u7ecf\u8fc7\u6392\u5e8f\u624d\u80fd\u4f7f\u7528\u5207\u7247\uff1a In [ 12 ]: try : .... : s [ 'a' : 'b' ] .... : except Exception as e : .... : Err_Msg = e .... : In [ 13 ]: Err_Msg Out [ 13 ]: KeyError ( \"Cannot get left slice bound for non-unique label: 'a'\" ) In [ 14 ]: s . sort_index ()[ 'a' : 'b' ] Out [ 14 ]: a 1 a 3 a 4 a 5 b 2 dtype : int64 \u3010b\u3011\u4ee5\u6574\u6570\u4e3a\u7d22\u5f15\u7684 Series \u5728\u4f7f\u7528\u6570\u636e\u7684\u8bfb\u5165\u51fd\u6570\u65f6\uff0c\u5982\u679c\u4e0d\u7279\u522b\u6307\u5b9a\u6240\u5bf9\u5e94\u7684\u5217\u4f5c\u4e3a\u7d22\u5f15\uff0c\u90a3\u4e48\u4f1a\u751f\u6210\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u7d22\u5f15\u4f5c\u4e3a\u9ed8\u8ba4\u7d22\u5f15\u3002\u5f53\u7136\uff0c\u4efb\u610f\u4e00\u7ec4\u7b26\u5408\u957f\u5ea6\u8981\u6c42\u7684\u6574\u6570\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u7d22\u5f15\u3002 \u548c\u5b57\u7b26\u4e32\u4e00\u6837\uff0c\u5982\u679c\u4f7f\u7528 [int] \u6216 [int_list] \uff0c\u5219\u53ef\u4ee5\u53d6\u51fa\u5bf9\u5e94\u7d22\u5f15 \u5143\u7d20 \u7684\u503c\uff1a In [ 15 ]: s = pd . Series ([ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' ], .... : index = [ 1 , 3 , 1 , 2 , 5 , 4 ]) .... : In [ 16 ]: s [ 1 ] Out [ 16 ]: 1 a 1 c dtype : object In [ 17 ]: s [[ 2 , 3 ]] Out [ 17 ]: 2 d 3 b dtype : object \u5982\u679c\u4f7f\u7528\u6574\u6570\u5207\u7247\uff0c\u5219\u4f1a\u53d6\u51fa\u5bf9\u5e94\u7d22\u5f15 \u4f4d\u7f6e \u7684\u503c\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684\u6574\u6570\u5207\u7247\u540c Python \u4e2d\u7684\u5207\u7247\u4e00\u6837\u4e0d\u5305\u542b\u53f3\u7aef\u70b9\uff1a In [ 18 ]: s [ 1 : - 1 : 2 ] Out [ 18 ]: 3 b 2 d dtype : object \u5173\u4e8e\u7d22\u5f15\u7c7b\u578b\u7684\u8bf4\u660e \u5982\u679c\u4e0d\u60f3\u9677\u5165\u9ebb\u70e6\uff0c\u90a3\u4e48\u8bf7\u4e0d\u8981\u628a\u7eaf\u6d6e\u70b9\u4ee5\u53ca\u4efb\u4f55\u6df7\u5408\u7c7b\u578b\uff08\u5b57\u7b26\u4e32\u3001\u6574\u6570\u3001\u6d6e\u70b9\u7c7b\u578b\u7b49\u7684\u6df7\u5408\uff09\u4f5c\u4e3a\u7d22\u5f15\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5728\u5177\u4f53\u7684\u64cd\u4f5c\u65f6\u62a5\u9519\u6216\u8005\u8fd4\u56de\u975e\u9884\u671f\u7684\u7ed3\u679c\uff0c\u5e76\u4e14\u5728\u5b9e\u9645\u7684\u6570\u636e\u5206\u6790\u4e2d\u4e5f\u4e0d\u5b58\u5728\u8fd9\u6837\u505a\u7684\u52a8\u673a\u3002 3. loc \u7d22\u5f15\u5668 \u524d\u9762\u8bb2\u5230\u4e86\u5bf9 DataFrame \u7684\u5217\u8fdb\u884c\u9009\u53d6\uff0c\u4e0b\u9762\u8981\u8ba8\u8bba\u5176\u884c\u7684\u9009\u53d6\u3002\u5bf9\u4e8e\u8868\u800c\u8a00\uff0c\u6709\u4e24\u79cd\u7d22\u5f15\u5668\uff0c\u4e00\u79cd\u662f\u57fa\u4e8e \u5143\u7d20 \u7684 loc \u7d22\u5f15\u5668\uff0c\u53e6\u4e00\u79cd\u662f\u57fa\u4e8e \u4f4d\u7f6e \u7684 iloc \u7d22\u5f15\u5668\u3002 loc \u7d22\u5f15\u5668\u7684\u4e00\u822c\u5f62\u5f0f\u662f loc[*, *] \uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a * \u4ee3\u8868\u884c\u7684\u9009\u62e9\uff0c\u7b2c\u4e8c\u4e2a * \u4ee3\u8868\u5217\u7684\u9009\u62e9\uff0c\u5982\u679c\u7701\u7565\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5199\u4f5c loc[*] \uff0c\u8fd9\u4e2a * \u662f\u6307\u884c\u7684\u7b5b\u9009\u3002\u5176\u4e2d\uff0c * \u7684\u4f4d\u7f6e\u4e00\u5171\u6709\u4e94\u7c7b\u5408\u6cd5\u5bf9\u8c61\uff0c\u5206\u522b\u662f\uff1a\u5355\u4e2a\u5143\u7d20\u3001\u5143\u7d20\u5217\u8868\u3001\u5143\u7d20\u5207\u7247\u3001\u5e03\u5c14\u5217\u8868\u4ee5\u53ca\u51fd\u6570\uff0c\u4e0b\u9762\u5c06\u4f9d\u6b21\u8bf4\u660e\u3002 \u4e3a\u4e86\u6f14\u793a\u76f8\u5e94\u64cd\u4f5c\uff0c\u5148\u5229\u7528 set_index \u65b9\u6cd5\u628a Name \u5217\u8bbe\u4e3a\u7d22\u5f15\uff0c\u5173\u4e8e\u8be5\u51fd\u6570\u7684\u5176\u4ed6\u7528\u6cd5\u5c06\u5728\u591a\u7ea7\u7d22\u5f15\u4e00\u7ae0\u4ecb\u7ecd\u3002 In [ 19 ]: df_demo = df . set_index ( 'Name' ) In [ 20 ]: df_demo . head () Out [ 20 ]: School Grade Gender Weight Transfer Name Gaopeng Yang Shanghai Jiao Tong University Freshman Female 46.0 N Changqiang You Peking University Freshman Male 70.0 N Mei Sun Shanghai Jiao Tong University Senior Male 89.0 N Xiaojuan Sun Fudan University Sophomore Female 41.0 N Gaojuan You Fudan University Sophomore Male 74.0 N \u3010a\u3011 * \u4e3a\u5355\u4e2a\u5143\u7d20 \u6b64\u65f6\uff0c\u76f4\u63a5\u53d6\u51fa\u76f8\u5e94\u7684\u884c\u6216\u5217\uff0c\u5982\u679c\u8be5\u5143\u7d20\u5728\u7d22\u5f15\u4e2d\u91cd\u590d\u5219\u7ed3\u679c\u4e3a DataFrame \uff0c\u5426\u5219\u4e3a Series \uff1a In [ 21 ]: df_demo . loc [ 'Qiang Sun' ] # \u591a\u4e2a\u4eba\u53eb\u6b64\u540d\u5b57 Out [ 21 ]: School Grade Gender Weight Transfer Name Qiang Sun Tsinghua University Junior Female 53.0 N Qiang Sun Tsinghua University Sophomore Female 40.0 N Qiang Sun Shanghai Jiao Tong University Junior Female NaN N In [ 22 ]: df_demo . loc [ 'Quan Zhao' ] # \u540d\u5b57\u552f\u4e00 Out [ 22 ]: School Shanghai Jiao Tong University Grade Junior Gender Female Weight 53.0 Transfer N Name : Quan Zhao , dtype : object \u4e5f\u53ef\u4ee5\u540c\u65f6\u9009\u62e9\u884c\u548c\u5217\uff1a In [ 23 ]: df_demo . loc [ 'Qiang Sun' , 'School' ] # \u8fd4\u56deSeries Out [ 23 ]: Name Qiang Sun Tsinghua University Qiang Sun Tsinghua University Qiang Sun Shanghai Jiao Tong University Name : School , dtype : object In [ 24 ]: df_demo . loc [ 'Quan Zhao' , 'School' ] # \u8fd4\u56de\u5355\u4e2a\u5143\u7d20 Out [ 24 ]: 'Shanghai Jiao Tong University' \u3010b\u3011 * \u4e3a\u5143\u7d20\u5217\u8868 \u6b64\u65f6\uff0c\u53d6\u51fa\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u503c\u5bf9\u5e94\u7684\u884c\u6216\u5217\uff1a In [ 25 ]: df_demo . loc [[ 'Qiang Sun' , 'Quan Zhao' ], [ 'School' , 'Gender' ]] Out [ 25 ]: School Gender Name Qiang Sun Tsinghua University Female Qiang Sun Tsinghua University Female Qiang Sun Shanghai Jiao Tong University Female Quan Zhao Shanghai Jiao Tong University Female \u3010c\u3011 * \u4e3a\u5207\u7247 \u4e4b\u524d\u7684 Series \u4f7f\u7528\u5b57\u7b26\u4e32\u7d22\u5f15\u65f6\u63d0\u5230\uff0c\u5982\u679c\u662f\u552f\u4e00\u503c\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u5b57\u7b26\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4f7f\u7528\u5207\u7247\uff0c\u5e76\u4e14\u5305\u542b\u4e24\u4e2a\u7aef\u70b9\uff0c\u5982\u679c\u4e0d\u552f\u4e00\u5219\u62a5\u9519\uff1a In [ 26 ]: df_demo . loc [ 'Gaojuan You' : 'Gaoqiang Qian' , 'School' : 'Gender' ] Out [ 26 ]: School Grade Gender Name Gaojuan You Fudan University Sophomore Male Xiaoli Qian Tsinghua University Freshman Female Qiang Chu Shanghai Jiao Tong University Freshman Female Gaoqiang Qian Tsinghua University Junior Female \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c DataFrame \u4f7f\u7528\u6574\u6570\u7d22\u5f15\uff0c\u5176\u4f7f\u7528\u6574\u6570\u5207\u7247\u7684\u65f6\u5019\u548c\u4e0a\u9762\u5b57\u7b26\u4e32\u7d22\u5f15\u7684\u8981\u6c42\u4e00\u81f4\uff0c\u90fd\u662f \u5143\u7d20 \u5207\u7247\uff0c\u5305\u542b\u7aef\u70b9\u4e14\u8d77\u70b9\u3001\u7ec8\u70b9\u4e0d\u5141\u8bb8\u6709\u91cd\u590d\u503c\u3002 In [ 27 ]: df_loc_slice_demo = df_demo . copy () In [ 28 ]: df_loc_slice_demo . index = range ( df_demo . shape [ 0 ], 0 , - 1 ) In [ 29 ]: df_loc_slice_demo . loc [ 5 : 3 ] Out [ 29 ]: School Grade Gender Weight Transfer 5 Fudan University Junior Female 46.0 N 4 Tsinghua University Senior Female 50.0 N 3 Shanghai Jiao Tong University Senior Female 45.0 N In [ 30 ]: df_loc_slice_demo . loc [ 3 : 5 ] # \u6ca1\u6709\u8fd4\u56de\uff0c\u8bf4\u660e\u4e0d\u662f\u6574\u6570\u4f4d\u7f6e\u5207\u7247 Out [ 30 ]: Empty DataFrame Columns : [ School , Grade , Gender , Weight , Transfer ] Index : [] \u3010d\u3011 * \u4e3a\u5e03\u5c14\u5217\u8868 \u5728\u5b9e\u9645\u7684\u6570\u636e\u5904\u7406\u4e2d\uff0c\u6839\u636e\u6761\u4ef6\u6765\u7b5b\u9009\u884c\u662f\u6781\u5176\u5e38\u89c1\u7684\uff0c\u6b64\u5904\u4f20\u5165 loc \u7684\u5e03\u5c14\u5217\u8868\u4e0e DataFrame \u957f\u5ea6\u76f8\u540c\uff0c\u4e14\u5217\u8868\u4e3a True \u7684\u4f4d\u7f6e\u6240\u5bf9\u5e94\u7684\u884c\u4f1a\u88ab\u9009\u4e2d\uff0c False \u5219\u4f1a\u88ab\u5254\u9664\u3002 \u4f8b\u5982\uff0c\u9009\u51fa\u4f53\u91cd\u8d85\u8fc7 70kg \u7684\u5b66\u751f\uff1a In [ 31 ]: df_demo . loc [ df_demo . Weight > 70 ] . head () Out [ 31 ]: School Grade Gender Weight Transfer Name Mei Sun Shanghai Jiao Tong University Senior Male 89.0 N Gaojuan You Fudan University Sophomore Male 74.0 N Xiaopeng Zhou Shanghai Jiao Tong University Freshman Male 74.0 N Xiaofeng Sun Tsinghua University Senior Male 71.0 N Qiang Zheng Shanghai Jiao Tong University Senior Male 87.0 N \u524d\u9762\u6240\u63d0\u5230\u7684\u4f20\u5165\u5143\u7d20\u5217\u8868\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 isin \u65b9\u6cd5\u8fd4\u56de\u7684\u5e03\u5c14\u5217\u8868\u7b49\u4ef7\u5199\u51fa\uff0c\u4f8b\u5982\u9009\u51fa\u6240\u6709\u5927\u4e00\u548c\u5927\u56db\u7684\u540c\u5b66\u4fe1\u606f\uff1a In [ 32 ]: df_demo . loc [ df_demo . Grade . isin ([ 'Freshman' , 'Senior' ])] . head () Out [ 32 ]: School Grade Gender Weight Transfer Name Gaopeng Yang Shanghai Jiao Tong University Freshman Female 46.0 N Changqiang You Peking University Freshman Male 70.0 N Mei Sun Shanghai Jiao Tong University Senior Male 89.0 N Xiaoli Qian Tsinghua University Freshman Female 51.0 N Qiang Chu Shanghai Jiao Tong University Freshman Female 52.0 N \u5bf9\u4e8e\u590d\u5408\u6761\u4ef6\u800c\u8a00\uff0c\u53ef\u4ee5\u7528 |\uff08\u6216\uff09, &\uff08\u4e14\uff09, ~\uff08\u53d6\u53cd\uff09 \u7684\u7ec4\u5408\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982\u9009\u51fa\u590d\u65e6\u5927\u5b66\u4e2d\u4f53\u91cd\u8d85\u8fc7 70kg \u7684\u5927\u56db\u5b66\u751f\uff0c\u6216\u8005\u5317\u5927\u7537\u751f\u4e2d\u4f53\u91cd\u8d85\u8fc7 80kg \u7684\u975e\u5927\u56db\u7684\u5b66\u751f\uff1a In [ 33 ]: condition_1_1 = df_demo . School == 'Fudan University' In [ 34 ]: condition_1_2 = df_demo . Grade == 'Senior' In [ 35 ]: condition_1_3 = df_demo . Weight > 70 In [ 36 ]: condition_1 = condition_1_1 & condition_1_2 & condition_1_3 In [ 37 ]: condition_2_1 = df_demo . School == 'Peking University' In [ 38 ]: condition_2_2 = df_demo . Grade == 'Senior' In [ 39 ]: condition_2_3 = df_demo . Weight > 80 In [ 40 ]: condition_2 = condition_2_1 & ( ~ condition_2_2 ) & condition_2_3 In [ 41 ]: df_demo . loc [ condition_1 | condition_2 ] Out [ 41 ]: School Grade Gender Weight Transfer Name Qiang Han Peking University Freshman Male 87.0 N Chengpeng Zhou Fudan University Senior Male 81.0 N Changpeng Zhao Peking University Freshman Male 83.0 N Chengpeng Qian Fudan University Senior Male 73.0 Y \u7ec3\u4e00\u7ec3 select_dtypes \u662f\u4e00\u4e2a\u5b9e\u7528\u51fd\u6570\uff0c\u5b83\u80fd\u591f\u4ece\u8868\u4e2d\u9009\u51fa\u76f8\u5e94\u7c7b\u578b\u7684\u5217\uff0c\u82e5\u8981\u9009\u51fa\u6240\u6709\u6570\u503c\u578b\u7684\u5217\uff0c\u53ea\u9700\u4f7f\u7528 .select_dtypes('number') \uff0c\u8bf7\u5229\u7528\u5e03\u5c14\u5217\u8868\u9009\u62e9\u7684\u65b9\u6cd5\u7ed3\u5408 DataFrame \u7684 dtypes \u5c5e\u6027\u5728 learn_pandas \u6570\u636e\u96c6\u4e0a\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u3002 \u3010e\u3011 * \u4e3a\u51fd\u6570 \u8fd9\u91cc\u7684\u51fd\u6570\uff0c\u5fc5\u987b\u4ee5\u524d\u9762\u7684\u56db\u79cd\u5408\u6cd5\u5f62\u5f0f\u4e4b\u4e00\u4e3a\u8fd4\u56de\u503c\uff0c\u5e76\u4e14\u51fd\u6570\u7684\u8f93\u5165\u503c\u4e3a DataFrame \u672c\u8eab\u3002\u5047\u8bbe\u4ecd\u7136\u662f\u4e0a\u8ff0\u590d\u5408\u6761\u4ef6\u7b5b\u9009\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u628a\u903b\u8f91\u5199\u5165\u4e00\u4e2a\u51fd\u6570\u4e2d\u518d\u8fd4\u56de\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570 x \u672c\u8d28\u4e0a\u5373\u4e3a df_demo \uff1a In [ 42 ]: def condition ( x ): .... : condition_1_1 = x . School == 'Fudan University' .... : condition_1_2 = x . Grade == 'Senior' .... : condition_1_3 = x . Weight > 70 .... : condition_1 = condition_1_1 & condition_1_2 & condition_1_3 .... : condition_2_1 = x . School == 'Peking University' .... : condition_2_2 = x . Grade == 'Senior' .... : condition_2_3 = x . Weight > 80 .... : condition_2 = condition_2_1 & ( ~ condition_2_2 ) & condition_2_3 .... : result = condition_1 | condition_2 .... : return result .... : In [ 43 ]: df_demo . loc [ condition ] Out [ 43 ]: School Grade Gender Weight Transfer Name Qiang Han Peking University Freshman Male 87.0 N Chengpeng Zhou Fudan University Senior Male 81.0 N Changpeng Zhao Peking University Freshman Male 83.0 N Chengpeng Qian Fudan University Senior Male 73.0 Y \u6b64\u5916\uff0c\u8fd8\u652f\u6301\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\uff0c\u5176\u8fd4\u56de\u503c\u4e5f\u540c\u6837\u5fc5\u987b\u662f\u5148\u524d\u63d0\u5230\u7684\u56db\u79cd\u5f62\u5f0f\u4e4b\u4e00\uff1a In [ 44 ]: df_demo . loc [ lambda x : 'Quan Zhao' , lambda x : 'Gender' ] Out [ 44 ]: 'Female' \u7531\u4e8e\u51fd\u6570\u65e0\u6cd5\u8fd4\u56de\u5982 start: end: step \u7684\u5207\u7247\u5f62\u5f0f\uff0c\u6545\u8fd4\u56de\u5207\u7247\u65f6\u8981\u7528 slice \u5bf9\u8c61\u8fdb\u884c\u5305\u88c5\uff1a In [ 45 ]: df_demo . loc [ lambda x : slice ( 'Gaojuan You' , 'Gaoqiang Qian' )] Out [ 45 ]: School Grade Gender Weight Transfer Name Gaojuan You Fudan University Sophomore Male 74.0 N Xiaoli Qian Tsinghua University Freshman Female 51.0 N Qiang Chu Shanghai Jiao Tong University Freshman Female 52.0 N Gaoqiang Qian Tsinghua University Junior Female 50.0 N \u6700\u540e\u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u5bf9\u4e8e Series \u4e5f\u53ef\u4ee5\u4f7f\u7528 loc \u7d22\u5f15\uff0c\u5176\u9075\u5faa\u7684\u539f\u5219\u4e0e DataFrame \u4e2d\u7528\u4e8e\u884c\u7b5b\u9009\u7684 loc[*] \u5b8c\u5168\u4e00\u81f4\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\u3002 \u4e0d\u8981\u4f7f\u7528\u94fe\u5f0f\u8d4b\u503c \u5728\u5bf9\u8868\u6216\u8005\u5e8f\u5217\u8d4b\u503c\u65f6\uff0c\u5e94\u5f53\u5728\u4f7f\u7528\u4e00\u5c42\u7d22\u5f15\u5668\u540e\u76f4\u63a5\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\uff0c\u8fd9\u6837\u505a\u662f\u7531\u4e8e\u8fdb\u884c\u591a\u6b21\u7d22\u5f15\u540e\u8d4b\u503c\u662f\u8d4b\u5728\u4e34\u65f6\u8fd4\u56de\u7684 copy \u526f\u672c\u4e0a\u7684\uff0c\u800c\u6ca1\u6709\u771f\u6b63\u4fee\u6539\u5143\u7d20\u4ece\u800c\u62a5\u51fa SettingWithCopyWarning \u8b66\u544a\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7ed9\u51fa\u7684\u4f8b\u5b50\uff1a In [ 46 ]: df_chain = pd . DataFrame ([[ 0 , 0 ],[ 1 , 0 ],[ - 1 , 0 ]], columns = list ( 'AB' )) In [ 47 ]: df_chain Out [ 47 ]: A B 0 0 0 1 1 0 2 - 1 0 In [ 48 ]: import warnings In [ 49 ]: with warnings . catch_warnings (): .... : warnings . filterwarnings ( 'error' ) .... : try : .... : df_chain [ df_chain . A != 0 ] . B = 1 # \u4f7f\u7528\u65b9\u62ec\u53f7\u5217\u7d22\u5f15\u540e\uff0c\u518d\u4f7f\u7528\u70b9\u7684\u5217\u7d22\u5f15 .... : except Warning as w : .... : Warning_Msg = w .... : In [ 50 ]: print ( Warning_Msg ) A value is trying to be set on a copy of a slice from a DataFrame . Try using . loc [ row_indexer , col_indexer ] = value instead See the caveats in the documentation : https : // pandas . pydata . org / pandas - docs / stable / user_guide / indexing . html #returning-a-view-versus-a-copy In [ 51 ]: df_chain Out [ 51 ]: A B 0 0 0 1 1 0 2 - 1 0 In [ 52 ]: df_chain . loc [ df_chain . A != 0 , 'B' ] = 1 In [ 53 ]: df_chain Out [ 53 ]: A B 0 0 0 1 1 1 2 - 1 1 4. iloc \u7d22\u5f15\u5668 iloc \u7684\u4f7f\u7528\u4e0e loc \u5b8c\u5168\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u662f\u9488\u5bf9\u4f4d\u7f6e\u8fdb\u884c\u7b5b\u9009\uff0c\u5728\u76f8\u5e94\u7684 * \u4f4d\u7f6e\u5904\u4e00\u5171\u4e5f\u6709\u4e94\u7c7b\u5408\u6cd5\u5bf9\u8c61\uff0c\u5206\u522b\u662f\uff1a\u6574\u6570\u3001\u6574\u6570\u5217\u8868\u3001\u6574\u6570\u5207\u7247\u3001\u5e03\u5c14\u5217\u8868\u4ee5\u53ca\u51fd\u6570\uff0c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5fc5\u987b\u662f\u524d\u9762\u7684\u56db\u7c7b\u5408\u6cd5\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\uff0c\u5176\u8f93\u5165\u540c\u6837\u4e5f\u4e3a DataFrame \u672c\u8eab\u3002 In [ 54 ]: df_demo . iloc [ 1 , 1 ] # \u7b2c\u4e8c\u884c\u7b2c\u4e8c\u5217 Out [ 54 ]: 'Freshman' In [ 55 ]: df_demo . iloc [[ 0 , 1 ], [ 0 , 1 ]] # \u524d\u4e24\u884c\u524d\u4e24\u5217 Out [ 55 ]: School Grade Name Gaopeng Yang Shanghai Jiao Tong University Freshman Changqiang You Peking University Freshman In [ 56 ]: df_demo . iloc [ 1 : 4 , 2 : 4 ] # \u5207\u7247\u4e0d\u5305\u542b\u7ed3\u675f\u7aef\u70b9 Out [ 56 ]: Gender Weight Name Changqiang You Male 70.0 Mei Sun Male 89.0 Xiaojuan Sun Female 41.0 In [ 57 ]: df_demo . iloc [ lambda x : slice ( 1 , 4 )] # \u4f20\u5165\u5207\u7247\u4e3a\u8fd4\u56de\u503c\u7684\u51fd\u6570 Out [ 57 ]: School Grade Gender Weight Transfer Name Changqiang You Peking University Freshman Male 70.0 N Mei Sun Shanghai Jiao Tong University Senior Male 89.0 N Xiaojuan Sun Fudan University Sophomore Female 41.0 N \u5728\u4f7f\u7528\u5e03\u5c14\u5217\u8868\u7684\u65f6\u5019\u8981\u7279\u522b\u6ce8\u610f\uff0c\u4e0d\u80fd\u4f20\u5165 Series \u800c\u5fc5\u987b\u4f20\u5165\u5e8f\u5217\u7684 values \uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002\u56e0\u6b64\uff0c\u5728\u4f7f\u7528\u5e03\u5c14\u7b5b\u9009\u7684\u65f6\u5019\u8fd8\u662f\u5e94\u5f53\u4f18\u5148\u8003\u8651 loc \u7684\u65b9\u5f0f\u3002 \u4f8b\u5982\uff0c\u9009\u51fa\u4f53\u91cd\u8d85\u8fc7 80kg \u7684\u5b66\u751f\uff1a In [ 58 ]: df_demo . iloc [( df_demo . Weight > 80 ) . values ] . head () Out [ 58 ]: School Grade Gender Weight Transfer Name Mei Sun Shanghai Jiao Tong University Senior Male 89.0 N Qiang Zheng Shanghai Jiao Tong University Senior Male 87.0 N Qiang Han Peking University Freshman Male 87.0 N Chengpeng Zhou Fudan University Senior Male 81.0 N Feng Han Shanghai Jiao Tong University Sophomore Male 82.0 N \u5bf9 Series \u800c\u8a00\u540c\u6837\u4e5f\u53ef\u4ee5\u901a\u8fc7 iloc \u8fd4\u56de\u76f8\u5e94\u4f4d\u7f6e\u7684\u503c\u6216\u5b50\u5e8f\u5217\uff1a In [ 59 ]: df_demo . School . iloc [ 1 ] Out [ 59 ]: 'Peking University' In [ 60 ]: df_demo . School . iloc [ 1 : 5 : 2 ] Out [ 60 ]: Name Changqiang You Peking University Xiaojuan Sun Fudan University Name : School , dtype : object 5. query \u65b9\u6cd5 \u5728 pandas \u4e2d\uff0c\u652f\u6301\u628a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u67e5\u8be2\u8868\u8fbe\u5f0f\u4f20\u5165 query \u65b9\u6cd5\u6765\u67e5\u8be2\u6570\u636e\uff0c\u5176\u8868\u8fbe\u5f0f\u7684\u6267\u884c\u7ed3\u679c\u5fc5\u987b\u8fd4\u56de\u5e03\u5c14\u5217\u8868\u3002\u5728\u8fdb\u884c\u590d\u6742\u7d22\u5f15\u65f6\uff0c\u7531\u4e8e\u8fd9\u79cd\u68c0\u7d22\u65b9\u5f0f\u65e0\u9700\u50cf\u666e\u901a\u65b9\u6cd5\u4e00\u6837\u91cd\u590d\u4f7f\u7528 DataFrame \u7684\u540d\u5b57\u6765\u5f15\u7528\u5217\u540d\uff0c\u4e00\u822c\u800c\u8a00\u4f1a\u4f7f\u4ee3\u7801\u957f\u5ea6\u5728\u4e0d\u964d\u4f4e\u53ef\u8bfb\u6027\u7684\u524d\u63d0\u4e0b\u6709\u6240\u51cf\u5c11\u3002 \u4f8b\u5982\uff0c\u5c06 loc \u4e00\u8282\u4e2d\u7684\u590d\u5408\u6761\u4ef6\u67e5\u8be2\u4f8b\u5b50\u53ef\u4ee5\u5982\u4e0b\u6539\u5199\uff1a In [ 61 ]: df . query ( '((School == \"Fudan University\")&' .... : ' (Grade == \"Senior\")&' .... : ' (Weight > 70))|' .... : '((School == \"Peking University\")&' .... : ' (Grade != \"Senior\")&' .... : ' (Weight > 80))' ) .... : Out [ 61 ]: School Grade Name Gender Weight Transfer 38 Peking University Freshman Qiang Han Male 87.0 N 66 Fudan University Senior Chengpeng Zhou Male 81.0 N 99 Peking University Freshman Changpeng Zhao Male 83.0 N 131 Fudan University Senior Chengpeng Qian Male 73.0 Y \u5728 query \u8868\u8fbe\u5f0f\u4e2d\uff0c\u5e2e\u7528\u6237\u6ce8\u518c\u4e86\u6240\u6709\u6765\u81ea DataFrame \u7684\u5217\u540d\uff0c\u6240\u6709\u5c5e\u4e8e\u8be5 Series \u7684\u65b9\u6cd5\u90fd\u53ef\u4ee5\u88ab\u8c03\u7528\uff0c\u548c\u6b63\u5e38\u7684\u51fd\u6570\u8c03\u7528\u5e76\u6ca1\u6709\u533a\u522b\uff0c\u4f8b\u5982\u67e5\u8be2\u4f53\u91cd\u8d85\u8fc7\u5747\u503c\u7684\u5b66\u751f\uff1a In [ 62 ]: df . query ( 'Weight > Weight.mean()' ) . head () Out [ 62 ]: School Grade Name Gender Weight Transfer 1 Peking University Freshman Changqiang You Male 70.0 N 2 Shanghai Jiao Tong University Senior Mei Sun Male 89.0 N 4 Fudan University Sophomore Gaojuan You Male 74.0 N 10 Shanghai Jiao Tong University Freshman Xiaopeng Zhou Male 74.0 N 14 Tsinghua University Senior Xiaomei Zhou Female 57.0 N query \u4e2d\u5f15\u7528\u5e26\u7a7a\u683c\u7684\u5217\u540d \u5bf9\u4e8e\u542b\u6709\u7a7a\u683c\u7684\u5217\u540d\uff0c\u9700\u8981\u4f7f\u7528 `col name` \u7684\u65b9\u5f0f\u8fdb\u884c\u5f15\u7528\u3002 \u540c\u65f6\uff0c\u5728 query \u4e2d\u8fd8\u6ce8\u518c\u4e86\u82e5\u5e72\u82f1\u8bed\u7684\u5b57\u9762\u7528\u6cd5\uff0c\u5e2e\u52a9\u63d0\u9ad8\u53ef\u8bfb\u6027\uff0c\u4f8b\u5982\uff1a or, and, or, in, not in \u3002\u4f8b\u5982\uff0c\u7b5b\u9009\u51fa\u7537\u751f\u4e2d\u4e0d\u662f\u5927\u4e00\u5927\u4e8c\u7684\u5b66\u751f\uff1a In [ 63 ]: df . query ( '(Grade not in [\"Freshman\", \"Sophomore\"]) and' .... : '(Gender == \"Male\")' ) . head () .... : Out [ 63 ]: School Grade Name Gender Weight Transfer 2 Shanghai Jiao Tong University Senior Mei Sun Male 89.0 N 16 Tsinghua University Junior Xiaoqiang Qin Male 68.0 N 17 Tsinghua University Junior Peng Wang Male 65.0 N 18 Tsinghua University Senior Xiaofeng Sun Male 71.0 N 21 Shanghai Jiao Tong University Senior Xiaopeng Shen Male 62.0 NaN \u6b64\u5916\uff0c\u5728\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u4e0e\u5217\u8868\u7684\u6bd4\u8f83\u65f6\uff0c == \u548c != \u5206\u522b\u8868\u793a\u5143\u7d20\u51fa\u73b0\u5728\u5217\u8868\u548c\u6ca1\u6709\u51fa\u73b0\u5728\u5217\u8868\uff0c\u7b49\u4ef7\u4e8e in \u548c not in \uff0c\u4f8b\u5982\u67e5\u8be2\u6240\u6709\u5927\u4e09\u548c\u5927\u56db\u7684\u5b66\u751f\uff1a In [ 64 ]: df . query ( 'Grade == [\"Junior\", \"Senior\"]' ) . head () Out [ 64 ]: School Grade Name Gender Weight Transfer 2 Shanghai Jiao Tong University Senior Mei Sun Male 89.0 N 7 Tsinghua University Junior Gaoqiang Qian Female 50.0 N 9 Peking University Junior Juan Xu Female NaN N 11 Tsinghua University Junior Xiaoquan Lv Female 43.0 N 12 Shanghai Jiao Tong University Senior Peng You Female 48.0 NaN \u5bf9\u4e8e query \u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u8981\u5f15\u7528\u5916\u90e8\u53d8\u91cf\uff0c\u53ea\u9700\u5728\u53d8\u91cf\u540d\u524d\u52a0 @ \u7b26\u53f7\u3002\u4f8b\u5982\uff0c\u53d6\u51fa\u4f53\u91cd\u4f4d\u4e8e 70kg \u5230 80kg \u4e4b\u95f4\u7684\u5b66\u751f\uff1a In [ 65 ]: low , high = 70 , 80 In [ 66 ]: df . query ( '(Weight >= @low) & (Weight <= @high)' ) . head () Out [ 66 ]: School Grade Name Gender Weight Transfer 1 Peking University Freshman Changqiang You Male 70.0 N 4 Fudan University Sophomore Gaojuan You Male 74.0 N 10 Shanghai Jiao Tong University Freshman Xiaopeng Zhou Male 74.0 N 18 Tsinghua University Senior Xiaofeng Sun Male 71.0 N 35 Peking University Freshman Gaoli Zhao Male 78.0 N 6. \u968f\u673a\u62bd\u6837 \u5982\u679c\u628a DataFrame \u7684\u6bcf\u4e00\u884c\u770b\u4f5c\u4e00\u4e2a\u6837\u672c\uff0c\u6216\u628a\u6bcf\u4e00\u5217\u770b\u4f5c\u4e00\u4e2a\u7279\u5f81\uff0c\u518d\u628a\u6574\u4e2a DataFrame \u770b\u4f5c\u603b\u4f53\uff0c\u60f3\u8981\u5bf9\u6837\u672c\u6216\u7279\u5f81\u8fdb\u884c\u968f\u673a\u62bd\u6837\u5c31\u53ef\u4ee5\u7528 sample \u51fd\u6570\u3002\u6709\u65f6\u5728\u62ff\u5230\u5927\u578b\u6570\u636e\u96c6\u540e\uff0c\u60f3\u8981\u5bf9\u7edf\u8ba1\u7279\u5f81\u8fdb\u884c\u8ba1\u7b97\u6765\u4e86\u89e3\u6570\u636e\u7684\u5927\u81f4\u5206\u5e03\uff0c\u4f46\u662f\u8fd9\u5f88\u8d39\u65f6\u95f4\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u8bb8\u591a\u7edf\u8ba1\u7279\u5f81\u5728\u7b49\u6982\u7387\u4e0d\u653e\u56de\u7684\u7b80\u5355\u968f\u673a\u62bd\u6837\u6761\u4ef6\u4e0b\uff0c\u662f\u603b\u4f53\u7edf\u8ba1\u7279\u5f81\u7684\u65e0\u504f\u4f30\u8ba1\uff0c\u6bd4\u5982\u6837\u672c\u5747\u503c\u548c\u603b\u4f53\u5747\u503c\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5148\u4ece\u6574\u5f20\u8868\u4e2d\u62bd\u51fa\u4e00\u90e8\u5206\u6765\u505a\u8fd1\u4f3c\u4f30\u8ba1\u3002 sample \u51fd\u6570\u4e2d\u7684\u4e3b\u8981\u53c2\u6570\u4e3a n, axis, frac, replace, weights \uff0c\u524d\u4e09\u4e2a\u5206\u522b\u662f\u6307\u62bd\u6837\u6570\u91cf\u3001\u62bd\u6837\u7684\u65b9\u5411\uff080 \u4e3a\u884c\u30011 \u4e3a\u5217\uff09\u548c\u62bd\u6837\u6bd4\u4f8b\uff080.3 \u5219\u4e3a\u4ece\u603b\u4f53\u4e2d\u62bd\u51fa 30% \u7684\u6837\u672c\uff09\u3002 replace \u548c weights \u5206\u522b\u662f\u6307\u662f\u5426\u653e\u56de\u548c\u6bcf\u4e2a\u6837\u672c\u7684\u62bd\u6837\u76f8\u5bf9\u6982\u7387\uff0c\u5f53 replace = True \u5219\u8868\u793a\u6709\u653e\u56de\u62bd\u6837\u3002\u4f8b\u5982\uff0c\u5bf9\u4e0b\u9762\u6784\u9020\u7684 df_sample \u4ee5 value \u503c\u7684\u76f8\u5bf9\u5927\u5c0f\u4e3a\u62bd\u6837\u6982\u7387\u8fdb\u884c\u6709\u653e\u56de\u62bd\u6837\uff0c\u62bd\u6837\u6570\u91cf\u4e3a 3\u3002 In [ 67 ]: df_sample = pd . DataFrame ({ 'id' : list ( 'abcde' ), .... : 'value' : [ 1 , 2 , 3 , 4 , 90 ]}) .... : In [ 68 ]: df_sample Out [ 68 ]: id value 0 a 1 1 b 2 2 c 3 3 d 4 4 e 90 In [ 69 ]: df_sample . sample ( 3 , replace = True , weights = df_sample . value ) Out [ 69 ]: id value 4 e 90 4 e 90 4 e 90 \u4e8c\u3001\u591a\u7ea7\u7d22\u5f15 1. \u591a\u7ea7\u7d22\u5f15\u53ca\u5176\u8868\u7684\u7ed3\u6784 \u4e3a\u4e86\u66f4\u52a0\u6e05\u6670\u5730\u8bf4\u660e\u5177\u6709\u591a\u7ea7\u7d22\u5f15\u7684 DataFrame \u7ed3\u6784\uff0c\u4e0b\u9762\u65b0\u6784\u9020\u4e00\u5f20\u8868\uff0c\u8bfb\u8005\u53ef\u4ee5\u5ffd\u7565\u8fd9\u91cc\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5b83\u4eec\u5c06\u4f1a\u5728\u7b2c 4 \u5c0f\u8282\u88ab\u66f4\u8be6\u7ec6\u5730\u8bb2\u89e3\u3002 In [ 70 ]: np . random . seed ( 0 ) In [ 71 ]: multi_index = pd . MultiIndex . from_product ([ list ( 'ABCD' ), .... : df . Gender . unique ()], names = ( 'School' , 'Gender' )) .... : In [ 72 ]: multi_column = pd . MultiIndex . from_product ([[ 'Height' , 'Weight' ], .... : df . Grade . unique ()], names = ( 'Indicator' , 'Grade' )) .... : In [ 73 ]: df_multi = pd . DataFrame ( np . c_ [( np . random . randn ( 8 , 4 ) * 5 + 163 ) . tolist (), .... : ( np . random . randn ( 8 , 4 ) * 5 + 65 ) . tolist ()], .... : index = multi_index , .... : columns = multi_column ) . round ( 1 ) .... : In [ 74 ]: df_multi Out [ 74 ]: Indicator Height Weight Grade Freshman Senior Sophomore Junior Freshman Senior Sophomore Junior School Gender A Female 171.8 165.0 167.9 174.2 60.6 55.1 63.3 65.8 Male 172.3 158.1 167.8 162.2 71.2 71.0 63.1 63.5 B Female 162.5 165.1 163.7 170.3 59.8 57.9 56.5 74.8 Male 166.8 163.6 165.2 164.7 62.5 62.8 58.7 68.9 C Female 170.5 162.0 164.6 158.7 56.9 63.9 60.5 66.9 Male 150.2 166.3 167.3 159.3 62.4 59.1 64.9 67.1 D Female 174.3 155.7 163.2 162.1 65.3 66.5 61.8 63.2 Male 170.7 170.3 163.8 164.9 61.6 63.2 60.9 56.4 \u4e0b\u56fe\u901a\u8fc7\u989c\u8272\u533a\u5206\uff0c\u6807\u8bb0\u4e86 DataFrame \u7684\u7ed3\u6784\u3002\u4e0e\u5355\u5c42\u7d22\u5f15\u7684\u8868\u4e00\u6837\uff0c\u5177\u5907\u5143\u7d20\u503c\u3001\u884c\u7d22\u5f15\u548c\u5217\u7d22\u5f15\u4e09\u4e2a\u90e8\u5206\u3002\u5176\u4e2d\uff0c\u8fd9\u91cc\u7684\u884c\u7d22\u5f15\u548c\u5217\u7d22\u5f15\u90fd\u662f MultiIndex \u7c7b\u578b\uff0c\u53ea\u4e0d\u8fc7 \u7d22\u5f15\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u662f\u5143\u7ec4 \u800c\u4e0d\u662f\u5355\u5c42\u7d22\u5f15\u4e2d\u7684\u6807\u91cf\u3002\u4f8b\u5982\uff0c\u884c\u7d22\u5f15\u7684\u7b2c\u56db\u4e2a\u5143\u7d20\u4e3a (\"B\", \"Male\") \uff0c\u5217\u7d22\u5f15\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3a (\"Height\", \"Senior\") \uff0c\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0c\u5916\u5c42\u8fde\u7eed\u51fa\u73b0\u76f8\u540c\u7684\u503c\u65f6\uff0c\u7b2c\u4e00\u6b21\u4e4b\u540e\u51fa\u73b0\u7684\u4f1a\u88ab\u9690\u85cf\u663e\u793a\uff0c\u4f7f\u7ed3\u679c\u7684\u53ef\u8bfb\u6027\u589e\u5f3a\u3002 \u4e0e\u5355\u5c42\u7d22\u5f15\u7c7b\u4f3c\uff0c MultiIndex \u4e5f\u5177\u6709\u540d\u5b57\u5c5e\u6027\uff0c\u56fe\u4e2d\u7684 School \u548c Gender \u5206\u522b\u5bf9\u5e94\u4e86\u8868\u7684\u7b2c\u4e00\u5c42\u548c\u7b2c\u4e8c\u5c42\u884c\u7d22\u5f15\u7684\u540d\u5b57\uff0c Indicator \u548c Grade \u5206\u522b\u5bf9\u5e94\u4e86\u7b2c\u4e00\u5c42\u548c\u7b2c\u4e8c\u5c42\u5217\u7d22\u5f15\u7684\u540d\u5b57\u3002 \u7d22\u5f15\u7684\u540d\u5b57\u548c\u503c\u5c5e\u6027\u5206\u522b\u53ef\u4ee5\u901a\u8fc7 names \u548c values \u83b7\u5f97\uff1a In [ 75 ]: df_multi . index . names Out [ 75 ]: FrozenList ([ 'School' , 'Gender' ]) In [ 76 ]: df_multi . columns . names Out [ 76 ]: FrozenList ([ 'Indicator' , 'Grade' ]) In [ 77 ]: df_multi . index . values Out [ 77 ]: array ([( 'A' , 'Female' ), ( 'A' , 'Male' ), ( 'B' , 'Female' ), ( 'B' , 'Male' ), ( 'C' , 'Female' ), ( 'C' , 'Male' ), ( 'D' , 'Female' ), ( 'D' , 'Male' )], dtype = object ) In [ 78 ]: df_multi . columns . values Out [ 78 ]: array ([( 'Height' , 'Freshman' ), ( 'Height' , 'Senior' ), ( 'Height' , 'Sophomore' ), ( 'Height' , 'Junior' ), ( 'Weight' , 'Freshman' ), ( 'Weight' , 'Senior' ), ( 'Weight' , 'Sophomore' ), ( 'Weight' , 'Junior' )], dtype = object ) \u5982\u679c\u60f3\u8981\u5f97\u5230\u67d0\u4e00\u5c42\u7684\u7d22\u5f15\uff0c\u5219\u9700\u8981\u901a\u8fc7 get_level_values \u83b7\u5f97\uff1a In [ 79 ]: df_multi . index . get_level_values ( 0 ) Out [ 79 ]: Index ([ 'A' , 'A' , 'B' , 'B' , 'C' , 'C' , 'D' , 'D' ], dtype = 'object' , name = 'School' ) \u4f46\u5bf9\u4e8e\u7d22\u5f15\u800c\u8a00\uff0c\u65e0\u8bba\u662f\u5355\u5c42\u8fd8\u662f\u591a\u5c42\uff0c\u7528\u6237\u90fd\u65e0\u6cd5\u901a\u8fc7 index_obj[0] = item \u7684\u65b9\u5f0f\u6765\u4fee\u6539\u5143\u7d20\uff0c\u4e5f\u4e0d\u80fd\u901a\u8fc7 index_name[0] = new_name \u7684\u65b9\u5f0f\u6765\u4fee\u6539\u540d\u5b57\uff0c\u5173\u4e8e\u5982\u4f55\u4fee\u6539\u8fd9\u4e9b\u5c5e\u6027\u7684\u8bdd\u9898\u5c06\u5728\u7b2c\u4e09\u8282\u88ab\u8ba8\u8bba\u3002 2. \u591a\u7ea7\u7d22\u5f15\u4e2d\u7684 loc \u7d22\u5f15\u5668 \u719f\u6089\u4e86\u7ed3\u6784\u540e\uff0c\u73b0\u5728\u56de\u5230\u539f\u8868\uff0c\u5c06\u5b66\u6821\u548c\u5e74\u7ea7\u8bbe\u4e3a\u7d22\u5f15\uff0c\u6b64\u65f6\u7684\u884c\u4e3a\u591a\u7ea7\u7d22\u5f15\uff0c\u5217\u4e3a\u5355\u7ea7\u7d22\u5f15\uff0c\u7531\u4e8e\u9ed8\u8ba4\u72b6\u6001\u7684\u5217\u7d22\u5f15\u4e0d\u542b\u540d\u5b57\uff0c\u56e0\u6b64\u5bf9\u5e94\u4e8e\u521a\u521a\u56fe\u4e2d Indicator \u548c Grade \u7684\u7d22\u5f15\u540d\u4f4d\u7f6e\u662f\u7a7a\u7f3a\u7684\u3002 In [ 80 ]: df_multi = df . set_index ([ 'School' , 'Grade' ]) In [ 81 ]: df_multi . head () Out [ 81 ]: Name Gender Weight Transfer School Grade Shanghai Jiao Tong University Freshman Gaopeng Yang Female 46.0 N Peking University Freshman Changqiang You Male 70.0 N Shanghai Jiao Tong University Senior Mei Sun Male 89.0 N Fudan University Sophomore Xiaojuan Sun Female 41.0 N Sophomore Gaojuan You Male 74.0 N \u7531\u4e8e\u591a\u7ea7\u7d22\u5f15\u4e2d\u7684\u5355\u4e2a\u5143\u7d20\u4ee5\u5143\u7ec4\u4e3a\u5355\u4f4d\uff0c\u56e0\u6b64\u4e4b\u524d\u5728\u7b2c\u4e00\u8282\u4ecb\u7ecd\u7684 loc \u548c iloc \u65b9\u6cd5\u5b8c\u5168\u53ef\u4ee5\u7167\u642c\uff0c\u53ea\u9700\u628a\u6807\u91cf\u7684\u4f4d\u7f6e\u66ff\u6362\u6210\u5bf9\u5e94\u7684\u5143\u7ec4\u3002 \u5f53\u4f20\u5165\u5143\u7ec4\u5217\u8868\u6216\u5355\u4e2a\u5143\u7ec4\u6216\u8fd4\u56de\u524d\u4e8c\u8005\u7684\u51fd\u6570\u65f6\uff0c\u9700\u8981\u5148\u8fdb\u884c\u7d22\u5f15\u6392\u5e8f\u4ee5\u907f\u514d\u6027\u80fd\u8b66\u544a\uff1a In [ 82 ]: with warnings . catch_warnings (): .... : warnings . filterwarnings ( 'error' ) .... : try : .... : df_multi . loc [( 'Fudan University' , 'Junior' )] . head () .... : except Warning as w : .... : Warning_Msg = w .... : In [ 83 ]: Warning_Msg Out [ 83 ]: pandas . errors . PerformanceWarning ( 'indexing past lexsort depth may impact performance.' ) In [ 84 ]: df_sorted = df_multi . sort_index () In [ 85 ]: df_sorted . loc [( 'Fudan University' , 'Junior' )] . head () Out [ 85 ]: Name Gender Weight Transfer School Grade Fudan University Junior Yanli You Female 48.0 N Junior Chunqiang Chu Male 72.0 N Junior Changfeng Lv Male 76.0 N Junior Yanjuan Lv Female 49.0 NaN Junior Gaoqiang Zhou Female 43.0 N In [ 86 ]: df_sorted . loc [[( 'Fudan University' , 'Senior' ), .... : ( 'Shanghai Jiao Tong University' , 'Freshman' )]] . head () .... : Out [ 86 ]: Name Gender Weight Transfer School Grade Fudan University Senior Chengpeng Zheng Female 38.0 N Senior Feng Zhou Female 47.0 N Senior Gaomei Lv Female 34.0 N Senior Chunli Lv Female 56.0 N Senior Chengpeng Zhou Male 81.0 N In [ 87 ]: df_sorted . loc [ df_sorted . Weight > 70 ] . head () # \u5e03\u5c14\u5217\u8868\u4e5f\u662f\u53ef\u7528\u7684 Out [ 87 ]: Name Gender Weight Transfer School Grade Fudan University Freshman Feng Wang Male 74.0 N Junior Chunqiang Chu Male 72.0 N Junior Changfeng Lv Male 76.0 N Senior Chengpeng Zhou Male 81.0 N Senior Chengpeng Qian Male 73.0 Y In [ 88 ]: df_sorted . loc [ lambda x :( 'Fudan University' , 'Junior' )] . head () Out [ 88 ]: Name Gender Weight Transfer School Grade Fudan University Junior Yanli You Female 48.0 N Junior Chunqiang Chu Male 72.0 N Junior Changfeng Lv Male 76.0 N Junior Yanjuan Lv Female 49.0 NaN Junior Gaoqiang Zhou Female 43.0 N \u5f53\u4f7f\u7528\u5207\u7247\u65f6\u9700\u8981\u6ce8\u610f\uff0c\u5728\u5355\u7ea7\u7d22\u5f15\u4e2d\u53ea\u8981\u5207\u7247\u7aef\u70b9\u5143\u7d20\u662f\u552f\u4e00\u7684\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8fdb\u884c\u5207\u7247\uff0c\u4f46\u5728\u591a\u7ea7\u7d22\u5f15\u4e2d\uff0c\u65e0\u8bba\u5143\u7ec4\u5728\u7d22\u5f15\u4e2d\u662f\u5426\u91cd\u590d\u51fa\u73b0\uff0c\u90fd\u5fc5\u987b\u7ecf\u8fc7\u6392\u5e8f\u624d\u80fd\u4f7f\u7528\u5207\u7247\uff0c\u5426\u5219\u62a5\u9519\uff1a In [ 89 ]: try : .... : df_multi . loc [( 'Fudan University' , 'Senior' ):] . head () .... : except Exception as e : .... : Err_Msg = e .... : In [ 90 ]: Err_Msg Out [ 90 ]: pandas . errors . UnsortedIndexError ( 'Key length (2) was greater than MultiIndex lexsort depth (0)' ) In [ 91 ]: df_sorted . loc [( 'Fudan University' , 'Senior' ):] . head () Out [ 91 ]: Name Gender Weight Transfer School Grade Fudan University Senior Chengpeng Zheng Female 38.0 N Senior Feng Zhou Female 47.0 N Senior Gaomei Lv Female 34.0 N Senior Chunli Lv Female 56.0 N Senior Chengpeng Zhou Male 81.0 N In [ 92 ]: df_unique = df . drop_duplicates ( subset = [ 'School' , 'Grade' ] .... : ) . set_index ([ 'School' , 'Grade' ]) .... : In [ 93 ]: df_unique . head () Out [ 93 ]: Name Gender Weight Transfer School Grade Shanghai Jiao Tong University Freshman Gaopeng Yang Female 46.0 N Peking University Freshman Changqiang You Male 70.0 N Shanghai Jiao Tong University Senior Mei Sun Male 89.0 N Fudan University Sophomore Xiaojuan Sun Female 41.0 N Tsinghua University Freshman Xiaoli Qian Female 51.0 N In [ 94 ]: try : .... : df_unique . loc [( 'Fudan University' , 'Senior' ):] . head () .... : except Exception as e : .... : Err_Msg = e .... : In [ 95 ]: Err_Msg Out [ 95 ]: pandas . errors . UnsortedIndexError ( 'Key length (2) was greater than MultiIndex lexsort depth (0)' ) In [ 96 ]: df_unique . sort_index () . loc [( 'Fudan University' , 'Senior' ):] . head () Out [ 96 ]: Name Gender Weight Transfer School Grade Fudan University Senior Chengpeng Zheng Female 38.0 N Sophomore Xiaojuan Sun Female 41.0 N Peking University Freshman Changqiang You Male 70.0 N Junior Juan Xu Female NaN N Senior Changli Lv Female 41.0 N \u6b64\u5916\uff0c\u5728\u591a\u7ea7\u7d22\u5f15\u4e2d\u7684\u5143\u7ec4\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u7528\u6cd5\uff0c\u53ef\u4ee5\u5bf9\u591a\u5c42\u7684\u5143\u7d20\u8fdb\u884c\u4ea4\u53c9\u7ec4\u5408\u540e\u7d22\u5f15\uff0c\u4f46\u540c\u65f6\u9700\u8981\u6307\u5b9a loc \u7684\u5217\uff0c\u5168\u9009\u5219\u7528 : \u8868\u793a\u3002\u5176\u4e2d\uff0c\u6bcf\u4e00\u5c42\u9700\u8981\u9009\u4e2d\u7684\u5143\u7d20\u7528\u5217\u8868\u5b58\u653e\uff0c\u4f20\u5165 loc \u7684\u5f62\u5f0f\u4e3a [(level_0_list, level_1_list), cols] \u3002\u4f8b\u5982\uff0c\u60f3\u8981\u5f97\u5230\u6240\u6709\u5317\u5927\u548c\u590d\u65e6\u7684\u5927\u4e8c\u5927\u4e09\u5b66\u751f\uff0c\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 97 ]: res = df_multi . loc [([ 'Peking University' , 'Fudan University' ], .... : [ 'Sophomore' , 'Junior' ]), :] .... : In [ 98 ]: res . head () Out [ 98 ]: Name Gender Weight Transfer School Grade Peking University Sophomore Changmei Xu Female 43.0 N Sophomore Xiaopeng Qin Male NaN N Sophomore Mei Xu Female 39.0 N Sophomore Xiaoli Zhou Female 55.0 N Sophomore Peng Han Female 34.0 NaN In [ 99 ]: res . shape Out [ 99 ]: ( 33 , 4 ) \u4e0b\u9762\u7684\u8bed\u53e5\u548c\u4e0a\u9762\u7c7b\u4f3c\uff0c\u4f46\u4ecd\u7136\u4f20\u5165\u7684\u662f\u5143\u7d20\uff08\u8fd9\u91cc\u4e3a\u5143\u7ec4\uff09\u7684\u5217\u8868\uff0c\u5b83\u4eec\u7684\u610f\u4e49\u662f\u4e0d\u540c\u7684\uff0c\u8868\u793a\u7684\u662f\u9009\u51fa\u5317\u5927\u7684\u5927\u4e09\u5b66\u751f\u548c\u590d\u65e6\u7684\u5927\u4e8c\u5b66\u751f\uff1a In [ 100 ]: res = df_multi . loc [[( 'Peking University' , 'Junior' ), ..... : ( 'Fudan University' , 'Sophomore' )]] ..... : In [ 101 ]: res . head () Out [ 101 ]: Name Gender Weight Transfer School Grade Peking University Junior Juan Xu Female NaN N Junior Changjuan You Female 47.0 N Junior Gaoli Xu Female 48.0 N Junior Gaoquan Zhou Male 70.0 N Junior Qiang You Female 56.0 N In [ 102 ]: res . shape Out [ 102 ]: ( 16 , 4 ) 3. IndexSlice \u5bf9\u8c61 \u524d\u9762\u4ecb\u7ecd\u7684\u65b9\u6cd5\uff0c\u5373\u4f7f\u5728\u7d22\u5f15\u4e0d\u91cd\u590d\u7684\u65f6\u5019\uff0c\u4e5f\u53ea\u80fd\u5bf9\u5143\u7ec4\u6574\u4f53\u8fdb\u884c\u5207\u7247\uff0c\u800c\u4e0d\u80fd\u5bf9\u6bcf\u5c42\u8fdb\u884c\u5207\u7247\uff0c\u4e5f\u4e0d\u5141\u8bb8\u5c06\u5207\u7247\u548c\u5e03\u5c14\u5217\u8868\u6df7\u5408\u4f7f\u7528\uff0c\u5f15\u5165 IndexSlice \u5bf9\u8c61\u5c31\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 Slice \u5bf9\u8c61\u4e00\u5171\u6709\u4e24\u79cd\u5f62\u5f0f\uff0c\u7b2c\u4e00\u79cd\u4e3a loc[idx[*,*]] \u578b\uff0c\u7b2c\u4e8c\u79cd\u4e3a loc[idx[*,*],idx[*,*]] \u578b\uff0c\u4e0b\u9762\u5c06\u8fdb\u884c\u4ecb\u7ecd\u3002\u4e3a\u4e86\u65b9\u4fbf\u6f14\u793a\uff0c\u4e0b\u9762\u6784\u9020\u4e00\u4e2a \u7d22\u5f15\u4e0d\u91cd\u590d\u7684 DataFrame \uff1a In [ 103 ]: np . random . seed ( 0 ) In [ 104 ]: L1 , L2 = [ 'A' , 'B' , 'C' ],[ 'a' , 'b' , 'c' ] In [ 105 ]: mul_index1 = pd . MultiIndex . from_product ([ L1 , L2 ], names = ( 'Upper' , 'Lower' )) In [ 106 ]: L3 , L4 = [ 'D' , 'E' , 'F' ],[ 'd' , 'e' , 'f' ] In [ 107 ]: mul_index2 = pd . MultiIndex . from_product ([ L3 , L4 ], names = ( 'Big' , 'Small' )) In [ 108 ]: df_ex = pd . DataFrame ( np . random . randint ( - 9 , 10 ,( 9 , 9 )), ..... : index = mul_index1 , ..... : columns = mul_index2 ) ..... : In [ 109 ]: df_ex Out [ 109 ]: Big D E F Small d e f d e f d e f Upper Lower A a 3 6 - 9 - 6 - 6 - 2 0 9 - 5 b - 3 3 - 8 - 3 - 2 5 8 - 4 4 c - 1 0 7 - 4 6 6 - 9 9 - 6 B a 8 5 - 2 - 9 - 8 0 - 9 1 - 6 b 2 9 - 7 - 9 - 9 - 5 - 4 - 3 - 1 c 8 6 - 5 0 1 - 8 - 8 - 2 0 C a - 6 - 3 2 5 9 - 9 5 - 6 3 b 1 2 - 5 - 3 - 5 6 - 6 3 - 5 c - 1 5 6 - 6 6 4 7 8 - 4 \u4e3a\u4e86\u4f7f\u7528 silce \u5bf9\u8c61\uff0c\u5148\u8981\u8fdb\u884c\u5b9a\u4e49\uff1a In [ 110 ]: idx = pd . IndexSlice \u3010a\u3011 loc[idx[*,*]] \u578b \u8fd9\u79cd\u60c5\u51b5\u5e76\u4e0d\u80fd\u8fdb\u884c\u591a\u5c42\u5206\u522b\u5207\u7247\uff0c\u524d\u4e00\u4e2a * \u8868\u793a\u884c\u7684\u9009\u62e9\uff0c\u540e\u4e00\u4e2a * \u8868\u793a\u5217\u7684\u9009\u62e9\uff0c\u4e0e\u5355\u7eaf\u7684 loc \u662f\u7c7b\u4f3c\u7684\uff1a In [ 111 ]: df_ex . loc [ idx [ 'C' :, ( 'D' , 'f' ):]] Out [ 111 ]: Big D E F Small f d e f d e f Upper Lower C a 2 5 9 - 9 5 - 6 3 b - 5 - 3 - 5 6 - 6 3 - 5 c 6 - 6 6 4 7 8 - 4 \u53e6\u5916\uff0c\u4e5f\u652f\u6301\u5e03\u5c14\u5e8f\u5217\u7684\u7d22\u5f15\uff1a In [ 112 ]: df_ex . loc [ idx [: 'A' , lambda x : x . sum () > 0 ]] # \u5217\u548c\u5927\u4e8e0 Out [ 112 ]: Big D F Small d e e Upper Lower A a 3 6 9 b - 3 3 - 4 c - 1 0 9 \u3010b\u3011 loc[idx[*,*],idx[*,*]] \u578b \u8fd9\u79cd\u60c5\u51b5\u80fd\u591f\u5206\u5c42\u8fdb\u884c\u5207\u7247\uff0c\u524d\u4e00\u4e2a idx \u6307\u4ee3\u7684\u662f\u884c\u7d22\u5f15\uff0c\u540e\u4e00\u4e2a\u662f\u5217\u7d22\u5f15\u3002 In [ 113 ]: df_ex . loc [ idx [: 'A' , 'b' :], idx [ 'E' :, 'e' :]] Out [ 113 ]: Big E F Small e f e f Upper Lower A b - 2 5 - 4 4 c 6 6 9 - 6 \u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b64\u65f6\u4e0d\u652f\u6301\u4f7f\u7528\u51fd\u6570\uff1a In [ 114 ]: try : ..... : df_ex . loc [ idx [: 'A' , lambda x : 'b' ], idx [ 'E' :, 'e' :]] ..... : except Exception as e : ..... : Err_Msg = e ..... : In [ 115 ]: Err_Msg Out [ 115 ]: KeyError ( < function __main__ .< lambda > ( x ) > ) 4. \u591a\u7ea7\u7d22\u5f15\u7684\u6784\u9020 \u524d\u9762\u63d0\u5230\u4e86\u591a\u7ea7\u7d22\u5f15\u8868\u7684\u7ed3\u6784\u548c\u5207\u7247\uff0c\u90a3\u4e48\u9664\u4e86\u4f7f\u7528 set_index \u4e4b\u5916\uff0c\u5982\u4f55\u81ea\u5df1\u6784\u9020\u591a\u7ea7\u7d22\u5f15\u5462\uff1f\u5e38\u7528\u7684\u6709 from_tuples, from_arrays, from_product \u4e09\u79cd\u65b9\u6cd5\uff0c\u5b83\u4eec\u90fd\u662f pd.MultiIndex \u5bf9\u8c61\u4e0b\u7684\u51fd\u6570\u3002 from_tuples \u6307\u6839\u636e\u4f20\u5165\u7531\u5143\u7ec4\u7ec4\u6210\u7684\u5217\u8868\u8fdb\u884c\u6784\u9020\uff1a In [ 116 ]: my_tuple = [( 'a' , 'cat' ),( 'a' , 'dog' ),( 'b' , 'cat' ),( 'b' , 'dog' )] In [ 117 ]: pd . MultiIndex . from_tuples ( my_tuple , names = [ 'First' , 'Second' ]) Out [ 117 ]: MultiIndex ([( 'a' , 'cat' ), ( 'a' , 'dog' ), ( 'b' , 'cat' ), ( 'b' , 'dog' )], names = [ 'First' , 'Second' ]) from_arrays \u6307\u6839\u636e\u4f20\u5165\u5217\u8868\u4e2d\uff0c\u5bf9\u5e94\u5c42\u7684\u5217\u8868\u8fdb\u884c\u6784\u9020\uff1a In [ 118 ]: my_array = [ list ( 'aabb' ), [ 'cat' , 'dog' ] * 2 ] In [ 119 ]: pd . MultiIndex . from_arrays ( my_array , names = [ 'First' , 'Second' ]) Out [ 119 ]: MultiIndex ([( 'a' , 'cat' ), ( 'a' , 'dog' ), ( 'b' , 'cat' ), ( 'b' , 'dog' )], names = [ 'First' , 'Second' ]) from_product \u6307\u6839\u636e\u7ed9\u5b9a\u591a\u4e2a\u5217\u8868\u7684\u7b1b\u5361\u5c14\u79ef\u8fdb\u884c\u6784\u9020\uff1a In [ 120 ]: my_list1 = [ 'a' , 'b' ] In [ 121 ]: my_list2 = [ 'cat' , 'dog' ] In [ 122 ]: pd . MultiIndex . from_product ([ my_list1 , ..... : my_list2 ], ..... : names = [ 'First' , 'Second' ]) ..... : Out [ 122 ]: MultiIndex ([( 'a' , 'cat' ), ( 'a' , 'dog' ), ( 'b' , 'cat' ), ( 'b' , 'dog' )], names = [ 'First' , 'Second' ]) \u4e09\u3001\u7d22\u5f15\u7684\u5e38\u7528\u65b9\u6cd5 1. \u7d22\u5f15\u5c42\u7684\u4ea4\u6362\u548c\u5220\u9664 \u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\u4ea4\u6362\u7684\u8fc7\u7a0b\uff0c\u8fd9\u91cc\u6784\u9020\u4e00\u4e2a\u4e09\u7ea7\u7d22\u5f15\u7684\u4f8b\u5b50\uff1a In [ 123 ]: np . random . seed ( 0 ) In [ 124 ]: L1 , L2 , L3 = [ 'A' , 'B' ],[ 'a' , 'b' ],[ 'alpha' , 'beta' ] In [ 125 ]: mul_index1 = pd . MultiIndex . from_product ([ L1 , L2 , L3 ], ..... : names = ( 'Upper' , 'Lower' , 'Extra' )) ..... : In [ 126 ]: L4 , L5 , L6 = [ 'C' , 'D' ],[ 'c' , 'd' ],[ 'cat' , 'dog' ] In [ 127 ]: mul_index2 = pd . MultiIndex . from_product ([ L4 , L5 , L6 ], ..... : names = ( 'Big' , 'Small' , 'Other' )) ..... : In [ 128 ]: df_ex = pd . DataFrame ( np . random . randint ( - 9 , 10 ,( 8 , 8 )), ..... : index = mul_index1 , ..... : columns = mul_index2 ) ..... : In [ 129 ]: df_ex Out [ 129 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog Upper Lower Extra A a alpha 3 6 - 9 - 6 - 6 - 2 0 9 beta - 5 - 3 3 - 8 - 3 - 2 5 8 b alpha - 4 4 - 1 0 7 - 4 6 6 beta - 9 9 - 6 8 5 - 2 - 9 - 8 B a alpha 0 - 9 1 - 6 2 9 - 7 - 9 beta - 9 - 5 - 4 - 3 - 1 8 6 - 5 b alpha 0 1 - 8 - 8 - 2 0 - 6 - 3 beta 2 5 9 - 9 5 - 6 3 1 \u7d22\u5f15\u5c42\u7684\u4ea4\u6362\u7531 swaplevel \u548c reorder_levels \u5b8c\u6210\uff0c\u524d\u8005\u53ea\u80fd\u4ea4\u6362\u4e24\u4e2a\u5c42\uff0c\u800c\u540e\u8005\u53ef\u4ee5\u4ea4\u6362\u4efb\u610f\u5c42\uff0c\u4e24\u8005\u90fd\u53ef\u4ee5\u6307\u5b9a\u4ea4\u6362\u7684\u662f\u8f74\u662f\u54ea\u4e00\u4e2a\uff0c\u5373\u884c\u7d22\u5f15\u6216\u5217\u7d22\u5f15\uff1a In [ 130 ]: df_ex . swaplevel ( 0 , 2 , axis = 1 ) . head () # \u5217\u7d22\u5f15\u7684\u7b2c\u4e00\u5c42\u548c\u7b2c\u4e09\u5c42\u4ea4\u6362 Out [ 130 ]: Other cat dog cat dog cat dog cat dog Small c c d d c c d d Big C C C C D D D D Upper Lower Extra A a alpha 3 6 - 9 - 6 - 6 - 2 0 9 beta - 5 - 3 3 - 8 - 3 - 2 5 8 b alpha - 4 4 - 1 0 7 - 4 6 6 beta - 9 9 - 6 8 5 - 2 - 9 - 8 B a alpha 0 - 9 1 - 6 2 9 - 7 - 9 In [ 131 ]: df_ex . reorder_levels ([ 2 , 0 , 1 ], axis = 0 ) . head () # \u5217\u8868\u6570\u5b57\u6307\u4ee3\u539f\u6765\u7d22\u5f15\u4e2d\u7684\u5c42 Out [ 131 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog Extra Upper Lower alpha A a 3 6 - 9 - 6 - 6 - 2 0 9 beta A a - 5 - 3 3 - 8 - 3 - 2 5 8 alpha A b - 4 4 - 1 0 7 - 4 6 6 beta A b - 9 9 - 6 8 5 - 2 - 9 - 8 alpha B a 0 - 9 1 - 6 2 9 - 7 - 9 \u8f74\u4e4b\u95f4\u7684\u7d22\u5f15\u4ea4\u6362 \u8fd9\u91cc\u53ea\u6d89\u53ca\u884c\u6216\u5217\u7d22\u5f15\u5185\u90e8\u7684\u4ea4\u6362\uff0c\u4e0d\u540c\u65b9\u5411\u7d22\u5f15\u4e4b\u95f4\u7684\u4ea4\u6362\u5c06\u5728\u7b2c\u4e94\u7ae0\u4e2d\u88ab\u8ba8\u8bba\u3002 \u82e5\u60f3\u8981\u5220\u9664\u67d0\u4e00\u5c42\u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u4f7f\u7528 droplevel \u65b9\u6cd5\uff1a In [ 132 ]: df_ex . droplevel ( 1 , axis = 1 ) Out [ 132 ]: Big C D Other cat dog cat dog cat dog cat dog Upper Lower Extra A a alpha 3 6 - 9 - 6 - 6 - 2 0 9 beta - 5 - 3 3 - 8 - 3 - 2 5 8 b alpha - 4 4 - 1 0 7 - 4 6 6 beta - 9 9 - 6 8 5 - 2 - 9 - 8 B a alpha 0 - 9 1 - 6 2 9 - 7 - 9 beta - 9 - 5 - 4 - 3 - 1 8 6 - 5 b alpha 0 1 - 8 - 8 - 2 0 - 6 - 3 beta 2 5 9 - 9 5 - 6 3 1 In [ 133 ]: df_ex . droplevel ([ 0 , 1 ], axis = 0 ) Out [ 133 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog Extra alpha 3 6 - 9 - 6 - 6 - 2 0 9 beta - 5 - 3 3 - 8 - 3 - 2 5 8 alpha - 4 4 - 1 0 7 - 4 6 6 beta - 9 9 - 6 8 5 - 2 - 9 - 8 alpha 0 - 9 1 - 6 2 9 - 7 - 9 beta - 9 - 5 - 4 - 3 - 1 8 6 - 5 alpha 0 1 - 8 - 8 - 2 0 - 6 - 3 beta 2 5 9 - 9 5 - 6 3 1 2. \u7d22\u5f15\u5c5e\u6027\u7684\u4fee\u6539 \u901a\u8fc7 rename_axis \u53ef\u4ee5\u5bf9\u7d22\u5f15\u5c42\u7684\u540d\u5b57\u8fdb\u884c\u4fee\u6539\uff0c\u5e38\u7528\u7684\u4fee\u6539\u65b9\u5f0f\u662f\u4f20\u5165\u5b57\u5178\u7684\u6620\u5c04\uff1a In [ 134 ]: df_ex . rename_axis ( index = { 'Upper' : 'Changed_row' }, ..... : columns = { 'Other' : 'Changed_Col' }) . head () ..... : Out [ 134 ]: Big C D Small c d c d Changed_Col cat dog cat dog cat dog cat dog Changed_row Lower Extra A a alpha 3 6 - 9 - 6 - 6 - 2 0 9 beta - 5 - 3 3 - 8 - 3 - 2 5 8 b alpha - 4 4 - 1 0 7 - 4 6 6 beta - 9 9 - 6 8 5 - 2 - 9 - 8 B a alpha 0 - 9 1 - 6 2 9 - 7 - 9 \u901a\u8fc7 rename \u53ef\u4ee5\u5bf9\u7d22\u5f15\u7684\u503c\u8fdb\u884c\u4fee\u6539\uff0c\u5982\u679c\u662f\u591a\u7ea7\u7d22\u5f15\u9700\u8981\u6307\u5b9a\u4fee\u6539\u7684\u5c42\u53f7 level \uff1a In [ 135 ]: df_ex . rename ( columns = { 'cat' : 'not_cat' }, ..... : level = 2 ) . head () ..... : Out [ 135 ]: Big C D Small c d c d Other not_cat dog not_cat dog not_cat dog not_cat dog Upper Lower Extra A a alpha 3 6 - 9 - 6 - 6 - 2 0 9 beta - 5 - 3 3 - 8 - 3 - 2 5 8 b alpha - 4 4 - 1 0 7 - 4 6 6 beta - 9 9 - 6 8 5 - 2 - 9 - 8 B a alpha 0 - 9 1 - 6 2 9 - 7 - 9 \u4f20\u5165\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\uff0c\u5176\u8f93\u5165\u503c\u5c31\u662f\u7d22\u5f15\u5143\u7d20\uff1a In [ 136 ]: df_ex . rename ( index = lambda x : str . upper ( x ), ..... : level = 2 ) . head () ..... : Out [ 136 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog Upper Lower Extra A a ALPHA 3 6 - 9 - 6 - 6 - 2 0 9 BETA - 5 - 3 3 - 8 - 3 - 2 5 8 b ALPHA - 4 4 - 1 0 7 - 4 6 6 BETA - 9 9 - 6 8 5 - 2 - 9 - 8 B a ALPHA 0 - 9 1 - 6 2 9 - 7 - 9 \u7ec3\u4e00\u7ec3 \u5c1d\u8bd5\u5728 rename_axis \u4e2d\u4f7f\u7528\u51fd\u6570\u5b8c\u6210\u4e0e\u4f8b\u5b50\u4e2d\u4e00\u6837\u7684\u529f\u80fd\uff0c\u5373\u628a Upper \u548c Other \u5206\u522b\u66ff\u6362\u4e3a Changed_row \u548c Changed_col \u3002 \u5bf9\u4e8e\u6574\u4e2a\u7d22\u5f15\u7684\u5143\u7d20\u66ff\u6362\uff0c\u53ef\u4ee5\u5229\u7528\u8fed\u4ee3\u5668\u5b9e\u73b0\uff1a In [ 137 ]: new_values = iter ( list ( 'abcdefgh' )) In [ 138 ]: df_ex . rename ( index = lambda x : next ( new_values ), ..... : level = 2 ) ..... : Out [ 138 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog Upper Lower Extra A a a 3 6 - 9 - 6 - 6 - 2 0 9 b - 5 - 3 3 - 8 - 3 - 2 5 8 b c - 4 4 - 1 0 7 - 4 6 6 d - 9 9 - 6 8 5 - 2 - 9 - 8 B a e 0 - 9 1 - 6 2 9 - 7 - 9 f - 9 - 5 - 4 - 3 - 1 8 6 - 5 b g 0 1 - 8 - 8 - 2 0 - 6 - 3 h 2 5 9 - 9 5 - 6 3 1 \u82e5\u60f3\u8981\u5bf9\u67d0\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\u8fdb\u884c\u4fee\u6539\uff0c\u5728\u5355\u5c42\u7d22\u5f15\u65f6\u5bb9\u6613\u5b9e\u73b0\uff0c\u5373\u5148\u53d6\u51fa\u7d22\u5f15\u7684 values \u5c5e\u6027\uff0c\u518d\u7ed9\u5bf9\u5f97\u5230\u7684\u5217\u8868\u8fdb\u884c\u4fee\u6539\uff0c\u6700\u540e\u518d\u5bf9 index \u5bf9\u8c61\u91cd\u65b0\u8d4b\u503c\u3002\u4f46\u662f\u5982\u679c\u662f\u591a\u7ea7\u7d22\u5f15\u7684\u8bdd\u5c31\u6709\u4e9b\u9ebb\u70e6\uff0c\u4e00\u4e2a\u89e3\u51b3\u7684\u65b9\u6848\u662f\u5148\u628a\u67d0\u4e00\u5c42\u7d22\u5f15\u4e34\u65f6\u8f6c\u4e3a\u8868\u7684\u5143\u7d20\uff0c\u7136\u540e\u518d\u8fdb\u884c\u4fee\u6539\uff0c\u6700\u540e\u91cd\u65b0\u8bbe\u5b9a\u4e3a\u7d22\u5f15\uff0c\u4e0b\u9762\u4e00\u8282\u5c06\u4ecb\u7ecd\u8fd9\u4e9b\u64cd\u4f5c\u3002 \u53e6\u5916\u4e00\u4e2a\u9700\u8981\u4ecb\u7ecd\u7684\u51fd\u6570\u662f map \uff0c\u5b83\u662f\u5b9a\u4e49\u5728 Index \u4e0a\u7684\u65b9\u6cd5\uff0c\u4e0e\u524d\u9762 rename \u65b9\u6cd5\u4e2d\u5c42\u7684\u51fd\u6570\u5f0f\u7528\u6cd5\u662f\u7c7b\u4f3c\u7684\uff0c\u53ea\u4e0d\u8fc7\u5b83\u4f20\u5165\u7684\u4e0d\u662f\u5c42\u7684\u6807\u91cf\u503c\uff0c\u800c\u662f\u76f4\u63a5\u4f20\u5165\u7d22\u5f15\u7684\u5143\u7ec4\uff0c\u8fd9\u4e3a\u7528\u6237\u8fdb\u884c\u8de8\u5c42\u7684\u4fee\u6539\u63d0\u4f9b\u4e86\u4fbf\u5229\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u7b49\u4ef7\u5730\u5199\u51fa\u4e0a\u9762\u7684\u5b57\u7b26\u4e32\u8f6c\u5927\u5199\u7684\u64cd\u4f5c\uff1a In [ 139 ]: df_temp = df_ex . copy () In [ 140 ]: new_idx = df_temp . index . map ( lambda x : ( x [ 0 ], ..... : x [ 1 ], ..... : str . upper ( x [ 2 ]))) ..... : In [ 141 ]: df_temp . index = new_idx In [ 142 ]: df_temp . head () Out [ 142 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog Upper Lower Extra A a ALPHA 3 6 - 9 - 6 - 6 - 2 0 9 BETA - 5 - 3 3 - 8 - 3 - 2 5 8 b ALPHA - 4 4 - 1 0 7 - 4 6 6 BETA - 9 9 - 6 8 5 - 2 - 9 - 8 B a ALPHA 0 - 9 1 - 6 2 9 - 7 - 9 \u5173\u4e8e map \u7684\u53e6\u4e00\u4e2a\u4f7f\u7528\u65b9\u6cd5\u662f\u5bf9\u591a\u7ea7\u7d22\u5f15\u7684\u538b\u7f29\uff0c\u8fd9\u5728\u7b2c\u56db\u7ae0\u548c\u7b2c\u4e94\u7ae0\u7684\u4e00\u4e9b\u64cd\u4f5c\u4e2d\u662f\u6709\u7528\u7684\uff1a In [ 143 ]: df_temp = df_ex . copy () In [ 144 ]: new_idx = df_temp . index . map ( lambda x : ( x [ 0 ] + '-' + ..... : x [ 1 ] + '-' + ..... : x [ 2 ])) ..... : In [ 145 ]: df_temp . index = new_idx In [ 146 ]: df_temp . head () # \u5355\u5c42\u7d22\u5f15 Out [ 146 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog A - a - alpha 3 6 - 9 - 6 - 6 - 2 0 9 A - a - beta - 5 - 3 3 - 8 - 3 - 2 5 8 A - b - alpha - 4 4 - 1 0 7 - 4 6 6 A - b - beta - 9 9 - 6 8 5 - 2 - 9 - 8 B - a - alpha 0 - 9 1 - 6 2 9 - 7 - 9 \u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u53cd\u5411\u5730\u5c55\u5f00\uff1a In [ 147 ]: new_idx = df_temp . index . map ( lambda x : tuple ( x . split ( '-' ))) In [ 148 ]: df_temp . index = new_idx In [ 149 ]: df_temp . head () # \u4e09\u5c42\u7d22\u5f15 Out [ 149 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog A a alpha 3 6 - 9 - 6 - 6 - 2 0 9 beta - 5 - 3 3 - 8 - 3 - 2 5 8 b alpha - 4 4 - 1 0 7 - 4 6 6 beta - 9 9 - 6 8 5 - 2 - 9 - 8 B a alpha 0 - 9 1 - 6 2 9 - 7 - 9 3. \u7d22\u5f15\u7684\u8bbe\u7f6e\u4e0e\u91cd\u7f6e \u4e3a\u4e86\u8bf4\u660e\u672c\u8282\u7684\u51fd\u6570\uff0c\u4e0b\u9762\u6784\u9020\u4e00\u4e2a\u65b0\u8868\uff1a In [ 150 ]: df_new = pd . DataFrame ({ 'A' : list ( 'aacd' ), ..... : 'B' : list ( 'PQRT' ), ..... : 'C' :[ 1 , 2 , 3 , 4 ]}) ..... : In [ 151 ]: df_new Out [ 151 ]: A B C 0 a P 1 1 a Q 2 2 c R 3 3 d T 4 \u7d22\u5f15\u7684\u8bbe\u7f6e\u53ef\u4ee5\u4f7f\u7528 set_index \u5b8c\u6210\uff0c\u8fd9\u91cc\u7684\u4e3b\u8981\u53c2\u6570\u662f append \uff0c\u8868\u793a\u662f\u5426\u6765\u4fdd\u7559\u539f\u6765\u7684\u7d22\u5f15\uff0c\u76f4\u63a5\u628a\u65b0\u8bbe\u5b9a\u7684\u6dfb\u52a0\u5230\u539f\u7d22\u5f15\u7684\u5185\u5c42\uff1a In [ 152 ]: df_new . set_index ( 'A' ) Out [ 152 ]: B C A a P 1 a Q 2 c R 3 d T 4 In [ 153 ]: df_new . set_index ( 'A' , append = True ) Out [ 153 ]: B C A 0 a P 1 1 a Q 2 2 c R 3 3 d T 4 \u53ef\u4ee5\u540c\u65f6\u6307\u5b9a\u591a\u4e2a\u5217\u4f5c\u4e3a\u7d22\u5f15\uff1a In [ 154 ]: df_new . set_index ([ 'A' , 'B' ]) Out [ 154 ]: C A B a P 1 Q 2 c R 3 d T 4 \u5982\u679c\u60f3\u8981\u6dfb\u52a0\u7d22\u5f15\u7684\u5217\u6ca1\u6709\u51fa\u73b0\u5728\u5176\u4e2d\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u5728\u53c2\u6570\u4e2d\u4f20\u5165\u76f8\u5e94\u7684 Series \uff1a In [ 155 ]: my_index = pd . Series ( list ( 'WXYZ' ), name = 'D' ) In [ 156 ]: df_new = df_new . set_index ([ 'A' , my_index ]) In [ 157 ]: df_new Out [ 157 ]: B C A D a W P 1 X Q 2 c Y R 3 d Z T 4 reset_index \u662f set_index \u7684\u9006\u51fd\u6570\uff0c\u5176\u4e3b\u8981\u53c2\u6570\u662f drop \uff0c\u8868\u793a\u662f\u5426\u8981\u628a\u53bb\u6389\u7684\u7d22\u5f15\u5c42\u4e22\u5f03\uff0c\u800c\u4e0d\u662f\u6dfb\u52a0\u5230\u5217\u4e2d\uff1a In [ 158 ]: df_new . reset_index ([ 'D' ]) Out [ 158 ]: D B C A a W P 1 a X Q 2 c Y R 3 d Z T 4 In [ 159 ]: df_new . reset_index ([ 'D' ], drop = True ) Out [ 159 ]: B C A a P 1 a Q 2 c R 3 d T 4 \u5982\u679c\u91cd\u7f6e\u4e86\u6240\u6709\u7684\u7d22\u5f15\uff0c\u90a3\u4e48 pandas \u4f1a\u76f4\u63a5\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u9ed8\u8ba4\u7d22\u5f15\uff1a In [ 160 ]: df_new . reset_index () Out [ 160 ]: A D B C 0 a W P 1 1 a X Q 2 2 c Y R 3 3 d Z T 4 4. \u7d22\u5f15\u7684\u53d8\u5f62 \u5728\u67d0\u4e9b\u573a\u5408\u4e0b\uff0c\u9700\u8981\u5bf9\u7d22\u5f15\u505a\u4e00\u4e9b\u6269\u5145\u6216\u8005\u5254\u9664\uff0c\u66f4\u5177\u4f53\u5730\u8981\u6c42\u662f\u7ed9\u5b9a\u4e00\u4e2a\u65b0\u7684\u7d22\u5f15\uff0c\u628a\u539f\u8868\u4e2d\u76f8\u5e94\u7684\u7d22\u5f15\u5bf9\u5e94\u5143\u7d20\u586b\u5145\u5230\u65b0\u7d22\u5f15\u6784\u6210\u7684\u8868\u4e2d\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u8868\u4e2d\u7ed9\u51fa\u4e86\u5458\u5de5\u4fe1\u606f\uff0c\u9700\u8981\u91cd\u65b0\u5236\u4f5c\u4e00\u5f20\u65b0\u7684\u8868\uff0c\u8981\u6c42\u589e\u52a0\u4e00\u540d\u5458\u5de5\u7684\u540c\u65f6\u53bb\u6389\u8eab\u9ad8\u5217\u5e76\u589e\u52a0\u6027\u522b\u5217\uff1a In [ 161 ]: df_reindex = pd . DataFrame ({ \"Weight\" :[ 60 , 70 , 80 ], ..... : \"Height\" :[ 176 , 180 , 179 ]}, ..... : index = [ '1001' , '1003' , '1002' ]) ..... : In [ 162 ]: df_reindex Out [ 162 ]: Weight Height 1001 60 176 1003 70 180 1002 80 179 In [ 163 ]: df_reindex . reindex ( index = [ '1001' , '1002' , '1003' , '1004' ], ..... : columns = [ 'Weight' , 'Gender' ]) ..... : Out [ 163 ]: Weight Gender 1001 60.0 NaN 1002 80.0 NaN 1003 70.0 NaN 1004 NaN NaN \u8fd9\u79cd\u9700\u6c42\u5e38\u51fa\u73b0\u5728\u65f6\u95f4\u5e8f\u5217\u7d22\u5f15\u7684\u65f6\u95f4\u70b9\u586b\u5145\u4ee5\u53ca ID \u7f16\u53f7\u7684\u6269\u5145\u3002\u53e6\u5916\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u539f\u6765\u8868\u4e2d\u7684\u6570\u636e\u548c\u65b0\u8868\u4e2d\u4f1a\u6839\u636e\u7d22\u5f15\u81ea\u52a8\u5bf9\u9f50\uff0c\u4f8b\u5982\u539f\u5148\u7684 1002 \u53f7\u4f4d\u7f6e\u5728 1003 \u53f7\u4e4b\u540e\uff0c\u800c\u65b0\u8868\u4e2d\u76f8\u53cd\uff0c\u90a3\u4e48 reindex \u4e2d\u4f1a\u6839\u636e\u5143\u7d20\u5bf9\u9f50\uff0c\u4e0e\u4f4d\u7f6e\u65e0\u5173\u3002 \u8fd8\u6709\u4e00\u4e2a\u4e0e reindex \u529f\u80fd\u7c7b\u4f3c\u7684\u51fd\u6570\u662f reindex_like \uff0c\u5176\u529f\u80fd\u662f\u4eff\u7167\u4f20\u5165\u7684\u8868\u7d22\u5f15\u6765\u8fdb\u884c\u88ab\u8c03\u7528\u8868\u7d22\u5f15\u7684\u53d8\u5f62\u3002\u4f8b\u5982\uff0c\u73b0\u5728\u5df2\u7ecf\u5b58\u5728\u4e00\u5f20\u8868\u5177\u5907\u4e86\u76ee\u6807\u7d22\u5f15\u7684\u6761\u4ef6\uff0c\u90a3\u4e48\u4e0a\u8ff0\u529f\u80fd\u53ef\u91c7\u7528\u4e0b\u8ff0\u4ee3\u7801\u5f97\u5230\uff1a In [ 164 ]: df_existed = pd . DataFrame ( index = [ '1001' , '1002' , '1003' , '1004' ], ..... : columns = [ 'Weight' , 'Gender' ]) ..... : In [ 165 ]: df_reindex . reindex_like ( df_existed ) Out [ 165 ]: Weight Gender 1001 60.0 NaN 1002 80.0 NaN 1003 70.0 NaN 1004 NaN NaN \u56db\u3001\u7d22\u5f15\u8fd0\u7b97 1. \u96c6\u5408\u7684\u8fd0\u7b97\u6cd5\u5219 \u7ecf\u5e38\u4f1a\u6709\u4e00\u79cd\u5229\u7528\u96c6\u5408\u8fd0\u7b97\u6765\u53d6\u51fa\u7b26\u5408\u6761\u4ef6\u884c\u7684\u9700\u6c42\uff0c\u4f8b\u5982\u6709\u4e24\u5f20\u8868 A \u548c B \uff0c\u5b83\u4eec\u7684\u7d22\u5f15\u90fd\u662f\u5458\u5de5\u7f16\u53f7\uff0c\u73b0\u5728\u9700\u8981\u7b5b\u9009\u51fa\u4e24\u8868\u7d22\u5f15\u4ea4\u96c6\u7684\u6240\u6709\u5458\u5de5\u4fe1\u606f\uff0c\u6b64\u65f6\u901a\u8fc7 Index \u4e0a\u7684\u8fd0\u7b97\u64cd\u4f5c\u5c31\u5f88\u5bb9\u6613\u5b9e\u73b0\u3002 \u4e0d\u8fc7\u5728\u6b64\u4e4b\u524d\uff0c\u4e0d\u59a8\u5148\u590d\u4e60\u4e00\u4e0b\u5e38\u89c1\u7684\u56db\u79cd\u96c6\u5408\u8fd0\u7b97\uff1a 2. \u4e00\u822c\u7684\u7d22\u5f15\u8fd0\u7b97 \u7531\u4e8e\u96c6\u5408\u7684\u5143\u7d20\u662f\u4e92\u5f02\u7684\uff0c\u4f46\u662f\u7d22\u5f15\u4e2d\u53ef\u80fd\u6709\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5148\u7528 unique \u53bb\u91cd\u540e\u518d\u8fdb\u884c\u8fd0\u7b97\u3002\u4e0b\u9762\u6784\u9020\u4e24\u5f20\u6700\u4e3a\u7b80\u5355\u7684\u793a\u4f8b\u8868\u8fdb\u884c\u6f14\u793a\uff1a In [ 166 ]: df_set_1 = pd . DataFrame ([[ 0 , 1 ],[ 1 , 2 ],[ 3 , 4 ]], ..... : index = pd . Index ([ 'a' , 'b' , 'a' ], name = 'id1' )) ..... : In [ 167 ]: df_set_2 = pd . DataFrame ([[ 4 , 5 ],[ 2 , 6 ],[ 7 , 1 ]], ..... : index = pd . Index ([ 'b' , 'b' , 'c' ], name = 'id2' )) ..... : In [ 168 ]: id1 , id2 = df_set_1 . index . unique (), df_set_2 . index . unique () In [ 169 ]: id1 . intersection ( id2 ) Out [ 169 ]: Index ([ 'b' ], dtype = 'object' ) In [ 170 ]: id1 . union ( id2 ) Out [ 170 ]: Index ([ 'a' , 'b' , 'c' ], dtype = 'object' ) In [ 171 ]: id1 . difference ( id2 ) Out [ 171 ]: Index ([ 'a' ], dtype = 'object' ) In [ 172 ]: id1 . symmetric_difference ( id2 ) Out [ 172 ]: Index ([ 'a' , 'c' ], dtype = 'object' ) \u82e5\u4e24\u5f20\u8868\u9700\u8981\u505a\u96c6\u5408\u8fd0\u7b97\u7684\u5217\u5e76\u6ca1\u6709\u88ab\u8bbe\u7f6e\u7d22\u5f15\uff0c\u4e00\u79cd\u529e\u6cd5\u662f\u5148\u8f6c\u6210\u7d22\u5f15\uff0c\u8fd0\u7b97\u540e\u518d\u6062\u590d\uff0c\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5229\u7528 isin \u51fd\u6570\uff0c\u4f8b\u5982\u5728\u91cd\u7f6e\u7d22\u5f15\u7684\u7b2c\u4e00\u5f20\u8868\u4e2d\u9009\u51fa id \u5217\u4ea4\u96c6\u7684\u6240\u5728\u884c\uff1a In [ 173 ]: df_set_in_col_1 = df_set_1 . reset_index () In [ 174 ]: df_set_in_col_2 = df_set_2 . reset_index () In [ 175 ]: df_set_in_col_1 Out [ 175 ]: id1 0 1 0 a 0 1 1 b 1 2 2 a 3 4 In [ 176 ]: df_set_in_col_2 Out [ 176 ]: id2 0 1 0 b 4 5 1 b 2 6 2 c 7 1 In [ 177 ]: df_set_in_col_1 [ df_set_in_col_1 . id1 . isin ( df_set_in_col_2 . id2 )] Out [ 177 ]: id1 0 1 1 b 1 2 \u4e94\u3001\u7ec3\u4e60 Ex1\uff1a\u516c\u53f8\u5458\u5de5\u6570\u636e\u96c6 \u73b0\u6709\u4e00\u4efd\u516c\u53f8\u5458\u5de5\u6570\u636e\u96c6\uff1a In [ 178 ]: df = pd . read_csv ( 'data/company.csv' ) In [ 179 ]: df . head ( 3 ) Out [ 179 ]: EmployeeID birthdate_key age city_name department job_title gender 0 1318 1 / 3 / 1954 61 Vancouver Executive CEO M 1 1319 1 / 3 / 1957 58 Vancouver Executive VP Stores F 2 1320 1 / 2 / 1955 60 Vancouver Executive Legal Counsel F \u5206\u522b\u53ea\u4f7f\u7528 query \u548c loc \u9009\u51fa\u5e74\u9f84\u4e0d\u8d85\u8fc7\u56db\u5341\u5c81\u4e14\u5de5\u4f5c\u90e8\u95e8\u4e3a Dairy \u6216 Bakery \u7684\u7537\u6027\u3002 \u9009\u51fa\u5458\u5de5 ID \u53f7 \u4e3a\u5947\u6570\u6240\u5728\u884c\u7684\u7b2c 1\u3001\u7b2c 3 \u548c\u5012\u6570\u7b2c 2 \u5217\u3002 \u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u7d22\u5f15\u64cd\u4f5c\uff1a \u628a\u540e\u4e09\u5217\u8bbe\u4e3a\u7d22\u5f15\u540e\u4ea4\u6362\u5185\u5916\u4e24\u5c42 \u6062\u590d\u4e2d\u95f4\u5c42\u7d22\u5f15 \u4fee\u6539\u5916\u5c42\u7d22\u5f15\u540d\u4e3a Gender \u7528\u4e0b\u5212\u7ebf\u5408\u5e76\u4e24\u5c42\u884c\u7d22\u5f15 \u628a\u884c\u7d22\u5f15\u62c6\u5206\u4e3a\u539f\u72b6\u6001 \u4fee\u6539\u7d22\u5f15\u540d\u4e3a\u539f\u8868\u540d\u79f0 \u6062\u590d\u9ed8\u8ba4\u7d22\u5f15\u5e76\u5c06\u5217\u4fdd\u6301\u4e3a\u539f\u8868\u7684\u76f8\u5bf9\u4f4d\u7f6e Ex2\uff1a\u5de7\u514b\u529b\u6570\u636e\u96c6 \u73b0\u6709\u4e00\u4efd\u5173\u4e8e\u5de7\u514b\u529b\u8bc4\u4ef7\u7684\u6570\u636e\u96c6\uff1a In [ 180 ]: df = pd . read_csv ( 'data/chocolate.csv' ) In [ 181 ]: df . head ( 3 ) Out [ 181 ]: Company Review \\ nDate Cocoa \\ nPercent Company \\ nLocation Rating 0 A . Morin 2016 63 % France 3.75 1 A . Morin 2015 70 % France 2.75 2 A . Morin 2015 70 % France 3.00 \u628a\u5217\u7d22\u5f15\u540d\u4e2d\u7684 \\n \u66ff\u6362\u4e3a\u7a7a\u683c\u3002 \u5de7\u514b\u529b Rating \u8bc4\u5206\u4e3a 1 \u81f3 5\uff0c\u6bcf 0.25 \u5206\u4e00\u6863\uff0c\u8bf7\u9009\u51fa 2.75 \u5206\u53ca\u4ee5\u4e0b\u4e14\u53ef\u53ef\u542b\u91cf Cocoa Percent \u9ad8\u4e8e\u4e2d\u4f4d\u6570\u7684\u6837\u672c\u3002 \u5c06 Review Date \u548c Company Location \u8bbe\u4e3a\u7d22\u5f15\u540e\uff0c\u9009\u51fa Review Date \u5728 2012 \u5e74\u4e4b\u540e\u4e14 Company Location \u4e0d\u5c5e\u4e8e France, Canada, Amsterdam, Belgium \u7684\u6837\u672c\u3002","title":"\u4e09\u3001\u7d22\u5f15"},{"location":"pandas/part3/#_1","text":"","title":"\u4e00\u3001\u7d22\u5f15\u5668"},{"location":"pandas/part3/#1","text":"\u5217\u7d22\u5f15\u662f\u6700\u5e38\u89c1\u7684\u7d22\u5f15\u5f62\u5f0f\uff0c\u4e00\u822c\u901a\u8fc7 [] \u6765\u5b9e\u73b0\u3002\u901a\u8fc7 [\u5217\u540d] \u53ef\u4ee5\u4ece DataFrame \u4e2d\u53d6\u51fa\u76f8\u5e94\u7684\u5217\uff0c\u8fd4\u56de\u503c\u4e3a Series \uff0c\u4f8b\u5982\u4ece\u8868\u4e2d\u53d6\u51fa\u59d3\u540d\u4e00\u5217\uff1a In [ 3 ]: df = pd . read_csv ( 'data/learn_pandas.csv' , ... : usecols = [ 'School' , 'Grade' , 'Name' , 'Gender' , ... : 'Weight' , 'Transfer' ]) ... : In [ 4 ]: df [ 'Name' ] . head () Out [ 4 ]: 0 Gaopeng Yang 1 Changqiang You 2 Mei Sun 3 Xiaojuan Sun 4 Gaojuan You Name : Name , dtype : object \u5982\u679c\u8981\u53d6\u51fa\u591a\u4e2a\u5217\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7 [\u5217\u540d\u7ec4\u6210\u7684\u5217\u8868] \uff0c\u5176\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a DataFrame \uff0c\u4f8b\u5982\u4ece\u8868\u4e2d\u53d6\u51fa\u6027\u522b\u548c\u59d3\u540d\u4e24\u5217\uff1a In [ 5 ]: df [[ 'Gender' , 'Name' ]] . head () Out [ 5 ]: Gender Name 0 Female Gaopeng Yang 1 Male Changqiang You 2 Male Mei Sun 3 Female Xiaojuan Sun 4 Male Gaojuan You \u6b64\u5916\uff0c\u82e5\u8981\u53d6\u51fa\u5355\u5217\uff0c\u4e14\u5217\u540d\u4e2d\u4e0d\u5305\u542b\u7a7a\u683c\uff0c\u5219\u53ef\u4ee5\u7528 .\u5217\u540d \u53d6\u51fa\uff0c\u8fd9\u548c [\u5217\u540d] \u662f\u7b49\u4ef7\u7684\uff1a In [ 6 ]: df . Name . head () Out [ 6 ]: 0 Gaopeng Yang 1 Changqiang You 2 Mei Sun 3 Xiaojuan Sun 4 Gaojuan You Name : Name , dtype : object","title":"1. \u8868\u7684\u5217\u7d22\u5f15"},{"location":"pandas/part3/#2","text":"\u3010a\u3011\u4ee5\u5b57\u7b26\u4e32\u4e3a\u7d22\u5f15\u7684 Series \u5982\u679c\u53d6\u51fa\u5355\u4e2a\u7d22\u5f15\u7684\u5bf9\u5e94\u5143\u7d20\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 [item] \uff0c\u82e5 Series \u53ea\u6709\u5355\u4e2a\u503c\u5bf9\u5e94\uff0c\u5219\u8fd4\u56de\u8fd9\u4e2a\u6807\u91cf\u503c\uff0c\u5982\u679c\u6709\u591a\u4e2a\u503c\u5bf9\u5e94\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a Series \uff1a In [ 7 ]: s = pd . Series ([ 1 , 2 , 3 , 4 , 5 , 6 ], ... : index = [ 'a' , 'b' , 'a' , 'a' , 'a' , 'c' ]) ... : In [ 8 ]: s [ 'a' ] Out [ 8 ]: a 1 a 3 a 4 a 5 dtype : int64 In [ 9 ]: s [ 'b' ] Out [ 9 ]: 2 \u5982\u679c\u53d6\u51fa\u591a\u4e2a\u7d22\u5f15\u7684\u5bf9\u5e94\u5143\u7d20\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 [items\u7684\u5217\u8868] \uff1a In [ 10 ]: s [[ 'c' , 'b' ]] Out [ 10 ]: c 6 b 2 dtype : int64 \u5982\u679c\u60f3\u8981\u53d6\u51fa\u67d0\u4e24\u4e2a\u7d22\u5f15\u4e4b\u95f4\u7684\u5143\u7d20\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a\u7d22\u5f15\u662f\u5728\u6574\u4e2a\u7d22\u5f15\u4e2d\u552f\u4e00\u51fa\u73b0\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u5207\u7247\uff0c\u540c\u65f6\u9700\u8981\u6ce8\u610f\u8fd9\u91cc\u7684\u5207\u7247\u4f1a\u5305\u542b\u4e24\u4e2a\u7aef\u70b9\uff1a In [ 11 ]: s [ 'c' : 'b' : - 2 ] Out [ 11 ]: c 6 a 4 b 2 dtype : int64 \u5982\u679c\u524d\u540e\u7aef\u70b9\u7684\u503c\u5b58\u5728\u91cd\u590d\uff0c\u5373\u975e\u552f\u4e00\u503c\uff0c\u90a3\u4e48\u9700\u8981\u7ecf\u8fc7\u6392\u5e8f\u624d\u80fd\u4f7f\u7528\u5207\u7247\uff1a In [ 12 ]: try : .... : s [ 'a' : 'b' ] .... : except Exception as e : .... : Err_Msg = e .... : In [ 13 ]: Err_Msg Out [ 13 ]: KeyError ( \"Cannot get left slice bound for non-unique label: 'a'\" ) In [ 14 ]: s . sort_index ()[ 'a' : 'b' ] Out [ 14 ]: a 1 a 3 a 4 a 5 b 2 dtype : int64 \u3010b\u3011\u4ee5\u6574\u6570\u4e3a\u7d22\u5f15\u7684 Series \u5728\u4f7f\u7528\u6570\u636e\u7684\u8bfb\u5165\u51fd\u6570\u65f6\uff0c\u5982\u679c\u4e0d\u7279\u522b\u6307\u5b9a\u6240\u5bf9\u5e94\u7684\u5217\u4f5c\u4e3a\u7d22\u5f15\uff0c\u90a3\u4e48\u4f1a\u751f\u6210\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u7d22\u5f15\u4f5c\u4e3a\u9ed8\u8ba4\u7d22\u5f15\u3002\u5f53\u7136\uff0c\u4efb\u610f\u4e00\u7ec4\u7b26\u5408\u957f\u5ea6\u8981\u6c42\u7684\u6574\u6570\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u7d22\u5f15\u3002 \u548c\u5b57\u7b26\u4e32\u4e00\u6837\uff0c\u5982\u679c\u4f7f\u7528 [int] \u6216 [int_list] \uff0c\u5219\u53ef\u4ee5\u53d6\u51fa\u5bf9\u5e94\u7d22\u5f15 \u5143\u7d20 \u7684\u503c\uff1a In [ 15 ]: s = pd . Series ([ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' ], .... : index = [ 1 , 3 , 1 , 2 , 5 , 4 ]) .... : In [ 16 ]: s [ 1 ] Out [ 16 ]: 1 a 1 c dtype : object In [ 17 ]: s [[ 2 , 3 ]] Out [ 17 ]: 2 d 3 b dtype : object \u5982\u679c\u4f7f\u7528\u6574\u6570\u5207\u7247\uff0c\u5219\u4f1a\u53d6\u51fa\u5bf9\u5e94\u7d22\u5f15 \u4f4d\u7f6e \u7684\u503c\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684\u6574\u6570\u5207\u7247\u540c Python \u4e2d\u7684\u5207\u7247\u4e00\u6837\u4e0d\u5305\u542b\u53f3\u7aef\u70b9\uff1a In [ 18 ]: s [ 1 : - 1 : 2 ] Out [ 18 ]: 3 b 2 d dtype : object \u5173\u4e8e\u7d22\u5f15\u7c7b\u578b\u7684\u8bf4\u660e \u5982\u679c\u4e0d\u60f3\u9677\u5165\u9ebb\u70e6\uff0c\u90a3\u4e48\u8bf7\u4e0d\u8981\u628a\u7eaf\u6d6e\u70b9\u4ee5\u53ca\u4efb\u4f55\u6df7\u5408\u7c7b\u578b\uff08\u5b57\u7b26\u4e32\u3001\u6574\u6570\u3001\u6d6e\u70b9\u7c7b\u578b\u7b49\u7684\u6df7\u5408\uff09\u4f5c\u4e3a\u7d22\u5f15\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5728\u5177\u4f53\u7684\u64cd\u4f5c\u65f6\u62a5\u9519\u6216\u8005\u8fd4\u56de\u975e\u9884\u671f\u7684\u7ed3\u679c\uff0c\u5e76\u4e14\u5728\u5b9e\u9645\u7684\u6570\u636e\u5206\u6790\u4e2d\u4e5f\u4e0d\u5b58\u5728\u8fd9\u6837\u505a\u7684\u52a8\u673a\u3002","title":"2. \u5e8f\u5217\u7684\u884c\u7d22\u5f15"},{"location":"pandas/part3/#3-loc","text":"\u524d\u9762\u8bb2\u5230\u4e86\u5bf9 DataFrame \u7684\u5217\u8fdb\u884c\u9009\u53d6\uff0c\u4e0b\u9762\u8981\u8ba8\u8bba\u5176\u884c\u7684\u9009\u53d6\u3002\u5bf9\u4e8e\u8868\u800c\u8a00\uff0c\u6709\u4e24\u79cd\u7d22\u5f15\u5668\uff0c\u4e00\u79cd\u662f\u57fa\u4e8e \u5143\u7d20 \u7684 loc \u7d22\u5f15\u5668\uff0c\u53e6\u4e00\u79cd\u662f\u57fa\u4e8e \u4f4d\u7f6e \u7684 iloc \u7d22\u5f15\u5668\u3002 loc \u7d22\u5f15\u5668\u7684\u4e00\u822c\u5f62\u5f0f\u662f loc[*, *] \uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a * \u4ee3\u8868\u884c\u7684\u9009\u62e9\uff0c\u7b2c\u4e8c\u4e2a * \u4ee3\u8868\u5217\u7684\u9009\u62e9\uff0c\u5982\u679c\u7701\u7565\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5199\u4f5c loc[*] \uff0c\u8fd9\u4e2a * \u662f\u6307\u884c\u7684\u7b5b\u9009\u3002\u5176\u4e2d\uff0c * \u7684\u4f4d\u7f6e\u4e00\u5171\u6709\u4e94\u7c7b\u5408\u6cd5\u5bf9\u8c61\uff0c\u5206\u522b\u662f\uff1a\u5355\u4e2a\u5143\u7d20\u3001\u5143\u7d20\u5217\u8868\u3001\u5143\u7d20\u5207\u7247\u3001\u5e03\u5c14\u5217\u8868\u4ee5\u53ca\u51fd\u6570\uff0c\u4e0b\u9762\u5c06\u4f9d\u6b21\u8bf4\u660e\u3002 \u4e3a\u4e86\u6f14\u793a\u76f8\u5e94\u64cd\u4f5c\uff0c\u5148\u5229\u7528 set_index \u65b9\u6cd5\u628a Name \u5217\u8bbe\u4e3a\u7d22\u5f15\uff0c\u5173\u4e8e\u8be5\u51fd\u6570\u7684\u5176\u4ed6\u7528\u6cd5\u5c06\u5728\u591a\u7ea7\u7d22\u5f15\u4e00\u7ae0\u4ecb\u7ecd\u3002 In [ 19 ]: df_demo = df . set_index ( 'Name' ) In [ 20 ]: df_demo . head () Out [ 20 ]: School Grade Gender Weight Transfer Name Gaopeng Yang Shanghai Jiao Tong University Freshman Female 46.0 N Changqiang You Peking University Freshman Male 70.0 N Mei Sun Shanghai Jiao Tong University Senior Male 89.0 N Xiaojuan Sun Fudan University Sophomore Female 41.0 N Gaojuan You Fudan University Sophomore Male 74.0 N \u3010a\u3011 * \u4e3a\u5355\u4e2a\u5143\u7d20 \u6b64\u65f6\uff0c\u76f4\u63a5\u53d6\u51fa\u76f8\u5e94\u7684\u884c\u6216\u5217\uff0c\u5982\u679c\u8be5\u5143\u7d20\u5728\u7d22\u5f15\u4e2d\u91cd\u590d\u5219\u7ed3\u679c\u4e3a DataFrame \uff0c\u5426\u5219\u4e3a Series \uff1a In [ 21 ]: df_demo . loc [ 'Qiang Sun' ] # \u591a\u4e2a\u4eba\u53eb\u6b64\u540d\u5b57 Out [ 21 ]: School Grade Gender Weight Transfer Name Qiang Sun Tsinghua University Junior Female 53.0 N Qiang Sun Tsinghua University Sophomore Female 40.0 N Qiang Sun Shanghai Jiao Tong University Junior Female NaN N In [ 22 ]: df_demo . loc [ 'Quan Zhao' ] # \u540d\u5b57\u552f\u4e00 Out [ 22 ]: School Shanghai Jiao Tong University Grade Junior Gender Female Weight 53.0 Transfer N Name : Quan Zhao , dtype : object \u4e5f\u53ef\u4ee5\u540c\u65f6\u9009\u62e9\u884c\u548c\u5217\uff1a In [ 23 ]: df_demo . loc [ 'Qiang Sun' , 'School' ] # \u8fd4\u56deSeries Out [ 23 ]: Name Qiang Sun Tsinghua University Qiang Sun Tsinghua University Qiang Sun Shanghai Jiao Tong University Name : School , dtype : object In [ 24 ]: df_demo . loc [ 'Quan Zhao' , 'School' ] # \u8fd4\u56de\u5355\u4e2a\u5143\u7d20 Out [ 24 ]: 'Shanghai Jiao Tong University' \u3010b\u3011 * \u4e3a\u5143\u7d20\u5217\u8868 \u6b64\u65f6\uff0c\u53d6\u51fa\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u503c\u5bf9\u5e94\u7684\u884c\u6216\u5217\uff1a In [ 25 ]: df_demo . loc [[ 'Qiang Sun' , 'Quan Zhao' ], [ 'School' , 'Gender' ]] Out [ 25 ]: School Gender Name Qiang Sun Tsinghua University Female Qiang Sun Tsinghua University Female Qiang Sun Shanghai Jiao Tong University Female Quan Zhao Shanghai Jiao Tong University Female \u3010c\u3011 * \u4e3a\u5207\u7247 \u4e4b\u524d\u7684 Series \u4f7f\u7528\u5b57\u7b26\u4e32\u7d22\u5f15\u65f6\u63d0\u5230\uff0c\u5982\u679c\u662f\u552f\u4e00\u503c\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u5b57\u7b26\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4f7f\u7528\u5207\u7247\uff0c\u5e76\u4e14\u5305\u542b\u4e24\u4e2a\u7aef\u70b9\uff0c\u5982\u679c\u4e0d\u552f\u4e00\u5219\u62a5\u9519\uff1a In [ 26 ]: df_demo . loc [ 'Gaojuan You' : 'Gaoqiang Qian' , 'School' : 'Gender' ] Out [ 26 ]: School Grade Gender Name Gaojuan You Fudan University Sophomore Male Xiaoli Qian Tsinghua University Freshman Female Qiang Chu Shanghai Jiao Tong University Freshman Female Gaoqiang Qian Tsinghua University Junior Female \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c DataFrame \u4f7f\u7528\u6574\u6570\u7d22\u5f15\uff0c\u5176\u4f7f\u7528\u6574\u6570\u5207\u7247\u7684\u65f6\u5019\u548c\u4e0a\u9762\u5b57\u7b26\u4e32\u7d22\u5f15\u7684\u8981\u6c42\u4e00\u81f4\uff0c\u90fd\u662f \u5143\u7d20 \u5207\u7247\uff0c\u5305\u542b\u7aef\u70b9\u4e14\u8d77\u70b9\u3001\u7ec8\u70b9\u4e0d\u5141\u8bb8\u6709\u91cd\u590d\u503c\u3002 In [ 27 ]: df_loc_slice_demo = df_demo . copy () In [ 28 ]: df_loc_slice_demo . index = range ( df_demo . shape [ 0 ], 0 , - 1 ) In [ 29 ]: df_loc_slice_demo . loc [ 5 : 3 ] Out [ 29 ]: School Grade Gender Weight Transfer 5 Fudan University Junior Female 46.0 N 4 Tsinghua University Senior Female 50.0 N 3 Shanghai Jiao Tong University Senior Female 45.0 N In [ 30 ]: df_loc_slice_demo . loc [ 3 : 5 ] # \u6ca1\u6709\u8fd4\u56de\uff0c\u8bf4\u660e\u4e0d\u662f\u6574\u6570\u4f4d\u7f6e\u5207\u7247 Out [ 30 ]: Empty DataFrame Columns : [ School , Grade , Gender , Weight , Transfer ] Index : [] \u3010d\u3011 * \u4e3a\u5e03\u5c14\u5217\u8868 \u5728\u5b9e\u9645\u7684\u6570\u636e\u5904\u7406\u4e2d\uff0c\u6839\u636e\u6761\u4ef6\u6765\u7b5b\u9009\u884c\u662f\u6781\u5176\u5e38\u89c1\u7684\uff0c\u6b64\u5904\u4f20\u5165 loc \u7684\u5e03\u5c14\u5217\u8868\u4e0e DataFrame \u957f\u5ea6\u76f8\u540c\uff0c\u4e14\u5217\u8868\u4e3a True \u7684\u4f4d\u7f6e\u6240\u5bf9\u5e94\u7684\u884c\u4f1a\u88ab\u9009\u4e2d\uff0c False \u5219\u4f1a\u88ab\u5254\u9664\u3002 \u4f8b\u5982\uff0c\u9009\u51fa\u4f53\u91cd\u8d85\u8fc7 70kg \u7684\u5b66\u751f\uff1a In [ 31 ]: df_demo . loc [ df_demo . Weight > 70 ] . head () Out [ 31 ]: School Grade Gender Weight Transfer Name Mei Sun Shanghai Jiao Tong University Senior Male 89.0 N Gaojuan You Fudan University Sophomore Male 74.0 N Xiaopeng Zhou Shanghai Jiao Tong University Freshman Male 74.0 N Xiaofeng Sun Tsinghua University Senior Male 71.0 N Qiang Zheng Shanghai Jiao Tong University Senior Male 87.0 N \u524d\u9762\u6240\u63d0\u5230\u7684\u4f20\u5165\u5143\u7d20\u5217\u8868\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 isin \u65b9\u6cd5\u8fd4\u56de\u7684\u5e03\u5c14\u5217\u8868\u7b49\u4ef7\u5199\u51fa\uff0c\u4f8b\u5982\u9009\u51fa\u6240\u6709\u5927\u4e00\u548c\u5927\u56db\u7684\u540c\u5b66\u4fe1\u606f\uff1a In [ 32 ]: df_demo . loc [ df_demo . Grade . isin ([ 'Freshman' , 'Senior' ])] . head () Out [ 32 ]: School Grade Gender Weight Transfer Name Gaopeng Yang Shanghai Jiao Tong University Freshman Female 46.0 N Changqiang You Peking University Freshman Male 70.0 N Mei Sun Shanghai Jiao Tong University Senior Male 89.0 N Xiaoli Qian Tsinghua University Freshman Female 51.0 N Qiang Chu Shanghai Jiao Tong University Freshman Female 52.0 N \u5bf9\u4e8e\u590d\u5408\u6761\u4ef6\u800c\u8a00\uff0c\u53ef\u4ee5\u7528 |\uff08\u6216\uff09, &\uff08\u4e14\uff09, ~\uff08\u53d6\u53cd\uff09 \u7684\u7ec4\u5408\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982\u9009\u51fa\u590d\u65e6\u5927\u5b66\u4e2d\u4f53\u91cd\u8d85\u8fc7 70kg \u7684\u5927\u56db\u5b66\u751f\uff0c\u6216\u8005\u5317\u5927\u7537\u751f\u4e2d\u4f53\u91cd\u8d85\u8fc7 80kg \u7684\u975e\u5927\u56db\u7684\u5b66\u751f\uff1a In [ 33 ]: condition_1_1 = df_demo . School == 'Fudan University' In [ 34 ]: condition_1_2 = df_demo . Grade == 'Senior' In [ 35 ]: condition_1_3 = df_demo . Weight > 70 In [ 36 ]: condition_1 = condition_1_1 & condition_1_2 & condition_1_3 In [ 37 ]: condition_2_1 = df_demo . School == 'Peking University' In [ 38 ]: condition_2_2 = df_demo . Grade == 'Senior' In [ 39 ]: condition_2_3 = df_demo . Weight > 80 In [ 40 ]: condition_2 = condition_2_1 & ( ~ condition_2_2 ) & condition_2_3 In [ 41 ]: df_demo . loc [ condition_1 | condition_2 ] Out [ 41 ]: School Grade Gender Weight Transfer Name Qiang Han Peking University Freshman Male 87.0 N Chengpeng Zhou Fudan University Senior Male 81.0 N Changpeng Zhao Peking University Freshman Male 83.0 N Chengpeng Qian Fudan University Senior Male 73.0 Y \u7ec3\u4e00\u7ec3 select_dtypes \u662f\u4e00\u4e2a\u5b9e\u7528\u51fd\u6570\uff0c\u5b83\u80fd\u591f\u4ece\u8868\u4e2d\u9009\u51fa\u76f8\u5e94\u7c7b\u578b\u7684\u5217\uff0c\u82e5\u8981\u9009\u51fa\u6240\u6709\u6570\u503c\u578b\u7684\u5217\uff0c\u53ea\u9700\u4f7f\u7528 .select_dtypes('number') \uff0c\u8bf7\u5229\u7528\u5e03\u5c14\u5217\u8868\u9009\u62e9\u7684\u65b9\u6cd5\u7ed3\u5408 DataFrame \u7684 dtypes \u5c5e\u6027\u5728 learn_pandas \u6570\u636e\u96c6\u4e0a\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u3002 \u3010e\u3011 * \u4e3a\u51fd\u6570 \u8fd9\u91cc\u7684\u51fd\u6570\uff0c\u5fc5\u987b\u4ee5\u524d\u9762\u7684\u56db\u79cd\u5408\u6cd5\u5f62\u5f0f\u4e4b\u4e00\u4e3a\u8fd4\u56de\u503c\uff0c\u5e76\u4e14\u51fd\u6570\u7684\u8f93\u5165\u503c\u4e3a DataFrame \u672c\u8eab\u3002\u5047\u8bbe\u4ecd\u7136\u662f\u4e0a\u8ff0\u590d\u5408\u6761\u4ef6\u7b5b\u9009\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u628a\u903b\u8f91\u5199\u5165\u4e00\u4e2a\u51fd\u6570\u4e2d\u518d\u8fd4\u56de\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570 x \u672c\u8d28\u4e0a\u5373\u4e3a df_demo \uff1a In [ 42 ]: def condition ( x ): .... : condition_1_1 = x . School == 'Fudan University' .... : condition_1_2 = x . Grade == 'Senior' .... : condition_1_3 = x . Weight > 70 .... : condition_1 = condition_1_1 & condition_1_2 & condition_1_3 .... : condition_2_1 = x . School == 'Peking University' .... : condition_2_2 = x . Grade == 'Senior' .... : condition_2_3 = x . Weight > 80 .... : condition_2 = condition_2_1 & ( ~ condition_2_2 ) & condition_2_3 .... : result = condition_1 | condition_2 .... : return result .... : In [ 43 ]: df_demo . loc [ condition ] Out [ 43 ]: School Grade Gender Weight Transfer Name Qiang Han Peking University Freshman Male 87.0 N Chengpeng Zhou Fudan University Senior Male 81.0 N Changpeng Zhao Peking University Freshman Male 83.0 N Chengpeng Qian Fudan University Senior Male 73.0 Y \u6b64\u5916\uff0c\u8fd8\u652f\u6301\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\uff0c\u5176\u8fd4\u56de\u503c\u4e5f\u540c\u6837\u5fc5\u987b\u662f\u5148\u524d\u63d0\u5230\u7684\u56db\u79cd\u5f62\u5f0f\u4e4b\u4e00\uff1a In [ 44 ]: df_demo . loc [ lambda x : 'Quan Zhao' , lambda x : 'Gender' ] Out [ 44 ]: 'Female' \u7531\u4e8e\u51fd\u6570\u65e0\u6cd5\u8fd4\u56de\u5982 start: end: step \u7684\u5207\u7247\u5f62\u5f0f\uff0c\u6545\u8fd4\u56de\u5207\u7247\u65f6\u8981\u7528 slice \u5bf9\u8c61\u8fdb\u884c\u5305\u88c5\uff1a In [ 45 ]: df_demo . loc [ lambda x : slice ( 'Gaojuan You' , 'Gaoqiang Qian' )] Out [ 45 ]: School Grade Gender Weight Transfer Name Gaojuan You Fudan University Sophomore Male 74.0 N Xiaoli Qian Tsinghua University Freshman Female 51.0 N Qiang Chu Shanghai Jiao Tong University Freshman Female 52.0 N Gaoqiang Qian Tsinghua University Junior Female 50.0 N \u6700\u540e\u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u5bf9\u4e8e Series \u4e5f\u53ef\u4ee5\u4f7f\u7528 loc \u7d22\u5f15\uff0c\u5176\u9075\u5faa\u7684\u539f\u5219\u4e0e DataFrame \u4e2d\u7528\u4e8e\u884c\u7b5b\u9009\u7684 loc[*] \u5b8c\u5168\u4e00\u81f4\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\u3002 \u4e0d\u8981\u4f7f\u7528\u94fe\u5f0f\u8d4b\u503c \u5728\u5bf9\u8868\u6216\u8005\u5e8f\u5217\u8d4b\u503c\u65f6\uff0c\u5e94\u5f53\u5728\u4f7f\u7528\u4e00\u5c42\u7d22\u5f15\u5668\u540e\u76f4\u63a5\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\uff0c\u8fd9\u6837\u505a\u662f\u7531\u4e8e\u8fdb\u884c\u591a\u6b21\u7d22\u5f15\u540e\u8d4b\u503c\u662f\u8d4b\u5728\u4e34\u65f6\u8fd4\u56de\u7684 copy \u526f\u672c\u4e0a\u7684\uff0c\u800c\u6ca1\u6709\u771f\u6b63\u4fee\u6539\u5143\u7d20\u4ece\u800c\u62a5\u51fa SettingWithCopyWarning \u8b66\u544a\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7ed9\u51fa\u7684\u4f8b\u5b50\uff1a In [ 46 ]: df_chain = pd . DataFrame ([[ 0 , 0 ],[ 1 , 0 ],[ - 1 , 0 ]], columns = list ( 'AB' )) In [ 47 ]: df_chain Out [ 47 ]: A B 0 0 0 1 1 0 2 - 1 0 In [ 48 ]: import warnings In [ 49 ]: with warnings . catch_warnings (): .... : warnings . filterwarnings ( 'error' ) .... : try : .... : df_chain [ df_chain . A != 0 ] . B = 1 # \u4f7f\u7528\u65b9\u62ec\u53f7\u5217\u7d22\u5f15\u540e\uff0c\u518d\u4f7f\u7528\u70b9\u7684\u5217\u7d22\u5f15 .... : except Warning as w : .... : Warning_Msg = w .... : In [ 50 ]: print ( Warning_Msg ) A value is trying to be set on a copy of a slice from a DataFrame . Try using . loc [ row_indexer , col_indexer ] = value instead See the caveats in the documentation : https : // pandas . pydata . org / pandas - docs / stable / user_guide / indexing . html #returning-a-view-versus-a-copy In [ 51 ]: df_chain Out [ 51 ]: A B 0 0 0 1 1 0 2 - 1 0 In [ 52 ]: df_chain . loc [ df_chain . A != 0 , 'B' ] = 1 In [ 53 ]: df_chain Out [ 53 ]: A B 0 0 0 1 1 1 2 - 1 1","title":"3. loc \u7d22\u5f15\u5668"},{"location":"pandas/part3/#4-iloc","text":"iloc \u7684\u4f7f\u7528\u4e0e loc \u5b8c\u5168\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u662f\u9488\u5bf9\u4f4d\u7f6e\u8fdb\u884c\u7b5b\u9009\uff0c\u5728\u76f8\u5e94\u7684 * \u4f4d\u7f6e\u5904\u4e00\u5171\u4e5f\u6709\u4e94\u7c7b\u5408\u6cd5\u5bf9\u8c61\uff0c\u5206\u522b\u662f\uff1a\u6574\u6570\u3001\u6574\u6570\u5217\u8868\u3001\u6574\u6570\u5207\u7247\u3001\u5e03\u5c14\u5217\u8868\u4ee5\u53ca\u51fd\u6570\uff0c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5fc5\u987b\u662f\u524d\u9762\u7684\u56db\u7c7b\u5408\u6cd5\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\uff0c\u5176\u8f93\u5165\u540c\u6837\u4e5f\u4e3a DataFrame \u672c\u8eab\u3002 In [ 54 ]: df_demo . iloc [ 1 , 1 ] # \u7b2c\u4e8c\u884c\u7b2c\u4e8c\u5217 Out [ 54 ]: 'Freshman' In [ 55 ]: df_demo . iloc [[ 0 , 1 ], [ 0 , 1 ]] # \u524d\u4e24\u884c\u524d\u4e24\u5217 Out [ 55 ]: School Grade Name Gaopeng Yang Shanghai Jiao Tong University Freshman Changqiang You Peking University Freshman In [ 56 ]: df_demo . iloc [ 1 : 4 , 2 : 4 ] # \u5207\u7247\u4e0d\u5305\u542b\u7ed3\u675f\u7aef\u70b9 Out [ 56 ]: Gender Weight Name Changqiang You Male 70.0 Mei Sun Male 89.0 Xiaojuan Sun Female 41.0 In [ 57 ]: df_demo . iloc [ lambda x : slice ( 1 , 4 )] # \u4f20\u5165\u5207\u7247\u4e3a\u8fd4\u56de\u503c\u7684\u51fd\u6570 Out [ 57 ]: School Grade Gender Weight Transfer Name Changqiang You Peking University Freshman Male 70.0 N Mei Sun Shanghai Jiao Tong University Senior Male 89.0 N Xiaojuan Sun Fudan University Sophomore Female 41.0 N \u5728\u4f7f\u7528\u5e03\u5c14\u5217\u8868\u7684\u65f6\u5019\u8981\u7279\u522b\u6ce8\u610f\uff0c\u4e0d\u80fd\u4f20\u5165 Series \u800c\u5fc5\u987b\u4f20\u5165\u5e8f\u5217\u7684 values \uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002\u56e0\u6b64\uff0c\u5728\u4f7f\u7528\u5e03\u5c14\u7b5b\u9009\u7684\u65f6\u5019\u8fd8\u662f\u5e94\u5f53\u4f18\u5148\u8003\u8651 loc \u7684\u65b9\u5f0f\u3002 \u4f8b\u5982\uff0c\u9009\u51fa\u4f53\u91cd\u8d85\u8fc7 80kg \u7684\u5b66\u751f\uff1a In [ 58 ]: df_demo . iloc [( df_demo . Weight > 80 ) . values ] . head () Out [ 58 ]: School Grade Gender Weight Transfer Name Mei Sun Shanghai Jiao Tong University Senior Male 89.0 N Qiang Zheng Shanghai Jiao Tong University Senior Male 87.0 N Qiang Han Peking University Freshman Male 87.0 N Chengpeng Zhou Fudan University Senior Male 81.0 N Feng Han Shanghai Jiao Tong University Sophomore Male 82.0 N \u5bf9 Series \u800c\u8a00\u540c\u6837\u4e5f\u53ef\u4ee5\u901a\u8fc7 iloc \u8fd4\u56de\u76f8\u5e94\u4f4d\u7f6e\u7684\u503c\u6216\u5b50\u5e8f\u5217\uff1a In [ 59 ]: df_demo . School . iloc [ 1 ] Out [ 59 ]: 'Peking University' In [ 60 ]: df_demo . School . iloc [ 1 : 5 : 2 ] Out [ 60 ]: Name Changqiang You Peking University Xiaojuan Sun Fudan University Name : School , dtype : object","title":"4. iloc \u7d22\u5f15\u5668"},{"location":"pandas/part3/#5-query","text":"\u5728 pandas \u4e2d\uff0c\u652f\u6301\u628a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u67e5\u8be2\u8868\u8fbe\u5f0f\u4f20\u5165 query \u65b9\u6cd5\u6765\u67e5\u8be2\u6570\u636e\uff0c\u5176\u8868\u8fbe\u5f0f\u7684\u6267\u884c\u7ed3\u679c\u5fc5\u987b\u8fd4\u56de\u5e03\u5c14\u5217\u8868\u3002\u5728\u8fdb\u884c\u590d\u6742\u7d22\u5f15\u65f6\uff0c\u7531\u4e8e\u8fd9\u79cd\u68c0\u7d22\u65b9\u5f0f\u65e0\u9700\u50cf\u666e\u901a\u65b9\u6cd5\u4e00\u6837\u91cd\u590d\u4f7f\u7528 DataFrame \u7684\u540d\u5b57\u6765\u5f15\u7528\u5217\u540d\uff0c\u4e00\u822c\u800c\u8a00\u4f1a\u4f7f\u4ee3\u7801\u957f\u5ea6\u5728\u4e0d\u964d\u4f4e\u53ef\u8bfb\u6027\u7684\u524d\u63d0\u4e0b\u6709\u6240\u51cf\u5c11\u3002 \u4f8b\u5982\uff0c\u5c06 loc \u4e00\u8282\u4e2d\u7684\u590d\u5408\u6761\u4ef6\u67e5\u8be2\u4f8b\u5b50\u53ef\u4ee5\u5982\u4e0b\u6539\u5199\uff1a In [ 61 ]: df . query ( '((School == \"Fudan University\")&' .... : ' (Grade == \"Senior\")&' .... : ' (Weight > 70))|' .... : '((School == \"Peking University\")&' .... : ' (Grade != \"Senior\")&' .... : ' (Weight > 80))' ) .... : Out [ 61 ]: School Grade Name Gender Weight Transfer 38 Peking University Freshman Qiang Han Male 87.0 N 66 Fudan University Senior Chengpeng Zhou Male 81.0 N 99 Peking University Freshman Changpeng Zhao Male 83.0 N 131 Fudan University Senior Chengpeng Qian Male 73.0 Y \u5728 query \u8868\u8fbe\u5f0f\u4e2d\uff0c\u5e2e\u7528\u6237\u6ce8\u518c\u4e86\u6240\u6709\u6765\u81ea DataFrame \u7684\u5217\u540d\uff0c\u6240\u6709\u5c5e\u4e8e\u8be5 Series \u7684\u65b9\u6cd5\u90fd\u53ef\u4ee5\u88ab\u8c03\u7528\uff0c\u548c\u6b63\u5e38\u7684\u51fd\u6570\u8c03\u7528\u5e76\u6ca1\u6709\u533a\u522b\uff0c\u4f8b\u5982\u67e5\u8be2\u4f53\u91cd\u8d85\u8fc7\u5747\u503c\u7684\u5b66\u751f\uff1a In [ 62 ]: df . query ( 'Weight > Weight.mean()' ) . head () Out [ 62 ]: School Grade Name Gender Weight Transfer 1 Peking University Freshman Changqiang You Male 70.0 N 2 Shanghai Jiao Tong University Senior Mei Sun Male 89.0 N 4 Fudan University Sophomore Gaojuan You Male 74.0 N 10 Shanghai Jiao Tong University Freshman Xiaopeng Zhou Male 74.0 N 14 Tsinghua University Senior Xiaomei Zhou Female 57.0 N query \u4e2d\u5f15\u7528\u5e26\u7a7a\u683c\u7684\u5217\u540d \u5bf9\u4e8e\u542b\u6709\u7a7a\u683c\u7684\u5217\u540d\uff0c\u9700\u8981\u4f7f\u7528 `col name` \u7684\u65b9\u5f0f\u8fdb\u884c\u5f15\u7528\u3002 \u540c\u65f6\uff0c\u5728 query \u4e2d\u8fd8\u6ce8\u518c\u4e86\u82e5\u5e72\u82f1\u8bed\u7684\u5b57\u9762\u7528\u6cd5\uff0c\u5e2e\u52a9\u63d0\u9ad8\u53ef\u8bfb\u6027\uff0c\u4f8b\u5982\uff1a or, and, or, in, not in \u3002\u4f8b\u5982\uff0c\u7b5b\u9009\u51fa\u7537\u751f\u4e2d\u4e0d\u662f\u5927\u4e00\u5927\u4e8c\u7684\u5b66\u751f\uff1a In [ 63 ]: df . query ( '(Grade not in [\"Freshman\", \"Sophomore\"]) and' .... : '(Gender == \"Male\")' ) . head () .... : Out [ 63 ]: School Grade Name Gender Weight Transfer 2 Shanghai Jiao Tong University Senior Mei Sun Male 89.0 N 16 Tsinghua University Junior Xiaoqiang Qin Male 68.0 N 17 Tsinghua University Junior Peng Wang Male 65.0 N 18 Tsinghua University Senior Xiaofeng Sun Male 71.0 N 21 Shanghai Jiao Tong University Senior Xiaopeng Shen Male 62.0 NaN \u6b64\u5916\uff0c\u5728\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u4e0e\u5217\u8868\u7684\u6bd4\u8f83\u65f6\uff0c == \u548c != \u5206\u522b\u8868\u793a\u5143\u7d20\u51fa\u73b0\u5728\u5217\u8868\u548c\u6ca1\u6709\u51fa\u73b0\u5728\u5217\u8868\uff0c\u7b49\u4ef7\u4e8e in \u548c not in \uff0c\u4f8b\u5982\u67e5\u8be2\u6240\u6709\u5927\u4e09\u548c\u5927\u56db\u7684\u5b66\u751f\uff1a In [ 64 ]: df . query ( 'Grade == [\"Junior\", \"Senior\"]' ) . head () Out [ 64 ]: School Grade Name Gender Weight Transfer 2 Shanghai Jiao Tong University Senior Mei Sun Male 89.0 N 7 Tsinghua University Junior Gaoqiang Qian Female 50.0 N 9 Peking University Junior Juan Xu Female NaN N 11 Tsinghua University Junior Xiaoquan Lv Female 43.0 N 12 Shanghai Jiao Tong University Senior Peng You Female 48.0 NaN \u5bf9\u4e8e query \u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u8981\u5f15\u7528\u5916\u90e8\u53d8\u91cf\uff0c\u53ea\u9700\u5728\u53d8\u91cf\u540d\u524d\u52a0 @ \u7b26\u53f7\u3002\u4f8b\u5982\uff0c\u53d6\u51fa\u4f53\u91cd\u4f4d\u4e8e 70kg \u5230 80kg \u4e4b\u95f4\u7684\u5b66\u751f\uff1a In [ 65 ]: low , high = 70 , 80 In [ 66 ]: df . query ( '(Weight >= @low) & (Weight <= @high)' ) . head () Out [ 66 ]: School Grade Name Gender Weight Transfer 1 Peking University Freshman Changqiang You Male 70.0 N 4 Fudan University Sophomore Gaojuan You Male 74.0 N 10 Shanghai Jiao Tong University Freshman Xiaopeng Zhou Male 74.0 N 18 Tsinghua University Senior Xiaofeng Sun Male 71.0 N 35 Peking University Freshman Gaoli Zhao Male 78.0 N","title":"5. query \u65b9\u6cd5"},{"location":"pandas/part3/#6","text":"\u5982\u679c\u628a DataFrame \u7684\u6bcf\u4e00\u884c\u770b\u4f5c\u4e00\u4e2a\u6837\u672c\uff0c\u6216\u628a\u6bcf\u4e00\u5217\u770b\u4f5c\u4e00\u4e2a\u7279\u5f81\uff0c\u518d\u628a\u6574\u4e2a DataFrame \u770b\u4f5c\u603b\u4f53\uff0c\u60f3\u8981\u5bf9\u6837\u672c\u6216\u7279\u5f81\u8fdb\u884c\u968f\u673a\u62bd\u6837\u5c31\u53ef\u4ee5\u7528 sample \u51fd\u6570\u3002\u6709\u65f6\u5728\u62ff\u5230\u5927\u578b\u6570\u636e\u96c6\u540e\uff0c\u60f3\u8981\u5bf9\u7edf\u8ba1\u7279\u5f81\u8fdb\u884c\u8ba1\u7b97\u6765\u4e86\u89e3\u6570\u636e\u7684\u5927\u81f4\u5206\u5e03\uff0c\u4f46\u662f\u8fd9\u5f88\u8d39\u65f6\u95f4\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u8bb8\u591a\u7edf\u8ba1\u7279\u5f81\u5728\u7b49\u6982\u7387\u4e0d\u653e\u56de\u7684\u7b80\u5355\u968f\u673a\u62bd\u6837\u6761\u4ef6\u4e0b\uff0c\u662f\u603b\u4f53\u7edf\u8ba1\u7279\u5f81\u7684\u65e0\u504f\u4f30\u8ba1\uff0c\u6bd4\u5982\u6837\u672c\u5747\u503c\u548c\u603b\u4f53\u5747\u503c\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5148\u4ece\u6574\u5f20\u8868\u4e2d\u62bd\u51fa\u4e00\u90e8\u5206\u6765\u505a\u8fd1\u4f3c\u4f30\u8ba1\u3002 sample \u51fd\u6570\u4e2d\u7684\u4e3b\u8981\u53c2\u6570\u4e3a n, axis, frac, replace, weights \uff0c\u524d\u4e09\u4e2a\u5206\u522b\u662f\u6307\u62bd\u6837\u6570\u91cf\u3001\u62bd\u6837\u7684\u65b9\u5411\uff080 \u4e3a\u884c\u30011 \u4e3a\u5217\uff09\u548c\u62bd\u6837\u6bd4\u4f8b\uff080.3 \u5219\u4e3a\u4ece\u603b\u4f53\u4e2d\u62bd\u51fa 30% \u7684\u6837\u672c\uff09\u3002 replace \u548c weights \u5206\u522b\u662f\u6307\u662f\u5426\u653e\u56de\u548c\u6bcf\u4e2a\u6837\u672c\u7684\u62bd\u6837\u76f8\u5bf9\u6982\u7387\uff0c\u5f53 replace = True \u5219\u8868\u793a\u6709\u653e\u56de\u62bd\u6837\u3002\u4f8b\u5982\uff0c\u5bf9\u4e0b\u9762\u6784\u9020\u7684 df_sample \u4ee5 value \u503c\u7684\u76f8\u5bf9\u5927\u5c0f\u4e3a\u62bd\u6837\u6982\u7387\u8fdb\u884c\u6709\u653e\u56de\u62bd\u6837\uff0c\u62bd\u6837\u6570\u91cf\u4e3a 3\u3002 In [ 67 ]: df_sample = pd . DataFrame ({ 'id' : list ( 'abcde' ), .... : 'value' : [ 1 , 2 , 3 , 4 , 90 ]}) .... : In [ 68 ]: df_sample Out [ 68 ]: id value 0 a 1 1 b 2 2 c 3 3 d 4 4 e 90 In [ 69 ]: df_sample . sample ( 3 , replace = True , weights = df_sample . value ) Out [ 69 ]: id value 4 e 90 4 e 90 4 e 90","title":"6. \u968f\u673a\u62bd\u6837"},{"location":"pandas/part3/#_2","text":"","title":"\u4e8c\u3001\u591a\u7ea7\u7d22\u5f15"},{"location":"pandas/part3/#1_1","text":"\u4e3a\u4e86\u66f4\u52a0\u6e05\u6670\u5730\u8bf4\u660e\u5177\u6709\u591a\u7ea7\u7d22\u5f15\u7684 DataFrame \u7ed3\u6784\uff0c\u4e0b\u9762\u65b0\u6784\u9020\u4e00\u5f20\u8868\uff0c\u8bfb\u8005\u53ef\u4ee5\u5ffd\u7565\u8fd9\u91cc\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5b83\u4eec\u5c06\u4f1a\u5728\u7b2c 4 \u5c0f\u8282\u88ab\u66f4\u8be6\u7ec6\u5730\u8bb2\u89e3\u3002 In [ 70 ]: np . random . seed ( 0 ) In [ 71 ]: multi_index = pd . MultiIndex . from_product ([ list ( 'ABCD' ), .... : df . Gender . unique ()], names = ( 'School' , 'Gender' )) .... : In [ 72 ]: multi_column = pd . MultiIndex . from_product ([[ 'Height' , 'Weight' ], .... : df . Grade . unique ()], names = ( 'Indicator' , 'Grade' )) .... : In [ 73 ]: df_multi = pd . DataFrame ( np . c_ [( np . random . randn ( 8 , 4 ) * 5 + 163 ) . tolist (), .... : ( np . random . randn ( 8 , 4 ) * 5 + 65 ) . tolist ()], .... : index = multi_index , .... : columns = multi_column ) . round ( 1 ) .... : In [ 74 ]: df_multi Out [ 74 ]: Indicator Height Weight Grade Freshman Senior Sophomore Junior Freshman Senior Sophomore Junior School Gender A Female 171.8 165.0 167.9 174.2 60.6 55.1 63.3 65.8 Male 172.3 158.1 167.8 162.2 71.2 71.0 63.1 63.5 B Female 162.5 165.1 163.7 170.3 59.8 57.9 56.5 74.8 Male 166.8 163.6 165.2 164.7 62.5 62.8 58.7 68.9 C Female 170.5 162.0 164.6 158.7 56.9 63.9 60.5 66.9 Male 150.2 166.3 167.3 159.3 62.4 59.1 64.9 67.1 D Female 174.3 155.7 163.2 162.1 65.3 66.5 61.8 63.2 Male 170.7 170.3 163.8 164.9 61.6 63.2 60.9 56.4 \u4e0b\u56fe\u901a\u8fc7\u989c\u8272\u533a\u5206\uff0c\u6807\u8bb0\u4e86 DataFrame \u7684\u7ed3\u6784\u3002\u4e0e\u5355\u5c42\u7d22\u5f15\u7684\u8868\u4e00\u6837\uff0c\u5177\u5907\u5143\u7d20\u503c\u3001\u884c\u7d22\u5f15\u548c\u5217\u7d22\u5f15\u4e09\u4e2a\u90e8\u5206\u3002\u5176\u4e2d\uff0c\u8fd9\u91cc\u7684\u884c\u7d22\u5f15\u548c\u5217\u7d22\u5f15\u90fd\u662f MultiIndex \u7c7b\u578b\uff0c\u53ea\u4e0d\u8fc7 \u7d22\u5f15\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u662f\u5143\u7ec4 \u800c\u4e0d\u662f\u5355\u5c42\u7d22\u5f15\u4e2d\u7684\u6807\u91cf\u3002\u4f8b\u5982\uff0c\u884c\u7d22\u5f15\u7684\u7b2c\u56db\u4e2a\u5143\u7d20\u4e3a (\"B\", \"Male\") \uff0c\u5217\u7d22\u5f15\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3a (\"Height\", \"Senior\") \uff0c\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0c\u5916\u5c42\u8fde\u7eed\u51fa\u73b0\u76f8\u540c\u7684\u503c\u65f6\uff0c\u7b2c\u4e00\u6b21\u4e4b\u540e\u51fa\u73b0\u7684\u4f1a\u88ab\u9690\u85cf\u663e\u793a\uff0c\u4f7f\u7ed3\u679c\u7684\u53ef\u8bfb\u6027\u589e\u5f3a\u3002 \u4e0e\u5355\u5c42\u7d22\u5f15\u7c7b\u4f3c\uff0c MultiIndex \u4e5f\u5177\u6709\u540d\u5b57\u5c5e\u6027\uff0c\u56fe\u4e2d\u7684 School \u548c Gender \u5206\u522b\u5bf9\u5e94\u4e86\u8868\u7684\u7b2c\u4e00\u5c42\u548c\u7b2c\u4e8c\u5c42\u884c\u7d22\u5f15\u7684\u540d\u5b57\uff0c Indicator \u548c Grade \u5206\u522b\u5bf9\u5e94\u4e86\u7b2c\u4e00\u5c42\u548c\u7b2c\u4e8c\u5c42\u5217\u7d22\u5f15\u7684\u540d\u5b57\u3002 \u7d22\u5f15\u7684\u540d\u5b57\u548c\u503c\u5c5e\u6027\u5206\u522b\u53ef\u4ee5\u901a\u8fc7 names \u548c values \u83b7\u5f97\uff1a In [ 75 ]: df_multi . index . names Out [ 75 ]: FrozenList ([ 'School' , 'Gender' ]) In [ 76 ]: df_multi . columns . names Out [ 76 ]: FrozenList ([ 'Indicator' , 'Grade' ]) In [ 77 ]: df_multi . index . values Out [ 77 ]: array ([( 'A' , 'Female' ), ( 'A' , 'Male' ), ( 'B' , 'Female' ), ( 'B' , 'Male' ), ( 'C' , 'Female' ), ( 'C' , 'Male' ), ( 'D' , 'Female' ), ( 'D' , 'Male' )], dtype = object ) In [ 78 ]: df_multi . columns . values Out [ 78 ]: array ([( 'Height' , 'Freshman' ), ( 'Height' , 'Senior' ), ( 'Height' , 'Sophomore' ), ( 'Height' , 'Junior' ), ( 'Weight' , 'Freshman' ), ( 'Weight' , 'Senior' ), ( 'Weight' , 'Sophomore' ), ( 'Weight' , 'Junior' )], dtype = object ) \u5982\u679c\u60f3\u8981\u5f97\u5230\u67d0\u4e00\u5c42\u7684\u7d22\u5f15\uff0c\u5219\u9700\u8981\u901a\u8fc7 get_level_values \u83b7\u5f97\uff1a In [ 79 ]: df_multi . index . get_level_values ( 0 ) Out [ 79 ]: Index ([ 'A' , 'A' , 'B' , 'B' , 'C' , 'C' , 'D' , 'D' ], dtype = 'object' , name = 'School' ) \u4f46\u5bf9\u4e8e\u7d22\u5f15\u800c\u8a00\uff0c\u65e0\u8bba\u662f\u5355\u5c42\u8fd8\u662f\u591a\u5c42\uff0c\u7528\u6237\u90fd\u65e0\u6cd5\u901a\u8fc7 index_obj[0] = item \u7684\u65b9\u5f0f\u6765\u4fee\u6539\u5143\u7d20\uff0c\u4e5f\u4e0d\u80fd\u901a\u8fc7 index_name[0] = new_name \u7684\u65b9\u5f0f\u6765\u4fee\u6539\u540d\u5b57\uff0c\u5173\u4e8e\u5982\u4f55\u4fee\u6539\u8fd9\u4e9b\u5c5e\u6027\u7684\u8bdd\u9898\u5c06\u5728\u7b2c\u4e09\u8282\u88ab\u8ba8\u8bba\u3002","title":"1. \u591a\u7ea7\u7d22\u5f15\u53ca\u5176\u8868\u7684\u7ed3\u6784"},{"location":"pandas/part3/#2-loc","text":"\u719f\u6089\u4e86\u7ed3\u6784\u540e\uff0c\u73b0\u5728\u56de\u5230\u539f\u8868\uff0c\u5c06\u5b66\u6821\u548c\u5e74\u7ea7\u8bbe\u4e3a\u7d22\u5f15\uff0c\u6b64\u65f6\u7684\u884c\u4e3a\u591a\u7ea7\u7d22\u5f15\uff0c\u5217\u4e3a\u5355\u7ea7\u7d22\u5f15\uff0c\u7531\u4e8e\u9ed8\u8ba4\u72b6\u6001\u7684\u5217\u7d22\u5f15\u4e0d\u542b\u540d\u5b57\uff0c\u56e0\u6b64\u5bf9\u5e94\u4e8e\u521a\u521a\u56fe\u4e2d Indicator \u548c Grade \u7684\u7d22\u5f15\u540d\u4f4d\u7f6e\u662f\u7a7a\u7f3a\u7684\u3002 In [ 80 ]: df_multi = df . set_index ([ 'School' , 'Grade' ]) In [ 81 ]: df_multi . head () Out [ 81 ]: Name Gender Weight Transfer School Grade Shanghai Jiao Tong University Freshman Gaopeng Yang Female 46.0 N Peking University Freshman Changqiang You Male 70.0 N Shanghai Jiao Tong University Senior Mei Sun Male 89.0 N Fudan University Sophomore Xiaojuan Sun Female 41.0 N Sophomore Gaojuan You Male 74.0 N \u7531\u4e8e\u591a\u7ea7\u7d22\u5f15\u4e2d\u7684\u5355\u4e2a\u5143\u7d20\u4ee5\u5143\u7ec4\u4e3a\u5355\u4f4d\uff0c\u56e0\u6b64\u4e4b\u524d\u5728\u7b2c\u4e00\u8282\u4ecb\u7ecd\u7684 loc \u548c iloc \u65b9\u6cd5\u5b8c\u5168\u53ef\u4ee5\u7167\u642c\uff0c\u53ea\u9700\u628a\u6807\u91cf\u7684\u4f4d\u7f6e\u66ff\u6362\u6210\u5bf9\u5e94\u7684\u5143\u7ec4\u3002 \u5f53\u4f20\u5165\u5143\u7ec4\u5217\u8868\u6216\u5355\u4e2a\u5143\u7ec4\u6216\u8fd4\u56de\u524d\u4e8c\u8005\u7684\u51fd\u6570\u65f6\uff0c\u9700\u8981\u5148\u8fdb\u884c\u7d22\u5f15\u6392\u5e8f\u4ee5\u907f\u514d\u6027\u80fd\u8b66\u544a\uff1a In [ 82 ]: with warnings . catch_warnings (): .... : warnings . filterwarnings ( 'error' ) .... : try : .... : df_multi . loc [( 'Fudan University' , 'Junior' )] . head () .... : except Warning as w : .... : Warning_Msg = w .... : In [ 83 ]: Warning_Msg Out [ 83 ]: pandas . errors . PerformanceWarning ( 'indexing past lexsort depth may impact performance.' ) In [ 84 ]: df_sorted = df_multi . sort_index () In [ 85 ]: df_sorted . loc [( 'Fudan University' , 'Junior' )] . head () Out [ 85 ]: Name Gender Weight Transfer School Grade Fudan University Junior Yanli You Female 48.0 N Junior Chunqiang Chu Male 72.0 N Junior Changfeng Lv Male 76.0 N Junior Yanjuan Lv Female 49.0 NaN Junior Gaoqiang Zhou Female 43.0 N In [ 86 ]: df_sorted . loc [[( 'Fudan University' , 'Senior' ), .... : ( 'Shanghai Jiao Tong University' , 'Freshman' )]] . head () .... : Out [ 86 ]: Name Gender Weight Transfer School Grade Fudan University Senior Chengpeng Zheng Female 38.0 N Senior Feng Zhou Female 47.0 N Senior Gaomei Lv Female 34.0 N Senior Chunli Lv Female 56.0 N Senior Chengpeng Zhou Male 81.0 N In [ 87 ]: df_sorted . loc [ df_sorted . Weight > 70 ] . head () # \u5e03\u5c14\u5217\u8868\u4e5f\u662f\u53ef\u7528\u7684 Out [ 87 ]: Name Gender Weight Transfer School Grade Fudan University Freshman Feng Wang Male 74.0 N Junior Chunqiang Chu Male 72.0 N Junior Changfeng Lv Male 76.0 N Senior Chengpeng Zhou Male 81.0 N Senior Chengpeng Qian Male 73.0 Y In [ 88 ]: df_sorted . loc [ lambda x :( 'Fudan University' , 'Junior' )] . head () Out [ 88 ]: Name Gender Weight Transfer School Grade Fudan University Junior Yanli You Female 48.0 N Junior Chunqiang Chu Male 72.0 N Junior Changfeng Lv Male 76.0 N Junior Yanjuan Lv Female 49.0 NaN Junior Gaoqiang Zhou Female 43.0 N \u5f53\u4f7f\u7528\u5207\u7247\u65f6\u9700\u8981\u6ce8\u610f\uff0c\u5728\u5355\u7ea7\u7d22\u5f15\u4e2d\u53ea\u8981\u5207\u7247\u7aef\u70b9\u5143\u7d20\u662f\u552f\u4e00\u7684\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8fdb\u884c\u5207\u7247\uff0c\u4f46\u5728\u591a\u7ea7\u7d22\u5f15\u4e2d\uff0c\u65e0\u8bba\u5143\u7ec4\u5728\u7d22\u5f15\u4e2d\u662f\u5426\u91cd\u590d\u51fa\u73b0\uff0c\u90fd\u5fc5\u987b\u7ecf\u8fc7\u6392\u5e8f\u624d\u80fd\u4f7f\u7528\u5207\u7247\uff0c\u5426\u5219\u62a5\u9519\uff1a In [ 89 ]: try : .... : df_multi . loc [( 'Fudan University' , 'Senior' ):] . head () .... : except Exception as e : .... : Err_Msg = e .... : In [ 90 ]: Err_Msg Out [ 90 ]: pandas . errors . UnsortedIndexError ( 'Key length (2) was greater than MultiIndex lexsort depth (0)' ) In [ 91 ]: df_sorted . loc [( 'Fudan University' , 'Senior' ):] . head () Out [ 91 ]: Name Gender Weight Transfer School Grade Fudan University Senior Chengpeng Zheng Female 38.0 N Senior Feng Zhou Female 47.0 N Senior Gaomei Lv Female 34.0 N Senior Chunli Lv Female 56.0 N Senior Chengpeng Zhou Male 81.0 N In [ 92 ]: df_unique = df . drop_duplicates ( subset = [ 'School' , 'Grade' ] .... : ) . set_index ([ 'School' , 'Grade' ]) .... : In [ 93 ]: df_unique . head () Out [ 93 ]: Name Gender Weight Transfer School Grade Shanghai Jiao Tong University Freshman Gaopeng Yang Female 46.0 N Peking University Freshman Changqiang You Male 70.0 N Shanghai Jiao Tong University Senior Mei Sun Male 89.0 N Fudan University Sophomore Xiaojuan Sun Female 41.0 N Tsinghua University Freshman Xiaoli Qian Female 51.0 N In [ 94 ]: try : .... : df_unique . loc [( 'Fudan University' , 'Senior' ):] . head () .... : except Exception as e : .... : Err_Msg = e .... : In [ 95 ]: Err_Msg Out [ 95 ]: pandas . errors . UnsortedIndexError ( 'Key length (2) was greater than MultiIndex lexsort depth (0)' ) In [ 96 ]: df_unique . sort_index () . loc [( 'Fudan University' , 'Senior' ):] . head () Out [ 96 ]: Name Gender Weight Transfer School Grade Fudan University Senior Chengpeng Zheng Female 38.0 N Sophomore Xiaojuan Sun Female 41.0 N Peking University Freshman Changqiang You Male 70.0 N Junior Juan Xu Female NaN N Senior Changli Lv Female 41.0 N \u6b64\u5916\uff0c\u5728\u591a\u7ea7\u7d22\u5f15\u4e2d\u7684\u5143\u7ec4\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u7528\u6cd5\uff0c\u53ef\u4ee5\u5bf9\u591a\u5c42\u7684\u5143\u7d20\u8fdb\u884c\u4ea4\u53c9\u7ec4\u5408\u540e\u7d22\u5f15\uff0c\u4f46\u540c\u65f6\u9700\u8981\u6307\u5b9a loc \u7684\u5217\uff0c\u5168\u9009\u5219\u7528 : \u8868\u793a\u3002\u5176\u4e2d\uff0c\u6bcf\u4e00\u5c42\u9700\u8981\u9009\u4e2d\u7684\u5143\u7d20\u7528\u5217\u8868\u5b58\u653e\uff0c\u4f20\u5165 loc \u7684\u5f62\u5f0f\u4e3a [(level_0_list, level_1_list), cols] \u3002\u4f8b\u5982\uff0c\u60f3\u8981\u5f97\u5230\u6240\u6709\u5317\u5927\u548c\u590d\u65e6\u7684\u5927\u4e8c\u5927\u4e09\u5b66\u751f\uff0c\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 97 ]: res = df_multi . loc [([ 'Peking University' , 'Fudan University' ], .... : [ 'Sophomore' , 'Junior' ]), :] .... : In [ 98 ]: res . head () Out [ 98 ]: Name Gender Weight Transfer School Grade Peking University Sophomore Changmei Xu Female 43.0 N Sophomore Xiaopeng Qin Male NaN N Sophomore Mei Xu Female 39.0 N Sophomore Xiaoli Zhou Female 55.0 N Sophomore Peng Han Female 34.0 NaN In [ 99 ]: res . shape Out [ 99 ]: ( 33 , 4 ) \u4e0b\u9762\u7684\u8bed\u53e5\u548c\u4e0a\u9762\u7c7b\u4f3c\uff0c\u4f46\u4ecd\u7136\u4f20\u5165\u7684\u662f\u5143\u7d20\uff08\u8fd9\u91cc\u4e3a\u5143\u7ec4\uff09\u7684\u5217\u8868\uff0c\u5b83\u4eec\u7684\u610f\u4e49\u662f\u4e0d\u540c\u7684\uff0c\u8868\u793a\u7684\u662f\u9009\u51fa\u5317\u5927\u7684\u5927\u4e09\u5b66\u751f\u548c\u590d\u65e6\u7684\u5927\u4e8c\u5b66\u751f\uff1a In [ 100 ]: res = df_multi . loc [[( 'Peking University' , 'Junior' ), ..... : ( 'Fudan University' , 'Sophomore' )]] ..... : In [ 101 ]: res . head () Out [ 101 ]: Name Gender Weight Transfer School Grade Peking University Junior Juan Xu Female NaN N Junior Changjuan You Female 47.0 N Junior Gaoli Xu Female 48.0 N Junior Gaoquan Zhou Male 70.0 N Junior Qiang You Female 56.0 N In [ 102 ]: res . shape Out [ 102 ]: ( 16 , 4 )","title":"2. \u591a\u7ea7\u7d22\u5f15\u4e2d\u7684 loc \u7d22\u5f15\u5668"},{"location":"pandas/part3/#3-indexslice","text":"\u524d\u9762\u4ecb\u7ecd\u7684\u65b9\u6cd5\uff0c\u5373\u4f7f\u5728\u7d22\u5f15\u4e0d\u91cd\u590d\u7684\u65f6\u5019\uff0c\u4e5f\u53ea\u80fd\u5bf9\u5143\u7ec4\u6574\u4f53\u8fdb\u884c\u5207\u7247\uff0c\u800c\u4e0d\u80fd\u5bf9\u6bcf\u5c42\u8fdb\u884c\u5207\u7247\uff0c\u4e5f\u4e0d\u5141\u8bb8\u5c06\u5207\u7247\u548c\u5e03\u5c14\u5217\u8868\u6df7\u5408\u4f7f\u7528\uff0c\u5f15\u5165 IndexSlice \u5bf9\u8c61\u5c31\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 Slice \u5bf9\u8c61\u4e00\u5171\u6709\u4e24\u79cd\u5f62\u5f0f\uff0c\u7b2c\u4e00\u79cd\u4e3a loc[idx[*,*]] \u578b\uff0c\u7b2c\u4e8c\u79cd\u4e3a loc[idx[*,*],idx[*,*]] \u578b\uff0c\u4e0b\u9762\u5c06\u8fdb\u884c\u4ecb\u7ecd\u3002\u4e3a\u4e86\u65b9\u4fbf\u6f14\u793a\uff0c\u4e0b\u9762\u6784\u9020\u4e00\u4e2a \u7d22\u5f15\u4e0d\u91cd\u590d\u7684 DataFrame \uff1a In [ 103 ]: np . random . seed ( 0 ) In [ 104 ]: L1 , L2 = [ 'A' , 'B' , 'C' ],[ 'a' , 'b' , 'c' ] In [ 105 ]: mul_index1 = pd . MultiIndex . from_product ([ L1 , L2 ], names = ( 'Upper' , 'Lower' )) In [ 106 ]: L3 , L4 = [ 'D' , 'E' , 'F' ],[ 'd' , 'e' , 'f' ] In [ 107 ]: mul_index2 = pd . MultiIndex . from_product ([ L3 , L4 ], names = ( 'Big' , 'Small' )) In [ 108 ]: df_ex = pd . DataFrame ( np . random . randint ( - 9 , 10 ,( 9 , 9 )), ..... : index = mul_index1 , ..... : columns = mul_index2 ) ..... : In [ 109 ]: df_ex Out [ 109 ]: Big D E F Small d e f d e f d e f Upper Lower A a 3 6 - 9 - 6 - 6 - 2 0 9 - 5 b - 3 3 - 8 - 3 - 2 5 8 - 4 4 c - 1 0 7 - 4 6 6 - 9 9 - 6 B a 8 5 - 2 - 9 - 8 0 - 9 1 - 6 b 2 9 - 7 - 9 - 9 - 5 - 4 - 3 - 1 c 8 6 - 5 0 1 - 8 - 8 - 2 0 C a - 6 - 3 2 5 9 - 9 5 - 6 3 b 1 2 - 5 - 3 - 5 6 - 6 3 - 5 c - 1 5 6 - 6 6 4 7 8 - 4 \u4e3a\u4e86\u4f7f\u7528 silce \u5bf9\u8c61\uff0c\u5148\u8981\u8fdb\u884c\u5b9a\u4e49\uff1a In [ 110 ]: idx = pd . IndexSlice \u3010a\u3011 loc[idx[*,*]] \u578b \u8fd9\u79cd\u60c5\u51b5\u5e76\u4e0d\u80fd\u8fdb\u884c\u591a\u5c42\u5206\u522b\u5207\u7247\uff0c\u524d\u4e00\u4e2a * \u8868\u793a\u884c\u7684\u9009\u62e9\uff0c\u540e\u4e00\u4e2a * \u8868\u793a\u5217\u7684\u9009\u62e9\uff0c\u4e0e\u5355\u7eaf\u7684 loc \u662f\u7c7b\u4f3c\u7684\uff1a In [ 111 ]: df_ex . loc [ idx [ 'C' :, ( 'D' , 'f' ):]] Out [ 111 ]: Big D E F Small f d e f d e f Upper Lower C a 2 5 9 - 9 5 - 6 3 b - 5 - 3 - 5 6 - 6 3 - 5 c 6 - 6 6 4 7 8 - 4 \u53e6\u5916\uff0c\u4e5f\u652f\u6301\u5e03\u5c14\u5e8f\u5217\u7684\u7d22\u5f15\uff1a In [ 112 ]: df_ex . loc [ idx [: 'A' , lambda x : x . sum () > 0 ]] # \u5217\u548c\u5927\u4e8e0 Out [ 112 ]: Big D F Small d e e Upper Lower A a 3 6 9 b - 3 3 - 4 c - 1 0 9 \u3010b\u3011 loc[idx[*,*],idx[*,*]] \u578b \u8fd9\u79cd\u60c5\u51b5\u80fd\u591f\u5206\u5c42\u8fdb\u884c\u5207\u7247\uff0c\u524d\u4e00\u4e2a idx \u6307\u4ee3\u7684\u662f\u884c\u7d22\u5f15\uff0c\u540e\u4e00\u4e2a\u662f\u5217\u7d22\u5f15\u3002 In [ 113 ]: df_ex . loc [ idx [: 'A' , 'b' :], idx [ 'E' :, 'e' :]] Out [ 113 ]: Big E F Small e f e f Upper Lower A b - 2 5 - 4 4 c 6 6 9 - 6 \u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b64\u65f6\u4e0d\u652f\u6301\u4f7f\u7528\u51fd\u6570\uff1a In [ 114 ]: try : ..... : df_ex . loc [ idx [: 'A' , lambda x : 'b' ], idx [ 'E' :, 'e' :]] ..... : except Exception as e : ..... : Err_Msg = e ..... : In [ 115 ]: Err_Msg Out [ 115 ]: KeyError ( < function __main__ .< lambda > ( x ) > )","title":"3. IndexSlice \u5bf9\u8c61"},{"location":"pandas/part3/#4","text":"\u524d\u9762\u63d0\u5230\u4e86\u591a\u7ea7\u7d22\u5f15\u8868\u7684\u7ed3\u6784\u548c\u5207\u7247\uff0c\u90a3\u4e48\u9664\u4e86\u4f7f\u7528 set_index \u4e4b\u5916\uff0c\u5982\u4f55\u81ea\u5df1\u6784\u9020\u591a\u7ea7\u7d22\u5f15\u5462\uff1f\u5e38\u7528\u7684\u6709 from_tuples, from_arrays, from_product \u4e09\u79cd\u65b9\u6cd5\uff0c\u5b83\u4eec\u90fd\u662f pd.MultiIndex \u5bf9\u8c61\u4e0b\u7684\u51fd\u6570\u3002 from_tuples \u6307\u6839\u636e\u4f20\u5165\u7531\u5143\u7ec4\u7ec4\u6210\u7684\u5217\u8868\u8fdb\u884c\u6784\u9020\uff1a In [ 116 ]: my_tuple = [( 'a' , 'cat' ),( 'a' , 'dog' ),( 'b' , 'cat' ),( 'b' , 'dog' )] In [ 117 ]: pd . MultiIndex . from_tuples ( my_tuple , names = [ 'First' , 'Second' ]) Out [ 117 ]: MultiIndex ([( 'a' , 'cat' ), ( 'a' , 'dog' ), ( 'b' , 'cat' ), ( 'b' , 'dog' )], names = [ 'First' , 'Second' ]) from_arrays \u6307\u6839\u636e\u4f20\u5165\u5217\u8868\u4e2d\uff0c\u5bf9\u5e94\u5c42\u7684\u5217\u8868\u8fdb\u884c\u6784\u9020\uff1a In [ 118 ]: my_array = [ list ( 'aabb' ), [ 'cat' , 'dog' ] * 2 ] In [ 119 ]: pd . MultiIndex . from_arrays ( my_array , names = [ 'First' , 'Second' ]) Out [ 119 ]: MultiIndex ([( 'a' , 'cat' ), ( 'a' , 'dog' ), ( 'b' , 'cat' ), ( 'b' , 'dog' )], names = [ 'First' , 'Second' ]) from_product \u6307\u6839\u636e\u7ed9\u5b9a\u591a\u4e2a\u5217\u8868\u7684\u7b1b\u5361\u5c14\u79ef\u8fdb\u884c\u6784\u9020\uff1a In [ 120 ]: my_list1 = [ 'a' , 'b' ] In [ 121 ]: my_list2 = [ 'cat' , 'dog' ] In [ 122 ]: pd . MultiIndex . from_product ([ my_list1 , ..... : my_list2 ], ..... : names = [ 'First' , 'Second' ]) ..... : Out [ 122 ]: MultiIndex ([( 'a' , 'cat' ), ( 'a' , 'dog' ), ( 'b' , 'cat' ), ( 'b' , 'dog' )], names = [ 'First' , 'Second' ])","title":"4. \u591a\u7ea7\u7d22\u5f15\u7684\u6784\u9020"},{"location":"pandas/part3/#_3","text":"","title":"\u4e09\u3001\u7d22\u5f15\u7684\u5e38\u7528\u65b9\u6cd5"},{"location":"pandas/part3/#1_2","text":"\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\u4ea4\u6362\u7684\u8fc7\u7a0b\uff0c\u8fd9\u91cc\u6784\u9020\u4e00\u4e2a\u4e09\u7ea7\u7d22\u5f15\u7684\u4f8b\u5b50\uff1a In [ 123 ]: np . random . seed ( 0 ) In [ 124 ]: L1 , L2 , L3 = [ 'A' , 'B' ],[ 'a' , 'b' ],[ 'alpha' , 'beta' ] In [ 125 ]: mul_index1 = pd . MultiIndex . from_product ([ L1 , L2 , L3 ], ..... : names = ( 'Upper' , 'Lower' , 'Extra' )) ..... : In [ 126 ]: L4 , L5 , L6 = [ 'C' , 'D' ],[ 'c' , 'd' ],[ 'cat' , 'dog' ] In [ 127 ]: mul_index2 = pd . MultiIndex . from_product ([ L4 , L5 , L6 ], ..... : names = ( 'Big' , 'Small' , 'Other' )) ..... : In [ 128 ]: df_ex = pd . DataFrame ( np . random . randint ( - 9 , 10 ,( 8 , 8 )), ..... : index = mul_index1 , ..... : columns = mul_index2 ) ..... : In [ 129 ]: df_ex Out [ 129 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog Upper Lower Extra A a alpha 3 6 - 9 - 6 - 6 - 2 0 9 beta - 5 - 3 3 - 8 - 3 - 2 5 8 b alpha - 4 4 - 1 0 7 - 4 6 6 beta - 9 9 - 6 8 5 - 2 - 9 - 8 B a alpha 0 - 9 1 - 6 2 9 - 7 - 9 beta - 9 - 5 - 4 - 3 - 1 8 6 - 5 b alpha 0 1 - 8 - 8 - 2 0 - 6 - 3 beta 2 5 9 - 9 5 - 6 3 1 \u7d22\u5f15\u5c42\u7684\u4ea4\u6362\u7531 swaplevel \u548c reorder_levels \u5b8c\u6210\uff0c\u524d\u8005\u53ea\u80fd\u4ea4\u6362\u4e24\u4e2a\u5c42\uff0c\u800c\u540e\u8005\u53ef\u4ee5\u4ea4\u6362\u4efb\u610f\u5c42\uff0c\u4e24\u8005\u90fd\u53ef\u4ee5\u6307\u5b9a\u4ea4\u6362\u7684\u662f\u8f74\u662f\u54ea\u4e00\u4e2a\uff0c\u5373\u884c\u7d22\u5f15\u6216\u5217\u7d22\u5f15\uff1a In [ 130 ]: df_ex . swaplevel ( 0 , 2 , axis = 1 ) . head () # \u5217\u7d22\u5f15\u7684\u7b2c\u4e00\u5c42\u548c\u7b2c\u4e09\u5c42\u4ea4\u6362 Out [ 130 ]: Other cat dog cat dog cat dog cat dog Small c c d d c c d d Big C C C C D D D D Upper Lower Extra A a alpha 3 6 - 9 - 6 - 6 - 2 0 9 beta - 5 - 3 3 - 8 - 3 - 2 5 8 b alpha - 4 4 - 1 0 7 - 4 6 6 beta - 9 9 - 6 8 5 - 2 - 9 - 8 B a alpha 0 - 9 1 - 6 2 9 - 7 - 9 In [ 131 ]: df_ex . reorder_levels ([ 2 , 0 , 1 ], axis = 0 ) . head () # \u5217\u8868\u6570\u5b57\u6307\u4ee3\u539f\u6765\u7d22\u5f15\u4e2d\u7684\u5c42 Out [ 131 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog Extra Upper Lower alpha A a 3 6 - 9 - 6 - 6 - 2 0 9 beta A a - 5 - 3 3 - 8 - 3 - 2 5 8 alpha A b - 4 4 - 1 0 7 - 4 6 6 beta A b - 9 9 - 6 8 5 - 2 - 9 - 8 alpha B a 0 - 9 1 - 6 2 9 - 7 - 9 \u8f74\u4e4b\u95f4\u7684\u7d22\u5f15\u4ea4\u6362 \u8fd9\u91cc\u53ea\u6d89\u53ca\u884c\u6216\u5217\u7d22\u5f15\u5185\u90e8\u7684\u4ea4\u6362\uff0c\u4e0d\u540c\u65b9\u5411\u7d22\u5f15\u4e4b\u95f4\u7684\u4ea4\u6362\u5c06\u5728\u7b2c\u4e94\u7ae0\u4e2d\u88ab\u8ba8\u8bba\u3002 \u82e5\u60f3\u8981\u5220\u9664\u67d0\u4e00\u5c42\u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u4f7f\u7528 droplevel \u65b9\u6cd5\uff1a In [ 132 ]: df_ex . droplevel ( 1 , axis = 1 ) Out [ 132 ]: Big C D Other cat dog cat dog cat dog cat dog Upper Lower Extra A a alpha 3 6 - 9 - 6 - 6 - 2 0 9 beta - 5 - 3 3 - 8 - 3 - 2 5 8 b alpha - 4 4 - 1 0 7 - 4 6 6 beta - 9 9 - 6 8 5 - 2 - 9 - 8 B a alpha 0 - 9 1 - 6 2 9 - 7 - 9 beta - 9 - 5 - 4 - 3 - 1 8 6 - 5 b alpha 0 1 - 8 - 8 - 2 0 - 6 - 3 beta 2 5 9 - 9 5 - 6 3 1 In [ 133 ]: df_ex . droplevel ([ 0 , 1 ], axis = 0 ) Out [ 133 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog Extra alpha 3 6 - 9 - 6 - 6 - 2 0 9 beta - 5 - 3 3 - 8 - 3 - 2 5 8 alpha - 4 4 - 1 0 7 - 4 6 6 beta - 9 9 - 6 8 5 - 2 - 9 - 8 alpha 0 - 9 1 - 6 2 9 - 7 - 9 beta - 9 - 5 - 4 - 3 - 1 8 6 - 5 alpha 0 1 - 8 - 8 - 2 0 - 6 - 3 beta 2 5 9 - 9 5 - 6 3 1","title":"1. \u7d22\u5f15\u5c42\u7684\u4ea4\u6362\u548c\u5220\u9664"},{"location":"pandas/part3/#2_1","text":"\u901a\u8fc7 rename_axis \u53ef\u4ee5\u5bf9\u7d22\u5f15\u5c42\u7684\u540d\u5b57\u8fdb\u884c\u4fee\u6539\uff0c\u5e38\u7528\u7684\u4fee\u6539\u65b9\u5f0f\u662f\u4f20\u5165\u5b57\u5178\u7684\u6620\u5c04\uff1a In [ 134 ]: df_ex . rename_axis ( index = { 'Upper' : 'Changed_row' }, ..... : columns = { 'Other' : 'Changed_Col' }) . head () ..... : Out [ 134 ]: Big C D Small c d c d Changed_Col cat dog cat dog cat dog cat dog Changed_row Lower Extra A a alpha 3 6 - 9 - 6 - 6 - 2 0 9 beta - 5 - 3 3 - 8 - 3 - 2 5 8 b alpha - 4 4 - 1 0 7 - 4 6 6 beta - 9 9 - 6 8 5 - 2 - 9 - 8 B a alpha 0 - 9 1 - 6 2 9 - 7 - 9 \u901a\u8fc7 rename \u53ef\u4ee5\u5bf9\u7d22\u5f15\u7684\u503c\u8fdb\u884c\u4fee\u6539\uff0c\u5982\u679c\u662f\u591a\u7ea7\u7d22\u5f15\u9700\u8981\u6307\u5b9a\u4fee\u6539\u7684\u5c42\u53f7 level \uff1a In [ 135 ]: df_ex . rename ( columns = { 'cat' : 'not_cat' }, ..... : level = 2 ) . head () ..... : Out [ 135 ]: Big C D Small c d c d Other not_cat dog not_cat dog not_cat dog not_cat dog Upper Lower Extra A a alpha 3 6 - 9 - 6 - 6 - 2 0 9 beta - 5 - 3 3 - 8 - 3 - 2 5 8 b alpha - 4 4 - 1 0 7 - 4 6 6 beta - 9 9 - 6 8 5 - 2 - 9 - 8 B a alpha 0 - 9 1 - 6 2 9 - 7 - 9 \u4f20\u5165\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\uff0c\u5176\u8f93\u5165\u503c\u5c31\u662f\u7d22\u5f15\u5143\u7d20\uff1a In [ 136 ]: df_ex . rename ( index = lambda x : str . upper ( x ), ..... : level = 2 ) . head () ..... : Out [ 136 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog Upper Lower Extra A a ALPHA 3 6 - 9 - 6 - 6 - 2 0 9 BETA - 5 - 3 3 - 8 - 3 - 2 5 8 b ALPHA - 4 4 - 1 0 7 - 4 6 6 BETA - 9 9 - 6 8 5 - 2 - 9 - 8 B a ALPHA 0 - 9 1 - 6 2 9 - 7 - 9 \u7ec3\u4e00\u7ec3 \u5c1d\u8bd5\u5728 rename_axis \u4e2d\u4f7f\u7528\u51fd\u6570\u5b8c\u6210\u4e0e\u4f8b\u5b50\u4e2d\u4e00\u6837\u7684\u529f\u80fd\uff0c\u5373\u628a Upper \u548c Other \u5206\u522b\u66ff\u6362\u4e3a Changed_row \u548c Changed_col \u3002 \u5bf9\u4e8e\u6574\u4e2a\u7d22\u5f15\u7684\u5143\u7d20\u66ff\u6362\uff0c\u53ef\u4ee5\u5229\u7528\u8fed\u4ee3\u5668\u5b9e\u73b0\uff1a In [ 137 ]: new_values = iter ( list ( 'abcdefgh' )) In [ 138 ]: df_ex . rename ( index = lambda x : next ( new_values ), ..... : level = 2 ) ..... : Out [ 138 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog Upper Lower Extra A a a 3 6 - 9 - 6 - 6 - 2 0 9 b - 5 - 3 3 - 8 - 3 - 2 5 8 b c - 4 4 - 1 0 7 - 4 6 6 d - 9 9 - 6 8 5 - 2 - 9 - 8 B a e 0 - 9 1 - 6 2 9 - 7 - 9 f - 9 - 5 - 4 - 3 - 1 8 6 - 5 b g 0 1 - 8 - 8 - 2 0 - 6 - 3 h 2 5 9 - 9 5 - 6 3 1 \u82e5\u60f3\u8981\u5bf9\u67d0\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\u8fdb\u884c\u4fee\u6539\uff0c\u5728\u5355\u5c42\u7d22\u5f15\u65f6\u5bb9\u6613\u5b9e\u73b0\uff0c\u5373\u5148\u53d6\u51fa\u7d22\u5f15\u7684 values \u5c5e\u6027\uff0c\u518d\u7ed9\u5bf9\u5f97\u5230\u7684\u5217\u8868\u8fdb\u884c\u4fee\u6539\uff0c\u6700\u540e\u518d\u5bf9 index \u5bf9\u8c61\u91cd\u65b0\u8d4b\u503c\u3002\u4f46\u662f\u5982\u679c\u662f\u591a\u7ea7\u7d22\u5f15\u7684\u8bdd\u5c31\u6709\u4e9b\u9ebb\u70e6\uff0c\u4e00\u4e2a\u89e3\u51b3\u7684\u65b9\u6848\u662f\u5148\u628a\u67d0\u4e00\u5c42\u7d22\u5f15\u4e34\u65f6\u8f6c\u4e3a\u8868\u7684\u5143\u7d20\uff0c\u7136\u540e\u518d\u8fdb\u884c\u4fee\u6539\uff0c\u6700\u540e\u91cd\u65b0\u8bbe\u5b9a\u4e3a\u7d22\u5f15\uff0c\u4e0b\u9762\u4e00\u8282\u5c06\u4ecb\u7ecd\u8fd9\u4e9b\u64cd\u4f5c\u3002 \u53e6\u5916\u4e00\u4e2a\u9700\u8981\u4ecb\u7ecd\u7684\u51fd\u6570\u662f map \uff0c\u5b83\u662f\u5b9a\u4e49\u5728 Index \u4e0a\u7684\u65b9\u6cd5\uff0c\u4e0e\u524d\u9762 rename \u65b9\u6cd5\u4e2d\u5c42\u7684\u51fd\u6570\u5f0f\u7528\u6cd5\u662f\u7c7b\u4f3c\u7684\uff0c\u53ea\u4e0d\u8fc7\u5b83\u4f20\u5165\u7684\u4e0d\u662f\u5c42\u7684\u6807\u91cf\u503c\uff0c\u800c\u662f\u76f4\u63a5\u4f20\u5165\u7d22\u5f15\u7684\u5143\u7ec4\uff0c\u8fd9\u4e3a\u7528\u6237\u8fdb\u884c\u8de8\u5c42\u7684\u4fee\u6539\u63d0\u4f9b\u4e86\u4fbf\u5229\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u7b49\u4ef7\u5730\u5199\u51fa\u4e0a\u9762\u7684\u5b57\u7b26\u4e32\u8f6c\u5927\u5199\u7684\u64cd\u4f5c\uff1a In [ 139 ]: df_temp = df_ex . copy () In [ 140 ]: new_idx = df_temp . index . map ( lambda x : ( x [ 0 ], ..... : x [ 1 ], ..... : str . upper ( x [ 2 ]))) ..... : In [ 141 ]: df_temp . index = new_idx In [ 142 ]: df_temp . head () Out [ 142 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog Upper Lower Extra A a ALPHA 3 6 - 9 - 6 - 6 - 2 0 9 BETA - 5 - 3 3 - 8 - 3 - 2 5 8 b ALPHA - 4 4 - 1 0 7 - 4 6 6 BETA - 9 9 - 6 8 5 - 2 - 9 - 8 B a ALPHA 0 - 9 1 - 6 2 9 - 7 - 9 \u5173\u4e8e map \u7684\u53e6\u4e00\u4e2a\u4f7f\u7528\u65b9\u6cd5\u662f\u5bf9\u591a\u7ea7\u7d22\u5f15\u7684\u538b\u7f29\uff0c\u8fd9\u5728\u7b2c\u56db\u7ae0\u548c\u7b2c\u4e94\u7ae0\u7684\u4e00\u4e9b\u64cd\u4f5c\u4e2d\u662f\u6709\u7528\u7684\uff1a In [ 143 ]: df_temp = df_ex . copy () In [ 144 ]: new_idx = df_temp . index . map ( lambda x : ( x [ 0 ] + '-' + ..... : x [ 1 ] + '-' + ..... : x [ 2 ])) ..... : In [ 145 ]: df_temp . index = new_idx In [ 146 ]: df_temp . head () # \u5355\u5c42\u7d22\u5f15 Out [ 146 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog A - a - alpha 3 6 - 9 - 6 - 6 - 2 0 9 A - a - beta - 5 - 3 3 - 8 - 3 - 2 5 8 A - b - alpha - 4 4 - 1 0 7 - 4 6 6 A - b - beta - 9 9 - 6 8 5 - 2 - 9 - 8 B - a - alpha 0 - 9 1 - 6 2 9 - 7 - 9 \u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u53cd\u5411\u5730\u5c55\u5f00\uff1a In [ 147 ]: new_idx = df_temp . index . map ( lambda x : tuple ( x . split ( '-' ))) In [ 148 ]: df_temp . index = new_idx In [ 149 ]: df_temp . head () # \u4e09\u5c42\u7d22\u5f15 Out [ 149 ]: Big C D Small c d c d Other cat dog cat dog cat dog cat dog A a alpha 3 6 - 9 - 6 - 6 - 2 0 9 beta - 5 - 3 3 - 8 - 3 - 2 5 8 b alpha - 4 4 - 1 0 7 - 4 6 6 beta - 9 9 - 6 8 5 - 2 - 9 - 8 B a alpha 0 - 9 1 - 6 2 9 - 7 - 9","title":"2. \u7d22\u5f15\u5c5e\u6027\u7684\u4fee\u6539"},{"location":"pandas/part3/#3","text":"\u4e3a\u4e86\u8bf4\u660e\u672c\u8282\u7684\u51fd\u6570\uff0c\u4e0b\u9762\u6784\u9020\u4e00\u4e2a\u65b0\u8868\uff1a In [ 150 ]: df_new = pd . DataFrame ({ 'A' : list ( 'aacd' ), ..... : 'B' : list ( 'PQRT' ), ..... : 'C' :[ 1 , 2 , 3 , 4 ]}) ..... : In [ 151 ]: df_new Out [ 151 ]: A B C 0 a P 1 1 a Q 2 2 c R 3 3 d T 4 \u7d22\u5f15\u7684\u8bbe\u7f6e\u53ef\u4ee5\u4f7f\u7528 set_index \u5b8c\u6210\uff0c\u8fd9\u91cc\u7684\u4e3b\u8981\u53c2\u6570\u662f append \uff0c\u8868\u793a\u662f\u5426\u6765\u4fdd\u7559\u539f\u6765\u7684\u7d22\u5f15\uff0c\u76f4\u63a5\u628a\u65b0\u8bbe\u5b9a\u7684\u6dfb\u52a0\u5230\u539f\u7d22\u5f15\u7684\u5185\u5c42\uff1a In [ 152 ]: df_new . set_index ( 'A' ) Out [ 152 ]: B C A a P 1 a Q 2 c R 3 d T 4 In [ 153 ]: df_new . set_index ( 'A' , append = True ) Out [ 153 ]: B C A 0 a P 1 1 a Q 2 2 c R 3 3 d T 4 \u53ef\u4ee5\u540c\u65f6\u6307\u5b9a\u591a\u4e2a\u5217\u4f5c\u4e3a\u7d22\u5f15\uff1a In [ 154 ]: df_new . set_index ([ 'A' , 'B' ]) Out [ 154 ]: C A B a P 1 Q 2 c R 3 d T 4 \u5982\u679c\u60f3\u8981\u6dfb\u52a0\u7d22\u5f15\u7684\u5217\u6ca1\u6709\u51fa\u73b0\u5728\u5176\u4e2d\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u5728\u53c2\u6570\u4e2d\u4f20\u5165\u76f8\u5e94\u7684 Series \uff1a In [ 155 ]: my_index = pd . Series ( list ( 'WXYZ' ), name = 'D' ) In [ 156 ]: df_new = df_new . set_index ([ 'A' , my_index ]) In [ 157 ]: df_new Out [ 157 ]: B C A D a W P 1 X Q 2 c Y R 3 d Z T 4 reset_index \u662f set_index \u7684\u9006\u51fd\u6570\uff0c\u5176\u4e3b\u8981\u53c2\u6570\u662f drop \uff0c\u8868\u793a\u662f\u5426\u8981\u628a\u53bb\u6389\u7684\u7d22\u5f15\u5c42\u4e22\u5f03\uff0c\u800c\u4e0d\u662f\u6dfb\u52a0\u5230\u5217\u4e2d\uff1a In [ 158 ]: df_new . reset_index ([ 'D' ]) Out [ 158 ]: D B C A a W P 1 a X Q 2 c Y R 3 d Z T 4 In [ 159 ]: df_new . reset_index ([ 'D' ], drop = True ) Out [ 159 ]: B C A a P 1 a Q 2 c R 3 d T 4 \u5982\u679c\u91cd\u7f6e\u4e86\u6240\u6709\u7684\u7d22\u5f15\uff0c\u90a3\u4e48 pandas \u4f1a\u76f4\u63a5\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u9ed8\u8ba4\u7d22\u5f15\uff1a In [ 160 ]: df_new . reset_index () Out [ 160 ]: A D B C 0 a W P 1 1 a X Q 2 2 c Y R 3 3 d Z T 4","title":"3. \u7d22\u5f15\u7684\u8bbe\u7f6e\u4e0e\u91cd\u7f6e"},{"location":"pandas/part3/#4_1","text":"\u5728\u67d0\u4e9b\u573a\u5408\u4e0b\uff0c\u9700\u8981\u5bf9\u7d22\u5f15\u505a\u4e00\u4e9b\u6269\u5145\u6216\u8005\u5254\u9664\uff0c\u66f4\u5177\u4f53\u5730\u8981\u6c42\u662f\u7ed9\u5b9a\u4e00\u4e2a\u65b0\u7684\u7d22\u5f15\uff0c\u628a\u539f\u8868\u4e2d\u76f8\u5e94\u7684\u7d22\u5f15\u5bf9\u5e94\u5143\u7d20\u586b\u5145\u5230\u65b0\u7d22\u5f15\u6784\u6210\u7684\u8868\u4e2d\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u8868\u4e2d\u7ed9\u51fa\u4e86\u5458\u5de5\u4fe1\u606f\uff0c\u9700\u8981\u91cd\u65b0\u5236\u4f5c\u4e00\u5f20\u65b0\u7684\u8868\uff0c\u8981\u6c42\u589e\u52a0\u4e00\u540d\u5458\u5de5\u7684\u540c\u65f6\u53bb\u6389\u8eab\u9ad8\u5217\u5e76\u589e\u52a0\u6027\u522b\u5217\uff1a In [ 161 ]: df_reindex = pd . DataFrame ({ \"Weight\" :[ 60 , 70 , 80 ], ..... : \"Height\" :[ 176 , 180 , 179 ]}, ..... : index = [ '1001' , '1003' , '1002' ]) ..... : In [ 162 ]: df_reindex Out [ 162 ]: Weight Height 1001 60 176 1003 70 180 1002 80 179 In [ 163 ]: df_reindex . reindex ( index = [ '1001' , '1002' , '1003' , '1004' ], ..... : columns = [ 'Weight' , 'Gender' ]) ..... : Out [ 163 ]: Weight Gender 1001 60.0 NaN 1002 80.0 NaN 1003 70.0 NaN 1004 NaN NaN \u8fd9\u79cd\u9700\u6c42\u5e38\u51fa\u73b0\u5728\u65f6\u95f4\u5e8f\u5217\u7d22\u5f15\u7684\u65f6\u95f4\u70b9\u586b\u5145\u4ee5\u53ca ID \u7f16\u53f7\u7684\u6269\u5145\u3002\u53e6\u5916\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u539f\u6765\u8868\u4e2d\u7684\u6570\u636e\u548c\u65b0\u8868\u4e2d\u4f1a\u6839\u636e\u7d22\u5f15\u81ea\u52a8\u5bf9\u9f50\uff0c\u4f8b\u5982\u539f\u5148\u7684 1002 \u53f7\u4f4d\u7f6e\u5728 1003 \u53f7\u4e4b\u540e\uff0c\u800c\u65b0\u8868\u4e2d\u76f8\u53cd\uff0c\u90a3\u4e48 reindex \u4e2d\u4f1a\u6839\u636e\u5143\u7d20\u5bf9\u9f50\uff0c\u4e0e\u4f4d\u7f6e\u65e0\u5173\u3002 \u8fd8\u6709\u4e00\u4e2a\u4e0e reindex \u529f\u80fd\u7c7b\u4f3c\u7684\u51fd\u6570\u662f reindex_like \uff0c\u5176\u529f\u80fd\u662f\u4eff\u7167\u4f20\u5165\u7684\u8868\u7d22\u5f15\u6765\u8fdb\u884c\u88ab\u8c03\u7528\u8868\u7d22\u5f15\u7684\u53d8\u5f62\u3002\u4f8b\u5982\uff0c\u73b0\u5728\u5df2\u7ecf\u5b58\u5728\u4e00\u5f20\u8868\u5177\u5907\u4e86\u76ee\u6807\u7d22\u5f15\u7684\u6761\u4ef6\uff0c\u90a3\u4e48\u4e0a\u8ff0\u529f\u80fd\u53ef\u91c7\u7528\u4e0b\u8ff0\u4ee3\u7801\u5f97\u5230\uff1a In [ 164 ]: df_existed = pd . DataFrame ( index = [ '1001' , '1002' , '1003' , '1004' ], ..... : columns = [ 'Weight' , 'Gender' ]) ..... : In [ 165 ]: df_reindex . reindex_like ( df_existed ) Out [ 165 ]: Weight Gender 1001 60.0 NaN 1002 80.0 NaN 1003 70.0 NaN 1004 NaN NaN","title":"4. \u7d22\u5f15\u7684\u53d8\u5f62"},{"location":"pandas/part3/#_4","text":"","title":"\u56db\u3001\u7d22\u5f15\u8fd0\u7b97"},{"location":"pandas/part3/#1_3","text":"\u7ecf\u5e38\u4f1a\u6709\u4e00\u79cd\u5229\u7528\u96c6\u5408\u8fd0\u7b97\u6765\u53d6\u51fa\u7b26\u5408\u6761\u4ef6\u884c\u7684\u9700\u6c42\uff0c\u4f8b\u5982\u6709\u4e24\u5f20\u8868 A \u548c B \uff0c\u5b83\u4eec\u7684\u7d22\u5f15\u90fd\u662f\u5458\u5de5\u7f16\u53f7\uff0c\u73b0\u5728\u9700\u8981\u7b5b\u9009\u51fa\u4e24\u8868\u7d22\u5f15\u4ea4\u96c6\u7684\u6240\u6709\u5458\u5de5\u4fe1\u606f\uff0c\u6b64\u65f6\u901a\u8fc7 Index \u4e0a\u7684\u8fd0\u7b97\u64cd\u4f5c\u5c31\u5f88\u5bb9\u6613\u5b9e\u73b0\u3002 \u4e0d\u8fc7\u5728\u6b64\u4e4b\u524d\uff0c\u4e0d\u59a8\u5148\u590d\u4e60\u4e00\u4e0b\u5e38\u89c1\u7684\u56db\u79cd\u96c6\u5408\u8fd0\u7b97\uff1a","title":"1. \u96c6\u5408\u7684\u8fd0\u7b97\u6cd5\u5219"},{"location":"pandas/part3/#2_2","text":"\u7531\u4e8e\u96c6\u5408\u7684\u5143\u7d20\u662f\u4e92\u5f02\u7684\uff0c\u4f46\u662f\u7d22\u5f15\u4e2d\u53ef\u80fd\u6709\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5148\u7528 unique \u53bb\u91cd\u540e\u518d\u8fdb\u884c\u8fd0\u7b97\u3002\u4e0b\u9762\u6784\u9020\u4e24\u5f20\u6700\u4e3a\u7b80\u5355\u7684\u793a\u4f8b\u8868\u8fdb\u884c\u6f14\u793a\uff1a In [ 166 ]: df_set_1 = pd . DataFrame ([[ 0 , 1 ],[ 1 , 2 ],[ 3 , 4 ]], ..... : index = pd . Index ([ 'a' , 'b' , 'a' ], name = 'id1' )) ..... : In [ 167 ]: df_set_2 = pd . DataFrame ([[ 4 , 5 ],[ 2 , 6 ],[ 7 , 1 ]], ..... : index = pd . Index ([ 'b' , 'b' , 'c' ], name = 'id2' )) ..... : In [ 168 ]: id1 , id2 = df_set_1 . index . unique (), df_set_2 . index . unique () In [ 169 ]: id1 . intersection ( id2 ) Out [ 169 ]: Index ([ 'b' ], dtype = 'object' ) In [ 170 ]: id1 . union ( id2 ) Out [ 170 ]: Index ([ 'a' , 'b' , 'c' ], dtype = 'object' ) In [ 171 ]: id1 . difference ( id2 ) Out [ 171 ]: Index ([ 'a' ], dtype = 'object' ) In [ 172 ]: id1 . symmetric_difference ( id2 ) Out [ 172 ]: Index ([ 'a' , 'c' ], dtype = 'object' ) \u82e5\u4e24\u5f20\u8868\u9700\u8981\u505a\u96c6\u5408\u8fd0\u7b97\u7684\u5217\u5e76\u6ca1\u6709\u88ab\u8bbe\u7f6e\u7d22\u5f15\uff0c\u4e00\u79cd\u529e\u6cd5\u662f\u5148\u8f6c\u6210\u7d22\u5f15\uff0c\u8fd0\u7b97\u540e\u518d\u6062\u590d\uff0c\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5229\u7528 isin \u51fd\u6570\uff0c\u4f8b\u5982\u5728\u91cd\u7f6e\u7d22\u5f15\u7684\u7b2c\u4e00\u5f20\u8868\u4e2d\u9009\u51fa id \u5217\u4ea4\u96c6\u7684\u6240\u5728\u884c\uff1a In [ 173 ]: df_set_in_col_1 = df_set_1 . reset_index () In [ 174 ]: df_set_in_col_2 = df_set_2 . reset_index () In [ 175 ]: df_set_in_col_1 Out [ 175 ]: id1 0 1 0 a 0 1 1 b 1 2 2 a 3 4 In [ 176 ]: df_set_in_col_2 Out [ 176 ]: id2 0 1 0 b 4 5 1 b 2 6 2 c 7 1 In [ 177 ]: df_set_in_col_1 [ df_set_in_col_1 . id1 . isin ( df_set_in_col_2 . id2 )] Out [ 177 ]: id1 0 1 1 b 1 2","title":"2. \u4e00\u822c\u7684\u7d22\u5f15\u8fd0\u7b97"},{"location":"pandas/part3/#_5","text":"","title":"\u4e94\u3001\u7ec3\u4e60"},{"location":"pandas/part3/#ex1","text":"\u73b0\u6709\u4e00\u4efd\u516c\u53f8\u5458\u5de5\u6570\u636e\u96c6\uff1a In [ 178 ]: df = pd . read_csv ( 'data/company.csv' ) In [ 179 ]: df . head ( 3 ) Out [ 179 ]: EmployeeID birthdate_key age city_name department job_title gender 0 1318 1 / 3 / 1954 61 Vancouver Executive CEO M 1 1319 1 / 3 / 1957 58 Vancouver Executive VP Stores F 2 1320 1 / 2 / 1955 60 Vancouver Executive Legal Counsel F \u5206\u522b\u53ea\u4f7f\u7528 query \u548c loc \u9009\u51fa\u5e74\u9f84\u4e0d\u8d85\u8fc7\u56db\u5341\u5c81\u4e14\u5de5\u4f5c\u90e8\u95e8\u4e3a Dairy \u6216 Bakery \u7684\u7537\u6027\u3002 \u9009\u51fa\u5458\u5de5 ID \u53f7 \u4e3a\u5947\u6570\u6240\u5728\u884c\u7684\u7b2c 1\u3001\u7b2c 3 \u548c\u5012\u6570\u7b2c 2 \u5217\u3002 \u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u7d22\u5f15\u64cd\u4f5c\uff1a \u628a\u540e\u4e09\u5217\u8bbe\u4e3a\u7d22\u5f15\u540e\u4ea4\u6362\u5185\u5916\u4e24\u5c42 \u6062\u590d\u4e2d\u95f4\u5c42\u7d22\u5f15 \u4fee\u6539\u5916\u5c42\u7d22\u5f15\u540d\u4e3a Gender \u7528\u4e0b\u5212\u7ebf\u5408\u5e76\u4e24\u5c42\u884c\u7d22\u5f15 \u628a\u884c\u7d22\u5f15\u62c6\u5206\u4e3a\u539f\u72b6\u6001 \u4fee\u6539\u7d22\u5f15\u540d\u4e3a\u539f\u8868\u540d\u79f0 \u6062\u590d\u9ed8\u8ba4\u7d22\u5f15\u5e76\u5c06\u5217\u4fdd\u6301\u4e3a\u539f\u8868\u7684\u76f8\u5bf9\u4f4d\u7f6e","title":"Ex1\uff1a\u516c\u53f8\u5458\u5de5\u6570\u636e\u96c6"},{"location":"pandas/part3/#ex2","text":"\u73b0\u6709\u4e00\u4efd\u5173\u4e8e\u5de7\u514b\u529b\u8bc4\u4ef7\u7684\u6570\u636e\u96c6\uff1a In [ 180 ]: df = pd . read_csv ( 'data/chocolate.csv' ) In [ 181 ]: df . head ( 3 ) Out [ 181 ]: Company Review \\ nDate Cocoa \\ nPercent Company \\ nLocation Rating 0 A . Morin 2016 63 % France 3.75 1 A . Morin 2015 70 % France 2.75 2 A . Morin 2015 70 % France 3.00 \u628a\u5217\u7d22\u5f15\u540d\u4e2d\u7684 \\n \u66ff\u6362\u4e3a\u7a7a\u683c\u3002 \u5de7\u514b\u529b Rating \u8bc4\u5206\u4e3a 1 \u81f3 5\uff0c\u6bcf 0.25 \u5206\u4e00\u6863\uff0c\u8bf7\u9009\u51fa 2.75 \u5206\u53ca\u4ee5\u4e0b\u4e14\u53ef\u53ef\u542b\u91cf Cocoa Percent \u9ad8\u4e8e\u4e2d\u4f4d\u6570\u7684\u6837\u672c\u3002 \u5c06 Review Date \u548c Company Location \u8bbe\u4e3a\u7d22\u5f15\u540e\uff0c\u9009\u51fa Review Date \u5728 2012 \u5e74\u4e4b\u540e\u4e14 Company Location \u4e0d\u5c5e\u4e8e France, Canada, Amsterdam, Belgium \u7684\u6837\u672c\u3002","title":"Ex2\uff1a\u5de7\u514b\u529b\u6570\u636e\u96c6"},{"location":"pandas/part4/","text":"In [ 1 ]: import numpy as np In [ 2 ]: import pandas as pd \u4e00\u3001\u5206\u7ec4\u6a21\u5f0f\u53ca\u5176\u5bf9\u8c61 1. \u5206\u7ec4\u7684\u4e00\u822c\u6a21\u5f0f \u5206\u7ec4\u64cd\u4f5c\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\u4f7f\u7528\u6781\u5176\u5e7f\u6cdb\uff0c\u4f8b\u5982\uff1a \u4f9d\u636e \u6027\u522b \u5206\u7ec4\uff0c\u7edf\u8ba1\u5168\u56fd\u4eba\u53e3 \u5bff\u547d \u7684 \u5e73\u5747\u503c \u4f9d\u636e \u5b63\u8282 \u5206\u7ec4\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u5b63\u8282\u7684 \u6e29\u5ea6 \u8fdb\u884c \u7ec4\u5185\u6807\u51c6\u5316 \u4f9d\u636e \u73ed\u7ea7 \u5206\u7ec4\uff0c\u7b5b\u9009\u51fa\u7ec4\u5185 \u6570\u5b66\u5206\u6570 \u7684 \u5e73\u5747\u503c\u8d85\u8fc7 80 \u5206\u7684\u73ed\u7ea7 \u4ece\u4e0a\u8ff0\u7684\u51e0\u4e2a\u4f8b\u5b50\u4e2d\u4e0d\u96be\u770b\u51fa\uff0c\u60f3\u8981\u5b9e\u73b0\u5206\u7ec4\u64cd\u4f5c\uff0c\u5fc5\u987b\u660e\u786e\u4e09\u4e2a\u8981\u7d20\uff1a \u5206\u7ec4\u4f9d\u636e \u3001 \u6570\u636e\u6765\u6e90 \u3001 \u64cd\u4f5c\u53ca\u5176\u8fd4\u56de\u7ed3\u679c \u3002\u540c\u65f6\u4ece\u5145\u5206\u6027\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u5982\u679c\u660e\u786e\u4e86\u8fd9\u4e09\u65b9\u9762\uff0c\u5c31\u80fd\u786e\u5b9a\u4e00\u4e2a\u5206\u7ec4\u64cd\u4f5c\uff0c\u4ece\u800c\u5206\u7ec4\u4ee3\u7801\u7684\u4e00\u822c\u6a21\u5f0f\u5373\uff1a df . groupby ( \u5206\u7ec4\u4f9d\u636e )[ \u6570\u636e\u6765\u6e90 ] . \u4f7f\u7528\u64cd\u4f5c \u4f8b\u5982\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\u7684\u4ee3\u7801\u5c31\u5e94\u8be5\u5982\u4e0b\uff1a df . groupby ( 'Gender' )[ 'Longevity' ] . mean () \u73b0\u5728\u8fd4\u56de\u5230\u5b66\u751f\u4f53\u6d4b\u7684\u6570\u636e\u96c6\u4e0a\uff0c\u5982\u679c\u60f3\u8981\u6309\u7167\u6027\u522b\u7edf\u8ba1\u8eab\u9ad8\u4e2d\u4f4d\u6570\uff0c\u5c31\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 3 ]: df = pd . read_csv ( 'data/learn_pandas.csv' ) In [ 4 ]: df . groupby ( 'Gender' )[ 'Height' ] . median () Out [ 4 ]: Gender Female 159.6 Male 173.4 Name : Height , dtype : float64 2. \u5206\u7ec4\u4f9d\u636e\u7684\u672c\u8d28 \u524d\u9762\u63d0\u5230\u7684\u82e5\u5e72\u4f8b\u5b50\u90fd\u662f\u4ee5\u5355\u4e00\u7ef4\u5ea6\u8fdb\u884c\u5206\u7ec4\u7684\uff0c\u6bd4\u5982\u6839\u636e\u6027\u522b\uff0c\u5982\u679c\u73b0\u5728\u9700\u8981\u6839\u636e\u591a\u4e2a\u7ef4\u5ea6\u8fdb\u884c\u5206\u7ec4\uff0c\u8be5\u5982\u4f55\u505a\uff1f\u4e8b\u5b9e\u4e0a\uff0c\u53ea\u9700\u5728 groupby \u4e2d\u4f20\u5165\u76f8\u5e94\u5217\u540d\u6784\u6210\u7684\u5217\u8868\u5373\u53ef\u3002\u4f8b\u5982\uff0c\u73b0\u5e0c\u671b\u6839\u636e\u5b66\u6821\u548c\u6027\u522b\u8fdb\u884c\u5206\u7ec4\uff0c\u7edf\u8ba1\u8eab\u9ad8\u7684\u5747\u503c\u5c31\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 5 ]: df . groupby ([ 'School' , 'Gender' ])[ 'Height' ] . mean () Out [ 5 ]: School Gender Fudan University Female 158.776923 Male 174.212500 Peking University Female 158.666667 Male 172.030000 Shanghai Jiao Tong University Female 159.122500 Male 176.760000 Tsinghua University Female 159.753333 Male 171.638889 Name : Height , dtype : float64 \u76ee\u524d\u4e3a\u6b62\uff0c groupby \u7684\u5206\u7ec4\u4f9d\u636e\u90fd\u662f\u76f4\u63a5\u53ef\u4ee5\u4ece\u5217\u4e2d\u6309\u7167\u540d\u5b57\u83b7\u53d6\u7684\uff0c\u90a3\u5982\u679c\u5e0c\u671b\u901a\u8fc7\u4e00\u5b9a\u7684\u590d\u6742\u903b\u8f91\u6765\u5206\u7ec4\uff0c\u4f8b\u5982\u6839\u636e\u5b66\u751f\u4f53\u91cd\u662f\u5426\u8d85\u8fc7\u603b\u4f53\u5747\u503c\u6765\u5206\u7ec4\uff0c\u540c\u6837\u8fd8\u662f\u8ba1\u7b97\u8eab\u9ad8\u7684\u5747\u503c\u3002 \u9996\u5148\u5e94\u8be5\u5148\u5199\u51fa\u5206\u7ec4\u6761\u4ef6\uff1a In [ 6 ]: condition = df . Weight > df . Weight . mean () \u7136\u540e\u5c06\u5176\u4f20\u5165 groupby \u4e2d\uff1a In [ 7 ]: df . groupby ( condition )[ 'Height' ] . mean () Out [ 7 ]: Weight False 159.034646 True 172.705357 Name : Height , dtype : float64 \u7ec3\u4e00\u7ec3 \u8bf7\u6839\u636e\u4e0a\u4e0b\u56db\u5206\u4f4d\u6570\u5206\u5272\uff0c\u5c06\u4f53\u91cd\u5206\u4e3a high\u3001normal\u3001low \u4e09\u7ec4\uff0c\u7edf\u8ba1\u8eab\u9ad8\u7684\u5747\u503c\u3002 \u4ece\u7d22\u5f15\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5b9e\u6700\u540e\u4ea7\u751f\u7684\u7ed3\u679c\u5c31\u662f\u6309\u7167\u6761\u4ef6\u5217\u8868\u4e2d\u5143\u7d20\u7684\u503c\uff08\u6b64\u5904\u662f True \u548c False \uff09\u6765\u5206\u7ec4\uff0c\u4e0b\u9762\u7528\u968f\u673a\u4f20\u5165\u5b57\u6bcd\u5e8f\u5217\u6765\u9a8c\u8bc1\u8fd9\u4e00\u60f3\u6cd5\uff1a In [ 8 ]: item = np . random . choice ( list ( 'abc' ), df . shape [ 0 ]) In [ 9 ]: df . groupby ( item )[ 'Height' ] . mean () Out [ 9 ]: a 163.924242 b 162.928814 c 162.708621 Name : Height , dtype : float64 \u6b64\u5904\u7684\u7d22\u5f15\u5c31\u662f\u539f\u5148 item \u4e2d\u7684\u5143\u7d20\uff0c\u5982\u679c\u4f20\u5165\u591a\u4e2a\u5e8f\u5217\u8fdb\u5165 groupby \uff0c\u90a3\u4e48\u6700\u540e\u5206\u7ec4\u7684\u4f9d\u636e\u5c31\u662f\u8fd9\u4e24\u4e2a\u5e8f\u5217\u5bf9\u5e94\u884c\u7684\u552f\u4e00\u7ec4\u5408\uff1a In [ 10 ]: df . groupby ([ condition , item ])[ 'Height' ] . mean () Out [ 10 ]: Weight False a 160.193617 b 158.921951 c 157.756410 True a 173.152632 b 172.055556 c 172.873684 Name : Height , dtype : float64 \u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff0c\u4e4b\u524d\u4f20\u5165\u5217\u540d\u53ea\u662f\u4e00\u79cd\u7b80\u4fbf\u7684\u8bb0\u53f7\uff0c\u4e8b\u5b9e\u4e0a\u7b49\u4ef7\u4e8e\u4f20\u5165\u7684\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u5217\uff0c\u6700\u540e\u5206\u7ec4\u7684\u4f9d\u636e\u6765\u81ea\u4e8e\u6570\u636e\u6765\u6e90\u7ec4\u5408\u7684 unique \u503c\uff0c\u901a\u8fc7 drop_duplicates \u5c31\u80fd\u77e5\u9053\u5177\u4f53\u7684\u7ec4\u7c7b\u522b\uff1a In [ 11 ]: df [[ 'School' , 'Gender' ]] . drop_duplicates () Out [ 11 ]: School Gender 0 Shanghai Jiao Tong University Female 1 Peking University Male 2 Shanghai Jiao Tong University Male 3 Fudan University Female 4 Fudan University Male 5 Tsinghua University Female 9 Peking University Female 16 Tsinghua University Male In [ 12 ]: df . groupby ([ df [ 'School' ], df [ 'Gender' ]])[ 'Height' ] . mean () Out [ 12 ]: School Gender Fudan University Female 158.776923 Male 174.212500 Peking University Female 158.666667 Male 172.030000 Shanghai Jiao Tong University Female 159.122500 Male 176.760000 Tsinghua University Female 159.753333 Male 171.638889 Name : Height , dtype : float64 3. Groupby \u5bf9\u8c61 \u80fd\u591f\u6ce8\u610f\u5230\uff0c\u6700\u7ec8\u5177\u4f53\u505a\u5206\u7ec4\u64cd\u4f5c\u65f6\uff0c\u6240\u8c03\u7528\u7684\u65b9\u6cd5\u90fd\u6765\u81ea\u4e8e pandas \u4e2d\u7684 groupby \u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u4e0a\u5b9a\u4e49\u4e86\u8bb8\u591a\u65b9\u6cd5\uff0c\u4e5f\u5177\u6709\u4e00\u4e9b\u65b9\u4fbf\u7684\u5c5e\u6027\u3002 In [ 13 ]: gb = df . groupby ([ 'School' , 'Grade' ]) In [ 14 ]: gb Out [ 14 ]: < pandas . core . groupby . generic . DataFrameGroupBy object at 0x0000013630DAB910 > \u901a\u8fc7 ngroups \u5c5e\u6027\uff0c\u53ef\u4ee5\u5f97\u5230\u5206\u7ec4\u4e2a\u6570\uff1a In [ 15 ]: gb . ngroups Out [ 15 ]: 16 \u901a\u8fc7 groups \u5c5e\u6027\uff0c\u53ef\u4ee5\u8fd4\u56de\u4ece \u7ec4\u540d \u6620\u5c04\u5230 \u7ec4\u7d22\u5f15\u5217\u8868 \u7684\u5b57\u5178\uff1a In [ 16 ]: res = gb . groups In [ 17 ]: res . keys () # \u5b57\u5178\u7684\u503c\u7531\u4e8e\u662f\u7d22\u5f15\uff0c\u5143\u7d20\u4e2a\u6570\u8fc7\u591a\uff0c\u6b64\u5904\u53ea\u5c55\u793a\u5b57\u5178\u7684\u952e Out [ 17 ]: dict_keys ([( 'Fudan University' , 'Freshman' ), ( 'Fudan University' , 'Junior' ), ( 'Fudan University' , 'Senior' ), ( 'Fudan University' , 'Sophomore' ), ( 'Peking University' , 'Freshman' ), ( 'Peking University' , 'Junior' ), ( 'Peking University' , 'Senior' ), ( 'Peking University' , 'Sophomore' ), ( 'Shanghai Jiao Tong University' , 'Freshman' ), ( 'Shanghai Jiao Tong University' , 'Junior' ), ( 'Shanghai Jiao Tong University' , 'Senior' ), ( 'Shanghai Jiao Tong University' , 'Sophomore' ), ( 'Tsinghua University' , 'Freshman' ), ( 'Tsinghua University' , 'Junior' ), ( 'Tsinghua University' , 'Senior' ), ( 'Tsinghua University' , 'Sophomore' )]) \u7ec3\u4e00\u7ec3 \u4e0a\u4e00\u5c0f\u8282\u4ecb\u7ecd\u4e86\u53ef\u4ee5\u901a\u8fc7 drop_duplicates \u5f97\u5230\u5177\u4f53\u7684\u7ec4\u7c7b\u522b\uff0c\u73b0\u8bf7\u7528 groups \u5c5e\u6027\u5b8c\u6210\u7c7b\u4f3c\u7684\u529f\u80fd\u3002 \u5f53 size \u4f5c\u4e3a DataFrame \u7684\u5c5e\u6027\u65f6\uff0c\u8fd4\u56de\u7684\u662f\u8868\u957f\u4e58\u4ee5\u8868\u5bbd\u7684\u5927\u5c0f\uff0c\u4f46\u5728 groupby \u5bf9\u8c61\u4e0a\u8868\u793a\u7edf\u8ba1\u6bcf\u4e2a\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\uff1a In [ 18 ]: gb . size () Out [ 18 ]: School Grade Fudan University Freshman 9 Junior 12 Senior 11 Sophomore 8 Peking University Freshman 13 Junior 8 Senior 8 Sophomore 5 Shanghai Jiao Tong University Freshman 13 Junior 17 Senior 22 Sophomore 5 Tsinghua University Freshman 17 Junior 22 Senior 14 Sophomore 16 dtype : int64 \u901a\u8fc7 get_group \u65b9\u6cd5\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u6240\u5728\u7ec4\u5bf9\u5e94\u7684\u884c\uff0c\u6b64\u65f6\u5fc5\u987b\u77e5\u9053\u7ec4\u7684\u5177\u4f53\u540d\u5b57\uff1a In [ 19 ]: gb . get_group (( 'Fudan University' , 'Freshman' )) . iloc [: 3 , : 3 ] # \u5c55\u793a\u4e00\u90e8\u5206 Out [ 19 ]: School Grade Name 15 Fudan University Freshman Changqiang Yang 28 Fudan University Freshman Gaoqiang Qin 63 Fudan University Freshman Gaofeng Zhao \u8fd9\u91cc\u5217\u51fa\u4e86 2 \u4e2a\u5c5e\u6027\u548c 2 \u4e2a\u65b9\u6cd5\uff0c\u800c\u5148\u524d\u7684 mean \u3001 median \u90fd\u662f groupby \u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u51fd\u6570\u548c\u8bb8\u591a\u5176\u4ed6\u51fd\u6570\u7684\u64cd\u4f5c\u5177\u6709\u9ad8\u5ea6\u76f8\u4f3c\u6027\uff0c\u5c06\u5728\u4e4b\u540e\u7684\u5c0f\u8282\u8fdb\u884c\u4e13\u95e8\u4ecb\u7ecd\u3002 4. \u5206\u7ec4\u7684\u4e09\u5927\u64cd\u4f5c \u719f\u6089\u4e86\u4e00\u4e9b\u5206\u7ec4\u7684\u57fa\u672c\u77e5\u8bc6\u540e\uff0c\u91cd\u65b0\u56de\u5230\u5f00\u5934\u4e3e\u7684\u4e09\u4e2a\u4f8b\u5b50\uff0c\u53ef\u80fd\u4f1a\u53d1\u73b0\u4e00\u4e9b\u7aef\u502a\uff0c\u5373\u8fd9\u4e09\u79cd\u7c7b\u578b\u5206\u7ec4\u8fd4\u56de\u7684\u6570\u636e\u578b\u6001\u5e76\u4e0d\u4e00\u6837\uff1a \u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u7ec4\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c\uff0c\u53ef\u4ee5\u662f\u5e73\u5747\u503c\u3001\u4e2d\u4f4d\u6570\u3001\u7ec4\u5bb9\u91cf size \u7b49 \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u505a\u4e86\u539f\u5e8f\u5217\u7684\u6807\u51c6\u5316\u5904\u7406\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u7ec4\u8fd4\u56de\u7684\u662f\u4e00\u4e2a Series \u7c7b\u578b \u7b2c\u4e09\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u65e2\u4e0d\u662f\u6807\u91cf\u4e5f\u4e0d\u662f\u5e8f\u5217\uff0c\u8fd4\u56de\u7684\u6574\u4e2a\u7ec4\u6240\u5728\u884c\u7684\u672c\u8eab\uff0c\u5373\u8fd4\u56de\u4e86 DataFrame \u7c7b\u578b \u7531\u6b64\uff0c\u5f15\u7533\u51fa\u5206\u7ec4\u7684\u4e09\u5927\u64cd\u4f5c\uff1a\u805a\u5408\u3001\u53d8\u6362\u548c\u8fc7\u6ee4\uff0c\u5206\u522b\u5bf9\u5e94\u4e86\u4e09\u4e2a\u4f8b\u5b50\u7684\u64cd\u4f5c\uff0c\u4e0b\u9762\u5c31\u8981\u5206\u522b\u4ecb\u7ecd\u76f8\u5e94\u7684 agg \u3001 transform \u548c filter \u51fd\u6570\u53ca\u5176\u64cd\u4f5c\u3002 \u4e8c\u3001\u805a\u5408\u51fd\u6570 1. \u5185\u7f6e\u805a\u5408\u51fd\u6570 \u5728\u4ecb\u7ecd agg \u4e4b\u524d\uff0c\u9996\u5148\u8981\u4e86\u89e3\u4e00\u4e9b\u76f4\u63a5\u5b9a\u4e49\u5728 groupby \u5bf9\u8c61\u7684\u805a\u5408\u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u7684\u901f\u5ea6\u57fa\u672c\u90fd\u4f1a\u7ecf\u8fc7\u5185\u90e8\u7684\u4f18\u5316\uff0c\u4f7f\u7528\u529f\u80fd\u65f6\u5e94\u5f53\u4f18\u5148\u8003\u8651\u3002\u6839\u636e\u8fd4\u56de\u6807\u91cf\u503c\u7684\u539f\u5219\uff0c\u5305\u62ec\u5982\u4e0b\u51fd\u6570\uff1a max/min/mean/median/count/all/any/idxmax/idxmin/mad/nunique/skew/quantile/sum/std/var/sem/size/prod \u3002 In [ 20 ]: gb = df . groupby ( 'Gender' )[ 'Height' ] In [ 21 ]: gb . idxmin () Out [ 21 ]: Gender Female 143 Male 199 Name : Height , dtype : int64 In [ 22 ]: gb . quantile ( 0.95 ) Out [ 22 ]: Gender Female 166.8 Male 185.9 Name : Height , dtype : float64 \u7ec3\u4e00\u7ec3 \u8bf7\u67e5\u9605\u6587\u6863\uff0c\u660e\u786e all/any/mad/skew/sem/prod \u51fd\u6570\u7684\u542b\u4e49\u3002 \u8fd9\u4e9b\u805a\u5408\u51fd\u6570\u5f53\u4f20\u5165\u7684\u6570\u636e\u6765\u6e90\u5305\u542b\u591a\u4e2a\u5217\u65f6\uff0c\u5c06\u6309\u7167\u5217\u8fdb\u884c\u8fed\u4ee3\u8ba1\u7b97\uff1a In [ 23 ]: gb = df . groupby ( 'Gender' )[[ 'Height' , 'Weight' ]] In [ 24 ]: gb . max () Out [ 24 ]: Height Weight Gender Female 170.2 63.0 Male 193.9 89.0 2. agg \u65b9\u6cd5 \u867d\u7136\u5728 groupby \u5bf9\u8c61\u4e0a\u5b9a\u4e49\u4e86\u8bb8\u591a\u65b9\u4fbf\u7684\u51fd\u6570\uff0c\u4f46\u4ecd\u7136\u6709\u4ee5\u4e0b\u4e0d\u4fbf\u4e4b\u5904\uff1a \u65e0\u6cd5\u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u51fd\u6570 \u65e0\u6cd5\u5bf9\u7279\u5b9a\u7684\u5217\u4f7f\u7528\u7279\u5b9a\u7684\u805a\u5408\u51fd\u6570 \u65e0\u6cd5\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u805a\u5408\u51fd\u6570 \u65e0\u6cd5\u76f4\u63a5\u5bf9\u7ed3\u679c\u7684\u5217\u540d\u5728\u805a\u5408\u524d\u8fdb\u884c\u81ea\u5b9a\u4e49\u547d\u540d \u4e0b\u9762\u8bf4\u660e\u5982\u4f55\u901a\u8fc7 agg \u51fd\u6570\u89e3\u51b3\u8fd9\u56db\u7c7b\u95ee\u9898\uff1a \u3010a\u3011\u4f7f\u7528\u591a\u4e2a\u51fd\u6570 \u5f53\u4f7f\u7528\u591a\u4e2a\u805a\u5408\u51fd\u6570\u65f6\uff0c\u9700\u8981\u7528\u5217\u8868\u7684\u5f62\u5f0f\u628a\u5185\u7f6e\u805a\u5408\u51fd\u6570\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u4f20\u5165\uff0c\u5148\u524d\u63d0\u5230\u7684\u6240\u6709\u5b57\u7b26\u4e32\u90fd\u662f\u5408\u6cd5\u7684\u3002 In [ 25 ]: gb . agg ([ 'sum' , 'idxmax' , 'skew' ]) Out [ 25 ]: Height Weight sum idxmax skew sum idxmax skew Gender Female 21014.0 28 - 0.219253 6469.0 28 - 0.268482 Male 8854.9 193 0.437535 3929.0 2 - 0.332393 \u4ece\u7ed3\u679c\u770b\uff0c\u6b64\u65f6\u7684\u5217\u7d22\u5f15\u4e3a\u591a\u7ea7\u7d22\u5f15\uff0c\u7b2c\u4e00\u5c42\u4e3a\u6570\u636e\u6e90\uff0c\u7b2c\u4e8c\u5c42\u4e3a\u4f7f\u7528\u7684\u805a\u5408\u65b9\u6cd5\uff0c\u5206\u522b\u9010\u4e00\u5bf9\u5217\u4f7f\u7528\u805a\u5408\uff0c\u56e0\u6b64\u7ed3\u679c\u4e3a 6 \u5217\u3002 \u3010b\u3011\u5bf9\u7279\u5b9a\u7684\u5217\u4f7f\u7528\u7279\u5b9a\u7684\u805a\u5408\u51fd\u6570 \u5bf9\u4e8e\u65b9\u6cd5\u548c\u5217\u7684\u7279\u6b8a\u5bf9\u5e94\uff0c\u53ef\u4ee5\u901a\u8fc7\u6784\u9020\u5b57\u5178\u4f20\u5165 agg \u4e2d\u5b9e\u73b0\uff0c\u5176\u4e2d\u5b57\u5178\u4ee5\u5217\u540d\u4e3a\u952e\uff0c\u4ee5\u805a\u5408\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\u4e32\u5217\u8868\u4e3a\u503c\u3002 In [ 26 ]: gb . agg ({ 'Height' :[ 'mean' , 'max' ], 'Weight' : 'count' }) Out [ 26 ]: Height Weight mean max count Gender Female 159.19697 170.2 135 Male 173.62549 193.9 54 \u7ec3\u4e00\u7ec3 \u8bf7\u4f7f\u7528\u3010b\u3011\u4e2d\u7684\u4f20\u5165\u5b57\u5178\u7684\u65b9\u6cd5\u5b8c\u6210\u3010a\u3011\u4e2d\u7b49\u4ef7\u7684\u805a\u5408\u4efb\u52a1\u3002 \u3010c\u3011\u4f7f\u7528\u81ea\u5b9a\u4e49\u51fd\u6570 \u5728 agg \u4e2d\u53ef\u4ee5\u4f7f\u7528\u5177\u4f53\u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c \u9700\u8981\u6ce8\u610f\u4f20\u5165\u51fd\u6570\u7684\u53c2\u6570\u662f\u4e4b\u524d\u6570\u636e\u6e90\u4e2d\u7684\u5217\uff0c\u9010\u5217\u8fdb\u884c\u8ba1\u7b97 \u3002\u4e0b\u9762\u5206\u7ec4\u8ba1\u7b97\u8eab\u9ad8\u548c\u4f53\u91cd\u7684\u6781\u5dee\uff1a In [ 27 ]: gb . agg ( lambda x : x . max () - x . min ()) Out [ 27 ]: Height Weight Gender Female 24.8 29.0 Male 38.2 38.0 \u7ec3\u4e00\u7ec3 \u5728 groupby \u5bf9\u8c61\u4e2d\u53ef\u4ee5\u4f7f\u7528 describe \u65b9\u6cd5\u8fdb\u884c\u7edf\u8ba1\u4fe1\u606f\u6c47\u603b\uff0c\u8bf7\u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u805a\u5408\u51fd\u6570\uff0c\u5b8c\u6210\u4e0e\u8be5\u65b9\u6cd5\u76f8\u540c\u7684\u529f\u80fd\u3002 \u7531\u4e8e\u4f20\u5165\u7684\u662f\u5e8f\u5217\uff0c\u56e0\u6b64\u5e8f\u5217\u4e0a\u7684\u65b9\u6cd5\u548c\u5c5e\u6027\u90fd\u662f\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u4f7f\u7528\u7684\uff0c\u53ea\u9700\u4fdd\u8bc1\u8fd4\u56de\u503c\u662f\u6807\u91cf\u5373\u53ef\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u6307\uff0c\u5982\u679c\u7ec4\u7684\u6307\u6807\u5747\u503c\uff0c\u8d85\u8fc7\u8be5\u6307\u6807\u7684\u603b\u4f53\u5747\u503c\uff0c\u8fd4\u56de High\uff0c\u5426\u5219\u8fd4\u56de Low\u3002 In [ 28 ]: def my_func ( s ): .... : res = 'High' .... : if s . mean () <= df [ s . name ] . mean (): .... : res = 'Low' .... : return res .... : In [ 29 ]: gb . agg ( my_func ) Out [ 29 ]: Height Weight Gender Female Low Low Male High High \u3010d\u3011\u805a\u5408\u7ed3\u679c\u91cd\u547d\u540d \u5982\u679c\u60f3\u8981\u5bf9\u805a\u5408\u7ed3\u679c\u7684\u5217\u540d\u8fdb\u884c\u91cd\u547d\u540d\uff0c\u53ea\u9700\u8981\u5c06\u4e0a\u8ff0\u51fd\u6570\u7684\u4f4d\u7f6e\u6539\u5199\u6210\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a\u65b0\u7684\u540d\u5b57\uff0c\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u4e3a\u539f\u6765\u7684\u51fd\u6570\uff0c\u5305\u62ec\u805a\u5408\u5b57\u7b26\u4e32\u548c\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u73b0\u4e3e\u82e5\u5e72\u4f8b\u5b50\u8bf4\u660e\uff1a In [ 30 ]: gb . agg ([( 'range' , lambda x : x . max () - x . min ()), ( 'my_sum' , 'sum' )]) Out [ 30 ]: Height Weight range my_sum range my_sum Gender Female 24.8 21014.0 29.0 6469.0 Male 38.2 8854.9 38.0 3929.0 In [ 31 ]: gb . agg ({ 'Height' : [( 'my_func' , my_func ), 'sum' ], .... : 'Weight' : lambda x : x . max ()}) .... : Out [ 31 ]: Height Weight my_func sum < lambda > Gender Female Low 21014.0 63.0 Male High 8854.9 89.0 \u53e6\u5916\u9700\u8981\u6ce8\u610f\uff0c\u4f7f\u7528\u5bf9\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5217\u4f7f\u7528\u5355\u4e2a\u805a\u5408\u7684\u65f6\u5019\uff0c\u91cd\u547d\u540d\u9700\u8981\u52a0\u65b9\u62ec\u53f7\uff0c\u5426\u5219\u5c31\u4e0d\u77e5\u9053\u662f\u65b0\u7684\u540d\u5b57\u8fd8\u662f\u624b\u8bef\u8f93\u9519\u7684\u5185\u7f6e\u51fd\u6570\u5b57\u7b26\u4e32\uff1a In [ 32 ]: gb . agg ([( 'my_sum' , 'sum' )]) Out [ 32 ]: Height Weight my_sum my_sum Gender Female 21014.0 6469.0 Male 8854.9 3929.0 In [ 33 ]: gb . agg ({ 'Height' : [( 'my_func' , my_func ), 'sum' ], .... : 'Weight' : [( 'range' , lambda x : x . max ())]}) .... : Out [ 33 ]: Height Weight my_func sum range Gender Female Low 21014.0 63.0 Male High 8854.9 89.0 \u4e09\u3001\u53d8\u6362\u548c\u8fc7\u6ee4 1. \u53d8\u6362\u51fd\u6570\u4e0e transform \u65b9\u6cd5 \u53d8\u6362\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u540c\u957f\u5ea6\u7684\u5e8f\u5217\uff0c\u6700\u5e38\u7528\u7684\u5185\u7f6e\u53d8\u6362\u51fd\u6570\u662f\u7d2f\u8ba1\u51fd\u6570\uff1a cumcount/cumsum/cumprod/cummax/cummin \uff0c\u5b83\u4eec\u7684\u4f7f\u7528\u65b9\u5f0f\u548c\u805a\u5408\u51fd\u6570\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5b8c\u6210\u7684\u662f\u7ec4\u5185\u7d2f\u8ba1\u64cd\u4f5c\u3002\u6b64\u5916\u5728 groupby \u5bf9\u8c61\u4e0a\u8fd8\u5b9a\u4e49\u4e86\u586b\u5145\u7c7b\u548c\u6ed1\u7a97\u7c7b\u7684\u53d8\u6362\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u7684\u4e00\u822c\u5f62\u5f0f\u5c06\u4f1a\u5206\u522b\u5728\u7b2c\u4e03\u7ae0\u548c\u7b2c\u5341\u7ae0\u4e2d\u8ba8\u8bba\uff0c\u6b64\u5904\u7565\u8fc7\u3002 In [ 34 ]: gb . cummax () . head () Out [ 34 ]: Height Weight 0 158.9 46.0 1 166.5 70.0 2 188.9 89.0 3 NaN 46.0 4 188.9 89.0 \u7ec3\u4e00\u7ec3 \u5728 groupby \u5bf9\u8c61\u4e2d\uff0c rank \u65b9\u6cd5\u4e5f\u662f\u4e00\u4e2a\u5b9e\u7528\u7684\u53d8\u6362\u51fd\u6570\uff0c\u8bf7\u67e5\u9605\u5b83\u7684\u529f\u80fd\u5e76\u7ed9\u51fa\u4e00\u4e2a\u4f7f\u7528\u7684\u4f8b\u5b50\u3002 \u5f53\u7528\u81ea\u5b9a\u4e49\u53d8\u6362\u65f6\u9700\u8981\u4f7f\u7528 transform \u65b9\u6cd5\uff0c\u88ab\u8c03\u7528\u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c \u5176\u4f20\u5165\u503c\u4e3a\u6570\u636e\u6e90\u7684\u5e8f\u5217 \uff0c\u4e0e agg \u7684\u4f20\u5165\u7c7b\u578b\u662f\u4e00\u81f4\u7684\uff0c\u5176\u6700\u540e\u7684\u8fd4\u56de\u7ed3\u679c\u662f\u884c\u5217\u7d22\u5f15\u4e0e\u6570\u636e\u6e90\u4e00\u81f4\u7684 DataFrame \u3002 \u73b0\u5bf9\u8eab\u9ad8\u548c\u4f53\u91cd\u8fdb\u884c\u5206\u7ec4\u6807\u51c6\u5316\uff0c\u5373\u51cf\u53bb\u7ec4\u5747\u503c\u540e\u9664\u4ee5\u7ec4\u7684\u6807\u51c6\u5dee\uff1a In [ 35 ]: gb . transform ( lambda x : ( x - x . mean ()) / x . std ()) . head () Out [ 35 ]: Height Weight 0 - 0.058760 - 0.354888 1 - 1.010925 - 0.355000 2 2.167063 2.089498 3 NaN - 1.279789 4 0.053133 0.159631 \u7ec3\u4e00\u7ec3 \u5bf9\u4e8e transform \u65b9\u6cd5\u65e0\u6cd5\u50cf agg \u4e00\u6837\uff0c\u901a\u8fc7\u4f20\u5165\u5b57\u5178\u6765\u5bf9\u6307\u5b9a\u5217\u4f7f\u7528\u7279\u5b9a\u7684\u53d8\u6362\uff0c\u5982\u679c\u9700\u8981\u5728\u4e00\u6b21 transform \u7684\u8c03\u7528\u4e2d\u5b9e\u73b0\u8fd9\u79cd\u529f\u80fd\uff0c\u8bf7\u7ed9\u51fa\u89e3\u51b3\u65b9\u6848\u3002 \u524d\u9762\u63d0\u5230\u4e86 transform \u53ea\u80fd\u8fd4\u56de\u540c\u957f\u5ea6\u7684\u5e8f\u5217\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u8fd8\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\uff0c\u8fd9\u4f1a\u4f7f\u5f97\u7ed3\u679c\u88ab\u5e7f\u64ad\u5230\u5176\u6240\u5728\u7684\u6574\u4e2a\u7ec4\uff0c\u8fd9\u79cd \u6807\u91cf\u5e7f\u64ad \u7684\u6280\u5de7\u5728\u7279\u5f81\u5de5\u7a0b\u4e2d\u662f\u975e\u5e38\u5e38\u89c1\u7684\u3002\u4f8b\u5982\uff0c\u6784\u9020\u4e24\u5217\u65b0\u7279\u5f81\u6765\u5206\u522b\u8868\u793a\u6837\u672c\u6240\u5728\u6027\u522b\u7ec4\u7684\u8eab\u9ad8\u5747\u503c\u548c\u4f53\u91cd\u5747\u503c\uff1a In [ 36 ]: gb . transform ( 'mean' ) . head () # \u4f20\u5165\u8fd4\u56de\u6807\u91cf\u7684\u51fd\u6570\u4e5f\u662f\u53ef\u4ee5\u7684 Out [ 36 ]: Height Weight 0 159.19697 47.918519 1 173.62549 72.759259 2 173.62549 72.759259 3 159.19697 47.918519 4 173.62549 72.759259 2. \u7ec4\u7d22\u5f15\u4e0e\u8fc7\u6ee4 \u5728\u4e0a\u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u4e86\u7d22\u5f15\u7684\u7528\u6cd5\uff0c\u90a3\u4e48\u7d22\u5f15\u548c\u8fc7\u6ee4\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f \u8fc7\u6ee4\u5728\u5206\u7ec4\u4e2d\u662f\u5bf9\u4e8e\u7ec4\u7684\u8fc7\u6ee4\uff0c\u800c\u7d22\u5f15\u662f\u5bf9\u4e8e\u884c\u7684\u8fc7\u6ee4\uff0c\u5728\u7b2c\u4e8c\u7ae0\u4e2d\u7684\u8fd4\u56de\u503c\uff0c\u65e0\u8bba\u662f\u5e03\u5c14\u5217\u8868\u8fd8\u662f\u5143\u7d20\u5217\u8868\u6216\u8005\u4f4d\u7f6e\u5217\u8868\uff0c\u672c\u8d28\u4e0a\u90fd\u662f\u5bf9\u4e8e\u884c\u7684\u7b5b\u9009\uff0c\u5373\u5982\u679c\u7b26\u5408\u7b5b\u9009\u6761\u4ef6\u7684\u5219\u9009\u5165\u7ed3\u679c\u8868\uff0c\u5426\u5219\u4e0d\u9009\u5165\u3002 \u7ec4\u8fc7\u6ee4\u4f5c\u4e3a\u884c\u8fc7\u6ee4\u7684\u63a8\u5e7f\uff0c\u6307\u7684\u662f\u5982\u679c\u5bf9\u4e00\u4e2a\u7ec4\u7684\u5168\u4f53\u6240\u5728\u884c\u8fdb\u884c\u7edf\u8ba1\u7684\u7ed3\u679c\u8fd4\u56de True \u5219\u4f1a\u88ab\u4fdd\u7559\uff0c False \u5219\u8be5\u7ec4\u4f1a\u88ab\u8fc7\u6ee4\uff0c\u6700\u540e\u628a\u6240\u6709\u672a\u88ab\u8fc7\u6ee4\u7684\u7ec4\u5176\u5bf9\u5e94\u7684\u6240\u5728\u884c\u62fc\u63a5\u8d77\u6765\u4f5c\u4e3a DataFrame \u8fd4\u56de\u3002 \u5728 groupby \u5bf9\u8c61\u4e2d\uff0c\u5b9a\u4e49\u4e86 filter \u65b9\u6cd5\u8fdb\u884c\u7ec4\u7684\u7b5b\u9009\uff0c\u5176\u4e2d\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u8f93\u5165\u53c2\u6570\u4e3a\u6570\u636e\u6e90\u6784\u6210\u7684 DataFrame \u672c\u8eab\uff0c\u5728\u4e4b\u524d\u4f8b\u5b50\u4e2d\u5b9a\u4e49\u7684 groupby \u5bf9\u8c61\u4e2d\uff0c\u4f20\u5165\u7684\u5c31\u662f df[['Height', 'Weight']] \uff0c\u56e0\u6b64\u6240\u6709\u8868\u65b9\u6cd5\u548c\u5c5e\u6027\u90fd\u53ef\u4ee5\u5728\u81ea\u5b9a\u4e49\u51fd\u6570\u4e2d\u76f8\u5e94\u5730\u4f7f\u7528\uff0c\u540c\u65f6\u53ea\u9700\u4fdd\u8bc1\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u8fd4\u56de\u4e3a\u5e03\u5c14\u503c\u5373\u53ef\u3002 \u4f8b\u5982\uff0c\u5728\u539f\u8868\u4e2d\u901a\u8fc7\u8fc7\u6ee4\u5f97\u5230\u6240\u6709\u5bb9\u91cf\u5927\u4e8e 100 \u7684\u7ec4\uff1a In [ 37 ]: gb . filter ( lambda x : x . shape [ 0 ] > 100 ) . head () Out [ 37 ]: Height Weight 0 158.9 46.0 3 NaN 41.0 5 158.0 51.0 6 162.5 52.0 7 161.9 50.0 \u7ec3\u4e00\u7ec3 \u4ece\u6982\u5ff5\u4e0a\u8bf4\uff0c\u7d22\u5f15\u529f\u80fd\u662f\u7ec4\u8fc7\u6ee4\u529f\u80fd\u7684\u5b50\u96c6\uff0c\u8bf7\u4f7f\u7528 filter \u51fd\u6570\u5b8c\u6210 loc[.] \u7684\u529f\u80fd\uff0c\u8fd9\u91cc\u5047\u8bbe \u201d . \u201c\u662f\u5143\u7d20\u5217\u8868\u3002 \u56db\u3001\u8de8\u5217\u5206\u7ec4 1. apply \u7684\u5f15\u5165 \u4e4b\u524d\u51e0\u8282\u4ecb\u7ecd\u4e86\u4e09\u5927\u5206\u7ec4\u64cd\u4f5c\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u8fd8\u6709\u4e00\u79cd\u5e38\u89c1\u7684\u5206\u7ec4\u573a\u666f\uff0c\u65e0\u6cd5\u7528\u524d\u9762\u4ecb\u7ecd\u7684\u4efb\u4f55\u4e00\u79cd\u65b9\u6cd5\u5904\u7406\uff0c\u4f8b\u5982\u73b0\u5728\u5982\u4e0b\u5b9a\u4e49\u8eab\u4f53\u8d28\u91cf\u6307\u6570 BMI\uff1a \u5176\u4e2d\u4f53\u91cd\u548c\u8eab\u9ad8\u7684\u5355\u4f4d\u5206\u522b\u4e3a\u5343\u514b\u548c\u7c73\uff0c\u9700\u8981\u5206\u7ec4\u8ba1\u7b97\u7ec4 BMI \u7684\u5747\u503c\u3002 \u9996\u5148\uff0c\u8fd9\u663e\u7136\u4e0d\u662f\u8fc7\u6ee4\u64cd\u4f5c\uff0c\u56e0\u6b64 filter \u4e0d\u7b26\u5408\u8981\u6c42\uff1b\u5176\u6b21\uff0c\u8fd4\u56de\u7684\u5747\u503c\u662f\u6807\u91cf\u800c\u4e0d\u662f\u5e8f\u5217\uff0c\u56e0\u6b64 transform \u4e0d\u7b26\u5408\u8981\u6c42\uff1b\u6700\u540e\uff0c\u4f3c\u4e4e\u4f7f\u7528 agg \u51fd\u6570\u80fd\u591f\u5904\u7406\uff0c\u4f46\u662f\u4e4b\u524d\u5f3a\u8c03\u8fc7\u805a\u5408\u51fd\u6570\u662f\u9010\u5217\u5904\u7406\u7684\uff0c\u800c\u4e0d\u80fd\u591f \u591a\u5217\u6570\u636e\u540c\u65f6\u5904\u7406 \u3002\u7531\u6b64\uff0c\u5f15\u51fa\u4e86 apply \u51fd\u6570\u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002 2. apply \u7684\u4f7f\u7528 \u5728\u8bbe\u8ba1\u4e0a\uff0c apply \u7684\u81ea\u5b9a\u4e49\u51fd\u6570\u4f20\u5165\u53c2\u6570\u4e0e filter \u5b8c\u5168\u4e00\u81f4\uff0c\u53ea\u4e0d\u8fc7\u540e\u8005\u53ea\u5141\u8bb8\u8fd4\u56de\u5e03\u5c14\u503c\u3002\u73b0\u5982\u4e0b\u89e3\u51b3\u4e0a\u8ff0\u8ba1\u7b97\u95ee\u9898\uff1a In [ 38 ]: def BMI ( x ): .... : Height = x [ 'Height' ] / 100 .... : Weight = x [ 'Weight' ] .... : BMI_value = Weight / Height ** 2 .... : return BMI_value . mean () .... : In [ 39 ]: gb . apply ( BMI ) Out [ 39 ]: Gender Female 18.860930 Male 24.318654 dtype : float64 \u9664\u4e86\u8fd4\u56de\u6807\u91cf\u4e4b\u5916\uff0c apply \u65b9\u6cd5\u8fd8\u53ef\u4ee5\u8fd4\u56de\u4e00\u7ef4 Series \u548c\u4e8c\u7ef4 DataFrame \uff0c\u4f46\u5b83\u4eec\u4ea7\u751f\u7684\u6570\u636e\u6846\u7ef4\u6570\u548c\u591a\u7ea7\u7d22\u5f15\u7684\u5c42\u6570\u5e94\u5f53\u5982\u4f55\u53d8\u5316\uff1f\u4e0b\u9762\u4e3e\u4e09\u7ec4\u4f8b\u5b50\u5c31\u975e\u5e38\u5bb9\u6613\u660e\u767d\u7ed3\u679c\u662f\u5982\u4f55\u751f\u6210\u7684\uff1a \u3010a\u3011\u6807\u91cf\u60c5\u51b5\uff1a\u7ed3\u679c\u5f97\u5230\u7684\u662f Series \uff0c\u7d22\u5f15\u4e0e agg \u7684\u7ed3\u679c\u4e00\u81f4 In [ 40 ]: gb = df . groupby ([ 'Gender' , 'Test_Number' ])[[ 'Height' , 'Weight' ]] In [ 41 ]: gb . apply ( lambda x : 0 ) Out [ 41 ]: Gender Test_Number Female 1 0 2 0 3 0 Male 1 0 2 0 3 0 dtype : int64 In [ 42 ]: gb . apply ( lambda x : [ 0 , 0 ]) # \u867d\u7136\u662f\u5217\u8868\uff0c\u4f46\u662f\u4f5c\u4e3a\u8fd4\u56de\u503c\u4ecd\u7136\u770b\u4f5c\u6807\u91cf Out [ 42 ]: Gender Test_Number Female 1 [ 0 , 0 ] 2 [ 0 , 0 ] 3 [ 0 , 0 ] Male 1 [ 0 , 0 ] 2 [ 0 , 0 ] 3 [ 0 , 0 ] dtype : object \u3010b\u3011 Series \u60c5\u51b5\uff1a\u5f97\u5230\u7684\u662f DataFrame \uff0c\u884c\u7d22\u5f15\u4e0e\u6807\u91cf\u60c5\u51b5\u4e00\u81f4\uff0c\u5217\u7d22\u5f15\u4e3a Series \u7684\u7d22\u5f15 In [ 43 ]: gb . apply ( lambda x : pd . Series ([ 0 , 0 ], index = [ 'a' , 'b' ])) Out [ 43 ]: a b Gender Test_Number Female 1 0 0 2 0 0 3 0 0 Male 1 0 0 2 0 0 3 0 0 \u7ec3\u4e00\u7ec3 \u8bf7\u5c1d\u8bd5\u5728 apply \u4f20\u5165\u7684\u81ea\u5b9a\u4e49\u51fd\u6570\u4e2d\uff0c\u6839\u636e\u7ec4\u7684\u67d0\u4e9b\u7279\u5f81\u8fd4\u56de\u76f8\u540c\u957f\u5ea6\u4f46\u7d22\u5f15\u4e0d\u540c\u7684 Series \uff0c\u4f1a\u62a5\u9519\u5417\uff1f \u3010c\u3011 DataFrame \u60c5\u51b5\uff1a\u5f97\u5230\u7684\u662f DataFrame \uff0c\u884c\u7d22\u5f15\u6700\u5185\u5c42\u5728\u6bcf\u4e2a\u7ec4\u539f\u5148 agg \u7684\u7ed3\u679c\u7d22\u5f15\u4e0a\uff0c\u518d\u52a0\u4e00\u5c42\u8fd4\u56de\u7684 DataFrame \u884c\u7d22\u5f15\uff0c\u540c\u65f6\u5206\u7ec4\u7ed3\u679c DataFrame \u7684\u5217\u7d22\u5f15\u548c\u8fd4\u56de\u7684 DataFrame \u5217\u7d22\u5f15\u4e00\u81f4\u3002 In [ 44 ]: gb . apply ( lambda x : pd . DataFrame ( np . ones (( 2 , 2 )), .... : index = [ 'a' , 'b' ], .... : columns = pd . Index ([( 'w' , 'x' ),( 'y' , 'z' )]))) .... : Out [ 44 ]: w y x z Gender Test_Number Female 1 a 1.0 1.0 b 1.0 1.0 2 a 1.0 1.0 b 1.0 1.0 3 a 1.0 1.0 b 1.0 1.0 Male 1 a 1.0 1.0 b 1.0 1.0 2 a 1.0 1.0 b 1.0 1.0 3 a 1.0 1.0 b 1.0 1.0 \u7ec3\u4e00\u7ec3 \u8bf7\u5c1d\u8bd5\u5728 apply \u4f20\u5165\u7684\u81ea\u5b9a\u4e49\u51fd\u6570\u4e2d\uff0c\u6839\u636e\u7ec4\u7684\u67d0\u4e9b\u7279\u5f81\u8fd4\u56de\u76f8\u540c\u5927\u5c0f\u4f46\u5217\u7d22\u5f15\u4e0d\u540c\u7684 DataFrame \uff0c\u4f1a\u62a5\u9519\u5417\uff1f\u5982\u679c\u53ea\u662f\u884c\u7d22\u5f15\u4e0d\u540c\uff0c\u4f1a\u62a5\u9519\u5417\uff1f \u6700\u540e\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0c apply \u51fd\u6570\u7684\u7075\u6d3b\u6027\u662f\u4ee5\u727a\u7272\u4e00\u5b9a\u6027\u80fd\u4e3a\u4ee3\u4ef7\u6362\u5f97\u7684\uff0c\u9664\u975e\u9700\u8981\u4f7f\u7528\u8de8\u5217\u5904\u7406\u7684\u5206\u7ec4\u5904\u7406\uff0c\u5426\u5219\u5e94\u5f53\u4f7f\u7528\u5176\u4ed6\u4e13\u95e8\u8bbe\u8ba1\u7684 groupby \u5bf9\u8c61\u65b9\u6cd5\uff0c\u5426\u5219\u5728\u6027\u80fd\u4e0a\u4f1a\u5b58\u5728\u8f83\u5927\u7684\u5dee\u8ddd\u3002\u540c\u65f6\uff0c\u5728\u4f7f\u7528\u805a\u5408\u51fd\u6570\u548c\u53d8\u6362\u51fd\u6570\u65f6\uff0c\u4e5f\u5e94\u5f53\u4f18\u5148\u4f7f\u7528\u5185\u7f6e\u51fd\u6570\uff0c\u5b83\u4eec\u7ecf\u8fc7\u4e86\u9ad8\u5ea6\u7684\u6027\u80fd\u4f18\u5316\uff0c\u4e00\u822c\u800c\u8a00\u5728\u901f\u5ea6\u4e0a\u90fd\u4f1a\u5feb\u4e8e\u7528\u81ea\u5b9a\u4e49\u51fd\u6570\u6765\u5b9e\u73b0\u3002 \u7ec3\u4e00\u7ec3 \u5728 groupby \u5bf9\u8c61\u4e2d\u8fd8\u5b9a\u4e49\u4e86 cov \u548c corr \u51fd\u6570\uff0c\u4ece\u6982\u5ff5\u4e0a\u8bf4\u4e5f\u5c5e\u4e8e\u8de8\u5217\u7684\u5206\u7ec4\u5904\u7406\u3002\u8bf7\u5229\u7528\u4e4b\u524d\u5b9a\u4e49\u7684 gb \u5bf9\u8c61\uff0c\u4f7f\u7528 apply \u51fd\u6570\u5b9e\u73b0\u4e0e gb.cov() \u540c\u6837\u7684\u529f\u80fd\u5e76\u6bd4\u8f83\u5b83\u4eec\u7684\u6027\u80fd\u3002 \u4e94\u3001\u7ec3\u4e60 Ex1\uff1a\u6c7d\u8f66\u6570\u636e\u96c6 \u73b0\u6709\u4e00\u4efd\u6c7d\u8f66\u6570\u636e\u96c6\uff0c\u5176\u4e2d Brand, Disp., HP \u5206\u522b\u4ee3\u8868\u6c7d\u8f66\u54c1\u724c\u3001\u53d1\u52a8\u673a\u84c4\u91cf\u3001\u53d1\u52a8\u673a\u8f93\u51fa\u3002 In [ 45 ]: df = pd . read_csv ( 'data/car.csv' ) In [ 46 ]: df . head ( 3 ) Out [ 46 ]: Brand Price Country Reliability Mileage Type Weight Disp . HP 0 Eagle Summit 4 8895 USA 4.0 33 Small 2560 97 113 1 Ford Escort 4 7402 USA 2.0 33 Small 2345 114 90 2 Ford Festiva 4 6319 Korea 4.0 37 Small 1845 81 63 \u5148\u8fc7\u6ee4\u51fa\u6240\u5c5e Country \u6570\u8d85\u8fc7 2 \u4e2a\u7684\u6c7d\u8f66\uff0c\u5373\u82e5\u8be5\u6c7d\u8f66\u7684 Country \u5728\u603b\u4f53\u6570\u636e\u96c6\u4e2d\u51fa\u73b0\u6b21\u6570\u4e0d\u8d85\u8fc7 2 \u5219\u5254\u9664\uff0c\u518d\u6309 Country \u5206\u7ec4\u8ba1\u7b97\u4ef7\u683c\u5747\u503c\u3001\u4ef7\u683c\u53d8\u5f02\u7cfb\u6570\u3001\u8be5 Country \u7684\u6c7d\u8f66\u6570\u91cf\uff0c\u5176\u4e2d\u53d8\u5f02\u7cfb\u6570\u7684\u8ba1\u7b97\u65b9\u6cd5\u662f\u6807\u51c6\u5dee\u9664\u4ee5\u5747\u503c\uff0c\u5e76\u5728\u7ed3\u679c\u4e2d\u628a\u53d8\u5f02\u7cfb\u6570\u91cd\u547d\u540d\u4e3a CoV \u3002 \u6309\u7167\u8868\u4e2d\u4f4d\u7f6e\u7684\u524d\u4e09\u5206\u4e4b\u4e00\u3001\u4e2d\u95f4\u4e09\u5206\u4e4b\u4e00\u548c\u540e\u4e09\u5206\u4e4b\u4e00\u5206\u7ec4\uff0c\u7edf\u8ba1 Price \u7684\u5747\u503c\u3002 \u5bf9\u7c7b\u578b Type \u5206\u7ec4\uff0c\u5bf9 Price \u548c HP \u5206\u522b\u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u7ed3\u679c\u4f1a\u4ea7\u751f\u591a\u7ea7\u7d22\u5f15\uff0c\u8bf7\u7528\u4e0b\u5212\u7ebf\u628a\u591a\u7ea7\u5217\u7d22\u5f15\u5408\u5e76\u4e3a\u5355\u5c42\u7d22\u5f15\u3002 \u5bf9\u7c7b\u578b Type \u5206\u7ec4\uff0c\u5bf9 HP \u8fdb\u884c\u7ec4\u5185\u7684 min-max \u5f52\u4e00\u5316\u3002 \u5bf9\u7c7b\u578b Type \u5206\u7ec4\uff0c\u8ba1\u7b97 Disp. \u4e0e HP \u7684\u76f8\u5173\u7cfb\u6570\u3002 Ex2\uff1a\u5b9e\u73b0 transform \u51fd\u6570 groupby \u5bf9\u8c61\u7684\u6784\u9020\u65b9\u6cd5\u662f my_groupby(df, group_cols) \u652f\u6301\u5355\u5217\u5206\u7ec4\u4e0e\u591a\u5217\u5206\u7ec4 \u652f\u6301\u5e26\u6709\u6807\u91cf\u5e7f\u64ad\u7684 my_groupby(df)[col].transform(my_func) \u529f\u80fd pandas \u7684 transform \u4e0d\u80fd\u8de8\u5217\u8ba1\u7b97\uff0c\u8bf7\u652f\u6301\u6b64\u529f\u80fd\uff0c\u5373\u4ecd\u8fd4\u56de Series \u4f46 col \u53c2\u6570\u4e3a\u591a\u5217 \u65e0\u9700\u8003\u8651\u6027\u80fd\u4e0e\u5f02\u5e38\u5904\u7406\uff0c\u53ea\u9700\u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd\uff0c\u5728\u7ed9\u51fa\u6d4b\u8bd5\u6837\u4f8b\u7684\u540c\u65f6\u4e0e pandas \u4e2d\u7684 transform \u5bf9\u6bd4\u7ed3\u679c\u662f\u5426\u4e00\u81f4","title":"\u56db\u3001\u5206\u7ec4"},{"location":"pandas/part4/#_1","text":"","title":"\u4e00\u3001\u5206\u7ec4\u6a21\u5f0f\u53ca\u5176\u5bf9\u8c61"},{"location":"pandas/part4/#1","text":"\u5206\u7ec4\u64cd\u4f5c\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\u4f7f\u7528\u6781\u5176\u5e7f\u6cdb\uff0c\u4f8b\u5982\uff1a \u4f9d\u636e \u6027\u522b \u5206\u7ec4\uff0c\u7edf\u8ba1\u5168\u56fd\u4eba\u53e3 \u5bff\u547d \u7684 \u5e73\u5747\u503c \u4f9d\u636e \u5b63\u8282 \u5206\u7ec4\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u5b63\u8282\u7684 \u6e29\u5ea6 \u8fdb\u884c \u7ec4\u5185\u6807\u51c6\u5316 \u4f9d\u636e \u73ed\u7ea7 \u5206\u7ec4\uff0c\u7b5b\u9009\u51fa\u7ec4\u5185 \u6570\u5b66\u5206\u6570 \u7684 \u5e73\u5747\u503c\u8d85\u8fc7 80 \u5206\u7684\u73ed\u7ea7 \u4ece\u4e0a\u8ff0\u7684\u51e0\u4e2a\u4f8b\u5b50\u4e2d\u4e0d\u96be\u770b\u51fa\uff0c\u60f3\u8981\u5b9e\u73b0\u5206\u7ec4\u64cd\u4f5c\uff0c\u5fc5\u987b\u660e\u786e\u4e09\u4e2a\u8981\u7d20\uff1a \u5206\u7ec4\u4f9d\u636e \u3001 \u6570\u636e\u6765\u6e90 \u3001 \u64cd\u4f5c\u53ca\u5176\u8fd4\u56de\u7ed3\u679c \u3002\u540c\u65f6\u4ece\u5145\u5206\u6027\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u5982\u679c\u660e\u786e\u4e86\u8fd9\u4e09\u65b9\u9762\uff0c\u5c31\u80fd\u786e\u5b9a\u4e00\u4e2a\u5206\u7ec4\u64cd\u4f5c\uff0c\u4ece\u800c\u5206\u7ec4\u4ee3\u7801\u7684\u4e00\u822c\u6a21\u5f0f\u5373\uff1a df . groupby ( \u5206\u7ec4\u4f9d\u636e )[ \u6570\u636e\u6765\u6e90 ] . \u4f7f\u7528\u64cd\u4f5c \u4f8b\u5982\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\u7684\u4ee3\u7801\u5c31\u5e94\u8be5\u5982\u4e0b\uff1a df . groupby ( 'Gender' )[ 'Longevity' ] . mean () \u73b0\u5728\u8fd4\u56de\u5230\u5b66\u751f\u4f53\u6d4b\u7684\u6570\u636e\u96c6\u4e0a\uff0c\u5982\u679c\u60f3\u8981\u6309\u7167\u6027\u522b\u7edf\u8ba1\u8eab\u9ad8\u4e2d\u4f4d\u6570\uff0c\u5c31\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 3 ]: df = pd . read_csv ( 'data/learn_pandas.csv' ) In [ 4 ]: df . groupby ( 'Gender' )[ 'Height' ] . median () Out [ 4 ]: Gender Female 159.6 Male 173.4 Name : Height , dtype : float64","title":"1. \u5206\u7ec4\u7684\u4e00\u822c\u6a21\u5f0f"},{"location":"pandas/part4/#2","text":"\u524d\u9762\u63d0\u5230\u7684\u82e5\u5e72\u4f8b\u5b50\u90fd\u662f\u4ee5\u5355\u4e00\u7ef4\u5ea6\u8fdb\u884c\u5206\u7ec4\u7684\uff0c\u6bd4\u5982\u6839\u636e\u6027\u522b\uff0c\u5982\u679c\u73b0\u5728\u9700\u8981\u6839\u636e\u591a\u4e2a\u7ef4\u5ea6\u8fdb\u884c\u5206\u7ec4\uff0c\u8be5\u5982\u4f55\u505a\uff1f\u4e8b\u5b9e\u4e0a\uff0c\u53ea\u9700\u5728 groupby \u4e2d\u4f20\u5165\u76f8\u5e94\u5217\u540d\u6784\u6210\u7684\u5217\u8868\u5373\u53ef\u3002\u4f8b\u5982\uff0c\u73b0\u5e0c\u671b\u6839\u636e\u5b66\u6821\u548c\u6027\u522b\u8fdb\u884c\u5206\u7ec4\uff0c\u7edf\u8ba1\u8eab\u9ad8\u7684\u5747\u503c\u5c31\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 5 ]: df . groupby ([ 'School' , 'Gender' ])[ 'Height' ] . mean () Out [ 5 ]: School Gender Fudan University Female 158.776923 Male 174.212500 Peking University Female 158.666667 Male 172.030000 Shanghai Jiao Tong University Female 159.122500 Male 176.760000 Tsinghua University Female 159.753333 Male 171.638889 Name : Height , dtype : float64 \u76ee\u524d\u4e3a\u6b62\uff0c groupby \u7684\u5206\u7ec4\u4f9d\u636e\u90fd\u662f\u76f4\u63a5\u53ef\u4ee5\u4ece\u5217\u4e2d\u6309\u7167\u540d\u5b57\u83b7\u53d6\u7684\uff0c\u90a3\u5982\u679c\u5e0c\u671b\u901a\u8fc7\u4e00\u5b9a\u7684\u590d\u6742\u903b\u8f91\u6765\u5206\u7ec4\uff0c\u4f8b\u5982\u6839\u636e\u5b66\u751f\u4f53\u91cd\u662f\u5426\u8d85\u8fc7\u603b\u4f53\u5747\u503c\u6765\u5206\u7ec4\uff0c\u540c\u6837\u8fd8\u662f\u8ba1\u7b97\u8eab\u9ad8\u7684\u5747\u503c\u3002 \u9996\u5148\u5e94\u8be5\u5148\u5199\u51fa\u5206\u7ec4\u6761\u4ef6\uff1a In [ 6 ]: condition = df . Weight > df . Weight . mean () \u7136\u540e\u5c06\u5176\u4f20\u5165 groupby \u4e2d\uff1a In [ 7 ]: df . groupby ( condition )[ 'Height' ] . mean () Out [ 7 ]: Weight False 159.034646 True 172.705357 Name : Height , dtype : float64 \u7ec3\u4e00\u7ec3 \u8bf7\u6839\u636e\u4e0a\u4e0b\u56db\u5206\u4f4d\u6570\u5206\u5272\uff0c\u5c06\u4f53\u91cd\u5206\u4e3a high\u3001normal\u3001low \u4e09\u7ec4\uff0c\u7edf\u8ba1\u8eab\u9ad8\u7684\u5747\u503c\u3002 \u4ece\u7d22\u5f15\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5b9e\u6700\u540e\u4ea7\u751f\u7684\u7ed3\u679c\u5c31\u662f\u6309\u7167\u6761\u4ef6\u5217\u8868\u4e2d\u5143\u7d20\u7684\u503c\uff08\u6b64\u5904\u662f True \u548c False \uff09\u6765\u5206\u7ec4\uff0c\u4e0b\u9762\u7528\u968f\u673a\u4f20\u5165\u5b57\u6bcd\u5e8f\u5217\u6765\u9a8c\u8bc1\u8fd9\u4e00\u60f3\u6cd5\uff1a In [ 8 ]: item = np . random . choice ( list ( 'abc' ), df . shape [ 0 ]) In [ 9 ]: df . groupby ( item )[ 'Height' ] . mean () Out [ 9 ]: a 163.924242 b 162.928814 c 162.708621 Name : Height , dtype : float64 \u6b64\u5904\u7684\u7d22\u5f15\u5c31\u662f\u539f\u5148 item \u4e2d\u7684\u5143\u7d20\uff0c\u5982\u679c\u4f20\u5165\u591a\u4e2a\u5e8f\u5217\u8fdb\u5165 groupby \uff0c\u90a3\u4e48\u6700\u540e\u5206\u7ec4\u7684\u4f9d\u636e\u5c31\u662f\u8fd9\u4e24\u4e2a\u5e8f\u5217\u5bf9\u5e94\u884c\u7684\u552f\u4e00\u7ec4\u5408\uff1a In [ 10 ]: df . groupby ([ condition , item ])[ 'Height' ] . mean () Out [ 10 ]: Weight False a 160.193617 b 158.921951 c 157.756410 True a 173.152632 b 172.055556 c 172.873684 Name : Height , dtype : float64 \u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff0c\u4e4b\u524d\u4f20\u5165\u5217\u540d\u53ea\u662f\u4e00\u79cd\u7b80\u4fbf\u7684\u8bb0\u53f7\uff0c\u4e8b\u5b9e\u4e0a\u7b49\u4ef7\u4e8e\u4f20\u5165\u7684\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u5217\uff0c\u6700\u540e\u5206\u7ec4\u7684\u4f9d\u636e\u6765\u81ea\u4e8e\u6570\u636e\u6765\u6e90\u7ec4\u5408\u7684 unique \u503c\uff0c\u901a\u8fc7 drop_duplicates \u5c31\u80fd\u77e5\u9053\u5177\u4f53\u7684\u7ec4\u7c7b\u522b\uff1a In [ 11 ]: df [[ 'School' , 'Gender' ]] . drop_duplicates () Out [ 11 ]: School Gender 0 Shanghai Jiao Tong University Female 1 Peking University Male 2 Shanghai Jiao Tong University Male 3 Fudan University Female 4 Fudan University Male 5 Tsinghua University Female 9 Peking University Female 16 Tsinghua University Male In [ 12 ]: df . groupby ([ df [ 'School' ], df [ 'Gender' ]])[ 'Height' ] . mean () Out [ 12 ]: School Gender Fudan University Female 158.776923 Male 174.212500 Peking University Female 158.666667 Male 172.030000 Shanghai Jiao Tong University Female 159.122500 Male 176.760000 Tsinghua University Female 159.753333 Male 171.638889 Name : Height , dtype : float64","title":"2. \u5206\u7ec4\u4f9d\u636e\u7684\u672c\u8d28"},{"location":"pandas/part4/#3-groupby","text":"\u80fd\u591f\u6ce8\u610f\u5230\uff0c\u6700\u7ec8\u5177\u4f53\u505a\u5206\u7ec4\u64cd\u4f5c\u65f6\uff0c\u6240\u8c03\u7528\u7684\u65b9\u6cd5\u90fd\u6765\u81ea\u4e8e pandas \u4e2d\u7684 groupby \u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u4e0a\u5b9a\u4e49\u4e86\u8bb8\u591a\u65b9\u6cd5\uff0c\u4e5f\u5177\u6709\u4e00\u4e9b\u65b9\u4fbf\u7684\u5c5e\u6027\u3002 In [ 13 ]: gb = df . groupby ([ 'School' , 'Grade' ]) In [ 14 ]: gb Out [ 14 ]: < pandas . core . groupby . generic . DataFrameGroupBy object at 0x0000013630DAB910 > \u901a\u8fc7 ngroups \u5c5e\u6027\uff0c\u53ef\u4ee5\u5f97\u5230\u5206\u7ec4\u4e2a\u6570\uff1a In [ 15 ]: gb . ngroups Out [ 15 ]: 16 \u901a\u8fc7 groups \u5c5e\u6027\uff0c\u53ef\u4ee5\u8fd4\u56de\u4ece \u7ec4\u540d \u6620\u5c04\u5230 \u7ec4\u7d22\u5f15\u5217\u8868 \u7684\u5b57\u5178\uff1a In [ 16 ]: res = gb . groups In [ 17 ]: res . keys () # \u5b57\u5178\u7684\u503c\u7531\u4e8e\u662f\u7d22\u5f15\uff0c\u5143\u7d20\u4e2a\u6570\u8fc7\u591a\uff0c\u6b64\u5904\u53ea\u5c55\u793a\u5b57\u5178\u7684\u952e Out [ 17 ]: dict_keys ([( 'Fudan University' , 'Freshman' ), ( 'Fudan University' , 'Junior' ), ( 'Fudan University' , 'Senior' ), ( 'Fudan University' , 'Sophomore' ), ( 'Peking University' , 'Freshman' ), ( 'Peking University' , 'Junior' ), ( 'Peking University' , 'Senior' ), ( 'Peking University' , 'Sophomore' ), ( 'Shanghai Jiao Tong University' , 'Freshman' ), ( 'Shanghai Jiao Tong University' , 'Junior' ), ( 'Shanghai Jiao Tong University' , 'Senior' ), ( 'Shanghai Jiao Tong University' , 'Sophomore' ), ( 'Tsinghua University' , 'Freshman' ), ( 'Tsinghua University' , 'Junior' ), ( 'Tsinghua University' , 'Senior' ), ( 'Tsinghua University' , 'Sophomore' )]) \u7ec3\u4e00\u7ec3 \u4e0a\u4e00\u5c0f\u8282\u4ecb\u7ecd\u4e86\u53ef\u4ee5\u901a\u8fc7 drop_duplicates \u5f97\u5230\u5177\u4f53\u7684\u7ec4\u7c7b\u522b\uff0c\u73b0\u8bf7\u7528 groups \u5c5e\u6027\u5b8c\u6210\u7c7b\u4f3c\u7684\u529f\u80fd\u3002 \u5f53 size \u4f5c\u4e3a DataFrame \u7684\u5c5e\u6027\u65f6\uff0c\u8fd4\u56de\u7684\u662f\u8868\u957f\u4e58\u4ee5\u8868\u5bbd\u7684\u5927\u5c0f\uff0c\u4f46\u5728 groupby \u5bf9\u8c61\u4e0a\u8868\u793a\u7edf\u8ba1\u6bcf\u4e2a\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\uff1a In [ 18 ]: gb . size () Out [ 18 ]: School Grade Fudan University Freshman 9 Junior 12 Senior 11 Sophomore 8 Peking University Freshman 13 Junior 8 Senior 8 Sophomore 5 Shanghai Jiao Tong University Freshman 13 Junior 17 Senior 22 Sophomore 5 Tsinghua University Freshman 17 Junior 22 Senior 14 Sophomore 16 dtype : int64 \u901a\u8fc7 get_group \u65b9\u6cd5\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u6240\u5728\u7ec4\u5bf9\u5e94\u7684\u884c\uff0c\u6b64\u65f6\u5fc5\u987b\u77e5\u9053\u7ec4\u7684\u5177\u4f53\u540d\u5b57\uff1a In [ 19 ]: gb . get_group (( 'Fudan University' , 'Freshman' )) . iloc [: 3 , : 3 ] # \u5c55\u793a\u4e00\u90e8\u5206 Out [ 19 ]: School Grade Name 15 Fudan University Freshman Changqiang Yang 28 Fudan University Freshman Gaoqiang Qin 63 Fudan University Freshman Gaofeng Zhao \u8fd9\u91cc\u5217\u51fa\u4e86 2 \u4e2a\u5c5e\u6027\u548c 2 \u4e2a\u65b9\u6cd5\uff0c\u800c\u5148\u524d\u7684 mean \u3001 median \u90fd\u662f groupby \u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u51fd\u6570\u548c\u8bb8\u591a\u5176\u4ed6\u51fd\u6570\u7684\u64cd\u4f5c\u5177\u6709\u9ad8\u5ea6\u76f8\u4f3c\u6027\uff0c\u5c06\u5728\u4e4b\u540e\u7684\u5c0f\u8282\u8fdb\u884c\u4e13\u95e8\u4ecb\u7ecd\u3002","title":"3. Groupby \u5bf9\u8c61"},{"location":"pandas/part4/#4","text":"\u719f\u6089\u4e86\u4e00\u4e9b\u5206\u7ec4\u7684\u57fa\u672c\u77e5\u8bc6\u540e\uff0c\u91cd\u65b0\u56de\u5230\u5f00\u5934\u4e3e\u7684\u4e09\u4e2a\u4f8b\u5b50\uff0c\u53ef\u80fd\u4f1a\u53d1\u73b0\u4e00\u4e9b\u7aef\u502a\uff0c\u5373\u8fd9\u4e09\u79cd\u7c7b\u578b\u5206\u7ec4\u8fd4\u56de\u7684\u6570\u636e\u578b\u6001\u5e76\u4e0d\u4e00\u6837\uff1a \u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u7ec4\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c\uff0c\u53ef\u4ee5\u662f\u5e73\u5747\u503c\u3001\u4e2d\u4f4d\u6570\u3001\u7ec4\u5bb9\u91cf size \u7b49 \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u505a\u4e86\u539f\u5e8f\u5217\u7684\u6807\u51c6\u5316\u5904\u7406\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u7ec4\u8fd4\u56de\u7684\u662f\u4e00\u4e2a Series \u7c7b\u578b \u7b2c\u4e09\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u65e2\u4e0d\u662f\u6807\u91cf\u4e5f\u4e0d\u662f\u5e8f\u5217\uff0c\u8fd4\u56de\u7684\u6574\u4e2a\u7ec4\u6240\u5728\u884c\u7684\u672c\u8eab\uff0c\u5373\u8fd4\u56de\u4e86 DataFrame \u7c7b\u578b \u7531\u6b64\uff0c\u5f15\u7533\u51fa\u5206\u7ec4\u7684\u4e09\u5927\u64cd\u4f5c\uff1a\u805a\u5408\u3001\u53d8\u6362\u548c\u8fc7\u6ee4\uff0c\u5206\u522b\u5bf9\u5e94\u4e86\u4e09\u4e2a\u4f8b\u5b50\u7684\u64cd\u4f5c\uff0c\u4e0b\u9762\u5c31\u8981\u5206\u522b\u4ecb\u7ecd\u76f8\u5e94\u7684 agg \u3001 transform \u548c filter \u51fd\u6570\u53ca\u5176\u64cd\u4f5c\u3002","title":"4. \u5206\u7ec4\u7684\u4e09\u5927\u64cd\u4f5c"},{"location":"pandas/part4/#_2","text":"","title":"\u4e8c\u3001\u805a\u5408\u51fd\u6570"},{"location":"pandas/part4/#1_1","text":"\u5728\u4ecb\u7ecd agg \u4e4b\u524d\uff0c\u9996\u5148\u8981\u4e86\u89e3\u4e00\u4e9b\u76f4\u63a5\u5b9a\u4e49\u5728 groupby \u5bf9\u8c61\u7684\u805a\u5408\u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u7684\u901f\u5ea6\u57fa\u672c\u90fd\u4f1a\u7ecf\u8fc7\u5185\u90e8\u7684\u4f18\u5316\uff0c\u4f7f\u7528\u529f\u80fd\u65f6\u5e94\u5f53\u4f18\u5148\u8003\u8651\u3002\u6839\u636e\u8fd4\u56de\u6807\u91cf\u503c\u7684\u539f\u5219\uff0c\u5305\u62ec\u5982\u4e0b\u51fd\u6570\uff1a max/min/mean/median/count/all/any/idxmax/idxmin/mad/nunique/skew/quantile/sum/std/var/sem/size/prod \u3002 In [ 20 ]: gb = df . groupby ( 'Gender' )[ 'Height' ] In [ 21 ]: gb . idxmin () Out [ 21 ]: Gender Female 143 Male 199 Name : Height , dtype : int64 In [ 22 ]: gb . quantile ( 0.95 ) Out [ 22 ]: Gender Female 166.8 Male 185.9 Name : Height , dtype : float64 \u7ec3\u4e00\u7ec3 \u8bf7\u67e5\u9605\u6587\u6863\uff0c\u660e\u786e all/any/mad/skew/sem/prod \u51fd\u6570\u7684\u542b\u4e49\u3002 \u8fd9\u4e9b\u805a\u5408\u51fd\u6570\u5f53\u4f20\u5165\u7684\u6570\u636e\u6765\u6e90\u5305\u542b\u591a\u4e2a\u5217\u65f6\uff0c\u5c06\u6309\u7167\u5217\u8fdb\u884c\u8fed\u4ee3\u8ba1\u7b97\uff1a In [ 23 ]: gb = df . groupby ( 'Gender' )[[ 'Height' , 'Weight' ]] In [ 24 ]: gb . max () Out [ 24 ]: Height Weight Gender Female 170.2 63.0 Male 193.9 89.0","title":"1. \u5185\u7f6e\u805a\u5408\u51fd\u6570"},{"location":"pandas/part4/#2-agg","text":"\u867d\u7136\u5728 groupby \u5bf9\u8c61\u4e0a\u5b9a\u4e49\u4e86\u8bb8\u591a\u65b9\u4fbf\u7684\u51fd\u6570\uff0c\u4f46\u4ecd\u7136\u6709\u4ee5\u4e0b\u4e0d\u4fbf\u4e4b\u5904\uff1a \u65e0\u6cd5\u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u51fd\u6570 \u65e0\u6cd5\u5bf9\u7279\u5b9a\u7684\u5217\u4f7f\u7528\u7279\u5b9a\u7684\u805a\u5408\u51fd\u6570 \u65e0\u6cd5\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u805a\u5408\u51fd\u6570 \u65e0\u6cd5\u76f4\u63a5\u5bf9\u7ed3\u679c\u7684\u5217\u540d\u5728\u805a\u5408\u524d\u8fdb\u884c\u81ea\u5b9a\u4e49\u547d\u540d \u4e0b\u9762\u8bf4\u660e\u5982\u4f55\u901a\u8fc7 agg \u51fd\u6570\u89e3\u51b3\u8fd9\u56db\u7c7b\u95ee\u9898\uff1a \u3010a\u3011\u4f7f\u7528\u591a\u4e2a\u51fd\u6570 \u5f53\u4f7f\u7528\u591a\u4e2a\u805a\u5408\u51fd\u6570\u65f6\uff0c\u9700\u8981\u7528\u5217\u8868\u7684\u5f62\u5f0f\u628a\u5185\u7f6e\u805a\u5408\u51fd\u6570\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u4f20\u5165\uff0c\u5148\u524d\u63d0\u5230\u7684\u6240\u6709\u5b57\u7b26\u4e32\u90fd\u662f\u5408\u6cd5\u7684\u3002 In [ 25 ]: gb . agg ([ 'sum' , 'idxmax' , 'skew' ]) Out [ 25 ]: Height Weight sum idxmax skew sum idxmax skew Gender Female 21014.0 28 - 0.219253 6469.0 28 - 0.268482 Male 8854.9 193 0.437535 3929.0 2 - 0.332393 \u4ece\u7ed3\u679c\u770b\uff0c\u6b64\u65f6\u7684\u5217\u7d22\u5f15\u4e3a\u591a\u7ea7\u7d22\u5f15\uff0c\u7b2c\u4e00\u5c42\u4e3a\u6570\u636e\u6e90\uff0c\u7b2c\u4e8c\u5c42\u4e3a\u4f7f\u7528\u7684\u805a\u5408\u65b9\u6cd5\uff0c\u5206\u522b\u9010\u4e00\u5bf9\u5217\u4f7f\u7528\u805a\u5408\uff0c\u56e0\u6b64\u7ed3\u679c\u4e3a 6 \u5217\u3002 \u3010b\u3011\u5bf9\u7279\u5b9a\u7684\u5217\u4f7f\u7528\u7279\u5b9a\u7684\u805a\u5408\u51fd\u6570 \u5bf9\u4e8e\u65b9\u6cd5\u548c\u5217\u7684\u7279\u6b8a\u5bf9\u5e94\uff0c\u53ef\u4ee5\u901a\u8fc7\u6784\u9020\u5b57\u5178\u4f20\u5165 agg \u4e2d\u5b9e\u73b0\uff0c\u5176\u4e2d\u5b57\u5178\u4ee5\u5217\u540d\u4e3a\u952e\uff0c\u4ee5\u805a\u5408\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\u4e32\u5217\u8868\u4e3a\u503c\u3002 In [ 26 ]: gb . agg ({ 'Height' :[ 'mean' , 'max' ], 'Weight' : 'count' }) Out [ 26 ]: Height Weight mean max count Gender Female 159.19697 170.2 135 Male 173.62549 193.9 54 \u7ec3\u4e00\u7ec3 \u8bf7\u4f7f\u7528\u3010b\u3011\u4e2d\u7684\u4f20\u5165\u5b57\u5178\u7684\u65b9\u6cd5\u5b8c\u6210\u3010a\u3011\u4e2d\u7b49\u4ef7\u7684\u805a\u5408\u4efb\u52a1\u3002 \u3010c\u3011\u4f7f\u7528\u81ea\u5b9a\u4e49\u51fd\u6570 \u5728 agg \u4e2d\u53ef\u4ee5\u4f7f\u7528\u5177\u4f53\u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c \u9700\u8981\u6ce8\u610f\u4f20\u5165\u51fd\u6570\u7684\u53c2\u6570\u662f\u4e4b\u524d\u6570\u636e\u6e90\u4e2d\u7684\u5217\uff0c\u9010\u5217\u8fdb\u884c\u8ba1\u7b97 \u3002\u4e0b\u9762\u5206\u7ec4\u8ba1\u7b97\u8eab\u9ad8\u548c\u4f53\u91cd\u7684\u6781\u5dee\uff1a In [ 27 ]: gb . agg ( lambda x : x . max () - x . min ()) Out [ 27 ]: Height Weight Gender Female 24.8 29.0 Male 38.2 38.0 \u7ec3\u4e00\u7ec3 \u5728 groupby \u5bf9\u8c61\u4e2d\u53ef\u4ee5\u4f7f\u7528 describe \u65b9\u6cd5\u8fdb\u884c\u7edf\u8ba1\u4fe1\u606f\u6c47\u603b\uff0c\u8bf7\u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u805a\u5408\u51fd\u6570\uff0c\u5b8c\u6210\u4e0e\u8be5\u65b9\u6cd5\u76f8\u540c\u7684\u529f\u80fd\u3002 \u7531\u4e8e\u4f20\u5165\u7684\u662f\u5e8f\u5217\uff0c\u56e0\u6b64\u5e8f\u5217\u4e0a\u7684\u65b9\u6cd5\u548c\u5c5e\u6027\u90fd\u662f\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u4f7f\u7528\u7684\uff0c\u53ea\u9700\u4fdd\u8bc1\u8fd4\u56de\u503c\u662f\u6807\u91cf\u5373\u53ef\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u6307\uff0c\u5982\u679c\u7ec4\u7684\u6307\u6807\u5747\u503c\uff0c\u8d85\u8fc7\u8be5\u6307\u6807\u7684\u603b\u4f53\u5747\u503c\uff0c\u8fd4\u56de High\uff0c\u5426\u5219\u8fd4\u56de Low\u3002 In [ 28 ]: def my_func ( s ): .... : res = 'High' .... : if s . mean () <= df [ s . name ] . mean (): .... : res = 'Low' .... : return res .... : In [ 29 ]: gb . agg ( my_func ) Out [ 29 ]: Height Weight Gender Female Low Low Male High High \u3010d\u3011\u805a\u5408\u7ed3\u679c\u91cd\u547d\u540d \u5982\u679c\u60f3\u8981\u5bf9\u805a\u5408\u7ed3\u679c\u7684\u5217\u540d\u8fdb\u884c\u91cd\u547d\u540d\uff0c\u53ea\u9700\u8981\u5c06\u4e0a\u8ff0\u51fd\u6570\u7684\u4f4d\u7f6e\u6539\u5199\u6210\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a\u65b0\u7684\u540d\u5b57\uff0c\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u4e3a\u539f\u6765\u7684\u51fd\u6570\uff0c\u5305\u62ec\u805a\u5408\u5b57\u7b26\u4e32\u548c\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u73b0\u4e3e\u82e5\u5e72\u4f8b\u5b50\u8bf4\u660e\uff1a In [ 30 ]: gb . agg ([( 'range' , lambda x : x . max () - x . min ()), ( 'my_sum' , 'sum' )]) Out [ 30 ]: Height Weight range my_sum range my_sum Gender Female 24.8 21014.0 29.0 6469.0 Male 38.2 8854.9 38.0 3929.0 In [ 31 ]: gb . agg ({ 'Height' : [( 'my_func' , my_func ), 'sum' ], .... : 'Weight' : lambda x : x . max ()}) .... : Out [ 31 ]: Height Weight my_func sum < lambda > Gender Female Low 21014.0 63.0 Male High 8854.9 89.0 \u53e6\u5916\u9700\u8981\u6ce8\u610f\uff0c\u4f7f\u7528\u5bf9\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5217\u4f7f\u7528\u5355\u4e2a\u805a\u5408\u7684\u65f6\u5019\uff0c\u91cd\u547d\u540d\u9700\u8981\u52a0\u65b9\u62ec\u53f7\uff0c\u5426\u5219\u5c31\u4e0d\u77e5\u9053\u662f\u65b0\u7684\u540d\u5b57\u8fd8\u662f\u624b\u8bef\u8f93\u9519\u7684\u5185\u7f6e\u51fd\u6570\u5b57\u7b26\u4e32\uff1a In [ 32 ]: gb . agg ([( 'my_sum' , 'sum' )]) Out [ 32 ]: Height Weight my_sum my_sum Gender Female 21014.0 6469.0 Male 8854.9 3929.0 In [ 33 ]: gb . agg ({ 'Height' : [( 'my_func' , my_func ), 'sum' ], .... : 'Weight' : [( 'range' , lambda x : x . max ())]}) .... : Out [ 33 ]: Height Weight my_func sum range Gender Female Low 21014.0 63.0 Male High 8854.9 89.0","title":"2. agg \u65b9\u6cd5"},{"location":"pandas/part4/#_3","text":"","title":"\u4e09\u3001\u53d8\u6362\u548c\u8fc7\u6ee4"},{"location":"pandas/part4/#1-transform","text":"\u53d8\u6362\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u540c\u957f\u5ea6\u7684\u5e8f\u5217\uff0c\u6700\u5e38\u7528\u7684\u5185\u7f6e\u53d8\u6362\u51fd\u6570\u662f\u7d2f\u8ba1\u51fd\u6570\uff1a cumcount/cumsum/cumprod/cummax/cummin \uff0c\u5b83\u4eec\u7684\u4f7f\u7528\u65b9\u5f0f\u548c\u805a\u5408\u51fd\u6570\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5b8c\u6210\u7684\u662f\u7ec4\u5185\u7d2f\u8ba1\u64cd\u4f5c\u3002\u6b64\u5916\u5728 groupby \u5bf9\u8c61\u4e0a\u8fd8\u5b9a\u4e49\u4e86\u586b\u5145\u7c7b\u548c\u6ed1\u7a97\u7c7b\u7684\u53d8\u6362\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u7684\u4e00\u822c\u5f62\u5f0f\u5c06\u4f1a\u5206\u522b\u5728\u7b2c\u4e03\u7ae0\u548c\u7b2c\u5341\u7ae0\u4e2d\u8ba8\u8bba\uff0c\u6b64\u5904\u7565\u8fc7\u3002 In [ 34 ]: gb . cummax () . head () Out [ 34 ]: Height Weight 0 158.9 46.0 1 166.5 70.0 2 188.9 89.0 3 NaN 46.0 4 188.9 89.0 \u7ec3\u4e00\u7ec3 \u5728 groupby \u5bf9\u8c61\u4e2d\uff0c rank \u65b9\u6cd5\u4e5f\u662f\u4e00\u4e2a\u5b9e\u7528\u7684\u53d8\u6362\u51fd\u6570\uff0c\u8bf7\u67e5\u9605\u5b83\u7684\u529f\u80fd\u5e76\u7ed9\u51fa\u4e00\u4e2a\u4f7f\u7528\u7684\u4f8b\u5b50\u3002 \u5f53\u7528\u81ea\u5b9a\u4e49\u53d8\u6362\u65f6\u9700\u8981\u4f7f\u7528 transform \u65b9\u6cd5\uff0c\u88ab\u8c03\u7528\u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c \u5176\u4f20\u5165\u503c\u4e3a\u6570\u636e\u6e90\u7684\u5e8f\u5217 \uff0c\u4e0e agg \u7684\u4f20\u5165\u7c7b\u578b\u662f\u4e00\u81f4\u7684\uff0c\u5176\u6700\u540e\u7684\u8fd4\u56de\u7ed3\u679c\u662f\u884c\u5217\u7d22\u5f15\u4e0e\u6570\u636e\u6e90\u4e00\u81f4\u7684 DataFrame \u3002 \u73b0\u5bf9\u8eab\u9ad8\u548c\u4f53\u91cd\u8fdb\u884c\u5206\u7ec4\u6807\u51c6\u5316\uff0c\u5373\u51cf\u53bb\u7ec4\u5747\u503c\u540e\u9664\u4ee5\u7ec4\u7684\u6807\u51c6\u5dee\uff1a In [ 35 ]: gb . transform ( lambda x : ( x - x . mean ()) / x . std ()) . head () Out [ 35 ]: Height Weight 0 - 0.058760 - 0.354888 1 - 1.010925 - 0.355000 2 2.167063 2.089498 3 NaN - 1.279789 4 0.053133 0.159631 \u7ec3\u4e00\u7ec3 \u5bf9\u4e8e transform \u65b9\u6cd5\u65e0\u6cd5\u50cf agg \u4e00\u6837\uff0c\u901a\u8fc7\u4f20\u5165\u5b57\u5178\u6765\u5bf9\u6307\u5b9a\u5217\u4f7f\u7528\u7279\u5b9a\u7684\u53d8\u6362\uff0c\u5982\u679c\u9700\u8981\u5728\u4e00\u6b21 transform \u7684\u8c03\u7528\u4e2d\u5b9e\u73b0\u8fd9\u79cd\u529f\u80fd\uff0c\u8bf7\u7ed9\u51fa\u89e3\u51b3\u65b9\u6848\u3002 \u524d\u9762\u63d0\u5230\u4e86 transform \u53ea\u80fd\u8fd4\u56de\u540c\u957f\u5ea6\u7684\u5e8f\u5217\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u8fd8\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\uff0c\u8fd9\u4f1a\u4f7f\u5f97\u7ed3\u679c\u88ab\u5e7f\u64ad\u5230\u5176\u6240\u5728\u7684\u6574\u4e2a\u7ec4\uff0c\u8fd9\u79cd \u6807\u91cf\u5e7f\u64ad \u7684\u6280\u5de7\u5728\u7279\u5f81\u5de5\u7a0b\u4e2d\u662f\u975e\u5e38\u5e38\u89c1\u7684\u3002\u4f8b\u5982\uff0c\u6784\u9020\u4e24\u5217\u65b0\u7279\u5f81\u6765\u5206\u522b\u8868\u793a\u6837\u672c\u6240\u5728\u6027\u522b\u7ec4\u7684\u8eab\u9ad8\u5747\u503c\u548c\u4f53\u91cd\u5747\u503c\uff1a In [ 36 ]: gb . transform ( 'mean' ) . head () # \u4f20\u5165\u8fd4\u56de\u6807\u91cf\u7684\u51fd\u6570\u4e5f\u662f\u53ef\u4ee5\u7684 Out [ 36 ]: Height Weight 0 159.19697 47.918519 1 173.62549 72.759259 2 173.62549 72.759259 3 159.19697 47.918519 4 173.62549 72.759259","title":"1. \u53d8\u6362\u51fd\u6570\u4e0e transform \u65b9\u6cd5"},{"location":"pandas/part4/#2_1","text":"\u5728\u4e0a\u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u4e86\u7d22\u5f15\u7684\u7528\u6cd5\uff0c\u90a3\u4e48\u7d22\u5f15\u548c\u8fc7\u6ee4\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f \u8fc7\u6ee4\u5728\u5206\u7ec4\u4e2d\u662f\u5bf9\u4e8e\u7ec4\u7684\u8fc7\u6ee4\uff0c\u800c\u7d22\u5f15\u662f\u5bf9\u4e8e\u884c\u7684\u8fc7\u6ee4\uff0c\u5728\u7b2c\u4e8c\u7ae0\u4e2d\u7684\u8fd4\u56de\u503c\uff0c\u65e0\u8bba\u662f\u5e03\u5c14\u5217\u8868\u8fd8\u662f\u5143\u7d20\u5217\u8868\u6216\u8005\u4f4d\u7f6e\u5217\u8868\uff0c\u672c\u8d28\u4e0a\u90fd\u662f\u5bf9\u4e8e\u884c\u7684\u7b5b\u9009\uff0c\u5373\u5982\u679c\u7b26\u5408\u7b5b\u9009\u6761\u4ef6\u7684\u5219\u9009\u5165\u7ed3\u679c\u8868\uff0c\u5426\u5219\u4e0d\u9009\u5165\u3002 \u7ec4\u8fc7\u6ee4\u4f5c\u4e3a\u884c\u8fc7\u6ee4\u7684\u63a8\u5e7f\uff0c\u6307\u7684\u662f\u5982\u679c\u5bf9\u4e00\u4e2a\u7ec4\u7684\u5168\u4f53\u6240\u5728\u884c\u8fdb\u884c\u7edf\u8ba1\u7684\u7ed3\u679c\u8fd4\u56de True \u5219\u4f1a\u88ab\u4fdd\u7559\uff0c False \u5219\u8be5\u7ec4\u4f1a\u88ab\u8fc7\u6ee4\uff0c\u6700\u540e\u628a\u6240\u6709\u672a\u88ab\u8fc7\u6ee4\u7684\u7ec4\u5176\u5bf9\u5e94\u7684\u6240\u5728\u884c\u62fc\u63a5\u8d77\u6765\u4f5c\u4e3a DataFrame \u8fd4\u56de\u3002 \u5728 groupby \u5bf9\u8c61\u4e2d\uff0c\u5b9a\u4e49\u4e86 filter \u65b9\u6cd5\u8fdb\u884c\u7ec4\u7684\u7b5b\u9009\uff0c\u5176\u4e2d\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u8f93\u5165\u53c2\u6570\u4e3a\u6570\u636e\u6e90\u6784\u6210\u7684 DataFrame \u672c\u8eab\uff0c\u5728\u4e4b\u524d\u4f8b\u5b50\u4e2d\u5b9a\u4e49\u7684 groupby \u5bf9\u8c61\u4e2d\uff0c\u4f20\u5165\u7684\u5c31\u662f df[['Height', 'Weight']] \uff0c\u56e0\u6b64\u6240\u6709\u8868\u65b9\u6cd5\u548c\u5c5e\u6027\u90fd\u53ef\u4ee5\u5728\u81ea\u5b9a\u4e49\u51fd\u6570\u4e2d\u76f8\u5e94\u5730\u4f7f\u7528\uff0c\u540c\u65f6\u53ea\u9700\u4fdd\u8bc1\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u8fd4\u56de\u4e3a\u5e03\u5c14\u503c\u5373\u53ef\u3002 \u4f8b\u5982\uff0c\u5728\u539f\u8868\u4e2d\u901a\u8fc7\u8fc7\u6ee4\u5f97\u5230\u6240\u6709\u5bb9\u91cf\u5927\u4e8e 100 \u7684\u7ec4\uff1a In [ 37 ]: gb . filter ( lambda x : x . shape [ 0 ] > 100 ) . head () Out [ 37 ]: Height Weight 0 158.9 46.0 3 NaN 41.0 5 158.0 51.0 6 162.5 52.0 7 161.9 50.0 \u7ec3\u4e00\u7ec3 \u4ece\u6982\u5ff5\u4e0a\u8bf4\uff0c\u7d22\u5f15\u529f\u80fd\u662f\u7ec4\u8fc7\u6ee4\u529f\u80fd\u7684\u5b50\u96c6\uff0c\u8bf7\u4f7f\u7528 filter \u51fd\u6570\u5b8c\u6210 loc[.] \u7684\u529f\u80fd\uff0c\u8fd9\u91cc\u5047\u8bbe \u201d . \u201c\u662f\u5143\u7d20\u5217\u8868\u3002","title":"2. \u7ec4\u7d22\u5f15\u4e0e\u8fc7\u6ee4"},{"location":"pandas/part4/#_4","text":"","title":"\u56db\u3001\u8de8\u5217\u5206\u7ec4"},{"location":"pandas/part4/#1-apply","text":"\u4e4b\u524d\u51e0\u8282\u4ecb\u7ecd\u4e86\u4e09\u5927\u5206\u7ec4\u64cd\u4f5c\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u8fd8\u6709\u4e00\u79cd\u5e38\u89c1\u7684\u5206\u7ec4\u573a\u666f\uff0c\u65e0\u6cd5\u7528\u524d\u9762\u4ecb\u7ecd\u7684\u4efb\u4f55\u4e00\u79cd\u65b9\u6cd5\u5904\u7406\uff0c\u4f8b\u5982\u73b0\u5728\u5982\u4e0b\u5b9a\u4e49\u8eab\u4f53\u8d28\u91cf\u6307\u6570 BMI\uff1a \u5176\u4e2d\u4f53\u91cd\u548c\u8eab\u9ad8\u7684\u5355\u4f4d\u5206\u522b\u4e3a\u5343\u514b\u548c\u7c73\uff0c\u9700\u8981\u5206\u7ec4\u8ba1\u7b97\u7ec4 BMI \u7684\u5747\u503c\u3002 \u9996\u5148\uff0c\u8fd9\u663e\u7136\u4e0d\u662f\u8fc7\u6ee4\u64cd\u4f5c\uff0c\u56e0\u6b64 filter \u4e0d\u7b26\u5408\u8981\u6c42\uff1b\u5176\u6b21\uff0c\u8fd4\u56de\u7684\u5747\u503c\u662f\u6807\u91cf\u800c\u4e0d\u662f\u5e8f\u5217\uff0c\u56e0\u6b64 transform \u4e0d\u7b26\u5408\u8981\u6c42\uff1b\u6700\u540e\uff0c\u4f3c\u4e4e\u4f7f\u7528 agg \u51fd\u6570\u80fd\u591f\u5904\u7406\uff0c\u4f46\u662f\u4e4b\u524d\u5f3a\u8c03\u8fc7\u805a\u5408\u51fd\u6570\u662f\u9010\u5217\u5904\u7406\u7684\uff0c\u800c\u4e0d\u80fd\u591f \u591a\u5217\u6570\u636e\u540c\u65f6\u5904\u7406 \u3002\u7531\u6b64\uff0c\u5f15\u51fa\u4e86 apply \u51fd\u6570\u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002","title":"1. apply \u7684\u5f15\u5165"},{"location":"pandas/part4/#2-apply","text":"\u5728\u8bbe\u8ba1\u4e0a\uff0c apply \u7684\u81ea\u5b9a\u4e49\u51fd\u6570\u4f20\u5165\u53c2\u6570\u4e0e filter \u5b8c\u5168\u4e00\u81f4\uff0c\u53ea\u4e0d\u8fc7\u540e\u8005\u53ea\u5141\u8bb8\u8fd4\u56de\u5e03\u5c14\u503c\u3002\u73b0\u5982\u4e0b\u89e3\u51b3\u4e0a\u8ff0\u8ba1\u7b97\u95ee\u9898\uff1a In [ 38 ]: def BMI ( x ): .... : Height = x [ 'Height' ] / 100 .... : Weight = x [ 'Weight' ] .... : BMI_value = Weight / Height ** 2 .... : return BMI_value . mean () .... : In [ 39 ]: gb . apply ( BMI ) Out [ 39 ]: Gender Female 18.860930 Male 24.318654 dtype : float64 \u9664\u4e86\u8fd4\u56de\u6807\u91cf\u4e4b\u5916\uff0c apply \u65b9\u6cd5\u8fd8\u53ef\u4ee5\u8fd4\u56de\u4e00\u7ef4 Series \u548c\u4e8c\u7ef4 DataFrame \uff0c\u4f46\u5b83\u4eec\u4ea7\u751f\u7684\u6570\u636e\u6846\u7ef4\u6570\u548c\u591a\u7ea7\u7d22\u5f15\u7684\u5c42\u6570\u5e94\u5f53\u5982\u4f55\u53d8\u5316\uff1f\u4e0b\u9762\u4e3e\u4e09\u7ec4\u4f8b\u5b50\u5c31\u975e\u5e38\u5bb9\u6613\u660e\u767d\u7ed3\u679c\u662f\u5982\u4f55\u751f\u6210\u7684\uff1a \u3010a\u3011\u6807\u91cf\u60c5\u51b5\uff1a\u7ed3\u679c\u5f97\u5230\u7684\u662f Series \uff0c\u7d22\u5f15\u4e0e agg \u7684\u7ed3\u679c\u4e00\u81f4 In [ 40 ]: gb = df . groupby ([ 'Gender' , 'Test_Number' ])[[ 'Height' , 'Weight' ]] In [ 41 ]: gb . apply ( lambda x : 0 ) Out [ 41 ]: Gender Test_Number Female 1 0 2 0 3 0 Male 1 0 2 0 3 0 dtype : int64 In [ 42 ]: gb . apply ( lambda x : [ 0 , 0 ]) # \u867d\u7136\u662f\u5217\u8868\uff0c\u4f46\u662f\u4f5c\u4e3a\u8fd4\u56de\u503c\u4ecd\u7136\u770b\u4f5c\u6807\u91cf Out [ 42 ]: Gender Test_Number Female 1 [ 0 , 0 ] 2 [ 0 , 0 ] 3 [ 0 , 0 ] Male 1 [ 0 , 0 ] 2 [ 0 , 0 ] 3 [ 0 , 0 ] dtype : object \u3010b\u3011 Series \u60c5\u51b5\uff1a\u5f97\u5230\u7684\u662f DataFrame \uff0c\u884c\u7d22\u5f15\u4e0e\u6807\u91cf\u60c5\u51b5\u4e00\u81f4\uff0c\u5217\u7d22\u5f15\u4e3a Series \u7684\u7d22\u5f15 In [ 43 ]: gb . apply ( lambda x : pd . Series ([ 0 , 0 ], index = [ 'a' , 'b' ])) Out [ 43 ]: a b Gender Test_Number Female 1 0 0 2 0 0 3 0 0 Male 1 0 0 2 0 0 3 0 0 \u7ec3\u4e00\u7ec3 \u8bf7\u5c1d\u8bd5\u5728 apply \u4f20\u5165\u7684\u81ea\u5b9a\u4e49\u51fd\u6570\u4e2d\uff0c\u6839\u636e\u7ec4\u7684\u67d0\u4e9b\u7279\u5f81\u8fd4\u56de\u76f8\u540c\u957f\u5ea6\u4f46\u7d22\u5f15\u4e0d\u540c\u7684 Series \uff0c\u4f1a\u62a5\u9519\u5417\uff1f \u3010c\u3011 DataFrame \u60c5\u51b5\uff1a\u5f97\u5230\u7684\u662f DataFrame \uff0c\u884c\u7d22\u5f15\u6700\u5185\u5c42\u5728\u6bcf\u4e2a\u7ec4\u539f\u5148 agg \u7684\u7ed3\u679c\u7d22\u5f15\u4e0a\uff0c\u518d\u52a0\u4e00\u5c42\u8fd4\u56de\u7684 DataFrame \u884c\u7d22\u5f15\uff0c\u540c\u65f6\u5206\u7ec4\u7ed3\u679c DataFrame \u7684\u5217\u7d22\u5f15\u548c\u8fd4\u56de\u7684 DataFrame \u5217\u7d22\u5f15\u4e00\u81f4\u3002 In [ 44 ]: gb . apply ( lambda x : pd . DataFrame ( np . ones (( 2 , 2 )), .... : index = [ 'a' , 'b' ], .... : columns = pd . Index ([( 'w' , 'x' ),( 'y' , 'z' )]))) .... : Out [ 44 ]: w y x z Gender Test_Number Female 1 a 1.0 1.0 b 1.0 1.0 2 a 1.0 1.0 b 1.0 1.0 3 a 1.0 1.0 b 1.0 1.0 Male 1 a 1.0 1.0 b 1.0 1.0 2 a 1.0 1.0 b 1.0 1.0 3 a 1.0 1.0 b 1.0 1.0 \u7ec3\u4e00\u7ec3 \u8bf7\u5c1d\u8bd5\u5728 apply \u4f20\u5165\u7684\u81ea\u5b9a\u4e49\u51fd\u6570\u4e2d\uff0c\u6839\u636e\u7ec4\u7684\u67d0\u4e9b\u7279\u5f81\u8fd4\u56de\u76f8\u540c\u5927\u5c0f\u4f46\u5217\u7d22\u5f15\u4e0d\u540c\u7684 DataFrame \uff0c\u4f1a\u62a5\u9519\u5417\uff1f\u5982\u679c\u53ea\u662f\u884c\u7d22\u5f15\u4e0d\u540c\uff0c\u4f1a\u62a5\u9519\u5417\uff1f \u6700\u540e\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0c apply \u51fd\u6570\u7684\u7075\u6d3b\u6027\u662f\u4ee5\u727a\u7272\u4e00\u5b9a\u6027\u80fd\u4e3a\u4ee3\u4ef7\u6362\u5f97\u7684\uff0c\u9664\u975e\u9700\u8981\u4f7f\u7528\u8de8\u5217\u5904\u7406\u7684\u5206\u7ec4\u5904\u7406\uff0c\u5426\u5219\u5e94\u5f53\u4f7f\u7528\u5176\u4ed6\u4e13\u95e8\u8bbe\u8ba1\u7684 groupby \u5bf9\u8c61\u65b9\u6cd5\uff0c\u5426\u5219\u5728\u6027\u80fd\u4e0a\u4f1a\u5b58\u5728\u8f83\u5927\u7684\u5dee\u8ddd\u3002\u540c\u65f6\uff0c\u5728\u4f7f\u7528\u805a\u5408\u51fd\u6570\u548c\u53d8\u6362\u51fd\u6570\u65f6\uff0c\u4e5f\u5e94\u5f53\u4f18\u5148\u4f7f\u7528\u5185\u7f6e\u51fd\u6570\uff0c\u5b83\u4eec\u7ecf\u8fc7\u4e86\u9ad8\u5ea6\u7684\u6027\u80fd\u4f18\u5316\uff0c\u4e00\u822c\u800c\u8a00\u5728\u901f\u5ea6\u4e0a\u90fd\u4f1a\u5feb\u4e8e\u7528\u81ea\u5b9a\u4e49\u51fd\u6570\u6765\u5b9e\u73b0\u3002 \u7ec3\u4e00\u7ec3 \u5728 groupby \u5bf9\u8c61\u4e2d\u8fd8\u5b9a\u4e49\u4e86 cov \u548c corr \u51fd\u6570\uff0c\u4ece\u6982\u5ff5\u4e0a\u8bf4\u4e5f\u5c5e\u4e8e\u8de8\u5217\u7684\u5206\u7ec4\u5904\u7406\u3002\u8bf7\u5229\u7528\u4e4b\u524d\u5b9a\u4e49\u7684 gb \u5bf9\u8c61\uff0c\u4f7f\u7528 apply \u51fd\u6570\u5b9e\u73b0\u4e0e gb.cov() \u540c\u6837\u7684\u529f\u80fd\u5e76\u6bd4\u8f83\u5b83\u4eec\u7684\u6027\u80fd\u3002","title":"2. apply \u7684\u4f7f\u7528"},{"location":"pandas/part4/#_5","text":"","title":"\u4e94\u3001\u7ec3\u4e60"},{"location":"pandas/part4/#ex1","text":"\u73b0\u6709\u4e00\u4efd\u6c7d\u8f66\u6570\u636e\u96c6\uff0c\u5176\u4e2d Brand, Disp., HP \u5206\u522b\u4ee3\u8868\u6c7d\u8f66\u54c1\u724c\u3001\u53d1\u52a8\u673a\u84c4\u91cf\u3001\u53d1\u52a8\u673a\u8f93\u51fa\u3002 In [ 45 ]: df = pd . read_csv ( 'data/car.csv' ) In [ 46 ]: df . head ( 3 ) Out [ 46 ]: Brand Price Country Reliability Mileage Type Weight Disp . HP 0 Eagle Summit 4 8895 USA 4.0 33 Small 2560 97 113 1 Ford Escort 4 7402 USA 2.0 33 Small 2345 114 90 2 Ford Festiva 4 6319 Korea 4.0 37 Small 1845 81 63 \u5148\u8fc7\u6ee4\u51fa\u6240\u5c5e Country \u6570\u8d85\u8fc7 2 \u4e2a\u7684\u6c7d\u8f66\uff0c\u5373\u82e5\u8be5\u6c7d\u8f66\u7684 Country \u5728\u603b\u4f53\u6570\u636e\u96c6\u4e2d\u51fa\u73b0\u6b21\u6570\u4e0d\u8d85\u8fc7 2 \u5219\u5254\u9664\uff0c\u518d\u6309 Country \u5206\u7ec4\u8ba1\u7b97\u4ef7\u683c\u5747\u503c\u3001\u4ef7\u683c\u53d8\u5f02\u7cfb\u6570\u3001\u8be5 Country \u7684\u6c7d\u8f66\u6570\u91cf\uff0c\u5176\u4e2d\u53d8\u5f02\u7cfb\u6570\u7684\u8ba1\u7b97\u65b9\u6cd5\u662f\u6807\u51c6\u5dee\u9664\u4ee5\u5747\u503c\uff0c\u5e76\u5728\u7ed3\u679c\u4e2d\u628a\u53d8\u5f02\u7cfb\u6570\u91cd\u547d\u540d\u4e3a CoV \u3002 \u6309\u7167\u8868\u4e2d\u4f4d\u7f6e\u7684\u524d\u4e09\u5206\u4e4b\u4e00\u3001\u4e2d\u95f4\u4e09\u5206\u4e4b\u4e00\u548c\u540e\u4e09\u5206\u4e4b\u4e00\u5206\u7ec4\uff0c\u7edf\u8ba1 Price \u7684\u5747\u503c\u3002 \u5bf9\u7c7b\u578b Type \u5206\u7ec4\uff0c\u5bf9 Price \u548c HP \u5206\u522b\u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u7ed3\u679c\u4f1a\u4ea7\u751f\u591a\u7ea7\u7d22\u5f15\uff0c\u8bf7\u7528\u4e0b\u5212\u7ebf\u628a\u591a\u7ea7\u5217\u7d22\u5f15\u5408\u5e76\u4e3a\u5355\u5c42\u7d22\u5f15\u3002 \u5bf9\u7c7b\u578b Type \u5206\u7ec4\uff0c\u5bf9 HP \u8fdb\u884c\u7ec4\u5185\u7684 min-max \u5f52\u4e00\u5316\u3002 \u5bf9\u7c7b\u578b Type \u5206\u7ec4\uff0c\u8ba1\u7b97 Disp. \u4e0e HP \u7684\u76f8\u5173\u7cfb\u6570\u3002","title":"Ex1\uff1a\u6c7d\u8f66\u6570\u636e\u96c6"},{"location":"pandas/part4/#ex2-transform","text":"groupby \u5bf9\u8c61\u7684\u6784\u9020\u65b9\u6cd5\u662f my_groupby(df, group_cols) \u652f\u6301\u5355\u5217\u5206\u7ec4\u4e0e\u591a\u5217\u5206\u7ec4 \u652f\u6301\u5e26\u6709\u6807\u91cf\u5e7f\u64ad\u7684 my_groupby(df)[col].transform(my_func) \u529f\u80fd pandas \u7684 transform \u4e0d\u80fd\u8de8\u5217\u8ba1\u7b97\uff0c\u8bf7\u652f\u6301\u6b64\u529f\u80fd\uff0c\u5373\u4ecd\u8fd4\u56de Series \u4f46 col \u53c2\u6570\u4e3a\u591a\u5217 \u65e0\u9700\u8003\u8651\u6027\u80fd\u4e0e\u5f02\u5e38\u5904\u7406\uff0c\u53ea\u9700\u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd\uff0c\u5728\u7ed9\u51fa\u6d4b\u8bd5\u6837\u4f8b\u7684\u540c\u65f6\u4e0e pandas \u4e2d\u7684 transform \u5bf9\u6bd4\u7ed3\u679c\u662f\u5426\u4e00\u81f4","title":"Ex2\uff1a\u5b9e\u73b0 transform \u51fd\u6570"},{"location":"pandas/part5/","text":"In [ 1 ]: import numpy as np In [ 2 ]: import pandas as pd \u4e00\u3001\u957f\u5bbd\u8868\u7684\u53d8\u5f62 \u4ec0\u4e48\u662f\u957f\u8868\uff1f\u4ec0\u4e48\u662f\u5bbd\u8868\uff1f\u8fd9\u4e2a\u6982\u5ff5\u662f\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u7279\u5f81\u800c\u8a00\u7684\u3002\u4f8b\u5982\uff1a\u4e00\u4e2a\u8868\u4e2d\u628a\u6027\u522b\u5b58\u50a8\u5728\u67d0\u4e00\u4e2a\u5217\u4e2d\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u5173\u4e8e\u6027\u522b\u7684\u957f\u8868\uff1b\u5982\u679c\u628a\u6027\u522b\u4f5c\u4e3a\u5217\u540d\uff0c\u5217\u4e2d\u7684\u5143\u7d20\u662f\u67d0\u4e00\u5176\u4ed6\u7684\u76f8\u5173\u7279\u5f81\u6570\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8868\u662f\u5173\u4e8e\u6027\u522b\u7684\u5bbd\u8868\u3002\u4e0b\u9762\u7684\u4e24\u5f20\u8868\u5c31\u5206\u522b\u662f\u5173\u4e8e\u6027\u522b\u7684\u957f\u8868\u548c\u5bbd\u8868\uff1a In [ 3 ]: pd . DataFrame ({ 'Gender' :[ 'F' , 'F' , 'M' , 'M' ], ... : 'Height' :[ 163 , 160 , 175 , 180 ]}) ... : Out [ 3 ]: Gender Height 0 F 163 1 F 160 2 M 175 3 M 180 In [ 4 ]: pd . DataFrame ({ 'Height: F' :[ 163 , 160 ], ... : 'Height: M' :[ 175 , 180 ]}) ... : Out [ 4 ]: Height : F Height : M 0 163 175 1 160 180 \u663e\u7136\u8fd9\u4e24\u5f20\u8868\u4ece\u4fe1\u606f\u4e0a\u662f\u5b8c\u5168\u7b49\u4ef7\u7684\uff0c\u5b83\u4eec\u5305\u542b\u76f8\u540c\u7684\u8eab\u9ad8\u7edf\u8ba1\u6570\u503c\uff0c\u53ea\u662f\u8fd9\u4e9b\u6570\u503c\u7684\u5448\u73b0\u65b9\u5f0f\u4e0d\u540c\uff0c\u800c\u5176\u5448\u73b0\u65b9\u5f0f\u4e3b\u8981\u53c8\u4e0e\u6027\u522b\u4e00\u5217\u9009\u62e9\u7684\u5e03\u5c40\u6a21\u5f0f\u6709\u5173\uff0c\u5373\u5230\u5e95\u662f\u4ee5 long \u7684\u72b6\u6001\u5b58\u50a8\u8fd8\u662f\u4ee5 wide \u7684\u72b6\u6001\u5b58\u50a8\u3002\u56e0\u6b64\uff0c pandas \u9488\u5bf9\u6b64\u7c7b\u957f\u5bbd\u8868\u7684\u53d8\u5f62\u64cd\u4f5c\u8bbe\u8ba1\u4e86\u4e00\u4e9b\u6709\u5173\u7684\u53d8\u5f62\u51fd\u6570\u3002 1. pivot pivot \u662f\u4e00\u79cd\u5178\u578b\u7684\u957f\u8868\u53d8\u5bbd\u8868\u7684\u51fd\u6570\uff0c\u9996\u5148\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a\u4e0b\u8868\u5b58\u50a8\u4e86\u5f20\u4e09\u548c\u674e\u56db\u7684\u8bed\u6587\u548c\u6570\u5b66\u5206\u6570\uff0c\u73b0\u5728\u60f3\u8981\u628a\u8bed\u6587\u548c\u6570\u5b66\u5206\u6570\u4f5c\u4e3a\u5217\u6765\u5c55\u793a\u3002 In [ 5 ]: df = pd . DataFrame ({ 'Class' :[ 1 , 1 , 2 , 2 ], ... : 'Name' :[ 'San Zhang' , 'San Zhang' , 'Si Li' , 'Si Li' ], ... : 'Subject' :[ 'Chinese' , 'Math' , 'Chinese' , 'Math' ], ... : 'Grade' :[ 80 , 75 , 90 , 85 ]}) ... : In [ 6 ]: df Out [ 6 ]: Class Name Subject Grade 0 1 San Zhang Chinese 80 1 1 San Zhang Math 75 2 2 Si Li Chinese 90 3 2 Si Li Math 85 \u5bf9\u4e8e\u4e00\u4e2a\u57fa\u672c\u7684\u957f\u53d8\u5bbd\u64cd\u4f5c\u800c\u8a00\uff0c\u6700\u91cd\u8981\u7684\u6709\u4e09\u4e2a\u8981\u7d20\uff0c\u5206\u522b\u662f\u53d8\u5f62\u540e\u7684\u884c\u7d22\u5f15\u3001\u9700\u8981\u8f6c\u5230\u5217\u7d22\u5f15\u7684\u5217\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u5217\u548c\u884c\u7d22\u5f15\u5bf9\u5e94\u7684\u6570\u503c\uff0c\u5b83\u4eec\u5206\u522b\u5bf9\u5e94\u4e86 pivot \u65b9\u6cd5\u4e2d\u7684 index, columns, values \u53c2\u6570\u3002\u65b0\u751f\u6210\u8868\u7684\u5217\u7d22\u5f15\u662f columns \u5bf9\u5e94\u5217\u7684 unique \u503c\uff0c\u800c\u65b0\u8868\u7684\u884c\u7d22\u5f15\u662f index \u5bf9\u5e94\u5217\u7684 unique \u503c\uff0c\u800c values \u5bf9\u5e94\u4e86\u60f3\u8981\u5c55\u793a\u7684\u6570\u503c\u5217\u3002 In [ 7 ]: df . pivot ( index = 'Name' , columns = 'Subject' , values = 'Grade' ) Out [ 7 ]: Subject Chinese Math Name San Zhang 80 75 Si Li 90 85 \u901a\u8fc7\u989c\u8272\u7684\u6807\u8bb0\uff0c\u66f4\u5bb9\u6613\u5730\u80fd\u591f\u7406\u89e3\u5176\u53d8\u5f62\u7684\u8fc7\u7a0b\uff1a \u5229\u7528 pivot \u8fdb\u884c\u53d8\u5f62\u64cd\u4f5c\u9700\u8981\u6ee1\u8db3\u552f\u4e00\u6027\u7684\u8981\u6c42\uff0c\u5373\u7531\u4e8e\u5728\u65b0\u8868\u4e2d\u7684\u884c\u5217\u7d22\u5f15\u5bf9\u5e94\u4e86\u552f\u4e00\u7684 value \uff0c\u56e0\u6b64\u539f\u8868\u4e2d\u7684 index \u548c columns \u5bf9\u5e94\u4e24\u4e2a\u5217\u7684\u884c\u7ec4\u5408\u5fc5\u987b\u552f\u4e00\u3002\u4f8b\u5982\uff0c\u73b0\u5728\u628a\u539f\u8868\u4e2d\u7b2c\u4e8c\u884c\u5f20\u4e09\u7684\u6570\u5b66\u6539\u4e3a\u8bed\u6587\u5c31\u4f1a\u62a5\u9519\uff0c\u8fd9\u662f\u7531\u4e8e Name \u4e0e Subject \u7684\u7ec4\u5408\u4e2d\u4e24\u6b21\u51fa\u73b0 (\"San Zhang\", \"Chinese\") \uff0c\u4ece\u800c\u6700\u540e\u4e0d\u80fd\u591f\u786e\u5b9a\u5230\u5e95\u53d8\u5f62\u540e\u5e94\u8be5\u662f\u586b\u5199 80 \u5206\u8fd8\u662f 75 \u5206\u3002 In [ 8 ]: df . loc [ 1 , 'Subject' ] = 'Chinese' In [ 9 ]: try : ... : df . pivot ( index = 'Name' , columns = 'Subject' , values = 'Grade' ) ... : except Exception as e : ... : Err_Msg = e ... : In [ 10 ]: Err_Msg Out [ 10 ]: ValueError ( 'Index contains duplicate entries, cannot reshape' ) pandas \u4ece 1.1.0 \u5f00\u59cb\uff0c pivot \u76f8\u5173\u7684\u4e09\u4e2a\u53c2\u6570\u5141\u8bb8\u88ab\u8bbe\u7f6e\u4e3a\u5217\u8868\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u4f1a\u8fd4\u56de\u591a\u7ea7\u7d22\u5f15\u3002\u8fd9\u91cc\u6784\u9020\u4e00\u4e2a\u76f8\u5e94\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u5982\u4f55\u4f7f\u7528\uff1a\u4e0b\u8868\u4e2d\u516d\u5217\u5206\u522b\u4e3a\u73ed\u7ea7\u3001\u59d3\u540d\u3001\u6d4b\u8bd5\u7c7b\u578b\uff08\u671f\u4e2d\u8003\u8bd5\u548c\u671f\u672b\u8003\u8bd5\uff09\u3001\u79d1\u76ee\u3001\u6210\u7ee9\u3001\u6392\u540d\u3002 In [ 11 ]: df = pd . DataFrame ({ 'Class' :[ 1 , 1 , 2 , 2 , 1 , 1 , 2 , 2 ], .... : 'Name' :[ 'San Zhang' , 'San Zhang' , 'Si Li' , 'Si Li' , .... : 'San Zhang' , 'San Zhang' , 'Si Li' , 'Si Li' ], .... : 'Examination' : [ 'Mid' , 'Final' , 'Mid' , 'Final' , .... : 'Mid' , 'Final' , 'Mid' , 'Final' ], .... : 'Subject' :[ 'Chinese' , 'Chinese' , 'Chinese' , 'Chinese' , .... : 'Math' , 'Math' , 'Math' , 'Math' ], .... : 'Grade' :[ 80 , 75 , 85 , 65 , 90 , 85 , 92 , 88 ], .... : 'rank' :[ 10 , 15 , 21 , 15 , 20 , 7 , 6 , 2 ]}) .... : In [ 12 ]: df Out [ 12 ]: Class Name Examination Subject Grade rank 0 1 San Zhang Mid Chinese 80 10 1 1 San Zhang Final Chinese 75 15 2 2 Si Li Mid Chinese 85 21 3 2 Si Li Final Chinese 65 15 4 1 San Zhang Mid Math 90 20 5 1 San Zhang Final Math 85 7 6 2 Si Li Mid Math 92 6 7 2 Si Li Final Math 88 2 \u73b0\u5728\u60f3\u8981\u628a\u6d4b\u8bd5\u7c7b\u578b\u548c\u79d1\u76ee\u8054\u5408\u7ec4\u6210\u7684\u56db\u4e2a\u7c7b\u522b\uff08\u671f\u4e2d\u8bed\u6587\u3001\u671f\u672b\u8bed\u6587\u3001\u671f\u4e2d\u6570\u5b66\u3001\u671f\u672b\u6570\u5b66\uff09\u8f6c\u5230\u5217\u7d22\u5f15\uff0c\u5e76\u4e14\u540c\u65f6\u7edf\u8ba1\u6210\u7ee9\u548c\u6392\u540d\uff1a In [ 13 ]: pivot_multi = df . pivot ( index = [ 'Class' , 'Name' ], .... : columns = [ 'Subject' , 'Examination' ], .... : values = [ 'Grade' , 'rank' ]) .... : In [ 14 ]: pivot_multi Out [ 14 ]: Grade rank Subject Chinese Math Chinese Math Examination Mid Final Mid Final Mid Final Mid Final Class Name 1 San Zhang 80 75 90 85 10 15 20 7 2 Si Li 85 65 92 88 21 15 6 2 \u6839\u636e\u552f\u4e00\u6027\u539f\u5219\uff0c\u65b0\u8868\u7684\u884c\u7d22\u5f15\u7b49\u4ef7\u4e8e\u5bf9 index \u4e2d\u7684\u591a\u5217\u4f7f\u7528 drop_duplicates \uff0c\u800c\u5217\u7d22\u5f15\u7684\u957f\u5ea6\u4e3a values \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u4e58\u4ee5 columns \u7684\u552f\u4e00\u7ec4\u5408\u6570\u91cf\uff08\u4e0e index \u7c7b\u4f3c\uff09 \u3002\u4ece\u4e0b\u9762\u7684\u793a\u610f\u56fe\u4e2d\u80fd\u591f\u6bd4\u8f83\u5bb9\u6613\u5730\u7406\u89e3\u76f8\u5e94\u7684\u64cd\u4f5c\uff1a 2. pivot_table pivot \u7684\u4f7f\u7528\u4f9d\u8d56\u4e8e\u552f\u4e00\u6027\u6761\u4ef6\uff0c\u90a3\u5982\u679c\u4e0d\u6ee1\u8db3\u552f\u4e00\u6027\u6761\u4ef6\uff0c\u90a3\u4e48\u5fc5\u987b\u901a\u8fc7\u805a\u5408\u64cd\u4f5c\u4f7f\u5f97\u76f8\u540c\u884c\u5217\u7ec4\u5408\u5bf9\u5e94\u7684\u591a\u4e2a\u503c\u53d8\u4e3a\u4e00\u4e2a\u503c\u3002\u4f8b\u5982\uff0c\u5f20\u4e09\u548c\u674e\u56db\u90fd\u53c2\u52a0\u4e86\u4e24\u6b21\u8bed\u6587\u8003\u8bd5\u548c\u6570\u5b66\u8003\u8bd5\uff0c\u6309\u7167\u5b66\u9662\u89c4\u5b9a\uff0c\u6700\u540e\u7684\u6210\u7ee9\u662f\u4e24\u6b21\u8003\u8bd5\u5206\u6570\u7684\u5e73\u5747\u503c\uff0c\u6b64\u65f6\u5c31\u65e0\u6cd5\u901a\u8fc7 pivot \u51fd\u6570\u6765\u5b8c\u6210\u3002 In [ 15 ]: df = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'San Zhang' , .... : 'San Zhang' , 'San Zhang' , .... : 'Si Li' , 'Si Li' , 'Si Li' , 'Si Li' ], .... : 'Subject' :[ 'Chinese' , 'Chinese' , 'Math' , 'Math' , .... : 'Chinese' , 'Chinese' , 'Math' , 'Math' ], .... : 'Grade' :[ 80 , 90 , 100 , 90 , 70 , 80 , 85 , 95 ]}) .... : In [ 16 ]: df Out [ 16 ]: Name Subject Grade 0 San Zhang Chinese 80 1 San Zhang Chinese 90 2 San Zhang Math 100 3 San Zhang Math 90 4 Si Li Chinese 70 5 Si Li Chinese 80 6 Si Li Math 85 7 Si Li Math 95 pandas \u4e2d\u63d0\u4f9b\u4e86 pivot_table \u6765\u5b9e\u73b0\uff0c\u5176\u4e2d\u7684 aggfunc \u53c2\u6570\u5c31\u662f\u4f7f\u7528\u7684\u805a\u5408\u51fd\u6570\u3002\u4e0a\u8ff0\u573a\u666f\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 17 ]: df . pivot_table ( index = 'Name' , .... : columns = 'Subject' , .... : values = 'Grade' , .... : aggfunc = 'mean' ) .... : Out [ 17 ]: Subject Chinese Math Name San Zhang 85 95 Si Li 75 90 \u8fd9\u91cc\u4f20\u5165 aggfunc \u5305\u542b\u4e86\u4e0a\u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u7684\u6240\u6709\u5408\u6cd5\u805a\u5408\u5b57\u7b26\u4e32\uff0c\u6b64\u5916\u8fd8\u53ef\u4ee5\u4f20\u5165\u4ee5\u5e8f\u5217\u4e3a\u8f93\u5165\u6807\u91cf\u4e3a\u8f93\u51fa\u7684\u805a\u5408\u51fd\u6570\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u64cd\u4f5c\uff0c\u4e0a\u8ff0\u529f\u80fd\u53ef\u4ee5\u7b49\u4ef7\u5199\u51fa\uff1a In [ 18 ]: df . pivot_table ( index = 'Name' , .... : columns = 'Subject' , .... : values = 'Grade' , .... : aggfunc = lambda x : x . mean ()) .... : Out [ 18 ]: Subject Chinese Math Name San Zhang 85 95 Si Li 75 90 \u6b64\u5916\uff0c pivot_table \u5177\u6709\u8fb9\u9645\u6c47\u603b\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e margins=True \u6765\u5b9e\u73b0\uff0c\u5176\u4e2d\u8fb9\u9645\u7684\u805a\u5408\u65b9\u5f0f\u4e0e aggfunc \u4e2d\u7ed9\u51fa\u7684\u805a\u5408\u65b9\u6cd5\u4e00\u81f4\u3002\u4e0b\u9762\u5c31\u5206\u522b\u7edf\u8ba1\u4e86\u8bed\u6587\u5747\u5206\u548c\u6570\u5b66\u5747\u5206\u3001\u5f20\u4e09\u5747\u5206\u548c\u674e\u56db\u5747\u5206\uff0c\u4ee5\u53ca\u603b\u4f53\u6240\u6709\u5206\u6570\u7684\u5747\u5206\uff1a In [ 19 ]: df . pivot_table ( index = 'Name' , .... : columns = 'Subject' , .... : values = 'Grade' , .... : aggfunc = 'mean' , .... : margins = True ) .... : Out [ 19 ]: Subject Chinese Math All Name San Zhang 85 95.0 90.00 Si Li 75 90.0 82.50 All 80 92.5 86.25 \u7ec3\u4e00\u7ec3 \u5728\u4e0a\u9762\u7684\u8fb9\u9645\u6c47\u603b\u4f8b\u5b50\u4e2d\uff0c\u884c\u6216\u5217\u7684\u6c47\u603b\u4e3a\u65b0\u8868\u4e2d\u884c\u5143\u7d20\u6216\u8005\u5217\u5143\u7d20\u7684\u5e73\u5747\u503c\uff0c\u800c\u603b\u4f53\u7684\u6c47\u603b\u4e3a\u65b0\u8868\u4e2d\u56db\u4e2a\u5143\u7d20\u7684\u5e73\u5747\u503c\u3002\u8fd9\u79cd\u5173\u7cfb\u4e00\u5b9a\u6210\u7acb\u5417\uff1f\u82e5\u4e0d\u6210\u7acb\uff0c\u8bf7\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u3002 3. melt \u957f\u5bbd\u8868\u53ea\u662f\u6570\u636e\u5448\u73b0\u65b9\u5f0f\u7684\u5dee\u5f02\uff0c\u4f46\u5176\u5305\u542b\u7684\u4fe1\u606f\u91cf\u662f\u7b49\u4ef7\u7684\uff0c\u524d\u9762\u63d0\u5230\u4e86\u5229\u7528 pivot \u628a\u957f\u8868\u8f6c\u4e3a\u5bbd\u8868\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u901a\u8fc7\u76f8\u5e94\u7684\u9006\u64cd\u4f5c\u628a\u5bbd\u8868\u8f6c\u4e3a\u957f\u8868\uff0c melt \u51fd\u6570\u5c31\u8d77\u5230\u4e86\u8fd9\u6837\u7684\u4f5c\u7528\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c Subject \u4ee5\u5217\u7d22\u5f15\u7684\u5f62\u5f0f\u5b58\u50a8\uff0c\u73b0\u5728\u60f3\u8981\u5c06\u5176\u538b\u7f29\u5230\u4e00\u4e2a\u5217\u4e2d\u3002 In [ 20 ]: df = pd . DataFrame ({ 'Class' :[ 1 , 2 ], .... : 'Name' :[ 'San Zhang' , 'Si Li' ], .... : 'Chinese' :[ 80 , 90 ], .... : 'Math' :[ 80 , 75 ]}) .... : In [ 21 ]: df Out [ 21 ]: Class Name Chinese Math 0 1 San Zhang 80 80 1 2 Si Li 90 75 In [ 22 ]: df_melted = df . melt ( id_vars = [ 'Class' , 'Name' ], .... : value_vars = [ 'Chinese' , 'Math' ], .... : var_name = 'Subject' , .... : value_name = 'Grade' ) .... : In [ 23 ]: df_melted Out [ 23 ]: Class Name Subject Grade 0 1 San Zhang Chinese 80 1 2 Si Li Chinese 90 2 1 San Zhang Math 80 3 2 Si Li Math 75 melt \u7684\u4e3b\u8981\u53c2\u6570\u548c\u538b\u7f29\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u524d\u9762\u63d0\u5230\u4e86 melt \u548c pivot \u662f\u4e00\u7ec4\u4e92\u9006\u8fc7\u7a0b\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u53ef\u4ee5\u901a\u8fc7 pivot \u64cd\u4f5c\u628a df_melted \u8f6c\u56de df \u7684\u5f62\u5f0f\uff1a In [ 24 ]: df_unmelted = df_melted . pivot ( index = [ 'Class' , 'Name' ], .... : columns = 'Subject' , .... : values = 'Grade' ) .... : In [ 25 ]: df_unmelted # \u4e0b\u9762\u9700\u8981\u6062\u590d\u7d22\u5f15\uff0c\u5e76\u4e14\u91cd\u547d\u540d\u5217\u7d22\u5f15\u540d\u79f0 Out [ 25 ]: Subject Chinese Math Class Name 1 San Zhang 80 80 2 Si Li 90 75 In [ 26 ]: df_unmelted = df_unmelted . reset_index () . rename_axis ( .... : columns = { 'Subject' : '' }) .... : In [ 27 ]: df_unmelted . equals ( df ) Out [ 27 ]: True 4. wide_to_long melt \u65b9\u6cd5\u4e2d\uff0c\u5728\u5217\u7d22\u5f15\u4e2d\u88ab\u538b\u7f29\u7684\u4e00\u7ec4\u503c\u5bf9\u5e94\u7684\u5217\u5143\u7d20\u53ea\u80fd\u4ee3\u8868\u540c\u4e00\u5c42\u6b21\u7684\u542b\u4e49\uff0c\u5373 values_name \u3002\u73b0\u5728\u5982\u679c\u5217\u4e2d\u5305\u542b\u4e86\u4ea4\u53c9\u7c7b\u522b\uff0c\u6bd4\u5982\u671f\u4e2d\u671f\u672b\u7684\u7c7b\u522b\u548c\u8bed\u6587\u6570\u5b66\u7684\u7c7b\u522b\uff0c\u90a3\u4e48\u60f3\u8981\u628a values_name \u5bf9\u5e94\u7684 Grade \u6269\u5145\u4e3a\u4e24\u5217\u5206\u522b\u5bf9\u5e94\u8bed\u6587\u5206\u6570\u548c\u6570\u5b66\u5206\u6570\uff0c\u53ea\u628a\u671f\u4e2d\u671f\u672b\u7684\u4fe1\u606f\u538b\u7f29\uff0c\u8fd9\u79cd\u9700\u6c42\u4e0b\u5c31\u8981\u4f7f\u7528 wide_to_long \u51fd\u6570\u6765\u5b8c\u6210\u3002 In [ 28 ]: df = pd . DataFrame ({ 'Class' :[ 1 , 2 ], 'Name' :[ 'San Zhang' , 'Si Li' ], .... : 'Chinese_Mid' :[ 80 , 75 ], 'Math_Mid' :[ 90 , 85 ], .... : 'Chinese_Final' :[ 80 , 75 ], 'Math_Final' :[ 90 , 85 ]}) .... : In [ 29 ]: df Out [ 29 ]: Class Name Chinese_Mid Math_Mid Chinese_Final Math_Final 0 1 San Zhang 80 90 80 90 1 2 Si Li 75 85 75 85 In [ 30 ]: pd . wide_to_long ( df , .... : stubnames = [ 'Chinese' , 'Math' ], .... : i = [ 'Class' , 'Name' ], .... : j = 'Examination' , .... : sep = '_' , .... : suffix = '.+' ) .... : Out [ 30 ]: Chinese Math Class Name Examination 1 San Zhang Mid 80 90 Final 80 90 2 Si Li Mid 75 85 Final 75 85 \u5177\u4f53\u7684\u53d8\u6362\u8fc7\u7a0b\u7531\u4e0b\u56fe\u8fdb\u884c\u5c55\u793a\uff0c\u5c5e\u76f8\u540c\u6982\u5ff5\u7684\u5143\u7d20\u4f7f\u7528\u4e86\u4e00\u81f4\u7684\u989c\u8272\u6807\u51fa\uff1a \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684\u6848\u4f8b\uff0c\u628a\u4e4b\u524d\u5728 pivot \u4e00\u8282\u4e2d\u591a\u5217\u64cd\u4f5c\u7684\u7ed3\u679c\uff08\u4ea7\u751f\u4e86\u591a\u7ea7\u7d22\u5f15\uff09\uff0c\u5229\u7528 wide_to_long \u51fd\u6570\uff0c\u5c06\u5176\u8f6c\u4e3a\u539f\u6765\u7684\u5f62\u6001\u3002\u5176\u4e2d\uff0c\u4f7f\u7528\u4e86\u7b2c\u516b\u7ae0\u7684 str.split \u51fd\u6570\uff0c\u76ee\u524d\u6682\u65f6\u53ea\u9700\u5c06\u5176\u7406\u89e3\u4e3a\u5bf9\u5e8f\u5217\u6309\u7167\u67d0\u4e2a\u5206\u9694\u7b26\u8fdb\u884c\u62c6\u5206\u5373\u53ef\u3002 In [ 31 ]: res = pivot_multi . copy () In [ 32 ]: res . columns = res . columns . map ( lambda x : '_' . join ( x )) In [ 33 ]: res = res . reset_index () In [ 34 ]: res = pd . wide_to_long ( res , stubnames = [ 'Grade' , 'rank' ], .... : i = [ 'Class' , 'Name' ], .... : j = 'Subject_Examination' , .... : sep = '_' , .... : suffix = '.+' ) .... : In [ 35 ]: res Out [ 35 ]: Grade rank Class Name Subject_Examination 1 San Zhang Chinese_Mid 80 10 Chinese_Final 75 15 Math_Mid 90 20 Math_Final 85 7 2 Si Li Chinese_Mid 85 21 Chinese_Final 65 15 Math_Mid 92 6 Math_Final 88 2 In [ 36 ]: res = res . reset_index () In [ 37 ]: res [[ 'Subject' , 'Examination' ]] = res [ .... : 'Subject_Examination' ] . str . split ( '_' , expand = True ) .... : In [ 38 ]: res = res [[ 'Class' , 'Name' , 'Examination' , .... : 'Subject' , 'Grade' , 'rank' ]] . sort_values ( 'Subject' ) .... : In [ 39 ]: res = res . reset_index ( drop = True ) In [ 40 ]: res Out [ 40 ]: Class Name Examination Subject Grade rank 0 1 San Zhang Mid Chinese 80 10 1 1 San Zhang Final Chinese 75 15 2 2 Si Li Mid Chinese 85 21 3 2 Si Li Final Chinese 65 15 4 1 San Zhang Mid Math 90 20 5 1 San Zhang Final Math 85 7 6 2 Si Li Mid Math 92 6 7 2 Si Li Final Math 88 2 \u4e8c\u3001\u7d22\u5f15\u7684\u53d8\u5f62 1. stack \u4e0e unstack \u5728\u7b2c\u4e8c\u7ae0\u4e2d\u63d0\u5230\u4e86\u5229\u7528 swaplevel \u6216\u8005 reorder_levels \u8fdb\u884c\u7d22\u5f15\u5185\u90e8\u7684\u5c42\u4ea4\u6362\uff0c\u4e0b\u9762\u5c31\u8981\u8ba8\u8bba \u884c\u5217\u7d22\u5f15\u4e4b\u95f4 \u7684\u4ea4\u6362\uff0c\u7531\u4e8e\u8fd9\u79cd\u4ea4\u6362\u5e26\u6765\u4e86 DataFrame \u7ef4\u5ea6\u4e0a\u7684\u53d8\u5316\uff0c\u56e0\u6b64\u5c5e\u4e8e\u53d8\u5f62\u64cd\u4f5c\u3002\u5728\u7b2c\u4e00\u8282\u4e2d\u63d0\u5230\u7684 4 \u79cd\u53d8\u5f62\u51fd\u6570\u4e0e\u5176\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u4eec\u90fd\u5c5e\u4e8e\u67d0\u4e00\u5217\u6216\u51e0\u5217 \u5143\u7d20 \u548c \u5217\u7d22\u5f15 \u4e4b\u95f4\u7684\u8f6c\u6362\uff0c\u800c\u4e0d\u662f\u7d22\u5f15\u4e4b\u95f4\u7684\u8f6c\u6362\u3002 unstack \u51fd\u6570\u7684\u4f5c\u7528\u662f\u628a\u884c\u7d22\u5f15\u8f6c\u4e3a\u5217\u7d22\u5f15\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a In [ 41 ]: df = pd . DataFrame ( np . ones (( 4 , 2 )), .... : index = pd . Index ([( 'A' , 'cat' , 'big' ), .... : ( 'A' , 'dog' , 'small' ), .... : ( 'B' , 'cat' , 'big' ), .... : ( 'B' , 'dog' , 'small' )]), .... : columns = [ 'col_1' , 'col_2' ]) .... : In [ 42 ]: df Out [ 42 ]: col_1 col_2 A cat big 1.0 1.0 dog small 1.0 1.0 B cat big 1.0 1.0 dog small 1.0 1.0 In [ 43 ]: df . unstack () Out [ 43 ]: col_1 col_2 big small big small A cat 1.0 NaN 1.0 NaN dog NaN 1.0 NaN 1.0 B cat 1.0 NaN 1.0 NaN dog NaN 1.0 NaN 1.0 unstack \u7684\u4e3b\u8981\u53c2\u6570\u662f\u79fb\u52a8\u7684\u5c42\u53f7\uff0c\u9ed8\u8ba4\u8f6c\u5316\u6700\u5185\u5c42\uff0c\u79fb\u52a8\u5230\u5217\u7d22\u5f15\u7684\u6700\u5185\u5c42\uff0c\u540c\u65f6\u652f\u6301\u540c\u65f6\u8f6c\u5316\u591a\u4e2a\u5c42\uff1a In [ 44 ]: df . unstack ( 2 ) Out [ 44 ]: col_1 col_2 big small big small A cat 1.0 NaN 1.0 NaN dog NaN 1.0 NaN 1.0 B cat 1.0 NaN 1.0 NaN dog NaN 1.0 NaN 1.0 In [ 45 ]: df . unstack ([ 0 , 2 ]) Out [ 45 ]: col_1 col_2 A B A B big small big small big small big small cat 1.0 NaN 1.0 NaN 1.0 NaN 1.0 NaN dog NaN 1.0 NaN 1.0 NaN 1.0 NaN 1.0 \u7c7b\u4f3c\u4e8e pivot \u4e2d\u7684\u552f\u4e00\u6027\u8981\u6c42\uff0c\u5728 unstack \u4e2d\u5fc5\u987b\u4fdd\u8bc1 \u88ab\u8f6c\u4e3a\u5217\u7d22\u5f15\u7684\u884c\u7d22\u5f15\u5c42 \u548c \u88ab\u4fdd\u7559\u7684\u884c\u7d22\u5f15\u5c42 \u6784\u6210\u7684\u7ec4\u5408\u662f\u552f\u4e00\u7684\uff0c\u4f8b\u5982\u628a\u524d\u4e24\u4e2a\u5217\u7d22\u5f15\u6539\u6210\u76f8\u540c\u7684\u7834\u574f\u552f\u4e00\u6027\uff0c\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519\uff1a In [ 46 ]: my_index = df . index . to_list () In [ 47 ]: my_index [ 1 ] = my_index [ 0 ] In [ 48 ]: df . index = pd . Index ( my_index ) In [ 49 ]: df Out [ 49 ]: col_1 col_2 A cat big 1.0 1.0 big 1.0 1.0 B cat big 1.0 1.0 dog small 1.0 1.0 In [ 50 ]: try : .... : df . unstack () .... : except Exception as e : .... : Err_Msg = e .... : In [ 51 ]: Err_Msg Out [ 51 ]: ValueError ( 'Index contains duplicate entries, cannot reshape' ) \u4e0e unstack \u76f8\u53cd\uff0c stack \u7684\u4f5c\u7528\u5c31\u662f\u628a\u5217\u7d22\u5f15\u7684\u5c42\u538b\u5165\u884c\u7d22\u5f15\uff0c\u5176\u7528\u6cd5\u5b8c\u5168\u7c7b\u4f3c\u3002 In [ 52 ]: df = pd . DataFrame ( np . ones (( 4 , 2 )), .... : index = pd . Index ([( 'A' , 'cat' , 'big' ), .... : ( 'A' , 'dog' , 'small' ), .... : ( 'B' , 'cat' , 'big' ), .... : ( 'B' , 'dog' , 'small' )]), .... : columns = [ 'index_1' , 'index_2' ]) . T .... : In [ 53 ]: df Out [ 53 ]: A B cat dog cat dog big small big small index_1 1.0 1.0 1.0 1.0 index_2 1.0 1.0 1.0 1.0 In [ 54 ]: df . stack () Out [ 54 ]: A B cat dog cat dog index_1 big 1.0 NaN 1.0 NaN small NaN 1.0 NaN 1.0 index_2 big 1.0 NaN 1.0 NaN small NaN 1.0 NaN 1.0 In [ 55 ]: df . stack ([ 1 , 2 ]) Out [ 55 ]: A B index_1 cat big 1.0 1.0 dog small 1.0 1.0 index_2 cat big 1.0 1.0 dog small 1.0 1.0 2. \u805a\u5408\u4e0e\u53d8\u5f62\u7684\u5173\u7cfb \u5728\u4e0a\u9762\u4ecb\u7ecd\u7684\u6240\u6709\u51fd\u6570\u4e2d\uff0c\u9664\u4e86\u5e26\u6709\u805a\u5408\u6548\u679c\u7684 pivot_table \u4ee5\u5916\uff0c\u6240\u6709\u7684\u51fd\u6570\u5728\u53d8\u5f62\u524d\u540e\u5e76\u4e0d\u4f1a\u5e26\u6765 values \u4e2a\u6570\u7684\u6539\u53d8\uff0c\u53ea\u662f\u8fd9\u4e9b\u503c\u5728\u5448\u73b0\u7684\u5f62\u5f0f\u4e0a\u53d1\u751f\u4e86\u53d8\u5316\u3002\u5728\u4e0a\u4e00\u7ae0\u8ba8\u8bba\u7684\u5206\u7ec4\u805a\u5408\u64cd\u4f5c\uff0c\u7531\u4e8e\u751f\u6210\u4e86\u65b0\u7684\u884c\u5217\u7d22\u5f15\uff0c\u56e0\u6b64\u5fc5\u7136\u4e5f\u5c5e\u4e8e\u67d0\u79cd\u7279\u6b8a\u7684\u53d8\u5f62\u64cd\u4f5c\uff0c\u4f46\u7531\u4e8e\u805a\u5408\u4e4b\u540e\u628a\u539f\u6765\u7684\u591a\u4e2a\u503c\u53d8\u4e3a\u4e86\u4e00\u4e2a\u503c\uff0c\u56e0\u6b64 values \u7684\u4e2a\u6570\u4ea7\u751f\u4e86\u53d8\u5316\uff0c\u8fd9\u4e5f\u662f\u5206\u7ec4\u805a\u5408\u4e0e\u53d8\u5f62\u51fd\u6570\u7684\u6700\u5927\u533a\u522b\u3002 \u4e09\u3001\u5176\u4ed6\u53d8\u5f62\u51fd\u6570 1. crosstab crosstab \u662f\u4e00\u4e2a\u5730\u4f4d\u5c34\u5c2c\u7684\u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u80fd\u5b9e\u73b0\u7684\u6240\u6709\u529f\u80fd pivot_table \u90fd\u80fd\u5b8c\u6210\u3002\u5728\u9ed8\u8ba4\u72b6\u6001\u4e0b\uff0c crosstab \u53ef\u4ee5\u7edf\u8ba1\u5143\u7d20\u7ec4\u5408\u51fa\u73b0\u7684\u9891\u6570\uff0c\u5373 count \u64cd\u4f5c\u3002\u4f8b\u5982\u7edf\u8ba1 learn_pandas \u6570\u636e\u96c6\u4e2d\u5b66\u6821\u548c\u8f6c\u7cfb\u60c5\u51b5\u5bf9\u5e94\u7684\u9891\u6570\uff1a In [ 56 ]: df = pd . read_csv ( 'data/learn_pandas.csv' ) In [ 57 ]: pd . crosstab ( index = df . School , columns = df . Transfer ) Out [ 57 ]: Transfer N Y School Fudan University 38 1 Peking University 28 2 Shanghai Jiao Tong University 53 0 Tsinghua University 62 4 \u8fd9\u7b49\u4ef7\u4e8e\u5982\u4e0b crosstab \u7684\u5982\u4e0b\u5199\u6cd5\uff0c\u8fd9\u91cc\u7684 aggfunc \u5373\u805a\u5408\u53c2\u6570\uff1a In [ 58 ]: pd . crosstab ( index = df . School , columns = df . Transfer , .... : values = [ 0 ] * df . shape [ 0 ], aggfunc = 'count' ) .... : Out [ 58 ]: Transfer N Y School Fudan University 38.0 1.0 Peking University 28.0 2.0 Shanghai Jiao Tong University 53.0 NaN Tsinghua University 62.0 4.0 \u540c\u6837\uff0c\u53ef\u4ee5\u5229\u7528 pivot_table \u8fdb\u884c\u7b49\u4ef7\u64cd\u4f5c\uff0c\u7531\u4e8e\u8fd9\u91cc\u7edf\u8ba1\u7684\u662f\u7ec4\u5408\u7684\u9891\u6570\uff0c\u56e0\u6b64 values \u53c2\u6570\u65e0\u8bba\u4f20\u5165\u54ea\u4e00\u4e2a\u5217\u90fd\u4e0d\u4f1a\u5f71\u54cd\u6700\u540e\u7684\u7ed3\u679c\uff1a In [ 59 ]: df . pivot_table ( index = 'School' , .... : columns = 'Transfer' , .... : values = 'Name' , .... : aggfunc = 'count' ) .... : Out [ 59 ]: Transfer N Y School Fudan University 38.0 1.0 Peking University 28.0 2.0 Shanghai Jiao Tong University 53.0 NaN Tsinghua University 62.0 4.0 \u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u533a\u522b\u5728\u4e8e\uff0c crosstab \u7684\u5bf9\u5e94\u4f4d\u7f6e\u4f20\u5165\u7684\u662f\u5177\u4f53\u7684\u5e8f\u5217\uff0c\u800c pivot_table \u4f20\u5165\u7684\u662f\u88ab\u8c03\u7528\u8868\u5bf9\u5e94\u7684\u540d\u5b57\uff0c\u82e5\u4f20\u5165\u5e8f\u5217\u5bf9\u5e94\u7684\u503c\u5219\u4f1a\u62a5\u9519\u3002 \u9664\u4e86\u9ed8\u8ba4\u72b6\u6001\u4e0b\u7684 count \u7edf\u8ba1\uff0c\u6240\u6709\u7684\u805a\u5408\u5b57\u7b26\u4e32\u548c\u8fd4\u56de\u6807\u91cf\u7684\u81ea\u5b9a\u4e49\u51fd\u6570\u90fd\u662f\u53ef\u7528\u7684\uff0c\u4f8b\u5982\u7edf\u8ba1\u5bf9\u5e94\u7ec4\u5408\u7684\u8eab\u9ad8\u5747\u503c\uff1a In [ 60 ]: pd . crosstab ( index = df . School , columns = df . Transfer , .... : values = df . Height , aggfunc = 'mean' ) .... : Out [ 60 ]: Transfer N Y School Fudan University 162.043750 177.20 Peking University 163.429630 162.40 Shanghai Jiao Tong University 163.953846 NaN Tsinghua University 163.253571 164.55 2. explode explode \u53c2\u6570\u80fd\u591f\u5bf9\u67d0\u4e00\u5217\u7684\u5143\u7d20\u8fdb\u884c\u7eb5\u5411\u7684\u5c55\u5f00\uff0c\u88ab\u5c55\u5f00\u7684\u5355\u5143\u683c\u5fc5\u987b\u5b58\u50a8 list, tuple, Series, np.ndarray \u4e2d\u7684\u4e00\u79cd\u7c7b\u578b\u3002 In [ 61 ]: df_ex = pd . DataFrame ({ 'A' : [[ 1 , 2 ], .... : 'my_str' , .... : { 1 , 2 }, .... : pd . Series ([ 3 , 4 ])], .... : 'B' : 1 }) .... : In [ 62 ]: df_ex . explode ( 'A' ) Out [ 62 ]: A B 0 1 1 0 2 1 1 my_str 1 2 1 1 2 2 1 3 3 1 3 4 1 3. get_dummies get_dummies \u662f\u7528\u4e8e\u7279\u5f81\u6784\u5efa\u7684\u91cd\u8981\u51fd\u6570\u4e4b\u4e00\uff0c\u5176\u4f5c\u7528\u662f\u628a\u7c7b\u522b\u7279\u5f81\u8f6c\u4e3a\u6307\u793a\u53d8\u91cf\u3002\u4f8b\u5982\uff0c\u5bf9\u5e74\u7ea7\u4e00\u5217\u8f6c\u4e3a\u6307\u793a\u53d8\u91cf\uff0c\u5c5e\u4e8e\u67d0\u4e00\u4e2a\u5e74\u7ea7\u7684\u5bf9\u5e94\u5217\u6807\u8bb0\u4e3a 1\uff0c\u5426\u5219\u4e3a 0\uff1a In [ 63 ]: pd . get_dummies ( df . Grade ) . head () Out [ 63 ]: Freshman Junior Senior Sophomore 0 1 0 0 0 1 1 0 0 0 2 0 0 1 0 3 0 0 0 1 4 0 0 0 1 \u56db\u3001\u7ec3\u4e60 Ex1\uff1a\u7f8e\u56fd\u975e\u6cd5\u836f\u7269\u6570\u636e\u96c6 \u73b0\u6709\u4e00\u4efd\u5173\u4e8e\u7f8e\u56fd\u975e\u6cd5\u836f\u7269\u7684\u6570\u636e\u96c6\uff0c\u5176\u4e2d SubstanceName, DrugReports \u5206\u522b\u6307\u836f\u7269\u540d\u79f0\u548c\u62a5\u544a\u6570\u91cf\uff1a In [ 64 ]: df = pd . read_csv ( 'data/drugs.csv' ) . sort_values ([ .... : 'State' , 'COUNTY' , 'SubstanceName' ], ignore_index = True ) .... : In [ 65 ]: df . head ( 3 ) Out [ 65 ]: YYYY State COUNTY SubstanceName DrugReports 0 2011 KY ADAIR Buprenorphine 3 1 2012 KY ADAIR Buprenorphine 5 2 2013 KY ADAIR Buprenorphine 4 \u5c06\u6570\u636e\u8f6c\u4e3a\u5982\u4e0b\u7684\u5f62\u5f0f\uff1a \u5c06\u7b2c 1 \u95ee\u4e2d\u7684\u7ed3\u679c\u6062\u590d\u4e3a\u539f\u8868\u3002 \u6309 State \u5206\u522b\u7edf\u8ba1\u6bcf\u5e74\u7684\u62a5\u544a\u6570\u91cf\u603b\u548c\uff0c\u5176\u4e2d State, YYYY \u5206\u522b\u4e3a\u5217\u7d22\u5f15\u548c\u884c\u7d22\u5f15\uff0c\u8981\u6c42\u5206\u522b\u4f7f\u7528 pivot_table \u51fd\u6570\u4e0e groupby+unstack \u4e24\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u5b9e\u73b0\uff0c\u5e76\u4f53\u4f1a\u5b83\u4eec\u4e4b\u95f4\u7684\u8054\u7cfb\u3002 Ex2\uff1a\u7279\u6b8a\u7684 wide_to_long \u65b9\u6cd5 \u4ece\u529f\u80fd\u4e0a\u770b\uff0c melt \u65b9\u6cd5\u5e94\u5f53\u5c5e\u4e8e wide_to_long \u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u5373 stubnames \u53ea\u6709\u4e00\u7c7b\u3002\u8bf7\u4f7f\u7528 wide_to_long \u751f\u6210 melt \u4e00\u8282\u4e2d\u7684 df_melted \u3002\uff08\u63d0\u793a\uff1a\u5bf9\u5217\u540d\u589e\u52a0\u9002\u5f53\u7684\u524d\u7f00\uff09 In [ 66 ]: df = pd . DataFrame ({ 'Class' :[ 1 , 2 ], .... : 'Name' :[ 'San Zhang' , 'Si Li' ], .... : 'Chinese' :[ 80 , 90 ], .... : 'Math' :[ 80 , 75 ]}) .... : In [ 67 ]: df Out [ 67 ]: Class Name Chinese Math 0 1 San Zhang 80 80 1 2 Si Li 90 75","title":"\u4e94\u3001\u53d8\u5f62"},{"location":"pandas/part5/#_1","text":"\u4ec0\u4e48\u662f\u957f\u8868\uff1f\u4ec0\u4e48\u662f\u5bbd\u8868\uff1f\u8fd9\u4e2a\u6982\u5ff5\u662f\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u7279\u5f81\u800c\u8a00\u7684\u3002\u4f8b\u5982\uff1a\u4e00\u4e2a\u8868\u4e2d\u628a\u6027\u522b\u5b58\u50a8\u5728\u67d0\u4e00\u4e2a\u5217\u4e2d\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u5173\u4e8e\u6027\u522b\u7684\u957f\u8868\uff1b\u5982\u679c\u628a\u6027\u522b\u4f5c\u4e3a\u5217\u540d\uff0c\u5217\u4e2d\u7684\u5143\u7d20\u662f\u67d0\u4e00\u5176\u4ed6\u7684\u76f8\u5173\u7279\u5f81\u6570\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8868\u662f\u5173\u4e8e\u6027\u522b\u7684\u5bbd\u8868\u3002\u4e0b\u9762\u7684\u4e24\u5f20\u8868\u5c31\u5206\u522b\u662f\u5173\u4e8e\u6027\u522b\u7684\u957f\u8868\u548c\u5bbd\u8868\uff1a In [ 3 ]: pd . DataFrame ({ 'Gender' :[ 'F' , 'F' , 'M' , 'M' ], ... : 'Height' :[ 163 , 160 , 175 , 180 ]}) ... : Out [ 3 ]: Gender Height 0 F 163 1 F 160 2 M 175 3 M 180 In [ 4 ]: pd . DataFrame ({ 'Height: F' :[ 163 , 160 ], ... : 'Height: M' :[ 175 , 180 ]}) ... : Out [ 4 ]: Height : F Height : M 0 163 175 1 160 180 \u663e\u7136\u8fd9\u4e24\u5f20\u8868\u4ece\u4fe1\u606f\u4e0a\u662f\u5b8c\u5168\u7b49\u4ef7\u7684\uff0c\u5b83\u4eec\u5305\u542b\u76f8\u540c\u7684\u8eab\u9ad8\u7edf\u8ba1\u6570\u503c\uff0c\u53ea\u662f\u8fd9\u4e9b\u6570\u503c\u7684\u5448\u73b0\u65b9\u5f0f\u4e0d\u540c\uff0c\u800c\u5176\u5448\u73b0\u65b9\u5f0f\u4e3b\u8981\u53c8\u4e0e\u6027\u522b\u4e00\u5217\u9009\u62e9\u7684\u5e03\u5c40\u6a21\u5f0f\u6709\u5173\uff0c\u5373\u5230\u5e95\u662f\u4ee5 long \u7684\u72b6\u6001\u5b58\u50a8\u8fd8\u662f\u4ee5 wide \u7684\u72b6\u6001\u5b58\u50a8\u3002\u56e0\u6b64\uff0c pandas \u9488\u5bf9\u6b64\u7c7b\u957f\u5bbd\u8868\u7684\u53d8\u5f62\u64cd\u4f5c\u8bbe\u8ba1\u4e86\u4e00\u4e9b\u6709\u5173\u7684\u53d8\u5f62\u51fd\u6570\u3002","title":"\u4e00\u3001\u957f\u5bbd\u8868\u7684\u53d8\u5f62"},{"location":"pandas/part5/#1-pivot","text":"pivot \u662f\u4e00\u79cd\u5178\u578b\u7684\u957f\u8868\u53d8\u5bbd\u8868\u7684\u51fd\u6570\uff0c\u9996\u5148\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a\u4e0b\u8868\u5b58\u50a8\u4e86\u5f20\u4e09\u548c\u674e\u56db\u7684\u8bed\u6587\u548c\u6570\u5b66\u5206\u6570\uff0c\u73b0\u5728\u60f3\u8981\u628a\u8bed\u6587\u548c\u6570\u5b66\u5206\u6570\u4f5c\u4e3a\u5217\u6765\u5c55\u793a\u3002 In [ 5 ]: df = pd . DataFrame ({ 'Class' :[ 1 , 1 , 2 , 2 ], ... : 'Name' :[ 'San Zhang' , 'San Zhang' , 'Si Li' , 'Si Li' ], ... : 'Subject' :[ 'Chinese' , 'Math' , 'Chinese' , 'Math' ], ... : 'Grade' :[ 80 , 75 , 90 , 85 ]}) ... : In [ 6 ]: df Out [ 6 ]: Class Name Subject Grade 0 1 San Zhang Chinese 80 1 1 San Zhang Math 75 2 2 Si Li Chinese 90 3 2 Si Li Math 85 \u5bf9\u4e8e\u4e00\u4e2a\u57fa\u672c\u7684\u957f\u53d8\u5bbd\u64cd\u4f5c\u800c\u8a00\uff0c\u6700\u91cd\u8981\u7684\u6709\u4e09\u4e2a\u8981\u7d20\uff0c\u5206\u522b\u662f\u53d8\u5f62\u540e\u7684\u884c\u7d22\u5f15\u3001\u9700\u8981\u8f6c\u5230\u5217\u7d22\u5f15\u7684\u5217\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u5217\u548c\u884c\u7d22\u5f15\u5bf9\u5e94\u7684\u6570\u503c\uff0c\u5b83\u4eec\u5206\u522b\u5bf9\u5e94\u4e86 pivot \u65b9\u6cd5\u4e2d\u7684 index, columns, values \u53c2\u6570\u3002\u65b0\u751f\u6210\u8868\u7684\u5217\u7d22\u5f15\u662f columns \u5bf9\u5e94\u5217\u7684 unique \u503c\uff0c\u800c\u65b0\u8868\u7684\u884c\u7d22\u5f15\u662f index \u5bf9\u5e94\u5217\u7684 unique \u503c\uff0c\u800c values \u5bf9\u5e94\u4e86\u60f3\u8981\u5c55\u793a\u7684\u6570\u503c\u5217\u3002 In [ 7 ]: df . pivot ( index = 'Name' , columns = 'Subject' , values = 'Grade' ) Out [ 7 ]: Subject Chinese Math Name San Zhang 80 75 Si Li 90 85 \u901a\u8fc7\u989c\u8272\u7684\u6807\u8bb0\uff0c\u66f4\u5bb9\u6613\u5730\u80fd\u591f\u7406\u89e3\u5176\u53d8\u5f62\u7684\u8fc7\u7a0b\uff1a \u5229\u7528 pivot \u8fdb\u884c\u53d8\u5f62\u64cd\u4f5c\u9700\u8981\u6ee1\u8db3\u552f\u4e00\u6027\u7684\u8981\u6c42\uff0c\u5373\u7531\u4e8e\u5728\u65b0\u8868\u4e2d\u7684\u884c\u5217\u7d22\u5f15\u5bf9\u5e94\u4e86\u552f\u4e00\u7684 value \uff0c\u56e0\u6b64\u539f\u8868\u4e2d\u7684 index \u548c columns \u5bf9\u5e94\u4e24\u4e2a\u5217\u7684\u884c\u7ec4\u5408\u5fc5\u987b\u552f\u4e00\u3002\u4f8b\u5982\uff0c\u73b0\u5728\u628a\u539f\u8868\u4e2d\u7b2c\u4e8c\u884c\u5f20\u4e09\u7684\u6570\u5b66\u6539\u4e3a\u8bed\u6587\u5c31\u4f1a\u62a5\u9519\uff0c\u8fd9\u662f\u7531\u4e8e Name \u4e0e Subject \u7684\u7ec4\u5408\u4e2d\u4e24\u6b21\u51fa\u73b0 (\"San Zhang\", \"Chinese\") \uff0c\u4ece\u800c\u6700\u540e\u4e0d\u80fd\u591f\u786e\u5b9a\u5230\u5e95\u53d8\u5f62\u540e\u5e94\u8be5\u662f\u586b\u5199 80 \u5206\u8fd8\u662f 75 \u5206\u3002 In [ 8 ]: df . loc [ 1 , 'Subject' ] = 'Chinese' In [ 9 ]: try : ... : df . pivot ( index = 'Name' , columns = 'Subject' , values = 'Grade' ) ... : except Exception as e : ... : Err_Msg = e ... : In [ 10 ]: Err_Msg Out [ 10 ]: ValueError ( 'Index contains duplicate entries, cannot reshape' ) pandas \u4ece 1.1.0 \u5f00\u59cb\uff0c pivot \u76f8\u5173\u7684\u4e09\u4e2a\u53c2\u6570\u5141\u8bb8\u88ab\u8bbe\u7f6e\u4e3a\u5217\u8868\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u4f1a\u8fd4\u56de\u591a\u7ea7\u7d22\u5f15\u3002\u8fd9\u91cc\u6784\u9020\u4e00\u4e2a\u76f8\u5e94\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u5982\u4f55\u4f7f\u7528\uff1a\u4e0b\u8868\u4e2d\u516d\u5217\u5206\u522b\u4e3a\u73ed\u7ea7\u3001\u59d3\u540d\u3001\u6d4b\u8bd5\u7c7b\u578b\uff08\u671f\u4e2d\u8003\u8bd5\u548c\u671f\u672b\u8003\u8bd5\uff09\u3001\u79d1\u76ee\u3001\u6210\u7ee9\u3001\u6392\u540d\u3002 In [ 11 ]: df = pd . DataFrame ({ 'Class' :[ 1 , 1 , 2 , 2 , 1 , 1 , 2 , 2 ], .... : 'Name' :[ 'San Zhang' , 'San Zhang' , 'Si Li' , 'Si Li' , .... : 'San Zhang' , 'San Zhang' , 'Si Li' , 'Si Li' ], .... : 'Examination' : [ 'Mid' , 'Final' , 'Mid' , 'Final' , .... : 'Mid' , 'Final' , 'Mid' , 'Final' ], .... : 'Subject' :[ 'Chinese' , 'Chinese' , 'Chinese' , 'Chinese' , .... : 'Math' , 'Math' , 'Math' , 'Math' ], .... : 'Grade' :[ 80 , 75 , 85 , 65 , 90 , 85 , 92 , 88 ], .... : 'rank' :[ 10 , 15 , 21 , 15 , 20 , 7 , 6 , 2 ]}) .... : In [ 12 ]: df Out [ 12 ]: Class Name Examination Subject Grade rank 0 1 San Zhang Mid Chinese 80 10 1 1 San Zhang Final Chinese 75 15 2 2 Si Li Mid Chinese 85 21 3 2 Si Li Final Chinese 65 15 4 1 San Zhang Mid Math 90 20 5 1 San Zhang Final Math 85 7 6 2 Si Li Mid Math 92 6 7 2 Si Li Final Math 88 2 \u73b0\u5728\u60f3\u8981\u628a\u6d4b\u8bd5\u7c7b\u578b\u548c\u79d1\u76ee\u8054\u5408\u7ec4\u6210\u7684\u56db\u4e2a\u7c7b\u522b\uff08\u671f\u4e2d\u8bed\u6587\u3001\u671f\u672b\u8bed\u6587\u3001\u671f\u4e2d\u6570\u5b66\u3001\u671f\u672b\u6570\u5b66\uff09\u8f6c\u5230\u5217\u7d22\u5f15\uff0c\u5e76\u4e14\u540c\u65f6\u7edf\u8ba1\u6210\u7ee9\u548c\u6392\u540d\uff1a In [ 13 ]: pivot_multi = df . pivot ( index = [ 'Class' , 'Name' ], .... : columns = [ 'Subject' , 'Examination' ], .... : values = [ 'Grade' , 'rank' ]) .... : In [ 14 ]: pivot_multi Out [ 14 ]: Grade rank Subject Chinese Math Chinese Math Examination Mid Final Mid Final Mid Final Mid Final Class Name 1 San Zhang 80 75 90 85 10 15 20 7 2 Si Li 85 65 92 88 21 15 6 2 \u6839\u636e\u552f\u4e00\u6027\u539f\u5219\uff0c\u65b0\u8868\u7684\u884c\u7d22\u5f15\u7b49\u4ef7\u4e8e\u5bf9 index \u4e2d\u7684\u591a\u5217\u4f7f\u7528 drop_duplicates \uff0c\u800c\u5217\u7d22\u5f15\u7684\u957f\u5ea6\u4e3a values \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u4e58\u4ee5 columns \u7684\u552f\u4e00\u7ec4\u5408\u6570\u91cf\uff08\u4e0e index \u7c7b\u4f3c\uff09 \u3002\u4ece\u4e0b\u9762\u7684\u793a\u610f\u56fe\u4e2d\u80fd\u591f\u6bd4\u8f83\u5bb9\u6613\u5730\u7406\u89e3\u76f8\u5e94\u7684\u64cd\u4f5c\uff1a","title":"1. pivot"},{"location":"pandas/part5/#2-pivot_table","text":"pivot \u7684\u4f7f\u7528\u4f9d\u8d56\u4e8e\u552f\u4e00\u6027\u6761\u4ef6\uff0c\u90a3\u5982\u679c\u4e0d\u6ee1\u8db3\u552f\u4e00\u6027\u6761\u4ef6\uff0c\u90a3\u4e48\u5fc5\u987b\u901a\u8fc7\u805a\u5408\u64cd\u4f5c\u4f7f\u5f97\u76f8\u540c\u884c\u5217\u7ec4\u5408\u5bf9\u5e94\u7684\u591a\u4e2a\u503c\u53d8\u4e3a\u4e00\u4e2a\u503c\u3002\u4f8b\u5982\uff0c\u5f20\u4e09\u548c\u674e\u56db\u90fd\u53c2\u52a0\u4e86\u4e24\u6b21\u8bed\u6587\u8003\u8bd5\u548c\u6570\u5b66\u8003\u8bd5\uff0c\u6309\u7167\u5b66\u9662\u89c4\u5b9a\uff0c\u6700\u540e\u7684\u6210\u7ee9\u662f\u4e24\u6b21\u8003\u8bd5\u5206\u6570\u7684\u5e73\u5747\u503c\uff0c\u6b64\u65f6\u5c31\u65e0\u6cd5\u901a\u8fc7 pivot \u51fd\u6570\u6765\u5b8c\u6210\u3002 In [ 15 ]: df = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'San Zhang' , .... : 'San Zhang' , 'San Zhang' , .... : 'Si Li' , 'Si Li' , 'Si Li' , 'Si Li' ], .... : 'Subject' :[ 'Chinese' , 'Chinese' , 'Math' , 'Math' , .... : 'Chinese' , 'Chinese' , 'Math' , 'Math' ], .... : 'Grade' :[ 80 , 90 , 100 , 90 , 70 , 80 , 85 , 95 ]}) .... : In [ 16 ]: df Out [ 16 ]: Name Subject Grade 0 San Zhang Chinese 80 1 San Zhang Chinese 90 2 San Zhang Math 100 3 San Zhang Math 90 4 Si Li Chinese 70 5 Si Li Chinese 80 6 Si Li Math 85 7 Si Li Math 95 pandas \u4e2d\u63d0\u4f9b\u4e86 pivot_table \u6765\u5b9e\u73b0\uff0c\u5176\u4e2d\u7684 aggfunc \u53c2\u6570\u5c31\u662f\u4f7f\u7528\u7684\u805a\u5408\u51fd\u6570\u3002\u4e0a\u8ff0\u573a\u666f\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 17 ]: df . pivot_table ( index = 'Name' , .... : columns = 'Subject' , .... : values = 'Grade' , .... : aggfunc = 'mean' ) .... : Out [ 17 ]: Subject Chinese Math Name San Zhang 85 95 Si Li 75 90 \u8fd9\u91cc\u4f20\u5165 aggfunc \u5305\u542b\u4e86\u4e0a\u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u7684\u6240\u6709\u5408\u6cd5\u805a\u5408\u5b57\u7b26\u4e32\uff0c\u6b64\u5916\u8fd8\u53ef\u4ee5\u4f20\u5165\u4ee5\u5e8f\u5217\u4e3a\u8f93\u5165\u6807\u91cf\u4e3a\u8f93\u51fa\u7684\u805a\u5408\u51fd\u6570\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u64cd\u4f5c\uff0c\u4e0a\u8ff0\u529f\u80fd\u53ef\u4ee5\u7b49\u4ef7\u5199\u51fa\uff1a In [ 18 ]: df . pivot_table ( index = 'Name' , .... : columns = 'Subject' , .... : values = 'Grade' , .... : aggfunc = lambda x : x . mean ()) .... : Out [ 18 ]: Subject Chinese Math Name San Zhang 85 95 Si Li 75 90 \u6b64\u5916\uff0c pivot_table \u5177\u6709\u8fb9\u9645\u6c47\u603b\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e margins=True \u6765\u5b9e\u73b0\uff0c\u5176\u4e2d\u8fb9\u9645\u7684\u805a\u5408\u65b9\u5f0f\u4e0e aggfunc \u4e2d\u7ed9\u51fa\u7684\u805a\u5408\u65b9\u6cd5\u4e00\u81f4\u3002\u4e0b\u9762\u5c31\u5206\u522b\u7edf\u8ba1\u4e86\u8bed\u6587\u5747\u5206\u548c\u6570\u5b66\u5747\u5206\u3001\u5f20\u4e09\u5747\u5206\u548c\u674e\u56db\u5747\u5206\uff0c\u4ee5\u53ca\u603b\u4f53\u6240\u6709\u5206\u6570\u7684\u5747\u5206\uff1a In [ 19 ]: df . pivot_table ( index = 'Name' , .... : columns = 'Subject' , .... : values = 'Grade' , .... : aggfunc = 'mean' , .... : margins = True ) .... : Out [ 19 ]: Subject Chinese Math All Name San Zhang 85 95.0 90.00 Si Li 75 90.0 82.50 All 80 92.5 86.25 \u7ec3\u4e00\u7ec3 \u5728\u4e0a\u9762\u7684\u8fb9\u9645\u6c47\u603b\u4f8b\u5b50\u4e2d\uff0c\u884c\u6216\u5217\u7684\u6c47\u603b\u4e3a\u65b0\u8868\u4e2d\u884c\u5143\u7d20\u6216\u8005\u5217\u5143\u7d20\u7684\u5e73\u5747\u503c\uff0c\u800c\u603b\u4f53\u7684\u6c47\u603b\u4e3a\u65b0\u8868\u4e2d\u56db\u4e2a\u5143\u7d20\u7684\u5e73\u5747\u503c\u3002\u8fd9\u79cd\u5173\u7cfb\u4e00\u5b9a\u6210\u7acb\u5417\uff1f\u82e5\u4e0d\u6210\u7acb\uff0c\u8bf7\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u3002","title":"2. pivot_table"},{"location":"pandas/part5/#3-melt","text":"\u957f\u5bbd\u8868\u53ea\u662f\u6570\u636e\u5448\u73b0\u65b9\u5f0f\u7684\u5dee\u5f02\uff0c\u4f46\u5176\u5305\u542b\u7684\u4fe1\u606f\u91cf\u662f\u7b49\u4ef7\u7684\uff0c\u524d\u9762\u63d0\u5230\u4e86\u5229\u7528 pivot \u628a\u957f\u8868\u8f6c\u4e3a\u5bbd\u8868\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u901a\u8fc7\u76f8\u5e94\u7684\u9006\u64cd\u4f5c\u628a\u5bbd\u8868\u8f6c\u4e3a\u957f\u8868\uff0c melt \u51fd\u6570\u5c31\u8d77\u5230\u4e86\u8fd9\u6837\u7684\u4f5c\u7528\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c Subject \u4ee5\u5217\u7d22\u5f15\u7684\u5f62\u5f0f\u5b58\u50a8\uff0c\u73b0\u5728\u60f3\u8981\u5c06\u5176\u538b\u7f29\u5230\u4e00\u4e2a\u5217\u4e2d\u3002 In [ 20 ]: df = pd . DataFrame ({ 'Class' :[ 1 , 2 ], .... : 'Name' :[ 'San Zhang' , 'Si Li' ], .... : 'Chinese' :[ 80 , 90 ], .... : 'Math' :[ 80 , 75 ]}) .... : In [ 21 ]: df Out [ 21 ]: Class Name Chinese Math 0 1 San Zhang 80 80 1 2 Si Li 90 75 In [ 22 ]: df_melted = df . melt ( id_vars = [ 'Class' , 'Name' ], .... : value_vars = [ 'Chinese' , 'Math' ], .... : var_name = 'Subject' , .... : value_name = 'Grade' ) .... : In [ 23 ]: df_melted Out [ 23 ]: Class Name Subject Grade 0 1 San Zhang Chinese 80 1 2 Si Li Chinese 90 2 1 San Zhang Math 80 3 2 Si Li Math 75 melt \u7684\u4e3b\u8981\u53c2\u6570\u548c\u538b\u7f29\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u524d\u9762\u63d0\u5230\u4e86 melt \u548c pivot \u662f\u4e00\u7ec4\u4e92\u9006\u8fc7\u7a0b\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u53ef\u4ee5\u901a\u8fc7 pivot \u64cd\u4f5c\u628a df_melted \u8f6c\u56de df \u7684\u5f62\u5f0f\uff1a In [ 24 ]: df_unmelted = df_melted . pivot ( index = [ 'Class' , 'Name' ], .... : columns = 'Subject' , .... : values = 'Grade' ) .... : In [ 25 ]: df_unmelted # \u4e0b\u9762\u9700\u8981\u6062\u590d\u7d22\u5f15\uff0c\u5e76\u4e14\u91cd\u547d\u540d\u5217\u7d22\u5f15\u540d\u79f0 Out [ 25 ]: Subject Chinese Math Class Name 1 San Zhang 80 80 2 Si Li 90 75 In [ 26 ]: df_unmelted = df_unmelted . reset_index () . rename_axis ( .... : columns = { 'Subject' : '' }) .... : In [ 27 ]: df_unmelted . equals ( df ) Out [ 27 ]: True","title":"3. melt"},{"location":"pandas/part5/#4-wide_to_long","text":"melt \u65b9\u6cd5\u4e2d\uff0c\u5728\u5217\u7d22\u5f15\u4e2d\u88ab\u538b\u7f29\u7684\u4e00\u7ec4\u503c\u5bf9\u5e94\u7684\u5217\u5143\u7d20\u53ea\u80fd\u4ee3\u8868\u540c\u4e00\u5c42\u6b21\u7684\u542b\u4e49\uff0c\u5373 values_name \u3002\u73b0\u5728\u5982\u679c\u5217\u4e2d\u5305\u542b\u4e86\u4ea4\u53c9\u7c7b\u522b\uff0c\u6bd4\u5982\u671f\u4e2d\u671f\u672b\u7684\u7c7b\u522b\u548c\u8bed\u6587\u6570\u5b66\u7684\u7c7b\u522b\uff0c\u90a3\u4e48\u60f3\u8981\u628a values_name \u5bf9\u5e94\u7684 Grade \u6269\u5145\u4e3a\u4e24\u5217\u5206\u522b\u5bf9\u5e94\u8bed\u6587\u5206\u6570\u548c\u6570\u5b66\u5206\u6570\uff0c\u53ea\u628a\u671f\u4e2d\u671f\u672b\u7684\u4fe1\u606f\u538b\u7f29\uff0c\u8fd9\u79cd\u9700\u6c42\u4e0b\u5c31\u8981\u4f7f\u7528 wide_to_long \u51fd\u6570\u6765\u5b8c\u6210\u3002 In [ 28 ]: df = pd . DataFrame ({ 'Class' :[ 1 , 2 ], 'Name' :[ 'San Zhang' , 'Si Li' ], .... : 'Chinese_Mid' :[ 80 , 75 ], 'Math_Mid' :[ 90 , 85 ], .... : 'Chinese_Final' :[ 80 , 75 ], 'Math_Final' :[ 90 , 85 ]}) .... : In [ 29 ]: df Out [ 29 ]: Class Name Chinese_Mid Math_Mid Chinese_Final Math_Final 0 1 San Zhang 80 90 80 90 1 2 Si Li 75 85 75 85 In [ 30 ]: pd . wide_to_long ( df , .... : stubnames = [ 'Chinese' , 'Math' ], .... : i = [ 'Class' , 'Name' ], .... : j = 'Examination' , .... : sep = '_' , .... : suffix = '.+' ) .... : Out [ 30 ]: Chinese Math Class Name Examination 1 San Zhang Mid 80 90 Final 80 90 2 Si Li Mid 75 85 Final 75 85 \u5177\u4f53\u7684\u53d8\u6362\u8fc7\u7a0b\u7531\u4e0b\u56fe\u8fdb\u884c\u5c55\u793a\uff0c\u5c5e\u76f8\u540c\u6982\u5ff5\u7684\u5143\u7d20\u4f7f\u7528\u4e86\u4e00\u81f4\u7684\u989c\u8272\u6807\u51fa\uff1a \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684\u6848\u4f8b\uff0c\u628a\u4e4b\u524d\u5728 pivot \u4e00\u8282\u4e2d\u591a\u5217\u64cd\u4f5c\u7684\u7ed3\u679c\uff08\u4ea7\u751f\u4e86\u591a\u7ea7\u7d22\u5f15\uff09\uff0c\u5229\u7528 wide_to_long \u51fd\u6570\uff0c\u5c06\u5176\u8f6c\u4e3a\u539f\u6765\u7684\u5f62\u6001\u3002\u5176\u4e2d\uff0c\u4f7f\u7528\u4e86\u7b2c\u516b\u7ae0\u7684 str.split \u51fd\u6570\uff0c\u76ee\u524d\u6682\u65f6\u53ea\u9700\u5c06\u5176\u7406\u89e3\u4e3a\u5bf9\u5e8f\u5217\u6309\u7167\u67d0\u4e2a\u5206\u9694\u7b26\u8fdb\u884c\u62c6\u5206\u5373\u53ef\u3002 In [ 31 ]: res = pivot_multi . copy () In [ 32 ]: res . columns = res . columns . map ( lambda x : '_' . join ( x )) In [ 33 ]: res = res . reset_index () In [ 34 ]: res = pd . wide_to_long ( res , stubnames = [ 'Grade' , 'rank' ], .... : i = [ 'Class' , 'Name' ], .... : j = 'Subject_Examination' , .... : sep = '_' , .... : suffix = '.+' ) .... : In [ 35 ]: res Out [ 35 ]: Grade rank Class Name Subject_Examination 1 San Zhang Chinese_Mid 80 10 Chinese_Final 75 15 Math_Mid 90 20 Math_Final 85 7 2 Si Li Chinese_Mid 85 21 Chinese_Final 65 15 Math_Mid 92 6 Math_Final 88 2 In [ 36 ]: res = res . reset_index () In [ 37 ]: res [[ 'Subject' , 'Examination' ]] = res [ .... : 'Subject_Examination' ] . str . split ( '_' , expand = True ) .... : In [ 38 ]: res = res [[ 'Class' , 'Name' , 'Examination' , .... : 'Subject' , 'Grade' , 'rank' ]] . sort_values ( 'Subject' ) .... : In [ 39 ]: res = res . reset_index ( drop = True ) In [ 40 ]: res Out [ 40 ]: Class Name Examination Subject Grade rank 0 1 San Zhang Mid Chinese 80 10 1 1 San Zhang Final Chinese 75 15 2 2 Si Li Mid Chinese 85 21 3 2 Si Li Final Chinese 65 15 4 1 San Zhang Mid Math 90 20 5 1 San Zhang Final Math 85 7 6 2 Si Li Mid Math 92 6 7 2 Si Li Final Math 88 2","title":"4. wide_to_long"},{"location":"pandas/part5/#_2","text":"","title":"\u4e8c\u3001\u7d22\u5f15\u7684\u53d8\u5f62"},{"location":"pandas/part5/#1-stack-unstack","text":"\u5728\u7b2c\u4e8c\u7ae0\u4e2d\u63d0\u5230\u4e86\u5229\u7528 swaplevel \u6216\u8005 reorder_levels \u8fdb\u884c\u7d22\u5f15\u5185\u90e8\u7684\u5c42\u4ea4\u6362\uff0c\u4e0b\u9762\u5c31\u8981\u8ba8\u8bba \u884c\u5217\u7d22\u5f15\u4e4b\u95f4 \u7684\u4ea4\u6362\uff0c\u7531\u4e8e\u8fd9\u79cd\u4ea4\u6362\u5e26\u6765\u4e86 DataFrame \u7ef4\u5ea6\u4e0a\u7684\u53d8\u5316\uff0c\u56e0\u6b64\u5c5e\u4e8e\u53d8\u5f62\u64cd\u4f5c\u3002\u5728\u7b2c\u4e00\u8282\u4e2d\u63d0\u5230\u7684 4 \u79cd\u53d8\u5f62\u51fd\u6570\u4e0e\u5176\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u4eec\u90fd\u5c5e\u4e8e\u67d0\u4e00\u5217\u6216\u51e0\u5217 \u5143\u7d20 \u548c \u5217\u7d22\u5f15 \u4e4b\u95f4\u7684\u8f6c\u6362\uff0c\u800c\u4e0d\u662f\u7d22\u5f15\u4e4b\u95f4\u7684\u8f6c\u6362\u3002 unstack \u51fd\u6570\u7684\u4f5c\u7528\u662f\u628a\u884c\u7d22\u5f15\u8f6c\u4e3a\u5217\u7d22\u5f15\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a In [ 41 ]: df = pd . DataFrame ( np . ones (( 4 , 2 )), .... : index = pd . Index ([( 'A' , 'cat' , 'big' ), .... : ( 'A' , 'dog' , 'small' ), .... : ( 'B' , 'cat' , 'big' ), .... : ( 'B' , 'dog' , 'small' )]), .... : columns = [ 'col_1' , 'col_2' ]) .... : In [ 42 ]: df Out [ 42 ]: col_1 col_2 A cat big 1.0 1.0 dog small 1.0 1.0 B cat big 1.0 1.0 dog small 1.0 1.0 In [ 43 ]: df . unstack () Out [ 43 ]: col_1 col_2 big small big small A cat 1.0 NaN 1.0 NaN dog NaN 1.0 NaN 1.0 B cat 1.0 NaN 1.0 NaN dog NaN 1.0 NaN 1.0 unstack \u7684\u4e3b\u8981\u53c2\u6570\u662f\u79fb\u52a8\u7684\u5c42\u53f7\uff0c\u9ed8\u8ba4\u8f6c\u5316\u6700\u5185\u5c42\uff0c\u79fb\u52a8\u5230\u5217\u7d22\u5f15\u7684\u6700\u5185\u5c42\uff0c\u540c\u65f6\u652f\u6301\u540c\u65f6\u8f6c\u5316\u591a\u4e2a\u5c42\uff1a In [ 44 ]: df . unstack ( 2 ) Out [ 44 ]: col_1 col_2 big small big small A cat 1.0 NaN 1.0 NaN dog NaN 1.0 NaN 1.0 B cat 1.0 NaN 1.0 NaN dog NaN 1.0 NaN 1.0 In [ 45 ]: df . unstack ([ 0 , 2 ]) Out [ 45 ]: col_1 col_2 A B A B big small big small big small big small cat 1.0 NaN 1.0 NaN 1.0 NaN 1.0 NaN dog NaN 1.0 NaN 1.0 NaN 1.0 NaN 1.0 \u7c7b\u4f3c\u4e8e pivot \u4e2d\u7684\u552f\u4e00\u6027\u8981\u6c42\uff0c\u5728 unstack \u4e2d\u5fc5\u987b\u4fdd\u8bc1 \u88ab\u8f6c\u4e3a\u5217\u7d22\u5f15\u7684\u884c\u7d22\u5f15\u5c42 \u548c \u88ab\u4fdd\u7559\u7684\u884c\u7d22\u5f15\u5c42 \u6784\u6210\u7684\u7ec4\u5408\u662f\u552f\u4e00\u7684\uff0c\u4f8b\u5982\u628a\u524d\u4e24\u4e2a\u5217\u7d22\u5f15\u6539\u6210\u76f8\u540c\u7684\u7834\u574f\u552f\u4e00\u6027\uff0c\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519\uff1a In [ 46 ]: my_index = df . index . to_list () In [ 47 ]: my_index [ 1 ] = my_index [ 0 ] In [ 48 ]: df . index = pd . Index ( my_index ) In [ 49 ]: df Out [ 49 ]: col_1 col_2 A cat big 1.0 1.0 big 1.0 1.0 B cat big 1.0 1.0 dog small 1.0 1.0 In [ 50 ]: try : .... : df . unstack () .... : except Exception as e : .... : Err_Msg = e .... : In [ 51 ]: Err_Msg Out [ 51 ]: ValueError ( 'Index contains duplicate entries, cannot reshape' ) \u4e0e unstack \u76f8\u53cd\uff0c stack \u7684\u4f5c\u7528\u5c31\u662f\u628a\u5217\u7d22\u5f15\u7684\u5c42\u538b\u5165\u884c\u7d22\u5f15\uff0c\u5176\u7528\u6cd5\u5b8c\u5168\u7c7b\u4f3c\u3002 In [ 52 ]: df = pd . DataFrame ( np . ones (( 4 , 2 )), .... : index = pd . Index ([( 'A' , 'cat' , 'big' ), .... : ( 'A' , 'dog' , 'small' ), .... : ( 'B' , 'cat' , 'big' ), .... : ( 'B' , 'dog' , 'small' )]), .... : columns = [ 'index_1' , 'index_2' ]) . T .... : In [ 53 ]: df Out [ 53 ]: A B cat dog cat dog big small big small index_1 1.0 1.0 1.0 1.0 index_2 1.0 1.0 1.0 1.0 In [ 54 ]: df . stack () Out [ 54 ]: A B cat dog cat dog index_1 big 1.0 NaN 1.0 NaN small NaN 1.0 NaN 1.0 index_2 big 1.0 NaN 1.0 NaN small NaN 1.0 NaN 1.0 In [ 55 ]: df . stack ([ 1 , 2 ]) Out [ 55 ]: A B index_1 cat big 1.0 1.0 dog small 1.0 1.0 index_2 cat big 1.0 1.0 dog small 1.0 1.0","title":"1. stack \u4e0e unstack"},{"location":"pandas/part5/#2","text":"\u5728\u4e0a\u9762\u4ecb\u7ecd\u7684\u6240\u6709\u51fd\u6570\u4e2d\uff0c\u9664\u4e86\u5e26\u6709\u805a\u5408\u6548\u679c\u7684 pivot_table \u4ee5\u5916\uff0c\u6240\u6709\u7684\u51fd\u6570\u5728\u53d8\u5f62\u524d\u540e\u5e76\u4e0d\u4f1a\u5e26\u6765 values \u4e2a\u6570\u7684\u6539\u53d8\uff0c\u53ea\u662f\u8fd9\u4e9b\u503c\u5728\u5448\u73b0\u7684\u5f62\u5f0f\u4e0a\u53d1\u751f\u4e86\u53d8\u5316\u3002\u5728\u4e0a\u4e00\u7ae0\u8ba8\u8bba\u7684\u5206\u7ec4\u805a\u5408\u64cd\u4f5c\uff0c\u7531\u4e8e\u751f\u6210\u4e86\u65b0\u7684\u884c\u5217\u7d22\u5f15\uff0c\u56e0\u6b64\u5fc5\u7136\u4e5f\u5c5e\u4e8e\u67d0\u79cd\u7279\u6b8a\u7684\u53d8\u5f62\u64cd\u4f5c\uff0c\u4f46\u7531\u4e8e\u805a\u5408\u4e4b\u540e\u628a\u539f\u6765\u7684\u591a\u4e2a\u503c\u53d8\u4e3a\u4e86\u4e00\u4e2a\u503c\uff0c\u56e0\u6b64 values \u7684\u4e2a\u6570\u4ea7\u751f\u4e86\u53d8\u5316\uff0c\u8fd9\u4e5f\u662f\u5206\u7ec4\u805a\u5408\u4e0e\u53d8\u5f62\u51fd\u6570\u7684\u6700\u5927\u533a\u522b\u3002","title":"2. \u805a\u5408\u4e0e\u53d8\u5f62\u7684\u5173\u7cfb"},{"location":"pandas/part5/#_3","text":"","title":"\u4e09\u3001\u5176\u4ed6\u53d8\u5f62\u51fd\u6570"},{"location":"pandas/part5/#1-crosstab","text":"crosstab \u662f\u4e00\u4e2a\u5730\u4f4d\u5c34\u5c2c\u7684\u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u80fd\u5b9e\u73b0\u7684\u6240\u6709\u529f\u80fd pivot_table \u90fd\u80fd\u5b8c\u6210\u3002\u5728\u9ed8\u8ba4\u72b6\u6001\u4e0b\uff0c crosstab \u53ef\u4ee5\u7edf\u8ba1\u5143\u7d20\u7ec4\u5408\u51fa\u73b0\u7684\u9891\u6570\uff0c\u5373 count \u64cd\u4f5c\u3002\u4f8b\u5982\u7edf\u8ba1 learn_pandas \u6570\u636e\u96c6\u4e2d\u5b66\u6821\u548c\u8f6c\u7cfb\u60c5\u51b5\u5bf9\u5e94\u7684\u9891\u6570\uff1a In [ 56 ]: df = pd . read_csv ( 'data/learn_pandas.csv' ) In [ 57 ]: pd . crosstab ( index = df . School , columns = df . Transfer ) Out [ 57 ]: Transfer N Y School Fudan University 38 1 Peking University 28 2 Shanghai Jiao Tong University 53 0 Tsinghua University 62 4 \u8fd9\u7b49\u4ef7\u4e8e\u5982\u4e0b crosstab \u7684\u5982\u4e0b\u5199\u6cd5\uff0c\u8fd9\u91cc\u7684 aggfunc \u5373\u805a\u5408\u53c2\u6570\uff1a In [ 58 ]: pd . crosstab ( index = df . School , columns = df . Transfer , .... : values = [ 0 ] * df . shape [ 0 ], aggfunc = 'count' ) .... : Out [ 58 ]: Transfer N Y School Fudan University 38.0 1.0 Peking University 28.0 2.0 Shanghai Jiao Tong University 53.0 NaN Tsinghua University 62.0 4.0 \u540c\u6837\uff0c\u53ef\u4ee5\u5229\u7528 pivot_table \u8fdb\u884c\u7b49\u4ef7\u64cd\u4f5c\uff0c\u7531\u4e8e\u8fd9\u91cc\u7edf\u8ba1\u7684\u662f\u7ec4\u5408\u7684\u9891\u6570\uff0c\u56e0\u6b64 values \u53c2\u6570\u65e0\u8bba\u4f20\u5165\u54ea\u4e00\u4e2a\u5217\u90fd\u4e0d\u4f1a\u5f71\u54cd\u6700\u540e\u7684\u7ed3\u679c\uff1a In [ 59 ]: df . pivot_table ( index = 'School' , .... : columns = 'Transfer' , .... : values = 'Name' , .... : aggfunc = 'count' ) .... : Out [ 59 ]: Transfer N Y School Fudan University 38.0 1.0 Peking University 28.0 2.0 Shanghai Jiao Tong University 53.0 NaN Tsinghua University 62.0 4.0 \u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u533a\u522b\u5728\u4e8e\uff0c crosstab \u7684\u5bf9\u5e94\u4f4d\u7f6e\u4f20\u5165\u7684\u662f\u5177\u4f53\u7684\u5e8f\u5217\uff0c\u800c pivot_table \u4f20\u5165\u7684\u662f\u88ab\u8c03\u7528\u8868\u5bf9\u5e94\u7684\u540d\u5b57\uff0c\u82e5\u4f20\u5165\u5e8f\u5217\u5bf9\u5e94\u7684\u503c\u5219\u4f1a\u62a5\u9519\u3002 \u9664\u4e86\u9ed8\u8ba4\u72b6\u6001\u4e0b\u7684 count \u7edf\u8ba1\uff0c\u6240\u6709\u7684\u805a\u5408\u5b57\u7b26\u4e32\u548c\u8fd4\u56de\u6807\u91cf\u7684\u81ea\u5b9a\u4e49\u51fd\u6570\u90fd\u662f\u53ef\u7528\u7684\uff0c\u4f8b\u5982\u7edf\u8ba1\u5bf9\u5e94\u7ec4\u5408\u7684\u8eab\u9ad8\u5747\u503c\uff1a In [ 60 ]: pd . crosstab ( index = df . School , columns = df . Transfer , .... : values = df . Height , aggfunc = 'mean' ) .... : Out [ 60 ]: Transfer N Y School Fudan University 162.043750 177.20 Peking University 163.429630 162.40 Shanghai Jiao Tong University 163.953846 NaN Tsinghua University 163.253571 164.55","title":"1. crosstab"},{"location":"pandas/part5/#2-explode","text":"explode \u53c2\u6570\u80fd\u591f\u5bf9\u67d0\u4e00\u5217\u7684\u5143\u7d20\u8fdb\u884c\u7eb5\u5411\u7684\u5c55\u5f00\uff0c\u88ab\u5c55\u5f00\u7684\u5355\u5143\u683c\u5fc5\u987b\u5b58\u50a8 list, tuple, Series, np.ndarray \u4e2d\u7684\u4e00\u79cd\u7c7b\u578b\u3002 In [ 61 ]: df_ex = pd . DataFrame ({ 'A' : [[ 1 , 2 ], .... : 'my_str' , .... : { 1 , 2 }, .... : pd . Series ([ 3 , 4 ])], .... : 'B' : 1 }) .... : In [ 62 ]: df_ex . explode ( 'A' ) Out [ 62 ]: A B 0 1 1 0 2 1 1 my_str 1 2 1 1 2 2 1 3 3 1 3 4 1","title":"2. explode"},{"location":"pandas/part5/#3-get_dummies","text":"get_dummies \u662f\u7528\u4e8e\u7279\u5f81\u6784\u5efa\u7684\u91cd\u8981\u51fd\u6570\u4e4b\u4e00\uff0c\u5176\u4f5c\u7528\u662f\u628a\u7c7b\u522b\u7279\u5f81\u8f6c\u4e3a\u6307\u793a\u53d8\u91cf\u3002\u4f8b\u5982\uff0c\u5bf9\u5e74\u7ea7\u4e00\u5217\u8f6c\u4e3a\u6307\u793a\u53d8\u91cf\uff0c\u5c5e\u4e8e\u67d0\u4e00\u4e2a\u5e74\u7ea7\u7684\u5bf9\u5e94\u5217\u6807\u8bb0\u4e3a 1\uff0c\u5426\u5219\u4e3a 0\uff1a In [ 63 ]: pd . get_dummies ( df . Grade ) . head () Out [ 63 ]: Freshman Junior Senior Sophomore 0 1 0 0 0 1 1 0 0 0 2 0 0 1 0 3 0 0 0 1 4 0 0 0 1","title":"3. get_dummies"},{"location":"pandas/part5/#_4","text":"","title":"\u56db\u3001\u7ec3\u4e60"},{"location":"pandas/part5/#ex1","text":"\u73b0\u6709\u4e00\u4efd\u5173\u4e8e\u7f8e\u56fd\u975e\u6cd5\u836f\u7269\u7684\u6570\u636e\u96c6\uff0c\u5176\u4e2d SubstanceName, DrugReports \u5206\u522b\u6307\u836f\u7269\u540d\u79f0\u548c\u62a5\u544a\u6570\u91cf\uff1a In [ 64 ]: df = pd . read_csv ( 'data/drugs.csv' ) . sort_values ([ .... : 'State' , 'COUNTY' , 'SubstanceName' ], ignore_index = True ) .... : In [ 65 ]: df . head ( 3 ) Out [ 65 ]: YYYY State COUNTY SubstanceName DrugReports 0 2011 KY ADAIR Buprenorphine 3 1 2012 KY ADAIR Buprenorphine 5 2 2013 KY ADAIR Buprenorphine 4 \u5c06\u6570\u636e\u8f6c\u4e3a\u5982\u4e0b\u7684\u5f62\u5f0f\uff1a \u5c06\u7b2c 1 \u95ee\u4e2d\u7684\u7ed3\u679c\u6062\u590d\u4e3a\u539f\u8868\u3002 \u6309 State \u5206\u522b\u7edf\u8ba1\u6bcf\u5e74\u7684\u62a5\u544a\u6570\u91cf\u603b\u548c\uff0c\u5176\u4e2d State, YYYY \u5206\u522b\u4e3a\u5217\u7d22\u5f15\u548c\u884c\u7d22\u5f15\uff0c\u8981\u6c42\u5206\u522b\u4f7f\u7528 pivot_table \u51fd\u6570\u4e0e groupby+unstack \u4e24\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u5b9e\u73b0\uff0c\u5e76\u4f53\u4f1a\u5b83\u4eec\u4e4b\u95f4\u7684\u8054\u7cfb\u3002","title":"Ex1\uff1a\u7f8e\u56fd\u975e\u6cd5\u836f\u7269\u6570\u636e\u96c6"},{"location":"pandas/part5/#ex2-wide_to_long","text":"\u4ece\u529f\u80fd\u4e0a\u770b\uff0c melt \u65b9\u6cd5\u5e94\u5f53\u5c5e\u4e8e wide_to_long \u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u5373 stubnames \u53ea\u6709\u4e00\u7c7b\u3002\u8bf7\u4f7f\u7528 wide_to_long \u751f\u6210 melt \u4e00\u8282\u4e2d\u7684 df_melted \u3002\uff08\u63d0\u793a\uff1a\u5bf9\u5217\u540d\u589e\u52a0\u9002\u5f53\u7684\u524d\u7f00\uff09 In [ 66 ]: df = pd . DataFrame ({ 'Class' :[ 1 , 2 ], .... : 'Name' :[ 'San Zhang' , 'Si Li' ], .... : 'Chinese' :[ 80 , 90 ], .... : 'Math' :[ 80 , 75 ]}) .... : In [ 67 ]: df Out [ 67 ]: Class Name Chinese Math 0 1 San Zhang 80 80 1 2 Si Li 90 75","title":"Ex2\uff1a\u7279\u6b8a\u7684 wide_to_long \u65b9\u6cd5"},{"location":"pandas/part6/","text":"In [ 1 ]: import numpy as np In [ 2 ]: import pandas as pd \u4e00\u3001\u5173\u7cfb\u578b\u8fde\u63a5 1. \u8fde\u63a5\u7684\u57fa\u672c\u6982\u5ff5 \u628a\u4e24\u5f20\u76f8\u5173\u7684\u8868\u6309\u7167\u67d0\u4e00\u4e2a\u6216\u67d0\u4e00\u7ec4\u952e\u8fde\u63a5\u8d77\u6765\u662f\u4e00\u79cd\u5e38\u89c1\u64cd\u4f5c\uff0c\u4f8b\u5982\u5b66\u751f\u671f\u672b\u8003\u8bd5\u5404\u4e2a\u79d1\u76ee\u7684\u6210\u7ee9\u8868\u6309\u7167 \u59d3\u540d \u548c \u73ed\u7ea7 \u8fde\u63a5\u6210\u603b\u7684\u6210\u7ee9\u8868\uff0c\u53c8\u4f8b\u5982\u5bf9\u4f01\u4e1a\u5458\u5de5\u7684\u5404\u7c7b\u4fe1\u606f\u8868\u6309\u7167 \u5458\u5de5 ID \u53f7 \u8fdb\u884c\u8fde\u63a5\u6c47\u603b\u3002\u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u5173\u7cfb\u578b\u8fde\u63a5\u4e2d\uff0c \u952e \u662f\u5341\u5206\u91cd\u8981\u7684\uff0c\u5f80\u5f80\u7528 on \u53c2\u6570\u8868\u793a\u3002 \u53e6\u4e00\u4e2a\u91cd\u8981\u7684\u8981\u7d20\u662f\u8fde\u63a5\u7684\u5f62\u5f0f\u3002\u5728 pandas \u4e2d\u7684\u5173\u7cfb\u578b\u8fde\u63a5\u51fd\u6570 merge \u548c join \u4e2d\u63d0\u4f9b\u4e86 how \u53c2\u6570\u6765\u4ee3\u8868\u8fde\u63a5\u5f62\u5f0f\uff0c\u5206\u4e3a\u5de6\u8fde\u63a5 left \u3001\u53f3\u8fde\u63a5 right \u3001\u5185\u8fde\u63a5 inner \u3001\u5916\u8fde\u63a5 outer \uff0c\u5b83\u4eec\u7684\u533a\u522b\u53ef\u4ee5\u7528\u5982\u4e0b\u793a\u610f\u56fe\u8868\u793a\uff1a \u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u6240\u8c13\u5de6\u8fde\u63a5\u5373\u4ee5\u5de6\u8868\u7684\u952e\u4e3a\u51c6\uff0c\u5982\u679c\u53f3\u8868\u4e2d\u7684\u952e\u4e8e\u5de6\u8868\u5b58\u5728\uff0c\u90a3\u4e48\u5c31\u6dfb\u52a0\u5230\u5de6\u8868\uff0c\u5426\u5219\u5219\u5904\u7406\u4e3a\u7f3a\u5931\u503c\uff0c\u53f3\u8fde\u63a5\u7c7b\u4f3c\u5904\u7406\u3002\u5185\u8fde\u63a5\u53ea\u8d1f\u8d23\u5408\u5e76\u4e24\u8fb9\u540c\u65f6\u51fa\u73b0\u7684\u952e\uff0c\u800c\u5916\u8fde\u63a5\u5219\u4f1a\u5728\u5185\u8fde\u63a5\u7684\u57fa\u7840\u4e0a\u5305\u542b\u53ea\u5728\u5de6\u8fb9\u51fa\u73b0\u4ee5\u53ca\u53ea\u5728\u53f3\u8fb9\u51fa\u73b0\u7684\u503c\uff0c\u56e0\u6b64\u5916\u8fde\u63a5\u53c8\u53eb\u5168\u8fde\u63a5\u3002 \u4e0a\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u4e2d\uff0c\u540c\u4e00\u4e2a\u8868\u4e2d\u7684\u952e\u6ca1\u6709\u51fa\u73b0\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u5982\u679c\u51fa\u73b0\u91cd\u590d\u7684\u952e\u5e94\u8be5\u5982\u4f55\u5904\u7406\uff1f\u53ea\u9700\u628a\u63e1\u4e00\u4e2a\u539f\u5219\uff0c\u5373\u53ea\u8981\u4e24\u8fb9\u540c\u65f6\u51fa\u73b0\u7684\u503c\uff0c\u5c31\u4ee5\u7b1b\u5361\u5c14\u79ef\u7684\u65b9\u5f0f\u52a0\u5165\uff0c\u5982\u679c\u5355\u8fb9\u51fa\u73b0\u5219\u6839\u636e\u8fde\u63a5\u5f62\u5f0f\u8fdb\u884c\u5904\u7406\u3002\u5176\u4e2d\uff0c\u5173\u4e8e\u7b1b\u5361\u5c14\u79ef\u53ef\u7528\u5982\u4e0b\u4f8b\u5b50\u8bf4\u660e\uff1a\u8bbe\u5de6\u8868\u4e2d\u952e \u5f20\u4e09 \u51fa\u73b0\u4e24\u6b21\uff0c\u53f3\u8868\u4e2d\u7684 \u5f20\u4e09 \u4e5f\u51fa\u73b0\u4e24\u6b21\uff0c\u90a3\u4e48\u9010\u4e2a\u8fdb\u884c\u5339\u914d\uff0c\u6700\u540e\u4ea7\u751f\u7684\u8868\u5fc5\u7136\u5305\u542b 2*2 \u4e2a\u59d3\u540d\u4e3a \u5f20\u4e09 \u7684\u884c\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5bf9\u5e94\u4f8b\u5b50\u7684\u793a\u610f\u56fe\uff1a \u663e\u7136\u5728\u4e0d\u540c\u7684\u573a\u5408\u5e94\u8be5\u4f7f\u7528\u4e0d\u540c\u7684\u8fde\u63a5\u5f62\u5f0f\u3002\u5176\u4e2d\u5de6\u8fde\u63a5\u548c\u53f3\u8fde\u63a5\u662f\u7b49\u4ef7\u7684\uff0c\u7531\u4e8e\u5b83\u4eec\u7684\u7ed3\u679c\u4e2d\u7684\u952e\u662f\u88ab\u4e00\u4fa7\u7684\u8868\u786e\u5b9a\u7684\uff0c\u56e0\u6b64\u5e38\u5e38\u7528\u4e8e\u6709\u65b9\u5411\u6027\u5730\u6dfb\u52a0\u5230\u76ee\u6807\u8868\u3002\u5185\u5916\u8fde\u63a5\u4e24\u4fa7\u7684\u8868\uff0c\u7ecf\u5e38\u662f\u5730\u4f4d\u7c7b\u4f3c\u7684\uff08\u5de6\u53f3\u8868\u4f4d\u7f6e\u7684\u4ea4\u6362\u4e0d\u5f15\u8d77\u7ed3\u679c\u7684\u53d8\u5316\uff09\uff0c\u60f3\u53d6\u51fa\u952e\u7684\u4ea4\u96c6\u6216\u8005\u5e76\u96c6\uff0c\u5177\u4f53\u7684\u64cd\u4f5c\u8fd8\u9700\u8981\u6839\u636e\u4e1a\u52a1\u7684\u9700\u6c42\u6765\u5224\u65ad\u3002 2. \u503c\u8fde\u63a5 \u5728\u4e0a\u9762\u793a\u610f\u56fe\u4e2d\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e24\u5f20\u8868\u6839\u636e\u67d0\u4e00\u5217\u7684\u503c\u6765\u8fde\u63a5\uff0c\u4e8b\u5b9e\u4e0a\u8fd8\u53ef\u4ee5\u901a\u8fc7\u51e0\u5217\u503c\u7684\u7ec4\u5408\u8fdb\u884c\u8fde\u63a5\uff0c\u8fd9\u79cd\u57fa\u4e8e\u503c\u7684\u8fde\u63a5\u5728 pandas \u4e2d\u53ef\u4ee5\u7531 merge \u51fd\u6570\u5b9e\u73b0\uff0c\u4f8b\u5982\u7b2c\u4e00\u5f20\u56fe\u7684\u5de6\u8fde\u63a5\uff1a In [ 3 ]: df1 = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'Si Li' ], ... : 'Age' :[ 20 , 30 ]}) ... : In [ 4 ]: df2 = pd . DataFrame ({ 'Name' :[ 'Si Li' , 'Wu Wang' ], ... : 'Gender' :[ 'F' , 'M' ]}) ... : In [ 5 ]: df1 . merge ( df2 , on = 'Name' , how = 'left' ) Out [ 5 ]: Name Age Gender 0 San Zhang 20 NaN 1 Si Li 30 F \u5982\u679c\u4e24\u4e2a\u8868\u4e2d\u60f3\u8981\u8fde\u63a5\u7684\u5217\u4e0d\u5177\u5907\u76f8\u540c\u7684\u5217\u540d\uff0c\u53ef\u4ee5\u901a\u8fc7 left_on \u548c right_on \u6307\u5b9a\uff1a In [ 6 ]: df1 = pd . DataFrame ({ 'df1_name' :[ 'San Zhang' , 'Si Li' ], ... : 'Age' :[ 20 , 30 ]}) ... : In [ 7 ]: df2 = pd . DataFrame ({ 'df2_name' :[ 'Si Li' , 'Wu Wang' ], ... : 'Gender' :[ 'F' , 'M' ]}) ... : In [ 8 ]: df1 . merge ( df2 , left_on = 'df1_name' , right_on = 'df2_name' , how = 'left' ) Out [ 8 ]: df1_name Age df2_name Gender 0 San Zhang 20 NaN NaN 1 Si Li 30 Si Li F \u5982\u679c\u4e24\u4e2a\u8868\u4e2d\u7684\u5217\u51fa\u73b0\u4e86\u91cd\u590d\u7684\u5217\u540d\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7 suffixes \u53c2\u6570\u6307\u5b9a\u3002\u4f8b\u5982\u5408\u5e76\u8003\u8bd5\u6210\u7ee9\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u4e2a\u8868\u8bb0\u5f55\u4e86\u8bed\u6587\u6210\u7ee9\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6570\u5b66\u6210\u7ee9\uff1a In [ 9 ]: df1 = pd . DataFrame ({ 'Name' :[ 'San Zhang' ], 'Grade' :[ 70 ]}) In [ 10 ]: df2 = pd . DataFrame ({ 'Name' :[ 'San Zhang' ], 'Grade' :[ 80 ]}) In [ 11 ]: df1 . merge ( df2 , on = 'Name' , how = 'left' , suffixes = [ '_Chinese' , '_Math' ]) Out [ 11 ]: Name Grade_Chinese Grade_Math 0 San Zhang 70 80 \u5728\u67d0\u4e9b\u65f6\u5019\u51fa\u73b0\u91cd\u590d\u5143\u7d20\u662f\u9ebb\u70e6\u7684\uff0c\u4f8b\u5982\u4e24\u4f4d\u540c\u5b66\u6765\u81ea\u4e0d\u540c\u7684\u73ed\u7ea7\uff0c\u4f46\u662f\u59d3\u540d\u76f8\u540c\uff0c\u8fd9\u79cd\u65f6\u5019\u5c31\u8981\u6307\u5b9a on \u53c2\u6570\u4e3a\u591a\u4e2a\u5217\u4f7f\u5f97\u6b63\u786e\u8fde\u63a5\uff1a In [ 12 ]: df1 = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'San Zhang' ], .... : 'Age' :[ 20 , 21 ], .... : 'Class' :[ 'one' , 'two' ]}) .... : In [ 13 ]: df2 = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'San Zhang' ], .... : 'Gender' :[ 'F' , 'M' ], .... : 'Class' :[ 'two' , 'one' ]}) .... : In [ 14 ]: df1 Out [ 14 ]: Name Age Class 0 San Zhang 20 one 1 San Zhang 21 two In [ 15 ]: df2 Out [ 15 ]: Name Gender Class 0 San Zhang F two 1 San Zhang M one In [ 16 ]: df1 . merge ( df2 , on = 'Name' , how = 'left' ) # \u9519\u8bef\u7684\u7ed3\u679c Out [ 16 ]: Name Age Class_x Gender Class_y 0 San Zhang 20 one F two 1 San Zhang 20 one M one 2 San Zhang 21 two F two 3 San Zhang 21 two M one In [ 17 ]: df1 . merge ( df2 , on = [ 'Name' , 'Class' ], how = 'left' ) # \u6b63\u786e\u7684\u7ed3\u679c Out [ 17 ]: Name Age Class Gender 0 San Zhang 20 one M 1 San Zhang 21 two F \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u6765\u770b\uff0c\u5728\u8fdb\u884c\u57fa\u4e8e\u552f\u4e00\u6027\u7684\u8fde\u63a5\u4e0b\uff0c\u5982\u679c\u952e\u4e0d\u662f\u552f\u4e00\u7684\uff0c\u90a3\u4e48\u7ed3\u679c\u5c31\u4f1a\u4ea7\u751f\u95ee\u9898\u3002\u4e3e\u4f8b\u4e2d\u7684\u884c\u6570\u5f88\u5c11\uff0c\u4f46\u5982\u679c\u5b9e\u9645\u6570\u636e\u4e2d\u6709\u51e0\u5341\u4e07\u5230\u4e0a\u767e\u4e07\u884c\u7684\u8fdb\u884c\u5408\u5e76\u65f6\uff0c\u5982\u679c\u60f3\u8981\u4fdd\u8bc1\u552f\u4e00\u6027\uff0c\u9664\u4e86\u7528 duplicated \u68c0\u67e5\u662f\u5426\u91cd\u590d\u5916\uff0c merge \u4e2d\u4e5f\u63d0\u4f9b\u4e86 validate \u53c2\u6570\u6765\u68c0\u67e5\u8fde\u63a5\u7684\u552f\u4e00\u6027\u6a21\u5f0f\u3002\u8fd9\u91cc\u5171\u6709\u4e09\u79cd\u6a21\u5f0f\uff0c\u5373\u4e00\u5bf9\u4e00\u8fde\u63a5 1:1 \uff0c\u4e00\u5bf9\u591a\u8fde\u63a5 1:m \uff0c\u591a\u5bf9\u4e00\u8fde\u63a5 m:1 \u8fde\u63a5\uff0c\u7b2c\u4e00\u4e2a\u662f\u6307\u5de6\u53f3\u8868\u7684\u952e\u90fd\u662f\u552f\u4e00\u7684\uff0c\u540e\u9762\u4e24\u4e2a\u5206\u522b\u6307\u5de6\u8868\u952e\u552f\u4e00\u548c\u53f3\u8868\u952e\u552f\u4e00\u3002 \u7ec3\u4e00\u7ec3 \u4e0a\u9762\u4ee5\u591a\u5217\u4e3a\u952e\u7684\u4f8b\u5b50\u4e2d\uff0c\u9519\u8bef\u5199\u6cd5\u663e\u7136\u662f\u4e00\u79cd\u591a\u5bf9\u591a\u8fde\u63a5\uff0c\u800c\u6b63\u786e\u5199\u6cd5\u662f\u4e00\u5bf9\u4e00\u8fde\u63a5\uff0c\u8bf7\u4fee\u6539\u539f\u8868\uff0c\u4f7f\u5f97\u4ee5\u591a\u5217\u4e3a\u952e\u7684\u6b63\u786e\u5199\u6cd5\u80fd\u591f\u901a\u8fc7 validate='1:m' \u7684\u68c0\u9a8c\uff0c\u4f46\u4e0d\u80fd\u901a\u8fc7 validate='m:1' \u7684\u68c0\u9a8c\u3002 3. \u7d22\u5f15\u8fde\u63a5 \u6240\u8c13\u7d22\u5f15\u8fde\u63a5\uff0c\u5c31\u662f\u628a\u7d22\u5f15\u5f53\u4f5c\u952e\uff0c\u56e0\u6b64\u8fd9\u548c\u503c\u8fde\u63a5\u672c\u8d28\u4e0a\u6ca1\u6709\u533a\u522b\uff0c pandas \u4e2d\u5229\u7528 join \u51fd\u6570\u6765\u5904\u7406\u7d22\u5f15\u8fde\u63a5\uff0c\u5b83\u7684\u53c2\u6570\u9009\u62e9\u8981\u5c11\u4e8e merge \uff0c\u9664\u4e86\u5fc5\u987b\u7684 on \u548c how \u4e4b\u5916\uff0c\u53ef\u4ee5\u5bf9\u91cd\u590d\u7684\u5217\u6307\u5b9a\u5de6\u53f3\u540e\u7f00 lsuffix \u548c rsuffix \u3002\u5176\u4e2d\uff0c on \u53c2\u6570\u6307\u7d22\u5f15\u540d\uff0c\u5355\u5c42\u7d22\u5f15\u65f6\u7701\u7565\u53c2\u6570\u8868\u793a\u6309\u7167\u5f53\u524d\u7d22\u5f15\u8fde\u63a5\u3002 In [ 18 ]: df1 = pd . DataFrame ({ 'Age' :[ 20 , 30 ]}, .... : index = pd . Series ( .... : [ 'San Zhang' , 'Si Li' ], name = 'Name' )) .... : In [ 19 ]: df2 = pd . DataFrame ({ 'Gender' :[ 'F' , 'M' ]}, .... : index = pd . Series ( .... : [ 'Si Li' , 'Wu Wang' ], name = 'Name' )) .... : In [ 20 ]: df1 . join ( df2 , how = 'left' ) Out [ 20 ]: Age Gender Name San Zhang 20 NaN Si Li 30 F \u4eff\u7167\u7b2c 2 \u5c0f\u8282\u7684\u4f8b\u5b50\uff0c\u5199\u51fa\u8bed\u6587\u548c\u6570\u5b66\u5206\u6570\u5408\u5e76\u7684 join \u7248\u672c\uff1a In [ 21 ]: df1 = pd . DataFrame ({ 'Grade' :[ 70 ]}, .... : index = pd . Series ([ 'San Zhang' ], .... : name = 'Name' )) .... : In [ 22 ]: df2 = pd . DataFrame ({ 'Grade' :[ 80 ]}, .... : index = pd . Series ([ 'San Zhang' ], .... : name = 'Name' )) .... : In [ 23 ]: df1 . join ( df2 , how = 'left' , lsuffix = '_Chinese' , rsuffix = '_Math' ) Out [ 23 ]: Grade_Chinese Grade_Math Name San Zhang 70 80 \u5982\u679c\u60f3\u8981\u8fdb\u884c\u7c7b\u4f3c\u4e8e merge \u4e2d\u4ee5\u591a\u5217\u4e3a\u952e\u7684\u64cd\u4f5c\u7684\u65f6\u5019\uff0c join \u9700\u8981\u4f7f\u7528\u591a\u7ea7\u7d22\u5f15\uff0c\u4f8b\u5982\u5728 merge \u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 24 ]: df1 = pd . DataFrame ({ 'Age' :[ 20 , 21 ]}, .... : index = pd . MultiIndex . from_arrays ( .... : [[ 'San Zhang' , 'San Zhang' ],[ 'one' , 'two' ]], .... : names = ( 'Name' , 'Class' ))) .... : In [ 25 ]: df2 = pd . DataFrame ({ 'Gender' :[ 'F' , 'M' ]}, .... : index = pd . MultiIndex . from_arrays ( .... : [[ 'San Zhang' , 'San Zhang' ],[ 'two' , 'one' ]], .... : names = ( 'Name' , 'Class' ))) .... : In [ 26 ]: df1 Out [ 26 ]: Age Name Class San Zhang one 20 two 21 In [ 27 ]: df2 Out [ 27 ]: Gender Name Class San Zhang two F one M In [ 28 ]: df1 . join ( df2 ) Out [ 28 ]: Age Gender Name Class San Zhang one 20 M two 21 F \u4e8c\u3001\u65b9\u5411\u8fde\u63a5 1. concat \u524d\u9762\u4ecb\u7ecd\u4e86\u5173\u7cfb\u578b\u8fde\u63a5\uff0c\u5176\u4e2d\u6700\u91cd\u8981\u7684\u53c2\u6570\u662f on \u548c how \uff0c\u4f46\u6709\u65f6\u5019\u7528\u6237\u5e76\u4e0d\u5173\u5fc3\u4ee5\u54ea\u4e00\u5217\u4e3a\u952e\u6765\u5408\u5e76\uff0c\u53ea\u662f\u5e0c\u671b\u628a\u4e24\u4e2a\u8868\u6216\u8005\u591a\u4e2a\u8868\u6309\u7167\u7eb5\u5411\u6216\u8005\u6a2a\u5411\u62fc\u63a5\uff0c\u4e3a\u8fd9\u79cd\u9700\u6c42\uff0c pandas \u4e2d\u63d0\u4f9b\u4e86 concat \u51fd\u6570\u6765\u5b9e\u73b0\u3002 \u5728 concat \u4e2d\uff0c\u6700\u5e38\u7528\u7684\u6709\u4e09\u4e2a\u53c2\u6570\uff0c\u5b83\u4eec\u662f axis, join, keys \uff0c\u5206\u522b\u8868\u793a\u62fc\u63a5\u65b9\u5411\uff0c\u8fde\u63a5\u5f62\u5f0f\uff0c\u4ee5\u53ca\u5728\u65b0\u8868\u4e2d\u6307\u793a\u6765\u81ea\u4e8e\u54ea\u4e00\u5f20\u65e7\u8868\u7684\u540d\u5b57\u3002\u8fd9\u91cc\u9700\u8981\u7279\u522b\u6ce8\u610f\uff0c join \u548c keys \u4e0e\u4e4b\u524d\u63d0\u5230\u7684 join \u51fd\u6570\u548c\u952e\u7684\u6982\u5ff5\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002 \u5728\u9ed8\u8ba4\u72b6\u6001\u4e0b\u7684 axis=0 \uff0c\u8868\u793a\u7eb5\u5411\u62fc\u63a5\u591a\u4e2a\u8868\uff0c\u5e38\u5e38\u7528\u4e8e\u591a\u4e2a\u6837\u672c\u7684\u62fc\u63a5\uff1b\u800c axis=1 \u8868\u793a\u6a2a\u5411\u62fc\u63a5\u591a\u4e2a\u8868\uff0c\u5e38\u7528\u4e8e\u591a\u4e2a\u5b57\u6bb5\u6216\u7279\u5f81\u7684\u62fc\u63a5\u3002 \u4f8b\u5982\uff0c\u7eb5\u5411\u5408\u5e76\u5404\u8868\u4e2d\u4eba\u7684\u4fe1\u606f\uff1a In [ 29 ]: df1 = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'Si Li' ], .... : 'Age' :[ 20 , 30 ]}) .... : In [ 30 ]: df2 = pd . DataFrame ({ 'Name' :[ 'Wu Wang' ], 'Age' :[ 40 ]}) In [ 31 ]: pd . concat ([ df1 , df2 ]) Out [ 31 ]: Name Age 0 San Zhang 20 1 Si Li 30 0 Wu Wang 40 \u6a2a\u5411\u5408\u5e76\u5404\u8868\u4e2d\u7684\u5b57\u6bb5\uff1a In [ 32 ]: df2 = pd . DataFrame ({ 'Grade' :[ 80 , 90 ]}) In [ 33 ]: df3 = pd . DataFrame ({ 'Gender' :[ 'M' , 'F' ]}) In [ 34 ]: pd . concat ([ df1 , df2 , df3 ], 1 ) Out [ 34 ]: Name Age Grade Gender 0 San Zhang 20 80 M 1 Si Li 30 90 F \u867d\u7136\u8bf4 concat \u4e0d\u662f\u5904\u7406\u5173\u7cfb\u578b\u5408\u5e76\u7684\u51fd\u6570\uff0c\u4f46\u662f\u5b83\u4ecd\u7136\u662f\u5173\u4e8e\u7d22\u5f15\u8fdb\u884c\u8fde\u63a5\u7684\u3002\u7eb5\u5411\u62fc\u63a5\u4f1a\u6839\u636e\u5217\u7d22\u5f15\u5bf9\u5176\uff0c\u9ed8\u8ba4\u72b6\u6001\u4e0b join=outer \uff0c\u8868\u793a\u4fdd\u7559\u6240\u6709\u7684\u5217\uff0c\u5e76\u5c06\u4e0d\u5b58\u5728\u7684\u503c\u8bbe\u4e3a\u7f3a\u5931\uff1b join=inner \uff0c\u8868\u793a\u4fdd\u7559\u4e24\u4e2a\u8868\u90fd\u51fa\u73b0\u8fc7\u7684\u5217\u3002\u6a2a\u5411\u62fc\u63a5\u5219\u6839\u636e\u884c\u7d22\u5f15\u5bf9\u9f50\uff0c join \u53c2\u6570\u53ef\u4ee5\u7c7b\u4f3c\u8bbe\u7f6e\u3002 In [ 35 ]: df2 = pd . DataFrame ({ 'Name' :[ 'Wu Wang' ], 'Gender' :[ 'M' ]}) In [ 36 ]: pd . concat ([ df1 , df2 ]) Out [ 36 ]: Name Age Gender 0 San Zhang 20.0 NaN 1 Si Li 30.0 NaN 0 Wu Wang NaN M In [ 37 ]: df2 = pd . DataFrame ({ 'Grade' :[ 80 , 90 ]}, index = [ 1 , 2 ]) In [ 38 ]: pd . concat ([ df1 , df2 ], 1 ) Out [ 38 ]: Name Age Grade 0 San Zhang 20.0 NaN 1 Si Li 30.0 80.0 2 NaN NaN 90.0 In [ 39 ]: pd . concat ([ df1 , df2 ], axis = 1 , join = 'inner' ) Out [ 39 ]: Name Age Grade 1 Si Li 30 80 \u56e0\u6b64\uff0c\u5f53\u786e\u8ba4\u8981\u4f7f\u7528\u591a\u8868\u76f4\u63a5\u7684\u65b9\u5411\u5408\u5e76\u65f6\uff0c\u5c24\u5176\u662f\u6a2a\u5411\u7684\u5408\u5e76\uff0c\u53ef\u4ee5\u5148\u7528 reset_index \u65b9\u6cd5\u6062\u590d\u9ed8\u8ba4\u6574\u6570\u7d22\u5f15\u518d\u8fdb\u884c\u5408\u5e76\uff0c\u9632\u6b62\u51fa\u73b0\u7531\u7d22\u5f15\u7684\u8bef\u5bf9\u9f50\u548c\u91cd\u590d\u7d22\u5f15\u7684\u7b1b\u5361\u5c14\u79ef\u5e26\u6765\u7684\u9519\u8bef\u7ed3\u679c\u3002 \u6700\u540e\uff0c keys \u53c2\u6570\u7684\u4f7f\u7528\u573a\u666f\u5728\u4e8e\u591a\u4e2a\u8868\u5408\u5e76\u540e\uff0c\u7528\u6237\u4ecd\u7136\u60f3\u8981\u77e5\u9053\u65b0\u8868\u4e2d\u7684\u6570\u636e\u6765\u81ea\u4e8e\u54ea\u4e2a\u539f\u8868\uff0c\u8fd9\u65f6\u53ef\u4ee5\u901a\u8fc7 keys \u53c2\u6570\u4ea7\u751f\u591a\u7ea7\u7d22\u5f15\u8fdb\u884c\u6807\u8bb0\u3002\u4f8b\u5982\uff0c\u7b2c\u4e00\u4e2a\u8868\u4e2d\u90fd\u662f\u4e00\u73ed\u7684\u540c\u5b66\uff0c\u800c\u7b2c\u4e8c\u4e2a\u8868\u4e2d\u90fd\u662f\u4e8c\u73ed\u7684\u540c\u5b66\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u5408\u5e76\uff1a In [ 40 ]: df1 = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'Si Li' ], .... : 'Age' :[ 20 , 21 ]}) .... : In [ 41 ]: df2 = pd . DataFrame ({ 'Name' :[ 'Wu Wang' ], 'Age' :[ 21 ]}) In [ 42 ]: pd . concat ([ df1 , df2 ], keys = [ 'one' , 'two' ]) Out [ 42 ]: Name Age one 0 San Zhang 20 1 Si Li 21 two 0 Wu Wang 21 2. \u5e8f\u5217\u4e0e\u8868\u7684\u5408\u5e76 \u5229\u7528 concat \u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u8868\u4e4b\u95f4\u7684\u65b9\u5411\u62fc\u63a5\uff0c\u5982\u679c\u60f3\u8981\u628a\u4e00\u4e2a\u5e8f\u5217\u8ffd\u52a0\u5230\u8868\u7684\u884c\u672b\u6216\u8005\u5217\u672b\uff0c\u5219\u53ef\u4ee5\u5206\u522b\u4f7f\u7528 append \u548c assign \u65b9\u6cd5\u3002 \u5728 append \u4e2d\uff0c\u5982\u679c\u539f\u8868\u662f\u9ed8\u8ba4\u6574\u6570\u5e8f\u5217\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528 ignore_index=True \u5bf9\u65b0\u5e8f\u5217\u5bf9\u5e94\u7684\u7d22\u5f15\u81ea\u52a8\u6807\u53f7\uff0c\u5426\u5219\u5fc5\u987b\u5bf9 Series \u6307\u5b9a name \u5c5e\u6027\u3002 In [ 43 ]: s = pd . Series ([ 'Wu Wang' , 21 ], index = df1 . columns ) In [ 44 ]: df1 . append ( s , ignore_index = True ) Out [ 44 ]: Name Age 0 San Zhang 20 1 Si Li 21 2 Wu Wang 21 \u5bf9\u4e8e assign \u800c\u8a00\uff0c\u867d\u7136\u53ef\u4ee5\u5229\u7528\u5176\u6dfb\u52a0\u65b0\u7684\u5217\uff0c\u4f46\u4e00\u822c\u901a\u8fc7 df['new_col'] = ... \u7684\u5f62\u5f0f\u5c31\u53ef\u4ee5\u7b49\u4ef7\u5730\u6dfb\u52a0\u65b0\u5217\u3002\u540c\u65f6\uff0c\u4f7f\u7528 [] \u4fee\u6539\u7684\u7f3a\u70b9\u662f\u5b83\u4f1a\u76f4\u63a5\u5728\u539f\u8868\u4e0a\u8fdb\u884c\u6539\u52a8\uff0c\u800c assign \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u4e34\u65f6\u526f\u672c\uff1a In [ 45 ]: s = pd . Series ([ 80 , 90 ]) In [ 46 ]: df1 . assign ( Grade = s ) Out [ 46 ]: Name Age Grade 0 San Zhang 20 80 1 Si Li 21 90 In [ 47 ]: df1 [ 'Grade' ] = s In [ 48 ]: df1 Out [ 48 ]: Name Age Grade 0 San Zhang 20 80 1 Si Li 21 90 \u4e09\u3001\u7c7b\u8fde\u63a5\u64cd\u4f5c \u9664\u4e86\u4e0a\u8ff0\u4ecb\u7ecd\u7684\u82e5\u5e72\u8fde\u63a5\u51fd\u6570\u4e4b\u5916\uff0c pandas \u4e2d\u8fd8\u8bbe\u8ba1\u4e86\u4e00\u4e9b\u51fd\u6570\u80fd\u591f\u5bf9\u4e24\u4e2a\u8868\u8fdb\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u8fd9\u91cc\u628a\u5b83\u4eec\u7edf\u79f0\u4e3a\u7c7b\u8fde\u63a5\u64cd\u4f5c\u3002 1. \u6bd4\u8f83 compare \u662f\u5728 1.1.0 \u540e\u5f15\u5165\u7684\u65b0\u51fd\u6570\uff0c\u5b83\u80fd\u591f\u6bd4\u8f83\u4e24\u4e2a\u8868\u6216\u8005\u5e8f\u5217\u7684\u4e0d\u540c\u5904\u5e76\u5c06\u5176\u6c47\u603b\u5c55\u793a\uff1a In [ 49 ]: df1 = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'Si Li' , 'Wu Wang' ], .... : 'Age' :[ 20 , 21 , 21 ], .... : 'Class' :[ 'one' , 'two' , 'three' ]}) .... : In [ 50 ]: df2 = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'Li Si' , 'Wu Wang' ], .... : 'Age' :[ 20 , 21 , 21 ], .... : 'Class' :[ 'one' , 'two' , 'Three' ]}) .... : In [ 51 ]: df1 . compare ( df2 ) Out [ 51 ]: Name Class self other self other 1 Si Li Li Si NaN NaN 2 NaN NaN three Three \u7ed3\u679c\u4e2d\u8fd4\u56de\u4e86\u4e0d\u540c\u503c\u6240\u5728\u7684\u884c\u5217\uff0c\u5982\u679c\u76f8\u540c\u5219\u4f1a\u88ab\u586b\u5145\u4e3a\u7f3a\u5931\u503c NaN \uff0c\u5176\u4e2d other \u548c self \u5206\u522b\u6307\u4ee3\u4f20\u5165\u7684\u53c2\u6570\u8868\u548c\u88ab\u8c03\u7528\u7684\u8868\u81ea\u8eab\u3002 \u5982\u679c\u60f3\u8981\u5b8c\u6574\u663e\u793a\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u6bd4\u8f83\u60c5\u51b5\uff0c\u53ef\u4ee5\u8bbe\u7f6e keep_shape=True \uff1a In [ 52 ]: df1 . compare ( df2 , keep_shape = True ) Out [ 52 ]: Name Age Class self other self other self other 0 NaN NaN NaN NaN NaN NaN 1 Si Li Li Si NaN NaN NaN NaN 2 NaN NaN NaN NaN three Three 2. \u7ec4\u5408 combine \u51fd\u6570\u80fd\u591f\u8ba9\u4e24\u5f20\u8868\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219\u8fdb\u884c\u7ec4\u5408\uff0c\u5728\u8fdb\u884c\u89c4\u5219\u6bd4\u8f83\u65f6\u4f1a\u81ea\u52a8\u8fdb\u884c\u5217\u7d22\u5f15\u7684\u5bf9\u9f50\u3002\u5bf9\u4e8e\u4f20\u5165\u7684\u51fd\u6570\u800c\u8a00\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u4e2d\u8f93\u5165\u7684\u53c2\u6570\u662f\u6765\u81ea\u4e24\u4e2a\u8868\u7684\u540c\u540d Series \uff0c\u4f9d\u6b21\u4f20\u5165\u7684\u5217\u662f\u4e24\u4e2a\u8868\u5217\u540d\u7684\u5e76\u96c6\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4f1a\u4f9d\u6b21\u4f20\u5165 A,B,C,D \u56db\u7ec4\u5e8f\u5217\uff0c\u6bcf\u7ec4\u4e3a\u5de6\u53f3\u8868\u7684\u4e24\u4e2a\u5e8f\u5217\u3002\u540c\u65f6\uff0c\u8fdb\u884c A \u5217\u6bd4\u8f83\u7684\u65f6\u5019\uff0c s2 \u6307\u4ee3\u7684\u5c31\u662f\u4e00\u4e2a\u5168\u7a7a\u7684\u5e8f\u5217\uff0c\u56e0\u4e3a\u5b83\u5728\u88ab\u8c03\u7528\u7684\u8868\u4e2d\u5e76\u4e0d\u5b58\u5728\uff0c\u5e76\u4e14\u6765\u81ea\u7b2c\u4e00\u4e2a\u8868\u7684\u5e8f\u5217\u7d22\u5f15\u4f1a\u88ab reindex \u6210\u4e24\u4e2a\u7d22\u5f15\u7684\u5e76\u96c6\u3002\u5177\u4f53\u7684\u8fc7\u7a0b\u53ef\u4ee5\u901a\u8fc7\u5728\u4f20\u5165\u7684\u51fd\u6570\u4e2d\u63d2\u5165\u9002\u5f53\u7684 print \u65b9\u6cd5\u67e5\u770b\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u8868\u793a\u9009\u51fa\u5bf9\u5e94\u7d22\u5f15\u4f4d\u7f6e\u8f83\u5c0f\u7684\u5143\u7d20\uff1a In [ 53 ]: def choose_min ( s1 , s2 ): .... : s2 = s2 . reindex_like ( s1 ) .... : res = s1 . where ( s1 < s2 , s2 ) .... : res = res . mask ( s1 . isna ()) # isna\u8868\u793a\u662f\u5426\u4e3a\u7f3a\u5931\u503c\uff0c\u8fd4\u56de\u5e03\u5c14\u5e8f\u5217 .... : return res .... : In [ 54 ]: df1 = pd . DataFrame ({ 'A' :[ 1 , 2 ], 'B' :[ 3 , 4 ], 'C' :[ 5 , 6 ]}) In [ 55 ]: df2 = pd . DataFrame ({ 'B' :[ 5 , 6 ], 'C' :[ 7 , 8 ], 'D' :[ 9 , 10 ]}, index = [ 1 , 2 ]) In [ 56 ]: df1 . combine ( df2 , choose_min ) Out [ 56 ]: A B C D 0 NaN NaN NaN NaN 1 NaN 4.0 6.0 NaN 2 NaN NaN NaN NaN \u7ec3\u4e00\u7ec3 \u8bf7\u5728\u4e0a\u8ff0\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\u4fee\u6539\uff0c\u4fdd\u7559 df2 \u4e2d 4 \u4e2a\u672a\u88ab df1 \u66ff\u6362\u7684\u76f8\u5e94\u4f4d\u7f6e\u539f\u59cb\u503c\u3002 \u6b64\u5916\uff0c\u8bbe\u7f6e overtwrite \u53c2\u6570\u4e3a False \u53ef\u4ee5\u4fdd\u7559 \u88ab\u8c03\u7528\u8868 \u4e2d\u672a\u51fa\u73b0\u5728\u4f20\u5165\u7684\u53c2\u6570\u8868\u4e2d\u7684\u5217\uff0c\u800c\u4e0d\u4f1a\u8bbe\u7f6e\u672a\u7f3a\u5931\u503c\uff1a In [ 57 ]: df1 . combine ( df2 , choose_min , overwrite = False ) Out [ 57 ]: A B C D 0 1.0 NaN NaN NaN 1 2.0 4.0 6.0 NaN 2 NaN NaN NaN NaN \u7ec3\u4e00\u7ec3 \u9664\u4e86 combine \u4e4b\u5916\uff0c pandas \u4e2d\u8fd8\u6709\u4e00\u4e2a combine_first \u65b9\u6cd5\uff0c\u5176\u529f\u80fd\u662f\u5728\u5bf9\u4e24\u5f20\u8868\u7ec4\u5408\u65f6\uff0c\u82e5\u7b2c\u4e8c\u5f20\u8868\u4e2d\u7684\u503c\u5728\u7b2c\u4e00\u5f20\u8868\u4e2d\u5bf9\u5e94\u7d22\u5f15\u4f4d\u7f6e\u7684\u503c\u4e0d\u662f\u7f3a\u5931\u72b6\u6001\uff0c\u90a3\u4e48\u5c31\u4f7f\u7528\u7b2c\u4e00\u5f20\u8868\u7684\u503c\u586b\u5145\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8bf7\u7528 combine \u51fd\u6570\u5b8c\u6210\u76f8\u540c\u7684\u529f\u80fd\u3002 In [ 58 ]: df1 = pd . DataFrame ({ 'A' :[ 1 , 2 ], 'B' :[ 3 , np . nan ]}) In [ 59 ]: df2 = pd . DataFrame ({ 'A' :[ 5 , 6 ], 'B' :[ 7 , 8 ]}, index = [ 1 , 2 ]) In [ 60 ]: df1 . combine_first ( df2 ) Out [ 60 ]: A B 0 1.0 3.0 1 2.0 7.0 2 6.0 8.0 \u56db\u3001\u7ec3\u4e60 Ex1\uff1a\u7f8e\u56fd\u75ab\u60c5\u6570\u636e\u96c6 \u73b0\u6709\u7f8e\u56fd 4 \u6708 12 \u65e5\u81f3 11 \u6708 16 \u65e5\u7684\u75ab\u60c5\u62a5\u8868\uff08\u5728 /data/us_report \u6587\u4ef6\u5939\u4e0b\uff09\uff0c\u8bf7\u5c06 New York \u7684 Confirmed, Deaths, Recovered, Active \u5408\u5e76\u4e3a\u4e00\u5f20\u8868\uff0c\u7d22\u5f15\u4e3a\u6309\u5982\u4e0b\u65b9\u6cd5\u751f\u6210\u7684\u65e5\u671f\u5b57\u7b26\u4e32\u5e8f\u5217\uff1a In [ 61 ]: date = pd . date_range ( '20200412' , '20201116' ) . to_series () In [ 62 ]: date = date . dt . month . astype ( 'string' ) . str . zfill ( 2 .... : ) + '-' + date . dt . day . astype ( 'string' .... : ) . str . zfill ( 2 ) + '-' + '2020' .... : In [ 63 ]: date = date . tolist () In [ 64 ]: date [: 5 ] Out [ 64 ]: [ '04-12-2020' , '04-13-2020' , '04-14-2020' , '04-15-2020' , '04-16-2020' ] Ex2\uff1a\u5b9e\u73b0 join \u51fd\u6570 \u8bf7\u5b9e\u73b0\u5e26\u6709 how \u53c2\u6570\u7684 join \u51fd\u6570 \u5047\u8bbe\u8fde\u63a5\u7684\u4e24\u8868\u65e0\u516c\u5171\u5217 \u8c03\u7528\u65b9\u5f0f\u4e3a join(df1, df2, how=\"left\") \u7ed9\u51fa\u6d4b\u8bd5\u6837\u4f8b","title":"\u516d\u3001\u8fde\u63a5"},{"location":"pandas/part6/#_1","text":"","title":"\u4e00\u3001\u5173\u7cfb\u578b\u8fde\u63a5"},{"location":"pandas/part6/#1","text":"\u628a\u4e24\u5f20\u76f8\u5173\u7684\u8868\u6309\u7167\u67d0\u4e00\u4e2a\u6216\u67d0\u4e00\u7ec4\u952e\u8fde\u63a5\u8d77\u6765\u662f\u4e00\u79cd\u5e38\u89c1\u64cd\u4f5c\uff0c\u4f8b\u5982\u5b66\u751f\u671f\u672b\u8003\u8bd5\u5404\u4e2a\u79d1\u76ee\u7684\u6210\u7ee9\u8868\u6309\u7167 \u59d3\u540d \u548c \u73ed\u7ea7 \u8fde\u63a5\u6210\u603b\u7684\u6210\u7ee9\u8868\uff0c\u53c8\u4f8b\u5982\u5bf9\u4f01\u4e1a\u5458\u5de5\u7684\u5404\u7c7b\u4fe1\u606f\u8868\u6309\u7167 \u5458\u5de5 ID \u53f7 \u8fdb\u884c\u8fde\u63a5\u6c47\u603b\u3002\u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u5173\u7cfb\u578b\u8fde\u63a5\u4e2d\uff0c \u952e \u662f\u5341\u5206\u91cd\u8981\u7684\uff0c\u5f80\u5f80\u7528 on \u53c2\u6570\u8868\u793a\u3002 \u53e6\u4e00\u4e2a\u91cd\u8981\u7684\u8981\u7d20\u662f\u8fde\u63a5\u7684\u5f62\u5f0f\u3002\u5728 pandas \u4e2d\u7684\u5173\u7cfb\u578b\u8fde\u63a5\u51fd\u6570 merge \u548c join \u4e2d\u63d0\u4f9b\u4e86 how \u53c2\u6570\u6765\u4ee3\u8868\u8fde\u63a5\u5f62\u5f0f\uff0c\u5206\u4e3a\u5de6\u8fde\u63a5 left \u3001\u53f3\u8fde\u63a5 right \u3001\u5185\u8fde\u63a5 inner \u3001\u5916\u8fde\u63a5 outer \uff0c\u5b83\u4eec\u7684\u533a\u522b\u53ef\u4ee5\u7528\u5982\u4e0b\u793a\u610f\u56fe\u8868\u793a\uff1a \u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u6240\u8c13\u5de6\u8fde\u63a5\u5373\u4ee5\u5de6\u8868\u7684\u952e\u4e3a\u51c6\uff0c\u5982\u679c\u53f3\u8868\u4e2d\u7684\u952e\u4e8e\u5de6\u8868\u5b58\u5728\uff0c\u90a3\u4e48\u5c31\u6dfb\u52a0\u5230\u5de6\u8868\uff0c\u5426\u5219\u5219\u5904\u7406\u4e3a\u7f3a\u5931\u503c\uff0c\u53f3\u8fde\u63a5\u7c7b\u4f3c\u5904\u7406\u3002\u5185\u8fde\u63a5\u53ea\u8d1f\u8d23\u5408\u5e76\u4e24\u8fb9\u540c\u65f6\u51fa\u73b0\u7684\u952e\uff0c\u800c\u5916\u8fde\u63a5\u5219\u4f1a\u5728\u5185\u8fde\u63a5\u7684\u57fa\u7840\u4e0a\u5305\u542b\u53ea\u5728\u5de6\u8fb9\u51fa\u73b0\u4ee5\u53ca\u53ea\u5728\u53f3\u8fb9\u51fa\u73b0\u7684\u503c\uff0c\u56e0\u6b64\u5916\u8fde\u63a5\u53c8\u53eb\u5168\u8fde\u63a5\u3002 \u4e0a\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u4e2d\uff0c\u540c\u4e00\u4e2a\u8868\u4e2d\u7684\u952e\u6ca1\u6709\u51fa\u73b0\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u5982\u679c\u51fa\u73b0\u91cd\u590d\u7684\u952e\u5e94\u8be5\u5982\u4f55\u5904\u7406\uff1f\u53ea\u9700\u628a\u63e1\u4e00\u4e2a\u539f\u5219\uff0c\u5373\u53ea\u8981\u4e24\u8fb9\u540c\u65f6\u51fa\u73b0\u7684\u503c\uff0c\u5c31\u4ee5\u7b1b\u5361\u5c14\u79ef\u7684\u65b9\u5f0f\u52a0\u5165\uff0c\u5982\u679c\u5355\u8fb9\u51fa\u73b0\u5219\u6839\u636e\u8fde\u63a5\u5f62\u5f0f\u8fdb\u884c\u5904\u7406\u3002\u5176\u4e2d\uff0c\u5173\u4e8e\u7b1b\u5361\u5c14\u79ef\u53ef\u7528\u5982\u4e0b\u4f8b\u5b50\u8bf4\u660e\uff1a\u8bbe\u5de6\u8868\u4e2d\u952e \u5f20\u4e09 \u51fa\u73b0\u4e24\u6b21\uff0c\u53f3\u8868\u4e2d\u7684 \u5f20\u4e09 \u4e5f\u51fa\u73b0\u4e24\u6b21\uff0c\u90a3\u4e48\u9010\u4e2a\u8fdb\u884c\u5339\u914d\uff0c\u6700\u540e\u4ea7\u751f\u7684\u8868\u5fc5\u7136\u5305\u542b 2*2 \u4e2a\u59d3\u540d\u4e3a \u5f20\u4e09 \u7684\u884c\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5bf9\u5e94\u4f8b\u5b50\u7684\u793a\u610f\u56fe\uff1a \u663e\u7136\u5728\u4e0d\u540c\u7684\u573a\u5408\u5e94\u8be5\u4f7f\u7528\u4e0d\u540c\u7684\u8fde\u63a5\u5f62\u5f0f\u3002\u5176\u4e2d\u5de6\u8fde\u63a5\u548c\u53f3\u8fde\u63a5\u662f\u7b49\u4ef7\u7684\uff0c\u7531\u4e8e\u5b83\u4eec\u7684\u7ed3\u679c\u4e2d\u7684\u952e\u662f\u88ab\u4e00\u4fa7\u7684\u8868\u786e\u5b9a\u7684\uff0c\u56e0\u6b64\u5e38\u5e38\u7528\u4e8e\u6709\u65b9\u5411\u6027\u5730\u6dfb\u52a0\u5230\u76ee\u6807\u8868\u3002\u5185\u5916\u8fde\u63a5\u4e24\u4fa7\u7684\u8868\uff0c\u7ecf\u5e38\u662f\u5730\u4f4d\u7c7b\u4f3c\u7684\uff08\u5de6\u53f3\u8868\u4f4d\u7f6e\u7684\u4ea4\u6362\u4e0d\u5f15\u8d77\u7ed3\u679c\u7684\u53d8\u5316\uff09\uff0c\u60f3\u53d6\u51fa\u952e\u7684\u4ea4\u96c6\u6216\u8005\u5e76\u96c6\uff0c\u5177\u4f53\u7684\u64cd\u4f5c\u8fd8\u9700\u8981\u6839\u636e\u4e1a\u52a1\u7684\u9700\u6c42\u6765\u5224\u65ad\u3002","title":"1. \u8fde\u63a5\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"pandas/part6/#2","text":"\u5728\u4e0a\u9762\u793a\u610f\u56fe\u4e2d\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e24\u5f20\u8868\u6839\u636e\u67d0\u4e00\u5217\u7684\u503c\u6765\u8fde\u63a5\uff0c\u4e8b\u5b9e\u4e0a\u8fd8\u53ef\u4ee5\u901a\u8fc7\u51e0\u5217\u503c\u7684\u7ec4\u5408\u8fdb\u884c\u8fde\u63a5\uff0c\u8fd9\u79cd\u57fa\u4e8e\u503c\u7684\u8fde\u63a5\u5728 pandas \u4e2d\u53ef\u4ee5\u7531 merge \u51fd\u6570\u5b9e\u73b0\uff0c\u4f8b\u5982\u7b2c\u4e00\u5f20\u56fe\u7684\u5de6\u8fde\u63a5\uff1a In [ 3 ]: df1 = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'Si Li' ], ... : 'Age' :[ 20 , 30 ]}) ... : In [ 4 ]: df2 = pd . DataFrame ({ 'Name' :[ 'Si Li' , 'Wu Wang' ], ... : 'Gender' :[ 'F' , 'M' ]}) ... : In [ 5 ]: df1 . merge ( df2 , on = 'Name' , how = 'left' ) Out [ 5 ]: Name Age Gender 0 San Zhang 20 NaN 1 Si Li 30 F \u5982\u679c\u4e24\u4e2a\u8868\u4e2d\u60f3\u8981\u8fde\u63a5\u7684\u5217\u4e0d\u5177\u5907\u76f8\u540c\u7684\u5217\u540d\uff0c\u53ef\u4ee5\u901a\u8fc7 left_on \u548c right_on \u6307\u5b9a\uff1a In [ 6 ]: df1 = pd . DataFrame ({ 'df1_name' :[ 'San Zhang' , 'Si Li' ], ... : 'Age' :[ 20 , 30 ]}) ... : In [ 7 ]: df2 = pd . DataFrame ({ 'df2_name' :[ 'Si Li' , 'Wu Wang' ], ... : 'Gender' :[ 'F' , 'M' ]}) ... : In [ 8 ]: df1 . merge ( df2 , left_on = 'df1_name' , right_on = 'df2_name' , how = 'left' ) Out [ 8 ]: df1_name Age df2_name Gender 0 San Zhang 20 NaN NaN 1 Si Li 30 Si Li F \u5982\u679c\u4e24\u4e2a\u8868\u4e2d\u7684\u5217\u51fa\u73b0\u4e86\u91cd\u590d\u7684\u5217\u540d\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7 suffixes \u53c2\u6570\u6307\u5b9a\u3002\u4f8b\u5982\u5408\u5e76\u8003\u8bd5\u6210\u7ee9\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u4e2a\u8868\u8bb0\u5f55\u4e86\u8bed\u6587\u6210\u7ee9\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6570\u5b66\u6210\u7ee9\uff1a In [ 9 ]: df1 = pd . DataFrame ({ 'Name' :[ 'San Zhang' ], 'Grade' :[ 70 ]}) In [ 10 ]: df2 = pd . DataFrame ({ 'Name' :[ 'San Zhang' ], 'Grade' :[ 80 ]}) In [ 11 ]: df1 . merge ( df2 , on = 'Name' , how = 'left' , suffixes = [ '_Chinese' , '_Math' ]) Out [ 11 ]: Name Grade_Chinese Grade_Math 0 San Zhang 70 80 \u5728\u67d0\u4e9b\u65f6\u5019\u51fa\u73b0\u91cd\u590d\u5143\u7d20\u662f\u9ebb\u70e6\u7684\uff0c\u4f8b\u5982\u4e24\u4f4d\u540c\u5b66\u6765\u81ea\u4e0d\u540c\u7684\u73ed\u7ea7\uff0c\u4f46\u662f\u59d3\u540d\u76f8\u540c\uff0c\u8fd9\u79cd\u65f6\u5019\u5c31\u8981\u6307\u5b9a on \u53c2\u6570\u4e3a\u591a\u4e2a\u5217\u4f7f\u5f97\u6b63\u786e\u8fde\u63a5\uff1a In [ 12 ]: df1 = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'San Zhang' ], .... : 'Age' :[ 20 , 21 ], .... : 'Class' :[ 'one' , 'two' ]}) .... : In [ 13 ]: df2 = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'San Zhang' ], .... : 'Gender' :[ 'F' , 'M' ], .... : 'Class' :[ 'two' , 'one' ]}) .... : In [ 14 ]: df1 Out [ 14 ]: Name Age Class 0 San Zhang 20 one 1 San Zhang 21 two In [ 15 ]: df2 Out [ 15 ]: Name Gender Class 0 San Zhang F two 1 San Zhang M one In [ 16 ]: df1 . merge ( df2 , on = 'Name' , how = 'left' ) # \u9519\u8bef\u7684\u7ed3\u679c Out [ 16 ]: Name Age Class_x Gender Class_y 0 San Zhang 20 one F two 1 San Zhang 20 one M one 2 San Zhang 21 two F two 3 San Zhang 21 two M one In [ 17 ]: df1 . merge ( df2 , on = [ 'Name' , 'Class' ], how = 'left' ) # \u6b63\u786e\u7684\u7ed3\u679c Out [ 17 ]: Name Age Class Gender 0 San Zhang 20 one M 1 San Zhang 21 two F \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u6765\u770b\uff0c\u5728\u8fdb\u884c\u57fa\u4e8e\u552f\u4e00\u6027\u7684\u8fde\u63a5\u4e0b\uff0c\u5982\u679c\u952e\u4e0d\u662f\u552f\u4e00\u7684\uff0c\u90a3\u4e48\u7ed3\u679c\u5c31\u4f1a\u4ea7\u751f\u95ee\u9898\u3002\u4e3e\u4f8b\u4e2d\u7684\u884c\u6570\u5f88\u5c11\uff0c\u4f46\u5982\u679c\u5b9e\u9645\u6570\u636e\u4e2d\u6709\u51e0\u5341\u4e07\u5230\u4e0a\u767e\u4e07\u884c\u7684\u8fdb\u884c\u5408\u5e76\u65f6\uff0c\u5982\u679c\u60f3\u8981\u4fdd\u8bc1\u552f\u4e00\u6027\uff0c\u9664\u4e86\u7528 duplicated \u68c0\u67e5\u662f\u5426\u91cd\u590d\u5916\uff0c merge \u4e2d\u4e5f\u63d0\u4f9b\u4e86 validate \u53c2\u6570\u6765\u68c0\u67e5\u8fde\u63a5\u7684\u552f\u4e00\u6027\u6a21\u5f0f\u3002\u8fd9\u91cc\u5171\u6709\u4e09\u79cd\u6a21\u5f0f\uff0c\u5373\u4e00\u5bf9\u4e00\u8fde\u63a5 1:1 \uff0c\u4e00\u5bf9\u591a\u8fde\u63a5 1:m \uff0c\u591a\u5bf9\u4e00\u8fde\u63a5 m:1 \u8fde\u63a5\uff0c\u7b2c\u4e00\u4e2a\u662f\u6307\u5de6\u53f3\u8868\u7684\u952e\u90fd\u662f\u552f\u4e00\u7684\uff0c\u540e\u9762\u4e24\u4e2a\u5206\u522b\u6307\u5de6\u8868\u952e\u552f\u4e00\u548c\u53f3\u8868\u952e\u552f\u4e00\u3002 \u7ec3\u4e00\u7ec3 \u4e0a\u9762\u4ee5\u591a\u5217\u4e3a\u952e\u7684\u4f8b\u5b50\u4e2d\uff0c\u9519\u8bef\u5199\u6cd5\u663e\u7136\u662f\u4e00\u79cd\u591a\u5bf9\u591a\u8fde\u63a5\uff0c\u800c\u6b63\u786e\u5199\u6cd5\u662f\u4e00\u5bf9\u4e00\u8fde\u63a5\uff0c\u8bf7\u4fee\u6539\u539f\u8868\uff0c\u4f7f\u5f97\u4ee5\u591a\u5217\u4e3a\u952e\u7684\u6b63\u786e\u5199\u6cd5\u80fd\u591f\u901a\u8fc7 validate='1:m' \u7684\u68c0\u9a8c\uff0c\u4f46\u4e0d\u80fd\u901a\u8fc7 validate='m:1' \u7684\u68c0\u9a8c\u3002","title":"2. \u503c\u8fde\u63a5"},{"location":"pandas/part6/#3","text":"\u6240\u8c13\u7d22\u5f15\u8fde\u63a5\uff0c\u5c31\u662f\u628a\u7d22\u5f15\u5f53\u4f5c\u952e\uff0c\u56e0\u6b64\u8fd9\u548c\u503c\u8fde\u63a5\u672c\u8d28\u4e0a\u6ca1\u6709\u533a\u522b\uff0c pandas \u4e2d\u5229\u7528 join \u51fd\u6570\u6765\u5904\u7406\u7d22\u5f15\u8fde\u63a5\uff0c\u5b83\u7684\u53c2\u6570\u9009\u62e9\u8981\u5c11\u4e8e merge \uff0c\u9664\u4e86\u5fc5\u987b\u7684 on \u548c how \u4e4b\u5916\uff0c\u53ef\u4ee5\u5bf9\u91cd\u590d\u7684\u5217\u6307\u5b9a\u5de6\u53f3\u540e\u7f00 lsuffix \u548c rsuffix \u3002\u5176\u4e2d\uff0c on \u53c2\u6570\u6307\u7d22\u5f15\u540d\uff0c\u5355\u5c42\u7d22\u5f15\u65f6\u7701\u7565\u53c2\u6570\u8868\u793a\u6309\u7167\u5f53\u524d\u7d22\u5f15\u8fde\u63a5\u3002 In [ 18 ]: df1 = pd . DataFrame ({ 'Age' :[ 20 , 30 ]}, .... : index = pd . Series ( .... : [ 'San Zhang' , 'Si Li' ], name = 'Name' )) .... : In [ 19 ]: df2 = pd . DataFrame ({ 'Gender' :[ 'F' , 'M' ]}, .... : index = pd . Series ( .... : [ 'Si Li' , 'Wu Wang' ], name = 'Name' )) .... : In [ 20 ]: df1 . join ( df2 , how = 'left' ) Out [ 20 ]: Age Gender Name San Zhang 20 NaN Si Li 30 F \u4eff\u7167\u7b2c 2 \u5c0f\u8282\u7684\u4f8b\u5b50\uff0c\u5199\u51fa\u8bed\u6587\u548c\u6570\u5b66\u5206\u6570\u5408\u5e76\u7684 join \u7248\u672c\uff1a In [ 21 ]: df1 = pd . DataFrame ({ 'Grade' :[ 70 ]}, .... : index = pd . Series ([ 'San Zhang' ], .... : name = 'Name' )) .... : In [ 22 ]: df2 = pd . DataFrame ({ 'Grade' :[ 80 ]}, .... : index = pd . Series ([ 'San Zhang' ], .... : name = 'Name' )) .... : In [ 23 ]: df1 . join ( df2 , how = 'left' , lsuffix = '_Chinese' , rsuffix = '_Math' ) Out [ 23 ]: Grade_Chinese Grade_Math Name San Zhang 70 80 \u5982\u679c\u60f3\u8981\u8fdb\u884c\u7c7b\u4f3c\u4e8e merge \u4e2d\u4ee5\u591a\u5217\u4e3a\u952e\u7684\u64cd\u4f5c\u7684\u65f6\u5019\uff0c join \u9700\u8981\u4f7f\u7528\u591a\u7ea7\u7d22\u5f15\uff0c\u4f8b\u5982\u5728 merge \u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 24 ]: df1 = pd . DataFrame ({ 'Age' :[ 20 , 21 ]}, .... : index = pd . MultiIndex . from_arrays ( .... : [[ 'San Zhang' , 'San Zhang' ],[ 'one' , 'two' ]], .... : names = ( 'Name' , 'Class' ))) .... : In [ 25 ]: df2 = pd . DataFrame ({ 'Gender' :[ 'F' , 'M' ]}, .... : index = pd . MultiIndex . from_arrays ( .... : [[ 'San Zhang' , 'San Zhang' ],[ 'two' , 'one' ]], .... : names = ( 'Name' , 'Class' ))) .... : In [ 26 ]: df1 Out [ 26 ]: Age Name Class San Zhang one 20 two 21 In [ 27 ]: df2 Out [ 27 ]: Gender Name Class San Zhang two F one M In [ 28 ]: df1 . join ( df2 ) Out [ 28 ]: Age Gender Name Class San Zhang one 20 M two 21 F","title":"3. \u7d22\u5f15\u8fde\u63a5"},{"location":"pandas/part6/#_2","text":"","title":"\u4e8c\u3001\u65b9\u5411\u8fde\u63a5"},{"location":"pandas/part6/#1-concat","text":"\u524d\u9762\u4ecb\u7ecd\u4e86\u5173\u7cfb\u578b\u8fde\u63a5\uff0c\u5176\u4e2d\u6700\u91cd\u8981\u7684\u53c2\u6570\u662f on \u548c how \uff0c\u4f46\u6709\u65f6\u5019\u7528\u6237\u5e76\u4e0d\u5173\u5fc3\u4ee5\u54ea\u4e00\u5217\u4e3a\u952e\u6765\u5408\u5e76\uff0c\u53ea\u662f\u5e0c\u671b\u628a\u4e24\u4e2a\u8868\u6216\u8005\u591a\u4e2a\u8868\u6309\u7167\u7eb5\u5411\u6216\u8005\u6a2a\u5411\u62fc\u63a5\uff0c\u4e3a\u8fd9\u79cd\u9700\u6c42\uff0c pandas \u4e2d\u63d0\u4f9b\u4e86 concat \u51fd\u6570\u6765\u5b9e\u73b0\u3002 \u5728 concat \u4e2d\uff0c\u6700\u5e38\u7528\u7684\u6709\u4e09\u4e2a\u53c2\u6570\uff0c\u5b83\u4eec\u662f axis, join, keys \uff0c\u5206\u522b\u8868\u793a\u62fc\u63a5\u65b9\u5411\uff0c\u8fde\u63a5\u5f62\u5f0f\uff0c\u4ee5\u53ca\u5728\u65b0\u8868\u4e2d\u6307\u793a\u6765\u81ea\u4e8e\u54ea\u4e00\u5f20\u65e7\u8868\u7684\u540d\u5b57\u3002\u8fd9\u91cc\u9700\u8981\u7279\u522b\u6ce8\u610f\uff0c join \u548c keys \u4e0e\u4e4b\u524d\u63d0\u5230\u7684 join \u51fd\u6570\u548c\u952e\u7684\u6982\u5ff5\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002 \u5728\u9ed8\u8ba4\u72b6\u6001\u4e0b\u7684 axis=0 \uff0c\u8868\u793a\u7eb5\u5411\u62fc\u63a5\u591a\u4e2a\u8868\uff0c\u5e38\u5e38\u7528\u4e8e\u591a\u4e2a\u6837\u672c\u7684\u62fc\u63a5\uff1b\u800c axis=1 \u8868\u793a\u6a2a\u5411\u62fc\u63a5\u591a\u4e2a\u8868\uff0c\u5e38\u7528\u4e8e\u591a\u4e2a\u5b57\u6bb5\u6216\u7279\u5f81\u7684\u62fc\u63a5\u3002 \u4f8b\u5982\uff0c\u7eb5\u5411\u5408\u5e76\u5404\u8868\u4e2d\u4eba\u7684\u4fe1\u606f\uff1a In [ 29 ]: df1 = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'Si Li' ], .... : 'Age' :[ 20 , 30 ]}) .... : In [ 30 ]: df2 = pd . DataFrame ({ 'Name' :[ 'Wu Wang' ], 'Age' :[ 40 ]}) In [ 31 ]: pd . concat ([ df1 , df2 ]) Out [ 31 ]: Name Age 0 San Zhang 20 1 Si Li 30 0 Wu Wang 40 \u6a2a\u5411\u5408\u5e76\u5404\u8868\u4e2d\u7684\u5b57\u6bb5\uff1a In [ 32 ]: df2 = pd . DataFrame ({ 'Grade' :[ 80 , 90 ]}) In [ 33 ]: df3 = pd . DataFrame ({ 'Gender' :[ 'M' , 'F' ]}) In [ 34 ]: pd . concat ([ df1 , df2 , df3 ], 1 ) Out [ 34 ]: Name Age Grade Gender 0 San Zhang 20 80 M 1 Si Li 30 90 F \u867d\u7136\u8bf4 concat \u4e0d\u662f\u5904\u7406\u5173\u7cfb\u578b\u5408\u5e76\u7684\u51fd\u6570\uff0c\u4f46\u662f\u5b83\u4ecd\u7136\u662f\u5173\u4e8e\u7d22\u5f15\u8fdb\u884c\u8fde\u63a5\u7684\u3002\u7eb5\u5411\u62fc\u63a5\u4f1a\u6839\u636e\u5217\u7d22\u5f15\u5bf9\u5176\uff0c\u9ed8\u8ba4\u72b6\u6001\u4e0b join=outer \uff0c\u8868\u793a\u4fdd\u7559\u6240\u6709\u7684\u5217\uff0c\u5e76\u5c06\u4e0d\u5b58\u5728\u7684\u503c\u8bbe\u4e3a\u7f3a\u5931\uff1b join=inner \uff0c\u8868\u793a\u4fdd\u7559\u4e24\u4e2a\u8868\u90fd\u51fa\u73b0\u8fc7\u7684\u5217\u3002\u6a2a\u5411\u62fc\u63a5\u5219\u6839\u636e\u884c\u7d22\u5f15\u5bf9\u9f50\uff0c join \u53c2\u6570\u53ef\u4ee5\u7c7b\u4f3c\u8bbe\u7f6e\u3002 In [ 35 ]: df2 = pd . DataFrame ({ 'Name' :[ 'Wu Wang' ], 'Gender' :[ 'M' ]}) In [ 36 ]: pd . concat ([ df1 , df2 ]) Out [ 36 ]: Name Age Gender 0 San Zhang 20.0 NaN 1 Si Li 30.0 NaN 0 Wu Wang NaN M In [ 37 ]: df2 = pd . DataFrame ({ 'Grade' :[ 80 , 90 ]}, index = [ 1 , 2 ]) In [ 38 ]: pd . concat ([ df1 , df2 ], 1 ) Out [ 38 ]: Name Age Grade 0 San Zhang 20.0 NaN 1 Si Li 30.0 80.0 2 NaN NaN 90.0 In [ 39 ]: pd . concat ([ df1 , df2 ], axis = 1 , join = 'inner' ) Out [ 39 ]: Name Age Grade 1 Si Li 30 80 \u56e0\u6b64\uff0c\u5f53\u786e\u8ba4\u8981\u4f7f\u7528\u591a\u8868\u76f4\u63a5\u7684\u65b9\u5411\u5408\u5e76\u65f6\uff0c\u5c24\u5176\u662f\u6a2a\u5411\u7684\u5408\u5e76\uff0c\u53ef\u4ee5\u5148\u7528 reset_index \u65b9\u6cd5\u6062\u590d\u9ed8\u8ba4\u6574\u6570\u7d22\u5f15\u518d\u8fdb\u884c\u5408\u5e76\uff0c\u9632\u6b62\u51fa\u73b0\u7531\u7d22\u5f15\u7684\u8bef\u5bf9\u9f50\u548c\u91cd\u590d\u7d22\u5f15\u7684\u7b1b\u5361\u5c14\u79ef\u5e26\u6765\u7684\u9519\u8bef\u7ed3\u679c\u3002 \u6700\u540e\uff0c keys \u53c2\u6570\u7684\u4f7f\u7528\u573a\u666f\u5728\u4e8e\u591a\u4e2a\u8868\u5408\u5e76\u540e\uff0c\u7528\u6237\u4ecd\u7136\u60f3\u8981\u77e5\u9053\u65b0\u8868\u4e2d\u7684\u6570\u636e\u6765\u81ea\u4e8e\u54ea\u4e2a\u539f\u8868\uff0c\u8fd9\u65f6\u53ef\u4ee5\u901a\u8fc7 keys \u53c2\u6570\u4ea7\u751f\u591a\u7ea7\u7d22\u5f15\u8fdb\u884c\u6807\u8bb0\u3002\u4f8b\u5982\uff0c\u7b2c\u4e00\u4e2a\u8868\u4e2d\u90fd\u662f\u4e00\u73ed\u7684\u540c\u5b66\uff0c\u800c\u7b2c\u4e8c\u4e2a\u8868\u4e2d\u90fd\u662f\u4e8c\u73ed\u7684\u540c\u5b66\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u5408\u5e76\uff1a In [ 40 ]: df1 = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'Si Li' ], .... : 'Age' :[ 20 , 21 ]}) .... : In [ 41 ]: df2 = pd . DataFrame ({ 'Name' :[ 'Wu Wang' ], 'Age' :[ 21 ]}) In [ 42 ]: pd . concat ([ df1 , df2 ], keys = [ 'one' , 'two' ]) Out [ 42 ]: Name Age one 0 San Zhang 20 1 Si Li 21 two 0 Wu Wang 21","title":"1. concat"},{"location":"pandas/part6/#2_1","text":"\u5229\u7528 concat \u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u8868\u4e4b\u95f4\u7684\u65b9\u5411\u62fc\u63a5\uff0c\u5982\u679c\u60f3\u8981\u628a\u4e00\u4e2a\u5e8f\u5217\u8ffd\u52a0\u5230\u8868\u7684\u884c\u672b\u6216\u8005\u5217\u672b\uff0c\u5219\u53ef\u4ee5\u5206\u522b\u4f7f\u7528 append \u548c assign \u65b9\u6cd5\u3002 \u5728 append \u4e2d\uff0c\u5982\u679c\u539f\u8868\u662f\u9ed8\u8ba4\u6574\u6570\u5e8f\u5217\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528 ignore_index=True \u5bf9\u65b0\u5e8f\u5217\u5bf9\u5e94\u7684\u7d22\u5f15\u81ea\u52a8\u6807\u53f7\uff0c\u5426\u5219\u5fc5\u987b\u5bf9 Series \u6307\u5b9a name \u5c5e\u6027\u3002 In [ 43 ]: s = pd . Series ([ 'Wu Wang' , 21 ], index = df1 . columns ) In [ 44 ]: df1 . append ( s , ignore_index = True ) Out [ 44 ]: Name Age 0 San Zhang 20 1 Si Li 21 2 Wu Wang 21 \u5bf9\u4e8e assign \u800c\u8a00\uff0c\u867d\u7136\u53ef\u4ee5\u5229\u7528\u5176\u6dfb\u52a0\u65b0\u7684\u5217\uff0c\u4f46\u4e00\u822c\u901a\u8fc7 df['new_col'] = ... \u7684\u5f62\u5f0f\u5c31\u53ef\u4ee5\u7b49\u4ef7\u5730\u6dfb\u52a0\u65b0\u5217\u3002\u540c\u65f6\uff0c\u4f7f\u7528 [] \u4fee\u6539\u7684\u7f3a\u70b9\u662f\u5b83\u4f1a\u76f4\u63a5\u5728\u539f\u8868\u4e0a\u8fdb\u884c\u6539\u52a8\uff0c\u800c assign \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u4e34\u65f6\u526f\u672c\uff1a In [ 45 ]: s = pd . Series ([ 80 , 90 ]) In [ 46 ]: df1 . assign ( Grade = s ) Out [ 46 ]: Name Age Grade 0 San Zhang 20 80 1 Si Li 21 90 In [ 47 ]: df1 [ 'Grade' ] = s In [ 48 ]: df1 Out [ 48 ]: Name Age Grade 0 San Zhang 20 80 1 Si Li 21 90","title":"2. \u5e8f\u5217\u4e0e\u8868\u7684\u5408\u5e76"},{"location":"pandas/part6/#_3","text":"\u9664\u4e86\u4e0a\u8ff0\u4ecb\u7ecd\u7684\u82e5\u5e72\u8fde\u63a5\u51fd\u6570\u4e4b\u5916\uff0c pandas \u4e2d\u8fd8\u8bbe\u8ba1\u4e86\u4e00\u4e9b\u51fd\u6570\u80fd\u591f\u5bf9\u4e24\u4e2a\u8868\u8fdb\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u8fd9\u91cc\u628a\u5b83\u4eec\u7edf\u79f0\u4e3a\u7c7b\u8fde\u63a5\u64cd\u4f5c\u3002","title":"\u4e09\u3001\u7c7b\u8fde\u63a5\u64cd\u4f5c"},{"location":"pandas/part6/#1_1","text":"compare \u662f\u5728 1.1.0 \u540e\u5f15\u5165\u7684\u65b0\u51fd\u6570\uff0c\u5b83\u80fd\u591f\u6bd4\u8f83\u4e24\u4e2a\u8868\u6216\u8005\u5e8f\u5217\u7684\u4e0d\u540c\u5904\u5e76\u5c06\u5176\u6c47\u603b\u5c55\u793a\uff1a In [ 49 ]: df1 = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'Si Li' , 'Wu Wang' ], .... : 'Age' :[ 20 , 21 , 21 ], .... : 'Class' :[ 'one' , 'two' , 'three' ]}) .... : In [ 50 ]: df2 = pd . DataFrame ({ 'Name' :[ 'San Zhang' , 'Li Si' , 'Wu Wang' ], .... : 'Age' :[ 20 , 21 , 21 ], .... : 'Class' :[ 'one' , 'two' , 'Three' ]}) .... : In [ 51 ]: df1 . compare ( df2 ) Out [ 51 ]: Name Class self other self other 1 Si Li Li Si NaN NaN 2 NaN NaN three Three \u7ed3\u679c\u4e2d\u8fd4\u56de\u4e86\u4e0d\u540c\u503c\u6240\u5728\u7684\u884c\u5217\uff0c\u5982\u679c\u76f8\u540c\u5219\u4f1a\u88ab\u586b\u5145\u4e3a\u7f3a\u5931\u503c NaN \uff0c\u5176\u4e2d other \u548c self \u5206\u522b\u6307\u4ee3\u4f20\u5165\u7684\u53c2\u6570\u8868\u548c\u88ab\u8c03\u7528\u7684\u8868\u81ea\u8eab\u3002 \u5982\u679c\u60f3\u8981\u5b8c\u6574\u663e\u793a\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u6bd4\u8f83\u60c5\u51b5\uff0c\u53ef\u4ee5\u8bbe\u7f6e keep_shape=True \uff1a In [ 52 ]: df1 . compare ( df2 , keep_shape = True ) Out [ 52 ]: Name Age Class self other self other self other 0 NaN NaN NaN NaN NaN NaN 1 Si Li Li Si NaN NaN NaN NaN 2 NaN NaN NaN NaN three Three","title":"1. \u6bd4\u8f83"},{"location":"pandas/part6/#2_2","text":"combine \u51fd\u6570\u80fd\u591f\u8ba9\u4e24\u5f20\u8868\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219\u8fdb\u884c\u7ec4\u5408\uff0c\u5728\u8fdb\u884c\u89c4\u5219\u6bd4\u8f83\u65f6\u4f1a\u81ea\u52a8\u8fdb\u884c\u5217\u7d22\u5f15\u7684\u5bf9\u9f50\u3002\u5bf9\u4e8e\u4f20\u5165\u7684\u51fd\u6570\u800c\u8a00\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u4e2d\u8f93\u5165\u7684\u53c2\u6570\u662f\u6765\u81ea\u4e24\u4e2a\u8868\u7684\u540c\u540d Series \uff0c\u4f9d\u6b21\u4f20\u5165\u7684\u5217\u662f\u4e24\u4e2a\u8868\u5217\u540d\u7684\u5e76\u96c6\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4f1a\u4f9d\u6b21\u4f20\u5165 A,B,C,D \u56db\u7ec4\u5e8f\u5217\uff0c\u6bcf\u7ec4\u4e3a\u5de6\u53f3\u8868\u7684\u4e24\u4e2a\u5e8f\u5217\u3002\u540c\u65f6\uff0c\u8fdb\u884c A \u5217\u6bd4\u8f83\u7684\u65f6\u5019\uff0c s2 \u6307\u4ee3\u7684\u5c31\u662f\u4e00\u4e2a\u5168\u7a7a\u7684\u5e8f\u5217\uff0c\u56e0\u4e3a\u5b83\u5728\u88ab\u8c03\u7528\u7684\u8868\u4e2d\u5e76\u4e0d\u5b58\u5728\uff0c\u5e76\u4e14\u6765\u81ea\u7b2c\u4e00\u4e2a\u8868\u7684\u5e8f\u5217\u7d22\u5f15\u4f1a\u88ab reindex \u6210\u4e24\u4e2a\u7d22\u5f15\u7684\u5e76\u96c6\u3002\u5177\u4f53\u7684\u8fc7\u7a0b\u53ef\u4ee5\u901a\u8fc7\u5728\u4f20\u5165\u7684\u51fd\u6570\u4e2d\u63d2\u5165\u9002\u5f53\u7684 print \u65b9\u6cd5\u67e5\u770b\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u8868\u793a\u9009\u51fa\u5bf9\u5e94\u7d22\u5f15\u4f4d\u7f6e\u8f83\u5c0f\u7684\u5143\u7d20\uff1a In [ 53 ]: def choose_min ( s1 , s2 ): .... : s2 = s2 . reindex_like ( s1 ) .... : res = s1 . where ( s1 < s2 , s2 ) .... : res = res . mask ( s1 . isna ()) # isna\u8868\u793a\u662f\u5426\u4e3a\u7f3a\u5931\u503c\uff0c\u8fd4\u56de\u5e03\u5c14\u5e8f\u5217 .... : return res .... : In [ 54 ]: df1 = pd . DataFrame ({ 'A' :[ 1 , 2 ], 'B' :[ 3 , 4 ], 'C' :[ 5 , 6 ]}) In [ 55 ]: df2 = pd . DataFrame ({ 'B' :[ 5 , 6 ], 'C' :[ 7 , 8 ], 'D' :[ 9 , 10 ]}, index = [ 1 , 2 ]) In [ 56 ]: df1 . combine ( df2 , choose_min ) Out [ 56 ]: A B C D 0 NaN NaN NaN NaN 1 NaN 4.0 6.0 NaN 2 NaN NaN NaN NaN \u7ec3\u4e00\u7ec3 \u8bf7\u5728\u4e0a\u8ff0\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\u4fee\u6539\uff0c\u4fdd\u7559 df2 \u4e2d 4 \u4e2a\u672a\u88ab df1 \u66ff\u6362\u7684\u76f8\u5e94\u4f4d\u7f6e\u539f\u59cb\u503c\u3002 \u6b64\u5916\uff0c\u8bbe\u7f6e overtwrite \u53c2\u6570\u4e3a False \u53ef\u4ee5\u4fdd\u7559 \u88ab\u8c03\u7528\u8868 \u4e2d\u672a\u51fa\u73b0\u5728\u4f20\u5165\u7684\u53c2\u6570\u8868\u4e2d\u7684\u5217\uff0c\u800c\u4e0d\u4f1a\u8bbe\u7f6e\u672a\u7f3a\u5931\u503c\uff1a In [ 57 ]: df1 . combine ( df2 , choose_min , overwrite = False ) Out [ 57 ]: A B C D 0 1.0 NaN NaN NaN 1 2.0 4.0 6.0 NaN 2 NaN NaN NaN NaN \u7ec3\u4e00\u7ec3 \u9664\u4e86 combine \u4e4b\u5916\uff0c pandas \u4e2d\u8fd8\u6709\u4e00\u4e2a combine_first \u65b9\u6cd5\uff0c\u5176\u529f\u80fd\u662f\u5728\u5bf9\u4e24\u5f20\u8868\u7ec4\u5408\u65f6\uff0c\u82e5\u7b2c\u4e8c\u5f20\u8868\u4e2d\u7684\u503c\u5728\u7b2c\u4e00\u5f20\u8868\u4e2d\u5bf9\u5e94\u7d22\u5f15\u4f4d\u7f6e\u7684\u503c\u4e0d\u662f\u7f3a\u5931\u72b6\u6001\uff0c\u90a3\u4e48\u5c31\u4f7f\u7528\u7b2c\u4e00\u5f20\u8868\u7684\u503c\u586b\u5145\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8bf7\u7528 combine \u51fd\u6570\u5b8c\u6210\u76f8\u540c\u7684\u529f\u80fd\u3002 In [ 58 ]: df1 = pd . DataFrame ({ 'A' :[ 1 , 2 ], 'B' :[ 3 , np . nan ]}) In [ 59 ]: df2 = pd . DataFrame ({ 'A' :[ 5 , 6 ], 'B' :[ 7 , 8 ]}, index = [ 1 , 2 ]) In [ 60 ]: df1 . combine_first ( df2 ) Out [ 60 ]: A B 0 1.0 3.0 1 2.0 7.0 2 6.0 8.0","title":"2. \u7ec4\u5408"},{"location":"pandas/part6/#_4","text":"","title":"\u56db\u3001\u7ec3\u4e60"},{"location":"pandas/part6/#ex1","text":"\u73b0\u6709\u7f8e\u56fd 4 \u6708 12 \u65e5\u81f3 11 \u6708 16 \u65e5\u7684\u75ab\u60c5\u62a5\u8868\uff08\u5728 /data/us_report \u6587\u4ef6\u5939\u4e0b\uff09\uff0c\u8bf7\u5c06 New York \u7684 Confirmed, Deaths, Recovered, Active \u5408\u5e76\u4e3a\u4e00\u5f20\u8868\uff0c\u7d22\u5f15\u4e3a\u6309\u5982\u4e0b\u65b9\u6cd5\u751f\u6210\u7684\u65e5\u671f\u5b57\u7b26\u4e32\u5e8f\u5217\uff1a In [ 61 ]: date = pd . date_range ( '20200412' , '20201116' ) . to_series () In [ 62 ]: date = date . dt . month . astype ( 'string' ) . str . zfill ( 2 .... : ) + '-' + date . dt . day . astype ( 'string' .... : ) . str . zfill ( 2 ) + '-' + '2020' .... : In [ 63 ]: date = date . tolist () In [ 64 ]: date [: 5 ] Out [ 64 ]: [ '04-12-2020' , '04-13-2020' , '04-14-2020' , '04-15-2020' , '04-16-2020' ]","title":"Ex1\uff1a\u7f8e\u56fd\u75ab\u60c5\u6570\u636e\u96c6"},{"location":"pandas/part6/#ex2-join","text":"\u8bf7\u5b9e\u73b0\u5e26\u6709 how \u53c2\u6570\u7684 join \u51fd\u6570 \u5047\u8bbe\u8fde\u63a5\u7684\u4e24\u8868\u65e0\u516c\u5171\u5217 \u8c03\u7528\u65b9\u5f0f\u4e3a join(df1, df2, how=\"left\") \u7ed9\u51fa\u6d4b\u8bd5\u6837\u4f8b","title":"Ex2\uff1a\u5b9e\u73b0 join \u51fd\u6570"},{"location":"pandas/part7/","text":"In [ 1 ]: import numpy as np In [ 2 ]: import pandas as pd \u4e00\u3001\u7f3a\u5931\u503c\u7684\u7edf\u8ba1\u548c\u5220\u9664 1. \u7f3a\u5931\u4fe1\u606f\u7684\u7edf\u8ba1 \u7f3a\u5931\u6570\u636e\u53ef\u4ee5\u4f7f\u7528 isna \u6216 isnull \uff08\u4e24\u4e2a\u51fd\u6570\u6ca1\u6709\u533a\u522b\uff09\u6765\u67e5\u770b\u6bcf\u4e2a\u5355\u5143\u683c\u662f\u5426\u7f3a\u5931\uff0c\u7ed3\u5408 mean \u53ef\u4ee5\u8ba1\u7b97\u51fa\u6bcf\u5217\u7f3a\u5931\u503c\u7684\u6bd4\u4f8b\uff1a In [ 3 ]: df = pd . read_csv ( 'data/learn_pandas.csv' , ... : usecols = [ 'Grade' , 'Name' , 'Gender' , 'Height' , ... : 'Weight' , 'Transfer' ]) ... : In [ 4 ]: df . isna () . head () Out [ 4 ]: Grade Name Gender Height Weight Transfer 0 False False False False False False 1 False False False False False False 2 False False False False False False 3 False False False True False False 4 False False False False False False In [ 5 ]: df . isna () . mean () # \u67e5\u770b\u7f3a\u5931\u7684\u6bd4\u4f8b Out [ 5 ]: Grade 0.000 Name 0.000 Gender 0.000 Height 0.085 Weight 0.055 Transfer 0.060 dtype : float64 \u5982\u679c\u60f3\u8981\u67e5\u770b\u67d0\u4e00\u5217\u7f3a\u5931\u6216\u8005\u975e\u7f3a\u5931\u7684\u884c\uff0c\u53ef\u4ee5\u5229\u7528 Series \u4e0a\u7684 isna \u6216\u8005 notna \u8fdb\u884c\u5e03\u5c14\u7d22\u5f15\u3002\u4f8b\u5982\uff0c\u67e5\u770b\u8eab\u9ad8\u7f3a\u5931\u7684\u884c\uff1a In [ 6 ]: df [ df . Height . isna ()] . head () Out [ 6 ]: Grade Name Gender Height Weight Transfer 3 Sophomore Xiaojuan Sun Female NaN 41.0 N 12 Senior Peng You Female NaN 48.0 NaN 26 Junior Yanli You Female NaN 48.0 N 36 Freshman Xiaojuan Qin Male NaN 79.0 Y 60 Freshman Yanpeng Lv Male NaN 65.0 N \u5982\u679c\u60f3\u8981\u540c\u65f6\u5bf9\u51e0\u4e2a\u5217\uff0c\u68c0\u7d22\u51fa\u5168\u90e8\u4e3a\u7f3a\u5931\u6216\u8005\u81f3\u5c11\u6709\u4e00\u4e2a\u7f3a\u5931\u6216\u8005\u6ca1\u6709\u7f3a\u5931\u7684\u884c\uff0c\u53ef\u4ee5\u4f7f\u7528 isna, notna \u548c any, all \u7684\u7ec4\u5408\u3002\u4f8b\u5982\uff0c\u5bf9\u8eab\u9ad8\u3001\u4f53\u91cd\u548c\u8f6c\u7cfb\u60c5\u51b5\u8fd9 3 \u5217\u5206\u522b\u8fdb\u884c\u8fd9\u4e09\u79cd\u60c5\u51b5\u7684\u68c0\u7d22\uff1a In [ 7 ]: sub_set = df [[ 'Height' , 'Weight' , 'Transfer' ]] In [ 8 ]: df [ sub_set . isna () . all ( 1 )] # \u5168\u90e8\u7f3a\u5931 Out [ 8 ]: Grade Name Gender Height Weight Transfer 102 Junior Chengli Zhao Male NaN NaN NaN In [ 9 ]: df [ sub_set . isna () . any ( 1 )] . head () # \u81f3\u5c11\u6709\u4e00\u4e2a\u7f3a\u5931 Out [ 9 ]: Grade Name Gender Height Weight Transfer 3 Sophomore Xiaojuan Sun Female NaN 41.0 N 9 Junior Juan Xu Female 164.8 NaN N 12 Senior Peng You Female NaN 48.0 NaN 21 Senior Xiaopeng Shen Male 166.0 62.0 NaN 26 Junior Yanli You Female NaN 48.0 N In [ 10 ]: df [ sub_set . notna () . all ( 1 )] . head () # \u6ca1\u6709\u7f3a\u5931 Out [ 10 ]: Grade Name Gender Height Weight Transfer 0 Freshman Gaopeng Yang Female 158.9 46.0 N 1 Freshman Changqiang You Male 166.5 70.0 N 2 Senior Mei Sun Male 188.9 89.0 N 4 Sophomore Gaojuan You Male 174.0 74.0 N 5 Freshman Xiaoli Qian Female 158.0 51.0 N 2. \u7f3a\u5931\u4fe1\u606f\u7684\u5220\u9664 \u6570\u636e\u5904\u7406\u4e2d\u7ecf\u5e38\u9700\u8981\u6839\u636e\u7f3a\u5931\u503c\u7684\u5927\u5c0f\u3001\u6bd4\u4f8b\u6216\u5176\u4ed6\u7279\u5f81\u6765\u8fdb\u884c\u884c\u6837\u672c\u6216\u5217\u7279\u5f81\u7684\u5220\u9664\uff0c pandas \u4e2d\u63d0\u4f9b\u4e86 dropna \u51fd\u6570\u6765\u8fdb\u884c\u64cd\u4f5c\u3002 dropna \u7684\u4e3b\u8981\u53c2\u6570\u4e3a\u8f74\u65b9\u5411 axis \uff08\u9ed8\u8ba4\u4e3a 0\uff0c\u5373\u5220\u9664\u884c\uff09\u3001\u5220\u9664\u65b9\u5f0f how \u3001\u5220\u9664\u7684\u975e\u7f3a\u5931\u503c\u4e2a\u6570\u9608\u503c thresh \uff08 \u975e\u7f3a\u5931\u503c \u6ca1\u6709\u8fbe\u5230\u8fd9\u4e2a\u6570\u91cf\u7684\u76f8\u5e94\u7ef4\u5ea6\u4f1a\u88ab\u5220\u9664\uff09\u3001\u5907\u9009\u7684\u5220\u9664\u5b50\u96c6 subset \uff0c\u5176\u4e2d how \u4e3b\u8981\u6709 any \u548c all \u4e24\u79cd\u53c2\u6570\u53ef\u4ee5\u9009\u62e9\u3002 \u4f8b\u5982\uff0c\u5220\u9664\u8eab\u9ad8\u4f53\u91cd\u81f3\u5c11\u6709\u4e00\u4e2a\u7f3a\u5931\u7684\u884c\uff1a In [ 11 ]: res = df . dropna ( how = 'any' , subset = [ 'Height' , 'Weight' ]) In [ 12 ]: res . shape Out [ 12 ]: ( 174 , 6 ) \u4f8b\u5982\uff0c\u5220\u9664\u8d85\u8fc7 15 \u4e2a\u7f3a\u5931\u503c\u7684\u5217\uff1a In [ 13 ]: res = df . dropna ( 1 , thresh = df . shape [ 0 ] - 15 ) # \u8eab\u9ad8\u88ab\u5220\u9664 In [ 14 ]: res . head () Out [ 14 ]: Grade Name Gender Weight Transfer 0 Freshman Gaopeng Yang Female 46.0 N 1 Freshman Changqiang You Male 70.0 N 2 Senior Mei Sun Male 89.0 N 3 Sophomore Xiaojuan Sun Female 41.0 N 4 Sophomore Gaojuan You Male 74.0 N \u5f53\u7136\uff0c\u4e0d\u7528 dropna \u540c\u6837\u662f\u53ef\u884c\u7684\uff0c\u4f8b\u5982\u4e0a\u8ff0\u7684\u4e24\u4e2a\u64cd\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e03\u5c14\u7d22\u5f15\u6765\u5b8c\u6210\uff1a In [ 15 ]: res = df . loc [ df [[ 'Height' , 'Weight' ]] . notna () . all ( 1 )] In [ 16 ]: res . shape Out [ 16 ]: ( 174 , 6 ) In [ 17 ]: res = df . loc [:, ~ ( df . isna () . sum () > 15 )] In [ 18 ]: res . head () Out [ 18 ]: Grade Name Gender Weight Transfer 0 Freshman Gaopeng Yang Female 46.0 N 1 Freshman Changqiang You Male 70.0 N 2 Senior Mei Sun Male 89.0 N 3 Sophomore Xiaojuan Sun Female 41.0 N 4 Sophomore Gaojuan You Male 74.0 N \u4e8c\u3001\u7f3a\u5931\u503c\u7684\u586b\u5145\u548c\u63d2\u503c 1. \u5229\u7528 fillna \u8fdb\u884c\u586b\u5145 \u5728 fillna \u4e2d\u6709\u4e09\u4e2a\u53c2\u6570\u662f\u5e38\u7528\u7684\uff1a value, method, limit \u3002\u5176\u4e2d\uff0c value \u4e3a\u586b\u5145\u503c\uff0c\u53ef\u4ee5\u662f\u6807\u91cf\uff0c\u4e5f\u53ef\u4ee5\u662f\u7d22\u5f15\u5230\u5143\u7d20\u7684\u5b57\u5178\u6620\u5c04\uff1b method \u4e3a\u586b\u5145\u65b9\u6cd5\uff0c\u6709\u7528\u524d\u9762\u7684\u5143\u7d20\u586b\u5145 ffill \u548c\u7528\u540e\u9762\u7684\u5143\u7d20\u586b\u5145 bfill \u4e24\u79cd\u7c7b\u578b\uff0c limit \u53c2\u6570\u8868\u793a\u8fde\u7eed\u7f3a\u5931\u503c\u7684\u6700\u5927\u586b\u5145\u6b21\u6570\u3002 \u4e0b\u9762\u6784\u9020\u4e00\u4e2a\u7b80\u5355\u7684 Series \u6765\u8bf4\u660e\u7528\u6cd5\uff1a In [ 19 ]: s = pd . Series ([ np . nan , 1 , np . nan , np . nan , 2 , np . nan ], .... : list ( 'aaabcd' )) .... : In [ 20 ]: s Out [ 20 ]: a NaN a 1.0 a NaN b NaN c 2.0 d NaN dtype : float64 In [ 21 ]: s . fillna ( method = 'ffill' ) # \u7528\u524d\u9762\u7684\u503c\u5411\u540e\u586b\u5145 Out [ 21 ]: a NaN a 1.0 a 1.0 b 1.0 c 2.0 d 2.0 dtype : float64 In [ 22 ]: s . fillna ( method = 'ffill' , limit = 1 ) # \u8fde\u7eed\u51fa\u73b0\u7684\u7f3a\u5931\uff0c\u6700\u591a\u586b\u5145\u4e00\u6b21 Out [ 22 ]: a NaN a 1.0 a 1.0 b NaN c 2.0 d 2.0 dtype : float64 In [ 23 ]: s . fillna ( s . mean ()) # value\u4e3a\u6807\u91cf Out [ 23 ]: a 1.5 a 1.0 a 1.5 b 1.5 c 2.0 d 1.5 dtype : float64 In [ 24 ]: s . fillna ({ 'a' : 100 , 'd' : 200 }) # \u901a\u8fc7\u7d22\u5f15\u6620\u5c04\u586b\u5145\u7684\u503c Out [ 24 ]: a 100.0 a 1.0 a 100.0 b NaN c 2.0 d 200.0 dtype : float64 \u6709\u65f6\u4e3a\u4e86\u66f4\u52a0\u5408\u7406\u5730\u586b\u5145\uff0c\u9700\u8981\u5148\u8fdb\u884c\u5206\u7ec4\u540e\u518d\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u6839\u636e\u5e74\u7ea7\u8fdb\u884c\u8eab\u9ad8\u7684\u5747\u503c\u586b\u5145\uff1a In [ 25 ]: df . groupby ( 'Grade' )[ 'Height' ] . transform ( .... : lambda x : x . fillna ( x . mean ())) . head () .... : Out [ 25 ]: 0 158.900000 1 166.500000 2 188.900000 3 163.075862 4 174.000000 Name : Height , dtype : float64 \u7ec3\u4e00\u7ec3 \u5bf9\u4e00\u4e2a\u5e8f\u5217\u4ee5\u5982\u4e0b\u89c4\u5219\u586b\u5145\u7f3a\u5931\u503c\uff1a\u5982\u679c\u5355\u72ec\u51fa\u73b0\u7684\u7f3a\u5931\u503c\uff0c\u5c31\u7528\u524d\u540e\u5747\u503c\u586b\u5145\uff0c\u5982\u679c\u8fde\u7eed\u51fa\u73b0\u7684\u7f3a\u5931\u503c\u5c31\u4e0d\u586b\u5145\uff0c\u5373\u5e8f\u5217 [1, NaN, 3, NaN, NaN] \u586b\u5145\u540e\u4e3a[1, 2, 3, NaN, NaN]\uff0c\u8bf7\u5229\u7528 fillna \u51fd\u6570\u5b9e\u73b0\u3002\uff08\u63d0\u793a\uff1a\u5229\u7528 limit \u53c2\u6570\uff09 2. \u63d2\u503c\u51fd\u6570 \u5728\u5173\u4e8e interpolate \u51fd\u6570\u7684 \u6587\u6863 \u63cf\u8ff0\u4e2d\uff0c\u5217\u4e3e\u4e86\u8bb8\u591a\u63d2\u503c\u6cd5\uff0c\u5305\u62ec\u4e86\u5927\u91cf Scipy \u4e2d\u7684\u65b9\u6cd5\u3002\u7531\u4e8e\u5f88\u591a\u63d2\u503c\u65b9\u6cd5\u6d89\u53ca\u5230\u6bd4\u8f83\u590d\u6742\u7684\u6570\u5b66\u77e5\u8bc6\uff0c\u56e0\u6b64\u8fd9\u91cc\u53ea\u8ba8\u8bba\u6bd4\u8f83\u5e38\u7528\u4e14\u7b80\u5355\u7684\u4e09\u7c7b\u60c5\u51b5\uff0c\u5373\u7ebf\u6027\u63d2\u503c\u3001\u6700\u8fd1\u90bb\u63d2\u503c\u548c\u7d22\u5f15\u63d2\u503c\u3002 \u5bf9\u4e8e interpolate \u800c\u8a00\uff0c\u9664\u4e86\u63d2\u503c\u65b9\u6cd5\uff08\u9ed8\u8ba4\u4e3a linear \u7ebf\u6027\u63d2\u503c\uff09\u4e4b\u5916\uff0c\u6709\u4e0e fillna \u7c7b\u4f3c\u7684\u4e24\u4e2a\u5e38\u7528\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u63a7\u5236\u65b9\u5411\u7684 limit_direction \uff0c\u53e6\u4e00\u4e2a\u662f\u63a7\u5236\u6700\u5927\u8fde\u7eed\u7f3a\u5931\u503c\u63d2\u503c\u4e2a\u6570\u7684 limit \u3002\u5176\u4e2d\uff0c\u9650\u5236\u63d2\u503c\u7684\u65b9\u5411\u9ed8\u8ba4\u4e3a forward \uff0c\u8fd9\u4e0e fillna \u7684 method \u4e2d\u7684 ffill \u662f\u7c7b\u4f3c\u7684\uff0c\u82e5\u60f3\u8981\u540e\u5411\u9650\u5236\u63d2\u503c\u6216\u8005\u53cc\u5411\u9650\u5236\u63d2\u503c\u53ef\u4ee5\u6307\u5b9a\u4e3a backward \u6216 both \u3002 In [ 26 ]: s = pd . Series ([ np . nan , np . nan , 1 , .... : np . nan , np . nan , np . nan , .... : 2 , np . nan , np . nan ]) .... : In [ 27 ]: s . values Out [ 27 ]: array ([ nan , nan , 1. , nan , nan , nan , 2. , nan , nan ]) \u4f8b\u5982\uff0c\u5728\u9ed8\u8ba4\u7ebf\u6027\u63d2\u503c\u6cd5\u4e0b\u5206\u522b\u8fdb\u884c backward \u548c\u53cc\u5411\u9650\u5236\u63d2\u503c\uff0c\u540c\u65f6\u9650\u5236\u6700\u5927\u8fde\u7eed\u6761\u6570\u4e3a 1\uff1a In [ 28 ]: res = s . interpolate ( limit_direction = 'backward' , limit = 1 ) In [ 29 ]: res . values Out [ 29 ]: array ([ nan , 1. , 1. , nan , nan , 1.75 , 2. , nan , nan ]) In [ 30 ]: res = s . interpolate ( limit_direction = 'both' , limit = 1 ) In [ 31 ]: res . values Out [ 31 ]: array ([ nan , 1. , 1. , 1.25 , nan , 1.75 , 2. , 2. , nan ]) \u7b2c\u4e8c\u79cd\u5e38\u89c1\u7684\u63d2\u503c\u662f\u6700\u8fd1\u90bb\u63d2\u8865\uff0c\u5373\u7f3a\u5931\u503c\u7684\u5143\u7d20\u548c\u79bb\u5b83\u6700\u8fd1\u7684\u975e\u7f3a\u5931\u503c\u5143\u7d20\u4e00\u6837\uff1a In [ 32 ]: s . interpolate ( 'nearest' ) . values Out [ 32 ]: array ([ nan , nan , 1. , 1. , 1. , 2. , 2. , nan , nan ]) \u6700\u540e\u6765\u4ecb\u7ecd\u7d22\u5f15\u63d2\u503c\uff0c\u5373\u6839\u636e\u7d22\u5f15\u5927\u5c0f\u8fdb\u884c\u7ebf\u6027\u63d2\u503c\u3002\u4f8b\u5982\uff0c\u6784\u9020\u4e0d\u7b49\u95f4\u8ddd\u7684\u7d22\u5f15\u8fdb\u884c\u6f14\u793a\uff1a In [ 33 ]: s = pd . Series ([ 0 , np . nan , 10 ], index = [ 0 , 1 , 10 ]) In [ 34 ]: s Out [ 34 ]: 0 0.0 1 NaN 10 10.0 dtype : float64 In [ 35 ]: s . interpolate () # \u9ed8\u8ba4\u7684\u7ebf\u6027\u63d2\u503c\uff0c\u7b49\u4ef7\u4e8e\u8ba1\u7b97\u4e2d\u70b9\u7684\u503c Out [ 35 ]: 0 0.0 1 5.0 10 10.0 dtype : float64 In [ 36 ]: s . interpolate ( method = 'index' ) # \u548c\u7d22\u5f15\u6709\u5173\u7684\u7ebf\u6027\u63d2\u503c\uff0c\u8ba1\u7b97\u76f8\u5e94\u7d22\u5f15\u5927\u5c0f\u5bf9\u5e94\u7684\u503c Out [ 36 ]: 0 0.0 1 1.0 10 10.0 dtype : float64 \u540c\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5bf9\u4e8e\u65f6\u95f4\u6233\u7d22\u5f15\u4e5f\u662f\u53ef\u4ee5\u4f7f\u7528\u7684\uff0c\u6709\u5173\u65f6\u95f4\u5e8f\u5217\u7684\u5176\u4ed6\u8bdd\u9898\u4f1a\u5728\u7b2c\u5341\u7ae0\u8fdb\u884c\u8ba8\u8bba\uff0c\u8fd9\u91cc\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a In [ 37 ]: s = pd . Series ([ 0 , np . nan , 10 ], .... : index = pd . to_datetime ([ '20200101' , .... : '20200102' , .... : '20200111' ])) .... : In [ 38 ]: s Out [ 38 ]: 2020 - 01 - 01 0.0 2020 - 01 - 02 NaN 2020 - 01 - 11 10.0 dtype : float64 In [ 39 ]: s . interpolate () Out [ 39 ]: 2020 - 01 - 01 0.0 2020 - 01 - 02 5.0 2020 - 01 - 11 10.0 dtype : float64 In [ 40 ]: s . interpolate ( method = 'index' ) Out [ 40 ]: 2020 - 01 - 01 0.0 2020 - 01 - 02 1.0 2020 - 01 - 11 10.0 dtype : float64 \u5173\u4e8e polynomial \u548c spline \u63d2\u503c\u7684\u6ce8\u610f\u4e8b\u9879 \u5728 interpolate \u4e2d\u5982\u679c\u9009\u7528 polynomial \u7684\u63d2\u503c\u65b9\u6cd5\uff0c\u5b83\u5185\u90e8\u8c03\u7528\u7684\u662f scipy.interpolate.interp1d(*,*,kind=order) \uff0c\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8\u8c03\u7528\u7684\u662f make_interp_spline \u65b9\u6cd5\uff0c\u56e0\u6b64\u5176\u5b9e\u662f\u6837\u6761\u63d2\u503c\u800c\u4e0d\u662f\u7c7b\u4f3c\u4e8e numpy \u4e2d\u7684 polyfit \u591a\u9879\u5f0f\u62df\u5408\u63d2\u503c\uff1b\u800c\u5f53\u9009\u7528 spline \u65b9\u6cd5\u65f6\uff0c pandas \u8c03\u7528\u7684\u662f scipy.interpolate.UnivariateSpline \u800c\u4e0d\u662f\u666e\u901a\u7684\u6837\u6761\u63d2\u503c\u3002\u8fd9\u4e00\u90e8\u5206\u7684\u6587\u6863\u63cf\u8ff0\u6bd4\u8f83\u6df7\u4e71\uff0c\u800c\u4e14\u8fd9\u79cd\u53c2\u6570\u7684\u8bbe\u8ba1\u4e5f\u662f\u4e0d\u5408\u7406\u7684\uff0c\u5f53\u4f7f\u7528\u8fd9\u4e24\u7c7b\u63d2\u503c\u65b9\u6cd5\u65f6\uff0c\u7528\u6237\u4e00\u5b9a\u8981\u5c0f\u5fc3\u8c28\u614e\u5730\u6839\u636e\u81ea\u5df1\u7684\u5b9e\u9645\u9700\u6c42\u9009\u53d6\u6070\u5f53\u7684\u63d2\u503c\u65b9\u6cd5\u3002 \u4e09\u3001Nullable \u7c7b\u578b 1. \u7f3a\u5931\u8bb0\u53f7\u53ca\u5176\u7f3a\u9677 \u5728 python \u4e2d\u7684\u7f3a\u5931\u503c\u7528 None \u8868\u793a\uff0c\u8be5\u5143\u7d20\u9664\u4e86\u7b49\u4e8e\u81ea\u5df1\u672c\u8eab\u4e4b\u5916\uff0c\u4e0e\u5176\u4ed6\u4efb\u4f55\u5143\u7d20\u4e0d\u76f8\u7b49\uff1a In [ 41 ]: None == None Out [ 41 ]: True In [ 42 ]: None == False Out [ 42 ]: False In [ 43 ]: None == [] Out [ 43 ]: False In [ 44 ]: None == '' Out [ 44 ]: False \u5728 numpy \u4e2d\u5229\u7528 np.nan \u6765\u8868\u793a\u7f3a\u5931\u503c\uff0c\u8be5\u5143\u7d20\u9664\u4e86\u4e0d\u548c\u5176\u4ed6\u4efb\u4f55\u5143\u7d20\u76f8\u7b49\u4e4b\u5916\uff0c\u548c\u81ea\u8eab\u7684\u6bd4\u8f83\u7ed3\u679c\u4e5f\u8fd4\u56de False \uff1a In [ 45 ]: np . nan == np . nan Out [ 45 ]: False In [ 46 ]: np . nan == None Out [ 46 ]: False In [ 47 ]: np . nan == False Out [ 47 ]: False \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u867d\u7136\u5728\u5bf9\u7f3a\u5931\u5e8f\u5217\u6216\u8868\u683c\u7684\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\u64cd\u4f5c\u7684\u65f6\u5019\uff0c np.nan \u7684\u5bf9\u5e94\u4f4d\u7f6e\u4f1a\u8fd4\u56de False \uff0c\u4f46\u662f\u5728\u4f7f\u7528 equals \u51fd\u6570\u8fdb\u884c\u4e24\u5f20\u8868\u6216\u4e24\u4e2a\u5e8f\u5217\u7684\u76f8\u540c\u6027\u68c0\u9a8c\u65f6\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u4e24\u4fa7\u8868\u90fd\u662f\u7f3a\u5931\u503c\u7684\u4f4d\u7f6e\uff0c\u76f4\u63a5\u8fd4\u56de True \uff1a In [ 48 ]: s1 = pd . Series ([ 1 , np . nan ]) In [ 49 ]: s2 = pd . Series ([ 1 , 2 ]) In [ 50 ]: s3 = pd . Series ([ 1 , np . nan ]) In [ 51 ]: s1 == 1 Out [ 51 ]: 0 True 1 False dtype : bool In [ 52 ]: s1 . equals ( s2 ) Out [ 52 ]: False In [ 53 ]: s1 . equals ( s3 ) Out [ 53 ]: True \u5728\u65f6\u95f4\u5e8f\u5217\u7684\u5bf9\u8c61\u4e2d\uff0c pandas \u5229\u7528 pd.NaT \u6765\u6307\u4ee3\u7f3a\u5931\u503c\uff0c\u5b83\u7684\u4f5c\u7528\u548c np.nan \u662f\u4e00\u81f4\u7684\uff08\u65f6\u95f4\u5e8f\u5217\u7684\u5bf9\u8c61\u548c\u6784\u9020\u5c06\u5728\u7b2c\u5341\u7ae0\u8ba8\u8bba\uff09\uff1a In [ 54 ]: pd . to_timedelta ([ '30s' , np . nan ]) # Timedelta\u4e2d\u7684NaT Out [ 54 ]: TimedeltaIndex ([ '0 days 00:00:30' , NaT ], dtype = 'timedelta64[ns]' , freq = None ) In [ 55 ]: pd . to_datetime ([ '20200101' , np . nan ]) # Datetime\u4e2d\u7684NaT Out [ 55 ]: DatetimeIndex ([ '2020-01-01' , 'NaT' ], dtype = 'datetime64[ns]' , freq = None ) \u90a3\u4e48\u4e3a\u4ec0\u4e48\u8981\u5f15\u5165 pd.NaT \u6765\u8868\u793a\u65f6\u95f4\u5bf9\u8c61\u4e2d\u7684\u7f3a\u5931\u5462\uff1f\u4ecd\u7136\u4ee5 np.nan \u7684\u5f62\u5f0f\u5b58\u653e\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\uff1f\u5728 pandas \u4e2d\u53ef\u4ee5\u770b\u5230 object \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u800c object \u662f\u4e00\u79cd\u6df7\u6742\u5bf9\u8c61\u7c7b\u578b\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u591a\u4e2a\u7c7b\u578b\u7684\u5143\u7d20\u540c\u65f6\u5b58\u50a8\u5728 Series \u4e2d\uff0c\u5b83\u7684\u7c7b\u578b\u5c31\u4f1a\u53d8\u6210 object \u3002\u4f8b\u5982\uff0c\u540c\u65f6\u5b58\u653e\u6574\u6570\u548c\u5b57\u7b26\u4e32\u7684\u5217\u8868\uff1a In [ 56 ]: pd . Series ([ 1 , 'two' ]) Out [ 56 ]: 0 1 1 two dtype : object NaT \u95ee\u9898\u7684\u6839\u6e90\u6765\u81ea\u4e8e np.nan \u7684\u672c\u8eab\u662f\u4e00\u79cd\u6d6e\u70b9\u7c7b\u578b\uff0c\u800c\u5982\u679c\u6d6e\u70b9\u548c\u65f6\u95f4\u7c7b\u578b\u6df7\u5408\u5b58\u50a8\uff0c\u5982\u679c\u4e0d\u8bbe\u8ba1\u65b0\u7684\u5185\u7f6e\u7f3a\u5931\u7c7b\u578b\u6765\u5904\u7406\uff0c\u5c31\u4f1a\u53d8\u6210\u542b\u7cca\u4e0d\u6e05\u7684 object \u7c7b\u578b\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u5e0c\u671b\u770b\u5230\u7684\u3002 In [ 57 ]: type ( np . nan ) Out [ 57 ]: float \u540c\u65f6\uff0c\u7531\u4e8e np.nan \u7684\u6d6e\u70b9\u6027\u8d28\uff0c\u5982\u679c\u5728\u4e00\u4e2a\u6574\u6570\u7684 Series \u4e2d\u51fa\u73b0\u7f3a\u5931\uff0c\u90a3\u4e48\u5176\u7c7b\u578b\u4f1a\u8f6c\u53d8\u4e3a float64 \uff1b\u800c\u5982\u679c\u5728\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7684\u5e8f\u5217\u4e2d\u51fa\u73b0\u7f3a\u5931\uff0c\u90a3\u4e48\u5176\u7c7b\u578b\u5c31\u4f1a\u8f6c\u4e3a object \u800c\u4e0d\u662f bool \uff1a In [ 58 ]: pd . Series ([ 1 , np . nan ]) . dtype Out [ 58 ]: dtype ( 'float64' ) In [ 59 ]: pd . Series ([ True , False , np . nan ]) . dtype Out [ 59 ]: dtype ( 'O' ) \u56e0\u6b64\uff0c\u5728\u8fdb\u5165 1.0.0 \u7248\u672c\u540e\uff0c pandas \u5c1d\u8bd5\u8bbe\u8ba1\u4e86\u4e00\u79cd\u65b0\u7684\u7f3a\u5931\u7c7b\u578b pd.NA \u4ee5\u53ca\u4e09\u79cd Nullable \u5e8f\u5217\u7c7b\u578b\u6765\u5e94\u5bf9\u8fd9\u4e9b\u7f3a\u9677\uff0c\u5b83\u4eec\u5206\u522b\u662f Int, boolean \u548c string \u3002 2. Nullable \u7c7b\u578b\u7684\u6027\u8d28 \u4ece\u5b57\u9762\u610f\u4e49\u4e0a\u770b Nullable \u5c31\u662f\u53ef\u7a7a\u7684\uff0c\u8a00\u4e0b\u4e4b\u610f\u5c31\u662f\u5e8f\u5217\u7c7b\u578b\u4e0d\u53d7\u7f3a\u5931\u503c\u7684\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u5728\u4e0a\u8ff0\u4e09\u4e2a Nullable \u7c7b\u578b\u4e2d\u5b58\u50a8\u7f3a\u5931\u503c\uff0c\u90fd\u4f1a\u8f6c\u4e3a pandas \u5185\u7f6e\u7684 pd.NA \uff1a In [ 60 ]: pd . Series ([ np . nan , 1 ], dtype = 'Int64' ) # \"i\"\u662f\u5927\u5199\u7684 Out [ 60 ]: 0 < NA > 1 1 dtype : Int64 In [ 61 ]: pd . Series ([ np . nan , True ], dtype = 'boolean' ) Out [ 61 ]: 0 < NA > 1 True dtype : boolean In [ 62 ]: pd . Series ([ np . nan , 'my_str' ], dtype = 'string' ) Out [ 62 ]: 0 < NA > 1 my_str dtype : string \u5728 Int \u7684\u5e8f\u5217\u4e2d\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u4f1a\u5c3d\u53ef\u80fd\u5730\u6210\u4e3a Nullable \u7684\u7c7b\u578b\uff1a In [ 63 ]: pd . Series ([ np . nan , 0 ], dtype = 'Int64' ) + 1 Out [ 63 ]: 0 < NA > 1 1 dtype : Int64 In [ 64 ]: pd . Series ([ np . nan , 0 ], dtype = 'Int64' ) == 0 Out [ 64 ]: 0 < NA > 1 True dtype : boolean In [ 65 ]: pd . Series ([ np . nan , 0 ], dtype = 'Int64' ) * 0.5 # \u53ea\u80fd\u662f\u6d6e\u70b9 Out [ 65 ]: 0 < NA > 1 0.0 dtype : Float64 \u5bf9\u4e8e boolean \u7c7b\u578b\u7684\u5e8f\u5217\u800c\u8a00\uff0c\u5176\u548c bool \u5e8f\u5217\u7684\u884c\u4e3a\u4e3b\u8981\u6709\u4e24\u70b9\u533a\u522b\uff1a \u7b2c\u4e00\u70b9\u662f\u5e26\u6709\u7f3a\u5931\u7684\u5e03\u5c14\u5217\u8868\u65e0\u6cd5\u8fdb\u884c\u7d22\u5f15\u5668\u4e2d\u7684\u9009\u62e9\uff0c\u800c boolean \u4f1a\u628a\u7f3a\u5931\u503c\u770b\u4f5c False \uff1a In [ 66 ]: s = pd . Series ([ 'a' , 'b' ]) In [ 67 ]: s_bool = pd . Series ([ True , np . nan ]) In [ 68 ]: s_boolean = pd . Series ([ True , np . nan ]) . astype ( 'boolean' ) # s[s_bool] # \u62a5\u9519 In [ 69 ]: s [ s_boolean ] Out [ 69 ]: 0 a dtype : object \u7b2c\u4e8c\u70b9\u662f\u5728\u8fdb\u884c\u903b\u8f91\u8fd0\u7b97\u65f6\uff0c bool \u7c7b\u578b\u5728\u7f3a\u5931\u5904\u8fd4\u56de\u7684\u6c38\u8fdc\u662f False \uff0c\u800c boolean \u4f1a\u6839\u636e\u903b\u8f91\u8fd0\u7b97\u662f\u5426\u80fd\u786e\u5b9a\u552f\u4e00\u7ed3\u679c\u6765\u8fd4\u56de\u76f8\u5e94\u7684\u503c\u3002\u90a3\u4ec0\u4e48\u53eb\u80fd\u5426\u786e\u5b9a\u552f\u4e00\u7ed3\u679c\u5462\uff1f\u4e3e\u4e2a\u7b80\u5355\u4f8b\u5b50\uff1a True | pd.NA \u4e2d\u65e0\u8bba\u7f3a\u5931\u503c\u4e3a\u4ec0\u4e48\u503c\uff0c\u5fc5\u7136\u8fd4\u56de True \uff1b False | pd.NA \u4e2d\u7684\u7ed3\u679c\u4f1a\u6839\u636e\u7f3a\u5931\u503c\u53d6\u503c\u7684\u4e0d\u540c\u800c\u53d8\u5316\uff0c\u6b64\u65f6\u8fd4\u56de pd.NA \uff1b False & pd.NA \u4e2d\u65e0\u8bba\u7f3a\u5931\u503c\u4e3a\u4ec0\u4e48\u503c\uff0c\u5fc5\u7136\u8fd4\u56de False \u3002 In [ 70 ]: s_boolean & True Out [ 70 ]: 0 True 1 < NA > dtype : boolean In [ 71 ]: s_boolean | True Out [ 71 ]: 0 True 1 True dtype : boolean In [ 72 ]: ~ s_boolean # \u53d6\u53cd\u64cd\u4f5c\u540c\u6837\u662f\u65e0\u6cd5\u552f\u4e00\u5730\u5224\u65ad\u7f3a\u5931\u7ed3\u679c Out [ 72 ]: 0 False 1 < NA > dtype : boolean \u5173\u4e8e string \u7c7b\u578b\u7684\u5177\u4f53\u6027\u8d28\u5c06\u5728\u4e0b\u4e00\u7ae0\u6587\u672c\u6570\u636e\u4e2d\u8fdb\u884c\u8ba8\u8bba\u3002 \u4e00\u822c\u5728\u5b9e\u9645\u6570\u636e\u5904\u7406\u65f6\uff0c\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u8bfb\u5165\u540e\uff0c\u5148\u901a\u8fc7 convert_dtypes \u8f6c\u4e3a Nullable \u7c7b\u578b\uff1a In [ 73 ]: df = pd . read_csv ( 'data/learn_pandas.csv' ) In [ 74 ]: df = df . convert_dtypes () In [ 75 ]: df . dtypes Out [ 75 ]: School string Grade string Name string Gender string Height Float64 Weight Int64 Transfer string Test_Number Int64 Test_Date string Time_Record string dtype : object 3. \u7f3a\u5931\u6570\u636e\u7684\u8ba1\u7b97\u548c\u5206\u7ec4 \u5f53\u8c03\u7528\u51fd\u6570 sum, prod \u4f7f\u7528\u52a0\u6cd5\u548c\u4e58\u6cd5\u7684\u65f6\u5019\uff0c\u7f3a\u5931\u6570\u636e\u7b49\u4ef7\u4e8e\u88ab\u5206\u522b\u89c6\u4f5c 0 \u548c 1\uff0c\u5373\u4e0d\u6539\u53d8\u539f\u6765\u7684\u8ba1\u7b97\u7ed3\u679c\uff1a In [ 76 ]: s = pd . Series ([ 2 , 3 , np . nan , 4 , 5 ]) In [ 77 ]: s . sum () Out [ 77 ]: 14.0 In [ 78 ]: s . prod () Out [ 78 ]: 120.0 \u5f53\u4f7f\u7528\u7d2f\u8ba1\u51fd\u6570\u65f6\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u7f3a\u5931\u503c\u6240\u5904\u7684\u4f4d\u7f6e\uff1a In [ 79 ]: s . cumsum () Out [ 79 ]: 0 2.0 1 5.0 2 NaN 3 9.0 4 14.0 dtype : float64 \u5f53\u8fdb\u884c\u5355\u4e2a\u6807\u91cf\u8fd0\u7b97\u7684\u65f6\u5019\uff0c\u9664\u4e86 np.nan ** 0 \u548c 1 ** np.nan \u8fd9\u4e24\u79cd\u60c5\u51b5\u4e3a\u786e\u5b9a\u7684\u503c\u4e4b\u5916\uff0c\u6240\u6709\u8fd0\u7b97\u7ed3\u679c\u5168\u4e3a\u7f3a\u5931\uff08 pd.NA \u7684\u884c\u4e3a\u4e0e\u6b64\u4e00\u81f4 \uff09\uff0c\u5e76\u4e14 np.nan \u5728\u6bd4\u8f83\u64cd\u4f5c\u65f6\u4e00\u5b9a\u8fd4\u56de False \uff0c\u800c pd.NA \u8fd4\u56de pd.NA \uff1a In [ 80 ]: np . nan == 0 Out [ 80 ]: False In [ 81 ]: pd . NA == 0 Out [ 81 ]: < NA > In [ 82 ]: np . nan > 0 Out [ 82 ]: False In [ 83 ]: pd . NA > 0 Out [ 83 ]: < NA > In [ 84 ]: np . nan + 1 Out [ 84 ]: nan In [ 85 ]: np . log ( np . nan ) Out [ 85 ]: nan In [ 86 ]: np . add ( np . nan , 1 ) Out [ 86 ]: nan In [ 87 ]: np . nan ** 0 Out [ 87 ]: 1.0 In [ 88 ]: pd . NA ** 0 Out [ 88 ]: 1 In [ 89 ]: 1 ** np . nan Out [ 89 ]: 1.0 In [ 90 ]: 1 ** pd . NA Out [ 90 ]: 1 \u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c diff, pct_change \u8fd9\u4e24\u4e2a\u51fd\u6570\u867d\u7136\u529f\u80fd\u76f8\u4f3c\uff0c\u4f46\u662f\u5bf9\u4e8e\u7f3a\u5931\u7684\u5904\u7406\u4e0d\u540c\uff0c\u524d\u8005\u51e1\u662f\u53c2\u4e0e\u7f3a\u5931\u8ba1\u7b97\u7684\u90e8\u5206\u5168\u90e8\u8bbe\u4e3a\u4e86\u7f3a\u5931\u503c\uff0c\u800c\u540e\u8005\u7f3a\u5931\u503c\u4f4d\u7f6e\u4f1a\u88ab\u8bbe\u4e3a 0% \u7684\u53d8\u5316\u7387\uff1a In [ 91 ]: s . diff () Out [ 91 ]: 0 NaN 1 1.0 2 NaN 3 NaN 4 1.0 dtype : float64 In [ 92 ]: s . pct_change () Out [ 92 ]: 0 NaN 1 0.500000 2 0.000000 3 0.333333 4 0.250000 dtype : float64 \u5bf9\u4e8e\u4e00\u4e9b\u51fd\u6570\u800c\u8a00\uff0c\u7f3a\u5931\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u7c7b\u522b\u5904\u7406\uff0c\u4f8b\u5982\u5728 groupby, get_dummies \u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u76f8\u5e94\u7684\u53c2\u6570\u6765\u8fdb\u884c\u589e\u52a0\u7f3a\u5931\u7c7b\u522b\uff1a In [ 93 ]: df_nan = pd . DataFrame ({ 'category' :[ 'a' , 'a' , 'b' , np . nan , np . nan ], .... : 'value' :[ 1 , 3 , 5 , 7 , 9 ]}) .... : In [ 94 ]: df_nan Out [ 94 ]: category value 0 a 1 1 a 3 2 b 5 3 NaN 7 4 NaN 9 In [ 95 ]: df_nan . groupby ( 'category' , .... : dropna = False )[ 'value' ] . mean () # pandas\u7248\u672c\u5927\u4e8e1.1.0 .... : Out [ 95 ]: category a 2 b 5 NaN 8 Name : value , dtype : int64 In [ 96 ]: pd . get_dummies ( df_nan . category , dummy_na = True ) Out [ 96 ]: a b NaN 0 1 0 0 1 1 0 0 2 0 1 0 3 0 0 1 4 0 0 1 \u56db\u3001\u7ec3\u4e60 Ex1\uff1a\u7f3a\u5931\u503c\u4e0e\u7c7b\u522b\u7684\u76f8\u5173\u6027\u68c0\u9a8c \u5728\u6570\u636e\u5904\u7406\u4e2d\uff0c\u542b\u6709\u8fc7\u591a\u7f3a\u5931\u503c\u7684\u5217\u5f80\u5f80\u4f1a\u88ab\u5220\u9664\uff0c\u9664\u975e\u7f3a\u5931\u60c5\u51b5\u4e0e\u6807\u7b7e\u5f3a\u76f8\u5173\u3002\u4e0b\u9762\u6709\u4e00\u4efd\u5173\u4e8e\u4e8c\u5206\u7c7b\u95ee\u9898\u7684\u6570\u636e\u96c6\uff0c\u5176\u4e2d X_1, X_2 \u4e3a\u7279\u5f81\u53d8\u91cf\uff0c y \u4e3a\u4e8c\u5206\u7c7b\u6807\u7b7e\u3002 In [ 97 ]: df = pd . read_csv ( 'data/missing_chi.csv' ) In [ 98 ]: df . head () Out [ 98 ]: X_1 X_2 y 0 NaN NaN 0 1 NaN NaN 0 2 NaN NaN 0 3 43.0 NaN 0 4 NaN NaN 0 In [ 99 ]: df . isna () . mean () Out [ 99 ]: X_1 0.855 X_2 0.894 y 0.000 dtype : float64 In [ 100 ]: df . y . value_counts ( normalize = True ) Out [ 100 ]: 0 0.918 1 0.082 Name : y , dtype : float64 \u4e8b\u5b9e\u4e0a\uff0c\u6709\u65f6\u7f3a\u5931\u503c\u51fa\u73b0\u6216\u8005\u4e0d\u51fa\u73b0\u672c\u8eab\u5c31\u662f\u4e00\u79cd\u7279\u5f81\uff0c\u5e76\u4e14\u5728\u4e00\u4e9b\u573a\u5408\u4e0b\u53ef\u80fd\u4e0e\u6807\u7b7e\u7684\u6b63\u8d1f\u662f\u76f8\u5173\u7684\u3002\u5173\u4e8e\u7f3a\u5931\u51fa\u73b0\u4e0e\u5426\u548c\u6807\u7b7e\u7684\u6b63\u8d1f\u6027\uff0c\u5728\u7edf\u8ba1\u5b66\u4e2d\u53ef\u4ee5\u5229\u7528\u5361\u65b9\u68c0\u9a8c\u6765\u65ad\u8a00\u5b83\u4eec\u662f\u5426\u5b58\u5728\u76f8\u5173\u6027\u3002\u6309\u7167\u7279\u5f81\u7f3a\u5931\u7684\u6b63\u4f8b\u3001\u7279\u5f81\u7f3a\u5931\u7684\u8d1f\u4f8b\u3001\u7279\u5f81\u4e0d\u7f3a\u5931\u7684\u6b63\u4f8b\u3001\u7279\u5f81\u4e0d\u7f3a\u5931\u7684\u8d1f\u4f8b\uff0c\u53ef\u4ee5\u5206\u4e3a\u56db\u79cd\u60c5\u51b5\uff0c\u8bbe\u5b83\u4eec\u5206\u522b\u5bf9\u5e94\u7684\u6837\u4f8b\u6570\u4e3a \u3002\u5047\u82e5\u5b83\u4eec\u662f\u4e0d\u76f8\u5173\u7684\uff0c\u90a3\u4e48\u7279\u5f81\u7f3a\u5931\u4e2d\u6b63\u4f8b\u7684\u7406\u8bba\u503c\uff0c\u5c31\u5e94\u8be5\u63a5\u8fd1\u4e8e\u7279\u5f81\u7f3a\u5931\u603b\u6570 \u603b\u4f53\u6b63\u4f8b\u7684\u6bd4\u4f8b\uff0c\u5373\uff1a \u5176\u4ed6\u7684\u4e09\u79cd\u60c5\u51b5\u540c\u7406\u3002\u73b0\u5c06\u5b9e\u9645\u503c\u548c\u7406\u8bba\u503c\u5206\u522b\u8bb0\u4f5c \uff0c\u90a3\u4e48\u5e0c\u671b\u4e0b\u9762\u7684\u7edf\u8ba1\u91cf\u8d8a\u5c0f\u8d8a\u597d\uff0c\u5373\u4ee3\u8868\u5b9e\u9645\u503c\u63a5\u8fd1\u4e0d\u76f8\u5173\u60c5\u51b5\u7684\u7406\u8bba\u503c\uff1a \u53ef\u4ee5\u8bc1\u660e\u4e0a\u9762\u7684\u7edf\u8ba1\u91cf\u8fd1\u4f3c\u670d\u4ece\u81ea\u7531\u5ea6\u4e3a \u7684\u5361\u65b9\u5206\u5e03\uff0c\u5373 \u3002\u56e0\u6b64\uff0c\u53ef\u901a\u8fc7\u8ba1\u7b97 \u7684\u6982\u7387\u6765\u8fdb\u884c\u76f8\u5173\u6027\u7684\u5224\u522b\uff0c\u4e00\u822c\u8ba4\u4e3a\u5f53\u6b64\u6982\u7387\u5c0f\u4e8e \u65f6\u7f3a\u5931\u60c5\u51b5\u4e0e\u6807\u7b7e\u6b63\u8d1f\u5b58\u5728\u76f8\u5173\u5173\u7cfb\uff0c\u5373\u4e0d\u76f8\u5173\u6761\u4ef6\u4e0b\u7684\u7406\u8bba\u503c\u4e0e\u5b9e\u9645\u503c\u76f8\u5dee\u8f83\u5927\u3002 \u4e0a\u9762\u6240\u8bf4\u7684\u6982\u7387\u5373\u4e3a\u7edf\u8ba1\u5b66\u4e0a\u5173\u4e8e \u5217\u8054\u8868\u68c0\u9a8c\u95ee\u9898\u7684 \u503c\uff0c \u5b83\u53ef\u4ee5\u901a\u8fc7 scipy.stats.chi2.sf(S, 1) \u5f97\u5230\u3002\u8bf7\u6839\u636e\u4e0a\u9762\u7684\u6750\u6599\uff0c\u5206\u522b\u5bf9 X_1, X_2 \u5217\u8fdb\u884c\u68c0\u9a8c\u3002 Ex2\uff1a\u7528\u56de\u5f52\u6a21\u578b\u89e3\u51b3\u5206\u7c7b\u95ee\u9898 KNN \u662f\u4e00\u79cd\u76d1\u7763\u5f0f\u5b66\u4e60\u6a21\u578b\uff0c\u65e2\u53ef\u4ee5\u89e3\u51b3\u56de\u5f52\u95ee\u9898\uff0c\u53c8\u53ef\u4ee5\u89e3\u51b3\u5206\u7c7b\u95ee\u9898\u3002\u5bf9\u4e8e\u5206\u7c7b\u53d8\u91cf\uff0c\u5229\u7528 KNN \u5206\u7c7b\u6a21\u578b\u53ef\u4ee5\u5b9e\u73b0\u5176\u7f3a\u5931\u503c\u7684\u63d2\u8865\uff0c\u601d\u8def\u662f\u5ea6\u91cf\u7f3a\u5931\u6837\u672c\u7684\u7279\u5f81\u4e0e\u6240\u6709\u5176\u4ed6\u6837\u672c\u7279\u5f81\u7684\u8ddd\u79bb\uff0c\u5f53\u7ed9\u5b9a\u4e86\u6a21\u578b\u53c2\u6570 n_neighbors=n \u65f6\uff0c\u8ba1\u7b97\u79bb\u8be5\u6837\u672c\u8ddd\u79bb\u6700\u8fd1\u7684 \u4e2a\u6837\u672c\u70b9\u4e2d\u6700\u591a\u7684\u90a3\u4e2a\u7c7b\u522b\uff0c\u5e76\u628a\u8fd9\u4e2a\u7c7b\u522b\u4f5c\u4e3a\u8be5\u6837\u672c\u7684\u7f3a\u5931\u9884\u6d4b\u7c7b\u522b\uff0c\u5177\u4f53\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u672a\u77e5\u7684\u7c7b\u522b\u88ab\u9884\u6d4b\u4e3a\u9ec4\u8272\uff1a \u4e0a\u9762\u6709\u8272\u70b9\u7684\u7279\u5f81\u6570\u636e\u63d0\u4f9b\u5982\u4e0b\uff1a In [ 101 ]: df = pd . read_excel ( 'data/color.xlsx' ) In [ 102 ]: df . head ( 3 ) Out [ 102 ]: X1 X2 Color 0 - 2.5 2.8 Blue 1 - 1.5 1.8 Blue 2 - 0.8 2.8 Blue \u5df2\u77e5\u5f85\u9884\u6d4b\u7684\u6837\u672c\u70b9\u4e3a \uff0c\u90a3\u4e48\u9884\u6d4b\u7c7b\u522b\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 103 ]: from sklearn.neighbors import KNeighborsClassifier In [ 104 ]: clf = KNeighborsClassifier ( n_neighbors = 6 ) In [ 105 ]: clf . fit ( df . iloc [:,: 2 ] . values , df . Color . values ) Out [ 105 ]: KNeighborsClassifier ( n_neighbors = 6 ) In [ 106 ]: clf . predict ([[ 0.8 , - 0.2 ]]) Out [ 106 ]: array ([ 'Yellow' ], dtype = object ) \u5bf9\u4e8e\u56de\u5f52\u95ee\u9898\u800c\u8a00\uff0c\u9700\u8981\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u6570\u503c\uff0c\u56e0\u6b64\u9884\u6d4b\u503c\u7531\u6700\u8fd1\u7684 \u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u5e73\u5747\u503c\u83b7\u5f97\u3002\u8bf7\u628a\u4e0a\u9762\u7684\u8fd9\u4e2a\u5206\u7c7b\u95ee\u9898\u8f6c\u5316\u4e3a\u56de\u5f52\u95ee\u9898\uff0c\u4ec5\u4f7f\u7528 KNeighborsRegressor \u6765\u5b8c\u6210\u4e0a\u8ff0\u7684 KNeighborsClassifier \u529f\u80fd\u3002 \u8bf7\u6839\u636e\u7b2c 1 \u95ee\u4e2d\u7684\u65b9\u6cd5\uff0c\u5bf9 audit \u6570\u636e\u96c6\u4e2d\u7684 Employment \u53d8\u91cf\u8fdb\u884c\u7f3a\u5931\u503c\u63d2\u8865\u3002 In [ 107 ]: df = pd . read_csv ( 'data/audit.csv' ) In [ 108 ]: df . head ( 3 ) Out [ 108 ]: ID Age Employment Marital Income Gender Hours 0 1004641 38 Private Unmarried 81838.00 Female 72 1 1010229 35 Private Absent 72099.00 Male 30 2 1024587 32 Private Divorced 154676.74 Male 40","title":"\u4e03\u3001\u7f3a\u5931\u6570\u636e"},{"location":"pandas/part7/#_1","text":"","title":"\u4e00\u3001\u7f3a\u5931\u503c\u7684\u7edf\u8ba1\u548c\u5220\u9664"},{"location":"pandas/part7/#1","text":"\u7f3a\u5931\u6570\u636e\u53ef\u4ee5\u4f7f\u7528 isna \u6216 isnull \uff08\u4e24\u4e2a\u51fd\u6570\u6ca1\u6709\u533a\u522b\uff09\u6765\u67e5\u770b\u6bcf\u4e2a\u5355\u5143\u683c\u662f\u5426\u7f3a\u5931\uff0c\u7ed3\u5408 mean \u53ef\u4ee5\u8ba1\u7b97\u51fa\u6bcf\u5217\u7f3a\u5931\u503c\u7684\u6bd4\u4f8b\uff1a In [ 3 ]: df = pd . read_csv ( 'data/learn_pandas.csv' , ... : usecols = [ 'Grade' , 'Name' , 'Gender' , 'Height' , ... : 'Weight' , 'Transfer' ]) ... : In [ 4 ]: df . isna () . head () Out [ 4 ]: Grade Name Gender Height Weight Transfer 0 False False False False False False 1 False False False False False False 2 False False False False False False 3 False False False True False False 4 False False False False False False In [ 5 ]: df . isna () . mean () # \u67e5\u770b\u7f3a\u5931\u7684\u6bd4\u4f8b Out [ 5 ]: Grade 0.000 Name 0.000 Gender 0.000 Height 0.085 Weight 0.055 Transfer 0.060 dtype : float64 \u5982\u679c\u60f3\u8981\u67e5\u770b\u67d0\u4e00\u5217\u7f3a\u5931\u6216\u8005\u975e\u7f3a\u5931\u7684\u884c\uff0c\u53ef\u4ee5\u5229\u7528 Series \u4e0a\u7684 isna \u6216\u8005 notna \u8fdb\u884c\u5e03\u5c14\u7d22\u5f15\u3002\u4f8b\u5982\uff0c\u67e5\u770b\u8eab\u9ad8\u7f3a\u5931\u7684\u884c\uff1a In [ 6 ]: df [ df . Height . isna ()] . head () Out [ 6 ]: Grade Name Gender Height Weight Transfer 3 Sophomore Xiaojuan Sun Female NaN 41.0 N 12 Senior Peng You Female NaN 48.0 NaN 26 Junior Yanli You Female NaN 48.0 N 36 Freshman Xiaojuan Qin Male NaN 79.0 Y 60 Freshman Yanpeng Lv Male NaN 65.0 N \u5982\u679c\u60f3\u8981\u540c\u65f6\u5bf9\u51e0\u4e2a\u5217\uff0c\u68c0\u7d22\u51fa\u5168\u90e8\u4e3a\u7f3a\u5931\u6216\u8005\u81f3\u5c11\u6709\u4e00\u4e2a\u7f3a\u5931\u6216\u8005\u6ca1\u6709\u7f3a\u5931\u7684\u884c\uff0c\u53ef\u4ee5\u4f7f\u7528 isna, notna \u548c any, all \u7684\u7ec4\u5408\u3002\u4f8b\u5982\uff0c\u5bf9\u8eab\u9ad8\u3001\u4f53\u91cd\u548c\u8f6c\u7cfb\u60c5\u51b5\u8fd9 3 \u5217\u5206\u522b\u8fdb\u884c\u8fd9\u4e09\u79cd\u60c5\u51b5\u7684\u68c0\u7d22\uff1a In [ 7 ]: sub_set = df [[ 'Height' , 'Weight' , 'Transfer' ]] In [ 8 ]: df [ sub_set . isna () . all ( 1 )] # \u5168\u90e8\u7f3a\u5931 Out [ 8 ]: Grade Name Gender Height Weight Transfer 102 Junior Chengli Zhao Male NaN NaN NaN In [ 9 ]: df [ sub_set . isna () . any ( 1 )] . head () # \u81f3\u5c11\u6709\u4e00\u4e2a\u7f3a\u5931 Out [ 9 ]: Grade Name Gender Height Weight Transfer 3 Sophomore Xiaojuan Sun Female NaN 41.0 N 9 Junior Juan Xu Female 164.8 NaN N 12 Senior Peng You Female NaN 48.0 NaN 21 Senior Xiaopeng Shen Male 166.0 62.0 NaN 26 Junior Yanli You Female NaN 48.0 N In [ 10 ]: df [ sub_set . notna () . all ( 1 )] . head () # \u6ca1\u6709\u7f3a\u5931 Out [ 10 ]: Grade Name Gender Height Weight Transfer 0 Freshman Gaopeng Yang Female 158.9 46.0 N 1 Freshman Changqiang You Male 166.5 70.0 N 2 Senior Mei Sun Male 188.9 89.0 N 4 Sophomore Gaojuan You Male 174.0 74.0 N 5 Freshman Xiaoli Qian Female 158.0 51.0 N","title":"1. \u7f3a\u5931\u4fe1\u606f\u7684\u7edf\u8ba1"},{"location":"pandas/part7/#2","text":"\u6570\u636e\u5904\u7406\u4e2d\u7ecf\u5e38\u9700\u8981\u6839\u636e\u7f3a\u5931\u503c\u7684\u5927\u5c0f\u3001\u6bd4\u4f8b\u6216\u5176\u4ed6\u7279\u5f81\u6765\u8fdb\u884c\u884c\u6837\u672c\u6216\u5217\u7279\u5f81\u7684\u5220\u9664\uff0c pandas \u4e2d\u63d0\u4f9b\u4e86 dropna \u51fd\u6570\u6765\u8fdb\u884c\u64cd\u4f5c\u3002 dropna \u7684\u4e3b\u8981\u53c2\u6570\u4e3a\u8f74\u65b9\u5411 axis \uff08\u9ed8\u8ba4\u4e3a 0\uff0c\u5373\u5220\u9664\u884c\uff09\u3001\u5220\u9664\u65b9\u5f0f how \u3001\u5220\u9664\u7684\u975e\u7f3a\u5931\u503c\u4e2a\u6570\u9608\u503c thresh \uff08 \u975e\u7f3a\u5931\u503c \u6ca1\u6709\u8fbe\u5230\u8fd9\u4e2a\u6570\u91cf\u7684\u76f8\u5e94\u7ef4\u5ea6\u4f1a\u88ab\u5220\u9664\uff09\u3001\u5907\u9009\u7684\u5220\u9664\u5b50\u96c6 subset \uff0c\u5176\u4e2d how \u4e3b\u8981\u6709 any \u548c all \u4e24\u79cd\u53c2\u6570\u53ef\u4ee5\u9009\u62e9\u3002 \u4f8b\u5982\uff0c\u5220\u9664\u8eab\u9ad8\u4f53\u91cd\u81f3\u5c11\u6709\u4e00\u4e2a\u7f3a\u5931\u7684\u884c\uff1a In [ 11 ]: res = df . dropna ( how = 'any' , subset = [ 'Height' , 'Weight' ]) In [ 12 ]: res . shape Out [ 12 ]: ( 174 , 6 ) \u4f8b\u5982\uff0c\u5220\u9664\u8d85\u8fc7 15 \u4e2a\u7f3a\u5931\u503c\u7684\u5217\uff1a In [ 13 ]: res = df . dropna ( 1 , thresh = df . shape [ 0 ] - 15 ) # \u8eab\u9ad8\u88ab\u5220\u9664 In [ 14 ]: res . head () Out [ 14 ]: Grade Name Gender Weight Transfer 0 Freshman Gaopeng Yang Female 46.0 N 1 Freshman Changqiang You Male 70.0 N 2 Senior Mei Sun Male 89.0 N 3 Sophomore Xiaojuan Sun Female 41.0 N 4 Sophomore Gaojuan You Male 74.0 N \u5f53\u7136\uff0c\u4e0d\u7528 dropna \u540c\u6837\u662f\u53ef\u884c\u7684\uff0c\u4f8b\u5982\u4e0a\u8ff0\u7684\u4e24\u4e2a\u64cd\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e03\u5c14\u7d22\u5f15\u6765\u5b8c\u6210\uff1a In [ 15 ]: res = df . loc [ df [[ 'Height' , 'Weight' ]] . notna () . all ( 1 )] In [ 16 ]: res . shape Out [ 16 ]: ( 174 , 6 ) In [ 17 ]: res = df . loc [:, ~ ( df . isna () . sum () > 15 )] In [ 18 ]: res . head () Out [ 18 ]: Grade Name Gender Weight Transfer 0 Freshman Gaopeng Yang Female 46.0 N 1 Freshman Changqiang You Male 70.0 N 2 Senior Mei Sun Male 89.0 N 3 Sophomore Xiaojuan Sun Female 41.0 N 4 Sophomore Gaojuan You Male 74.0 N","title":"2. \u7f3a\u5931\u4fe1\u606f\u7684\u5220\u9664"},{"location":"pandas/part7/#_2","text":"","title":"\u4e8c\u3001\u7f3a\u5931\u503c\u7684\u586b\u5145\u548c\u63d2\u503c"},{"location":"pandas/part7/#1-fillna","text":"\u5728 fillna \u4e2d\u6709\u4e09\u4e2a\u53c2\u6570\u662f\u5e38\u7528\u7684\uff1a value, method, limit \u3002\u5176\u4e2d\uff0c value \u4e3a\u586b\u5145\u503c\uff0c\u53ef\u4ee5\u662f\u6807\u91cf\uff0c\u4e5f\u53ef\u4ee5\u662f\u7d22\u5f15\u5230\u5143\u7d20\u7684\u5b57\u5178\u6620\u5c04\uff1b method \u4e3a\u586b\u5145\u65b9\u6cd5\uff0c\u6709\u7528\u524d\u9762\u7684\u5143\u7d20\u586b\u5145 ffill \u548c\u7528\u540e\u9762\u7684\u5143\u7d20\u586b\u5145 bfill \u4e24\u79cd\u7c7b\u578b\uff0c limit \u53c2\u6570\u8868\u793a\u8fde\u7eed\u7f3a\u5931\u503c\u7684\u6700\u5927\u586b\u5145\u6b21\u6570\u3002 \u4e0b\u9762\u6784\u9020\u4e00\u4e2a\u7b80\u5355\u7684 Series \u6765\u8bf4\u660e\u7528\u6cd5\uff1a In [ 19 ]: s = pd . Series ([ np . nan , 1 , np . nan , np . nan , 2 , np . nan ], .... : list ( 'aaabcd' )) .... : In [ 20 ]: s Out [ 20 ]: a NaN a 1.0 a NaN b NaN c 2.0 d NaN dtype : float64 In [ 21 ]: s . fillna ( method = 'ffill' ) # \u7528\u524d\u9762\u7684\u503c\u5411\u540e\u586b\u5145 Out [ 21 ]: a NaN a 1.0 a 1.0 b 1.0 c 2.0 d 2.0 dtype : float64 In [ 22 ]: s . fillna ( method = 'ffill' , limit = 1 ) # \u8fde\u7eed\u51fa\u73b0\u7684\u7f3a\u5931\uff0c\u6700\u591a\u586b\u5145\u4e00\u6b21 Out [ 22 ]: a NaN a 1.0 a 1.0 b NaN c 2.0 d 2.0 dtype : float64 In [ 23 ]: s . fillna ( s . mean ()) # value\u4e3a\u6807\u91cf Out [ 23 ]: a 1.5 a 1.0 a 1.5 b 1.5 c 2.0 d 1.5 dtype : float64 In [ 24 ]: s . fillna ({ 'a' : 100 , 'd' : 200 }) # \u901a\u8fc7\u7d22\u5f15\u6620\u5c04\u586b\u5145\u7684\u503c Out [ 24 ]: a 100.0 a 1.0 a 100.0 b NaN c 2.0 d 200.0 dtype : float64 \u6709\u65f6\u4e3a\u4e86\u66f4\u52a0\u5408\u7406\u5730\u586b\u5145\uff0c\u9700\u8981\u5148\u8fdb\u884c\u5206\u7ec4\u540e\u518d\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u6839\u636e\u5e74\u7ea7\u8fdb\u884c\u8eab\u9ad8\u7684\u5747\u503c\u586b\u5145\uff1a In [ 25 ]: df . groupby ( 'Grade' )[ 'Height' ] . transform ( .... : lambda x : x . fillna ( x . mean ())) . head () .... : Out [ 25 ]: 0 158.900000 1 166.500000 2 188.900000 3 163.075862 4 174.000000 Name : Height , dtype : float64 \u7ec3\u4e00\u7ec3 \u5bf9\u4e00\u4e2a\u5e8f\u5217\u4ee5\u5982\u4e0b\u89c4\u5219\u586b\u5145\u7f3a\u5931\u503c\uff1a\u5982\u679c\u5355\u72ec\u51fa\u73b0\u7684\u7f3a\u5931\u503c\uff0c\u5c31\u7528\u524d\u540e\u5747\u503c\u586b\u5145\uff0c\u5982\u679c\u8fde\u7eed\u51fa\u73b0\u7684\u7f3a\u5931\u503c\u5c31\u4e0d\u586b\u5145\uff0c\u5373\u5e8f\u5217 [1, NaN, 3, NaN, NaN] \u586b\u5145\u540e\u4e3a[1, 2, 3, NaN, NaN]\uff0c\u8bf7\u5229\u7528 fillna \u51fd\u6570\u5b9e\u73b0\u3002\uff08\u63d0\u793a\uff1a\u5229\u7528 limit \u53c2\u6570\uff09","title":"1. \u5229\u7528 fillna \u8fdb\u884c\u586b\u5145"},{"location":"pandas/part7/#2_1","text":"\u5728\u5173\u4e8e interpolate \u51fd\u6570\u7684 \u6587\u6863 \u63cf\u8ff0\u4e2d\uff0c\u5217\u4e3e\u4e86\u8bb8\u591a\u63d2\u503c\u6cd5\uff0c\u5305\u62ec\u4e86\u5927\u91cf Scipy \u4e2d\u7684\u65b9\u6cd5\u3002\u7531\u4e8e\u5f88\u591a\u63d2\u503c\u65b9\u6cd5\u6d89\u53ca\u5230\u6bd4\u8f83\u590d\u6742\u7684\u6570\u5b66\u77e5\u8bc6\uff0c\u56e0\u6b64\u8fd9\u91cc\u53ea\u8ba8\u8bba\u6bd4\u8f83\u5e38\u7528\u4e14\u7b80\u5355\u7684\u4e09\u7c7b\u60c5\u51b5\uff0c\u5373\u7ebf\u6027\u63d2\u503c\u3001\u6700\u8fd1\u90bb\u63d2\u503c\u548c\u7d22\u5f15\u63d2\u503c\u3002 \u5bf9\u4e8e interpolate \u800c\u8a00\uff0c\u9664\u4e86\u63d2\u503c\u65b9\u6cd5\uff08\u9ed8\u8ba4\u4e3a linear \u7ebf\u6027\u63d2\u503c\uff09\u4e4b\u5916\uff0c\u6709\u4e0e fillna \u7c7b\u4f3c\u7684\u4e24\u4e2a\u5e38\u7528\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u63a7\u5236\u65b9\u5411\u7684 limit_direction \uff0c\u53e6\u4e00\u4e2a\u662f\u63a7\u5236\u6700\u5927\u8fde\u7eed\u7f3a\u5931\u503c\u63d2\u503c\u4e2a\u6570\u7684 limit \u3002\u5176\u4e2d\uff0c\u9650\u5236\u63d2\u503c\u7684\u65b9\u5411\u9ed8\u8ba4\u4e3a forward \uff0c\u8fd9\u4e0e fillna \u7684 method \u4e2d\u7684 ffill \u662f\u7c7b\u4f3c\u7684\uff0c\u82e5\u60f3\u8981\u540e\u5411\u9650\u5236\u63d2\u503c\u6216\u8005\u53cc\u5411\u9650\u5236\u63d2\u503c\u53ef\u4ee5\u6307\u5b9a\u4e3a backward \u6216 both \u3002 In [ 26 ]: s = pd . Series ([ np . nan , np . nan , 1 , .... : np . nan , np . nan , np . nan , .... : 2 , np . nan , np . nan ]) .... : In [ 27 ]: s . values Out [ 27 ]: array ([ nan , nan , 1. , nan , nan , nan , 2. , nan , nan ]) \u4f8b\u5982\uff0c\u5728\u9ed8\u8ba4\u7ebf\u6027\u63d2\u503c\u6cd5\u4e0b\u5206\u522b\u8fdb\u884c backward \u548c\u53cc\u5411\u9650\u5236\u63d2\u503c\uff0c\u540c\u65f6\u9650\u5236\u6700\u5927\u8fde\u7eed\u6761\u6570\u4e3a 1\uff1a In [ 28 ]: res = s . interpolate ( limit_direction = 'backward' , limit = 1 ) In [ 29 ]: res . values Out [ 29 ]: array ([ nan , 1. , 1. , nan , nan , 1.75 , 2. , nan , nan ]) In [ 30 ]: res = s . interpolate ( limit_direction = 'both' , limit = 1 ) In [ 31 ]: res . values Out [ 31 ]: array ([ nan , 1. , 1. , 1.25 , nan , 1.75 , 2. , 2. , nan ]) \u7b2c\u4e8c\u79cd\u5e38\u89c1\u7684\u63d2\u503c\u662f\u6700\u8fd1\u90bb\u63d2\u8865\uff0c\u5373\u7f3a\u5931\u503c\u7684\u5143\u7d20\u548c\u79bb\u5b83\u6700\u8fd1\u7684\u975e\u7f3a\u5931\u503c\u5143\u7d20\u4e00\u6837\uff1a In [ 32 ]: s . interpolate ( 'nearest' ) . values Out [ 32 ]: array ([ nan , nan , 1. , 1. , 1. , 2. , 2. , nan , nan ]) \u6700\u540e\u6765\u4ecb\u7ecd\u7d22\u5f15\u63d2\u503c\uff0c\u5373\u6839\u636e\u7d22\u5f15\u5927\u5c0f\u8fdb\u884c\u7ebf\u6027\u63d2\u503c\u3002\u4f8b\u5982\uff0c\u6784\u9020\u4e0d\u7b49\u95f4\u8ddd\u7684\u7d22\u5f15\u8fdb\u884c\u6f14\u793a\uff1a In [ 33 ]: s = pd . Series ([ 0 , np . nan , 10 ], index = [ 0 , 1 , 10 ]) In [ 34 ]: s Out [ 34 ]: 0 0.0 1 NaN 10 10.0 dtype : float64 In [ 35 ]: s . interpolate () # \u9ed8\u8ba4\u7684\u7ebf\u6027\u63d2\u503c\uff0c\u7b49\u4ef7\u4e8e\u8ba1\u7b97\u4e2d\u70b9\u7684\u503c Out [ 35 ]: 0 0.0 1 5.0 10 10.0 dtype : float64 In [ 36 ]: s . interpolate ( method = 'index' ) # \u548c\u7d22\u5f15\u6709\u5173\u7684\u7ebf\u6027\u63d2\u503c\uff0c\u8ba1\u7b97\u76f8\u5e94\u7d22\u5f15\u5927\u5c0f\u5bf9\u5e94\u7684\u503c Out [ 36 ]: 0 0.0 1 1.0 10 10.0 dtype : float64 \u540c\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5bf9\u4e8e\u65f6\u95f4\u6233\u7d22\u5f15\u4e5f\u662f\u53ef\u4ee5\u4f7f\u7528\u7684\uff0c\u6709\u5173\u65f6\u95f4\u5e8f\u5217\u7684\u5176\u4ed6\u8bdd\u9898\u4f1a\u5728\u7b2c\u5341\u7ae0\u8fdb\u884c\u8ba8\u8bba\uff0c\u8fd9\u91cc\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a In [ 37 ]: s = pd . Series ([ 0 , np . nan , 10 ], .... : index = pd . to_datetime ([ '20200101' , .... : '20200102' , .... : '20200111' ])) .... : In [ 38 ]: s Out [ 38 ]: 2020 - 01 - 01 0.0 2020 - 01 - 02 NaN 2020 - 01 - 11 10.0 dtype : float64 In [ 39 ]: s . interpolate () Out [ 39 ]: 2020 - 01 - 01 0.0 2020 - 01 - 02 5.0 2020 - 01 - 11 10.0 dtype : float64 In [ 40 ]: s . interpolate ( method = 'index' ) Out [ 40 ]: 2020 - 01 - 01 0.0 2020 - 01 - 02 1.0 2020 - 01 - 11 10.0 dtype : float64 \u5173\u4e8e polynomial \u548c spline \u63d2\u503c\u7684\u6ce8\u610f\u4e8b\u9879 \u5728 interpolate \u4e2d\u5982\u679c\u9009\u7528 polynomial \u7684\u63d2\u503c\u65b9\u6cd5\uff0c\u5b83\u5185\u90e8\u8c03\u7528\u7684\u662f scipy.interpolate.interp1d(*,*,kind=order) \uff0c\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8\u8c03\u7528\u7684\u662f make_interp_spline \u65b9\u6cd5\uff0c\u56e0\u6b64\u5176\u5b9e\u662f\u6837\u6761\u63d2\u503c\u800c\u4e0d\u662f\u7c7b\u4f3c\u4e8e numpy \u4e2d\u7684 polyfit \u591a\u9879\u5f0f\u62df\u5408\u63d2\u503c\uff1b\u800c\u5f53\u9009\u7528 spline \u65b9\u6cd5\u65f6\uff0c pandas \u8c03\u7528\u7684\u662f scipy.interpolate.UnivariateSpline \u800c\u4e0d\u662f\u666e\u901a\u7684\u6837\u6761\u63d2\u503c\u3002\u8fd9\u4e00\u90e8\u5206\u7684\u6587\u6863\u63cf\u8ff0\u6bd4\u8f83\u6df7\u4e71\uff0c\u800c\u4e14\u8fd9\u79cd\u53c2\u6570\u7684\u8bbe\u8ba1\u4e5f\u662f\u4e0d\u5408\u7406\u7684\uff0c\u5f53\u4f7f\u7528\u8fd9\u4e24\u7c7b\u63d2\u503c\u65b9\u6cd5\u65f6\uff0c\u7528\u6237\u4e00\u5b9a\u8981\u5c0f\u5fc3\u8c28\u614e\u5730\u6839\u636e\u81ea\u5df1\u7684\u5b9e\u9645\u9700\u6c42\u9009\u53d6\u6070\u5f53\u7684\u63d2\u503c\u65b9\u6cd5\u3002","title":"2. \u63d2\u503c\u51fd\u6570"},{"location":"pandas/part7/#nullable","text":"","title":"\u4e09\u3001Nullable \u7c7b\u578b"},{"location":"pandas/part7/#1_1","text":"\u5728 python \u4e2d\u7684\u7f3a\u5931\u503c\u7528 None \u8868\u793a\uff0c\u8be5\u5143\u7d20\u9664\u4e86\u7b49\u4e8e\u81ea\u5df1\u672c\u8eab\u4e4b\u5916\uff0c\u4e0e\u5176\u4ed6\u4efb\u4f55\u5143\u7d20\u4e0d\u76f8\u7b49\uff1a In [ 41 ]: None == None Out [ 41 ]: True In [ 42 ]: None == False Out [ 42 ]: False In [ 43 ]: None == [] Out [ 43 ]: False In [ 44 ]: None == '' Out [ 44 ]: False \u5728 numpy \u4e2d\u5229\u7528 np.nan \u6765\u8868\u793a\u7f3a\u5931\u503c\uff0c\u8be5\u5143\u7d20\u9664\u4e86\u4e0d\u548c\u5176\u4ed6\u4efb\u4f55\u5143\u7d20\u76f8\u7b49\u4e4b\u5916\uff0c\u548c\u81ea\u8eab\u7684\u6bd4\u8f83\u7ed3\u679c\u4e5f\u8fd4\u56de False \uff1a In [ 45 ]: np . nan == np . nan Out [ 45 ]: False In [ 46 ]: np . nan == None Out [ 46 ]: False In [ 47 ]: np . nan == False Out [ 47 ]: False \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u867d\u7136\u5728\u5bf9\u7f3a\u5931\u5e8f\u5217\u6216\u8868\u683c\u7684\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\u64cd\u4f5c\u7684\u65f6\u5019\uff0c np.nan \u7684\u5bf9\u5e94\u4f4d\u7f6e\u4f1a\u8fd4\u56de False \uff0c\u4f46\u662f\u5728\u4f7f\u7528 equals \u51fd\u6570\u8fdb\u884c\u4e24\u5f20\u8868\u6216\u4e24\u4e2a\u5e8f\u5217\u7684\u76f8\u540c\u6027\u68c0\u9a8c\u65f6\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u4e24\u4fa7\u8868\u90fd\u662f\u7f3a\u5931\u503c\u7684\u4f4d\u7f6e\uff0c\u76f4\u63a5\u8fd4\u56de True \uff1a In [ 48 ]: s1 = pd . Series ([ 1 , np . nan ]) In [ 49 ]: s2 = pd . Series ([ 1 , 2 ]) In [ 50 ]: s3 = pd . Series ([ 1 , np . nan ]) In [ 51 ]: s1 == 1 Out [ 51 ]: 0 True 1 False dtype : bool In [ 52 ]: s1 . equals ( s2 ) Out [ 52 ]: False In [ 53 ]: s1 . equals ( s3 ) Out [ 53 ]: True \u5728\u65f6\u95f4\u5e8f\u5217\u7684\u5bf9\u8c61\u4e2d\uff0c pandas \u5229\u7528 pd.NaT \u6765\u6307\u4ee3\u7f3a\u5931\u503c\uff0c\u5b83\u7684\u4f5c\u7528\u548c np.nan \u662f\u4e00\u81f4\u7684\uff08\u65f6\u95f4\u5e8f\u5217\u7684\u5bf9\u8c61\u548c\u6784\u9020\u5c06\u5728\u7b2c\u5341\u7ae0\u8ba8\u8bba\uff09\uff1a In [ 54 ]: pd . to_timedelta ([ '30s' , np . nan ]) # Timedelta\u4e2d\u7684NaT Out [ 54 ]: TimedeltaIndex ([ '0 days 00:00:30' , NaT ], dtype = 'timedelta64[ns]' , freq = None ) In [ 55 ]: pd . to_datetime ([ '20200101' , np . nan ]) # Datetime\u4e2d\u7684NaT Out [ 55 ]: DatetimeIndex ([ '2020-01-01' , 'NaT' ], dtype = 'datetime64[ns]' , freq = None ) \u90a3\u4e48\u4e3a\u4ec0\u4e48\u8981\u5f15\u5165 pd.NaT \u6765\u8868\u793a\u65f6\u95f4\u5bf9\u8c61\u4e2d\u7684\u7f3a\u5931\u5462\uff1f\u4ecd\u7136\u4ee5 np.nan \u7684\u5f62\u5f0f\u5b58\u653e\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\uff1f\u5728 pandas \u4e2d\u53ef\u4ee5\u770b\u5230 object \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u800c object \u662f\u4e00\u79cd\u6df7\u6742\u5bf9\u8c61\u7c7b\u578b\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u591a\u4e2a\u7c7b\u578b\u7684\u5143\u7d20\u540c\u65f6\u5b58\u50a8\u5728 Series \u4e2d\uff0c\u5b83\u7684\u7c7b\u578b\u5c31\u4f1a\u53d8\u6210 object \u3002\u4f8b\u5982\uff0c\u540c\u65f6\u5b58\u653e\u6574\u6570\u548c\u5b57\u7b26\u4e32\u7684\u5217\u8868\uff1a In [ 56 ]: pd . Series ([ 1 , 'two' ]) Out [ 56 ]: 0 1 1 two dtype : object NaT \u95ee\u9898\u7684\u6839\u6e90\u6765\u81ea\u4e8e np.nan \u7684\u672c\u8eab\u662f\u4e00\u79cd\u6d6e\u70b9\u7c7b\u578b\uff0c\u800c\u5982\u679c\u6d6e\u70b9\u548c\u65f6\u95f4\u7c7b\u578b\u6df7\u5408\u5b58\u50a8\uff0c\u5982\u679c\u4e0d\u8bbe\u8ba1\u65b0\u7684\u5185\u7f6e\u7f3a\u5931\u7c7b\u578b\u6765\u5904\u7406\uff0c\u5c31\u4f1a\u53d8\u6210\u542b\u7cca\u4e0d\u6e05\u7684 object \u7c7b\u578b\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u5e0c\u671b\u770b\u5230\u7684\u3002 In [ 57 ]: type ( np . nan ) Out [ 57 ]: float \u540c\u65f6\uff0c\u7531\u4e8e np.nan \u7684\u6d6e\u70b9\u6027\u8d28\uff0c\u5982\u679c\u5728\u4e00\u4e2a\u6574\u6570\u7684 Series \u4e2d\u51fa\u73b0\u7f3a\u5931\uff0c\u90a3\u4e48\u5176\u7c7b\u578b\u4f1a\u8f6c\u53d8\u4e3a float64 \uff1b\u800c\u5982\u679c\u5728\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7684\u5e8f\u5217\u4e2d\u51fa\u73b0\u7f3a\u5931\uff0c\u90a3\u4e48\u5176\u7c7b\u578b\u5c31\u4f1a\u8f6c\u4e3a object \u800c\u4e0d\u662f bool \uff1a In [ 58 ]: pd . Series ([ 1 , np . nan ]) . dtype Out [ 58 ]: dtype ( 'float64' ) In [ 59 ]: pd . Series ([ True , False , np . nan ]) . dtype Out [ 59 ]: dtype ( 'O' ) \u56e0\u6b64\uff0c\u5728\u8fdb\u5165 1.0.0 \u7248\u672c\u540e\uff0c pandas \u5c1d\u8bd5\u8bbe\u8ba1\u4e86\u4e00\u79cd\u65b0\u7684\u7f3a\u5931\u7c7b\u578b pd.NA \u4ee5\u53ca\u4e09\u79cd Nullable \u5e8f\u5217\u7c7b\u578b\u6765\u5e94\u5bf9\u8fd9\u4e9b\u7f3a\u9677\uff0c\u5b83\u4eec\u5206\u522b\u662f Int, boolean \u548c string \u3002","title":"1. \u7f3a\u5931\u8bb0\u53f7\u53ca\u5176\u7f3a\u9677"},{"location":"pandas/part7/#2-nullable","text":"\u4ece\u5b57\u9762\u610f\u4e49\u4e0a\u770b Nullable \u5c31\u662f\u53ef\u7a7a\u7684\uff0c\u8a00\u4e0b\u4e4b\u610f\u5c31\u662f\u5e8f\u5217\u7c7b\u578b\u4e0d\u53d7\u7f3a\u5931\u503c\u7684\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u5728\u4e0a\u8ff0\u4e09\u4e2a Nullable \u7c7b\u578b\u4e2d\u5b58\u50a8\u7f3a\u5931\u503c\uff0c\u90fd\u4f1a\u8f6c\u4e3a pandas \u5185\u7f6e\u7684 pd.NA \uff1a In [ 60 ]: pd . Series ([ np . nan , 1 ], dtype = 'Int64' ) # \"i\"\u662f\u5927\u5199\u7684 Out [ 60 ]: 0 < NA > 1 1 dtype : Int64 In [ 61 ]: pd . Series ([ np . nan , True ], dtype = 'boolean' ) Out [ 61 ]: 0 < NA > 1 True dtype : boolean In [ 62 ]: pd . Series ([ np . nan , 'my_str' ], dtype = 'string' ) Out [ 62 ]: 0 < NA > 1 my_str dtype : string \u5728 Int \u7684\u5e8f\u5217\u4e2d\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u4f1a\u5c3d\u53ef\u80fd\u5730\u6210\u4e3a Nullable \u7684\u7c7b\u578b\uff1a In [ 63 ]: pd . Series ([ np . nan , 0 ], dtype = 'Int64' ) + 1 Out [ 63 ]: 0 < NA > 1 1 dtype : Int64 In [ 64 ]: pd . Series ([ np . nan , 0 ], dtype = 'Int64' ) == 0 Out [ 64 ]: 0 < NA > 1 True dtype : boolean In [ 65 ]: pd . Series ([ np . nan , 0 ], dtype = 'Int64' ) * 0.5 # \u53ea\u80fd\u662f\u6d6e\u70b9 Out [ 65 ]: 0 < NA > 1 0.0 dtype : Float64 \u5bf9\u4e8e boolean \u7c7b\u578b\u7684\u5e8f\u5217\u800c\u8a00\uff0c\u5176\u548c bool \u5e8f\u5217\u7684\u884c\u4e3a\u4e3b\u8981\u6709\u4e24\u70b9\u533a\u522b\uff1a \u7b2c\u4e00\u70b9\u662f\u5e26\u6709\u7f3a\u5931\u7684\u5e03\u5c14\u5217\u8868\u65e0\u6cd5\u8fdb\u884c\u7d22\u5f15\u5668\u4e2d\u7684\u9009\u62e9\uff0c\u800c boolean \u4f1a\u628a\u7f3a\u5931\u503c\u770b\u4f5c False \uff1a In [ 66 ]: s = pd . Series ([ 'a' , 'b' ]) In [ 67 ]: s_bool = pd . Series ([ True , np . nan ]) In [ 68 ]: s_boolean = pd . Series ([ True , np . nan ]) . astype ( 'boolean' ) # s[s_bool] # \u62a5\u9519 In [ 69 ]: s [ s_boolean ] Out [ 69 ]: 0 a dtype : object \u7b2c\u4e8c\u70b9\u662f\u5728\u8fdb\u884c\u903b\u8f91\u8fd0\u7b97\u65f6\uff0c bool \u7c7b\u578b\u5728\u7f3a\u5931\u5904\u8fd4\u56de\u7684\u6c38\u8fdc\u662f False \uff0c\u800c boolean \u4f1a\u6839\u636e\u903b\u8f91\u8fd0\u7b97\u662f\u5426\u80fd\u786e\u5b9a\u552f\u4e00\u7ed3\u679c\u6765\u8fd4\u56de\u76f8\u5e94\u7684\u503c\u3002\u90a3\u4ec0\u4e48\u53eb\u80fd\u5426\u786e\u5b9a\u552f\u4e00\u7ed3\u679c\u5462\uff1f\u4e3e\u4e2a\u7b80\u5355\u4f8b\u5b50\uff1a True | pd.NA \u4e2d\u65e0\u8bba\u7f3a\u5931\u503c\u4e3a\u4ec0\u4e48\u503c\uff0c\u5fc5\u7136\u8fd4\u56de True \uff1b False | pd.NA \u4e2d\u7684\u7ed3\u679c\u4f1a\u6839\u636e\u7f3a\u5931\u503c\u53d6\u503c\u7684\u4e0d\u540c\u800c\u53d8\u5316\uff0c\u6b64\u65f6\u8fd4\u56de pd.NA \uff1b False & pd.NA \u4e2d\u65e0\u8bba\u7f3a\u5931\u503c\u4e3a\u4ec0\u4e48\u503c\uff0c\u5fc5\u7136\u8fd4\u56de False \u3002 In [ 70 ]: s_boolean & True Out [ 70 ]: 0 True 1 < NA > dtype : boolean In [ 71 ]: s_boolean | True Out [ 71 ]: 0 True 1 True dtype : boolean In [ 72 ]: ~ s_boolean # \u53d6\u53cd\u64cd\u4f5c\u540c\u6837\u662f\u65e0\u6cd5\u552f\u4e00\u5730\u5224\u65ad\u7f3a\u5931\u7ed3\u679c Out [ 72 ]: 0 False 1 < NA > dtype : boolean \u5173\u4e8e string \u7c7b\u578b\u7684\u5177\u4f53\u6027\u8d28\u5c06\u5728\u4e0b\u4e00\u7ae0\u6587\u672c\u6570\u636e\u4e2d\u8fdb\u884c\u8ba8\u8bba\u3002 \u4e00\u822c\u5728\u5b9e\u9645\u6570\u636e\u5904\u7406\u65f6\uff0c\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u8bfb\u5165\u540e\uff0c\u5148\u901a\u8fc7 convert_dtypes \u8f6c\u4e3a Nullable \u7c7b\u578b\uff1a In [ 73 ]: df = pd . read_csv ( 'data/learn_pandas.csv' ) In [ 74 ]: df = df . convert_dtypes () In [ 75 ]: df . dtypes Out [ 75 ]: School string Grade string Name string Gender string Height Float64 Weight Int64 Transfer string Test_Number Int64 Test_Date string Time_Record string dtype : object","title":"2. Nullable \u7c7b\u578b\u7684\u6027\u8d28"},{"location":"pandas/part7/#3","text":"\u5f53\u8c03\u7528\u51fd\u6570 sum, prod \u4f7f\u7528\u52a0\u6cd5\u548c\u4e58\u6cd5\u7684\u65f6\u5019\uff0c\u7f3a\u5931\u6570\u636e\u7b49\u4ef7\u4e8e\u88ab\u5206\u522b\u89c6\u4f5c 0 \u548c 1\uff0c\u5373\u4e0d\u6539\u53d8\u539f\u6765\u7684\u8ba1\u7b97\u7ed3\u679c\uff1a In [ 76 ]: s = pd . Series ([ 2 , 3 , np . nan , 4 , 5 ]) In [ 77 ]: s . sum () Out [ 77 ]: 14.0 In [ 78 ]: s . prod () Out [ 78 ]: 120.0 \u5f53\u4f7f\u7528\u7d2f\u8ba1\u51fd\u6570\u65f6\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u7f3a\u5931\u503c\u6240\u5904\u7684\u4f4d\u7f6e\uff1a In [ 79 ]: s . cumsum () Out [ 79 ]: 0 2.0 1 5.0 2 NaN 3 9.0 4 14.0 dtype : float64 \u5f53\u8fdb\u884c\u5355\u4e2a\u6807\u91cf\u8fd0\u7b97\u7684\u65f6\u5019\uff0c\u9664\u4e86 np.nan ** 0 \u548c 1 ** np.nan \u8fd9\u4e24\u79cd\u60c5\u51b5\u4e3a\u786e\u5b9a\u7684\u503c\u4e4b\u5916\uff0c\u6240\u6709\u8fd0\u7b97\u7ed3\u679c\u5168\u4e3a\u7f3a\u5931\uff08 pd.NA \u7684\u884c\u4e3a\u4e0e\u6b64\u4e00\u81f4 \uff09\uff0c\u5e76\u4e14 np.nan \u5728\u6bd4\u8f83\u64cd\u4f5c\u65f6\u4e00\u5b9a\u8fd4\u56de False \uff0c\u800c pd.NA \u8fd4\u56de pd.NA \uff1a In [ 80 ]: np . nan == 0 Out [ 80 ]: False In [ 81 ]: pd . NA == 0 Out [ 81 ]: < NA > In [ 82 ]: np . nan > 0 Out [ 82 ]: False In [ 83 ]: pd . NA > 0 Out [ 83 ]: < NA > In [ 84 ]: np . nan + 1 Out [ 84 ]: nan In [ 85 ]: np . log ( np . nan ) Out [ 85 ]: nan In [ 86 ]: np . add ( np . nan , 1 ) Out [ 86 ]: nan In [ 87 ]: np . nan ** 0 Out [ 87 ]: 1.0 In [ 88 ]: pd . NA ** 0 Out [ 88 ]: 1 In [ 89 ]: 1 ** np . nan Out [ 89 ]: 1.0 In [ 90 ]: 1 ** pd . NA Out [ 90 ]: 1 \u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c diff, pct_change \u8fd9\u4e24\u4e2a\u51fd\u6570\u867d\u7136\u529f\u80fd\u76f8\u4f3c\uff0c\u4f46\u662f\u5bf9\u4e8e\u7f3a\u5931\u7684\u5904\u7406\u4e0d\u540c\uff0c\u524d\u8005\u51e1\u662f\u53c2\u4e0e\u7f3a\u5931\u8ba1\u7b97\u7684\u90e8\u5206\u5168\u90e8\u8bbe\u4e3a\u4e86\u7f3a\u5931\u503c\uff0c\u800c\u540e\u8005\u7f3a\u5931\u503c\u4f4d\u7f6e\u4f1a\u88ab\u8bbe\u4e3a 0% \u7684\u53d8\u5316\u7387\uff1a In [ 91 ]: s . diff () Out [ 91 ]: 0 NaN 1 1.0 2 NaN 3 NaN 4 1.0 dtype : float64 In [ 92 ]: s . pct_change () Out [ 92 ]: 0 NaN 1 0.500000 2 0.000000 3 0.333333 4 0.250000 dtype : float64 \u5bf9\u4e8e\u4e00\u4e9b\u51fd\u6570\u800c\u8a00\uff0c\u7f3a\u5931\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u7c7b\u522b\u5904\u7406\uff0c\u4f8b\u5982\u5728 groupby, get_dummies \u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u76f8\u5e94\u7684\u53c2\u6570\u6765\u8fdb\u884c\u589e\u52a0\u7f3a\u5931\u7c7b\u522b\uff1a In [ 93 ]: df_nan = pd . DataFrame ({ 'category' :[ 'a' , 'a' , 'b' , np . nan , np . nan ], .... : 'value' :[ 1 , 3 , 5 , 7 , 9 ]}) .... : In [ 94 ]: df_nan Out [ 94 ]: category value 0 a 1 1 a 3 2 b 5 3 NaN 7 4 NaN 9 In [ 95 ]: df_nan . groupby ( 'category' , .... : dropna = False )[ 'value' ] . mean () # pandas\u7248\u672c\u5927\u4e8e1.1.0 .... : Out [ 95 ]: category a 2 b 5 NaN 8 Name : value , dtype : int64 In [ 96 ]: pd . get_dummies ( df_nan . category , dummy_na = True ) Out [ 96 ]: a b NaN 0 1 0 0 1 1 0 0 2 0 1 0 3 0 0 1 4 0 0 1","title":"3. \u7f3a\u5931\u6570\u636e\u7684\u8ba1\u7b97\u548c\u5206\u7ec4"},{"location":"pandas/part7/#_3","text":"","title":"\u56db\u3001\u7ec3\u4e60"},{"location":"pandas/part7/#ex1","text":"\u5728\u6570\u636e\u5904\u7406\u4e2d\uff0c\u542b\u6709\u8fc7\u591a\u7f3a\u5931\u503c\u7684\u5217\u5f80\u5f80\u4f1a\u88ab\u5220\u9664\uff0c\u9664\u975e\u7f3a\u5931\u60c5\u51b5\u4e0e\u6807\u7b7e\u5f3a\u76f8\u5173\u3002\u4e0b\u9762\u6709\u4e00\u4efd\u5173\u4e8e\u4e8c\u5206\u7c7b\u95ee\u9898\u7684\u6570\u636e\u96c6\uff0c\u5176\u4e2d X_1, X_2 \u4e3a\u7279\u5f81\u53d8\u91cf\uff0c y \u4e3a\u4e8c\u5206\u7c7b\u6807\u7b7e\u3002 In [ 97 ]: df = pd . read_csv ( 'data/missing_chi.csv' ) In [ 98 ]: df . head () Out [ 98 ]: X_1 X_2 y 0 NaN NaN 0 1 NaN NaN 0 2 NaN NaN 0 3 43.0 NaN 0 4 NaN NaN 0 In [ 99 ]: df . isna () . mean () Out [ 99 ]: X_1 0.855 X_2 0.894 y 0.000 dtype : float64 In [ 100 ]: df . y . value_counts ( normalize = True ) Out [ 100 ]: 0 0.918 1 0.082 Name : y , dtype : float64 \u4e8b\u5b9e\u4e0a\uff0c\u6709\u65f6\u7f3a\u5931\u503c\u51fa\u73b0\u6216\u8005\u4e0d\u51fa\u73b0\u672c\u8eab\u5c31\u662f\u4e00\u79cd\u7279\u5f81\uff0c\u5e76\u4e14\u5728\u4e00\u4e9b\u573a\u5408\u4e0b\u53ef\u80fd\u4e0e\u6807\u7b7e\u7684\u6b63\u8d1f\u662f\u76f8\u5173\u7684\u3002\u5173\u4e8e\u7f3a\u5931\u51fa\u73b0\u4e0e\u5426\u548c\u6807\u7b7e\u7684\u6b63\u8d1f\u6027\uff0c\u5728\u7edf\u8ba1\u5b66\u4e2d\u53ef\u4ee5\u5229\u7528\u5361\u65b9\u68c0\u9a8c\u6765\u65ad\u8a00\u5b83\u4eec\u662f\u5426\u5b58\u5728\u76f8\u5173\u6027\u3002\u6309\u7167\u7279\u5f81\u7f3a\u5931\u7684\u6b63\u4f8b\u3001\u7279\u5f81\u7f3a\u5931\u7684\u8d1f\u4f8b\u3001\u7279\u5f81\u4e0d\u7f3a\u5931\u7684\u6b63\u4f8b\u3001\u7279\u5f81\u4e0d\u7f3a\u5931\u7684\u8d1f\u4f8b\uff0c\u53ef\u4ee5\u5206\u4e3a\u56db\u79cd\u60c5\u51b5\uff0c\u8bbe\u5b83\u4eec\u5206\u522b\u5bf9\u5e94\u7684\u6837\u4f8b\u6570\u4e3a \u3002\u5047\u82e5\u5b83\u4eec\u662f\u4e0d\u76f8\u5173\u7684\uff0c\u90a3\u4e48\u7279\u5f81\u7f3a\u5931\u4e2d\u6b63\u4f8b\u7684\u7406\u8bba\u503c\uff0c\u5c31\u5e94\u8be5\u63a5\u8fd1\u4e8e\u7279\u5f81\u7f3a\u5931\u603b\u6570 \u603b\u4f53\u6b63\u4f8b\u7684\u6bd4\u4f8b\uff0c\u5373\uff1a \u5176\u4ed6\u7684\u4e09\u79cd\u60c5\u51b5\u540c\u7406\u3002\u73b0\u5c06\u5b9e\u9645\u503c\u548c\u7406\u8bba\u503c\u5206\u522b\u8bb0\u4f5c \uff0c\u90a3\u4e48\u5e0c\u671b\u4e0b\u9762\u7684\u7edf\u8ba1\u91cf\u8d8a\u5c0f\u8d8a\u597d\uff0c\u5373\u4ee3\u8868\u5b9e\u9645\u503c\u63a5\u8fd1\u4e0d\u76f8\u5173\u60c5\u51b5\u7684\u7406\u8bba\u503c\uff1a \u53ef\u4ee5\u8bc1\u660e\u4e0a\u9762\u7684\u7edf\u8ba1\u91cf\u8fd1\u4f3c\u670d\u4ece\u81ea\u7531\u5ea6\u4e3a \u7684\u5361\u65b9\u5206\u5e03\uff0c\u5373 \u3002\u56e0\u6b64\uff0c\u53ef\u901a\u8fc7\u8ba1\u7b97 \u7684\u6982\u7387\u6765\u8fdb\u884c\u76f8\u5173\u6027\u7684\u5224\u522b\uff0c\u4e00\u822c\u8ba4\u4e3a\u5f53\u6b64\u6982\u7387\u5c0f\u4e8e \u65f6\u7f3a\u5931\u60c5\u51b5\u4e0e\u6807\u7b7e\u6b63\u8d1f\u5b58\u5728\u76f8\u5173\u5173\u7cfb\uff0c\u5373\u4e0d\u76f8\u5173\u6761\u4ef6\u4e0b\u7684\u7406\u8bba\u503c\u4e0e\u5b9e\u9645\u503c\u76f8\u5dee\u8f83\u5927\u3002 \u4e0a\u9762\u6240\u8bf4\u7684\u6982\u7387\u5373\u4e3a\u7edf\u8ba1\u5b66\u4e0a\u5173\u4e8e \u5217\u8054\u8868\u68c0\u9a8c\u95ee\u9898\u7684 \u503c\uff0c \u5b83\u53ef\u4ee5\u901a\u8fc7 scipy.stats.chi2.sf(S, 1) \u5f97\u5230\u3002\u8bf7\u6839\u636e\u4e0a\u9762\u7684\u6750\u6599\uff0c\u5206\u522b\u5bf9 X_1, X_2 \u5217\u8fdb\u884c\u68c0\u9a8c\u3002","title":"Ex1\uff1a\u7f3a\u5931\u503c\u4e0e\u7c7b\u522b\u7684\u76f8\u5173\u6027\u68c0\u9a8c"},{"location":"pandas/part7/#ex2","text":"KNN \u662f\u4e00\u79cd\u76d1\u7763\u5f0f\u5b66\u4e60\u6a21\u578b\uff0c\u65e2\u53ef\u4ee5\u89e3\u51b3\u56de\u5f52\u95ee\u9898\uff0c\u53c8\u53ef\u4ee5\u89e3\u51b3\u5206\u7c7b\u95ee\u9898\u3002\u5bf9\u4e8e\u5206\u7c7b\u53d8\u91cf\uff0c\u5229\u7528 KNN \u5206\u7c7b\u6a21\u578b\u53ef\u4ee5\u5b9e\u73b0\u5176\u7f3a\u5931\u503c\u7684\u63d2\u8865\uff0c\u601d\u8def\u662f\u5ea6\u91cf\u7f3a\u5931\u6837\u672c\u7684\u7279\u5f81\u4e0e\u6240\u6709\u5176\u4ed6\u6837\u672c\u7279\u5f81\u7684\u8ddd\u79bb\uff0c\u5f53\u7ed9\u5b9a\u4e86\u6a21\u578b\u53c2\u6570 n_neighbors=n \u65f6\uff0c\u8ba1\u7b97\u79bb\u8be5\u6837\u672c\u8ddd\u79bb\u6700\u8fd1\u7684 \u4e2a\u6837\u672c\u70b9\u4e2d\u6700\u591a\u7684\u90a3\u4e2a\u7c7b\u522b\uff0c\u5e76\u628a\u8fd9\u4e2a\u7c7b\u522b\u4f5c\u4e3a\u8be5\u6837\u672c\u7684\u7f3a\u5931\u9884\u6d4b\u7c7b\u522b\uff0c\u5177\u4f53\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u672a\u77e5\u7684\u7c7b\u522b\u88ab\u9884\u6d4b\u4e3a\u9ec4\u8272\uff1a \u4e0a\u9762\u6709\u8272\u70b9\u7684\u7279\u5f81\u6570\u636e\u63d0\u4f9b\u5982\u4e0b\uff1a In [ 101 ]: df = pd . read_excel ( 'data/color.xlsx' ) In [ 102 ]: df . head ( 3 ) Out [ 102 ]: X1 X2 Color 0 - 2.5 2.8 Blue 1 - 1.5 1.8 Blue 2 - 0.8 2.8 Blue \u5df2\u77e5\u5f85\u9884\u6d4b\u7684\u6837\u672c\u70b9\u4e3a \uff0c\u90a3\u4e48\u9884\u6d4b\u7c7b\u522b\u53ef\u4ee5\u5982\u4e0b\u5199\u51fa\uff1a In [ 103 ]: from sklearn.neighbors import KNeighborsClassifier In [ 104 ]: clf = KNeighborsClassifier ( n_neighbors = 6 ) In [ 105 ]: clf . fit ( df . iloc [:,: 2 ] . values , df . Color . values ) Out [ 105 ]: KNeighborsClassifier ( n_neighbors = 6 ) In [ 106 ]: clf . predict ([[ 0.8 , - 0.2 ]]) Out [ 106 ]: array ([ 'Yellow' ], dtype = object ) \u5bf9\u4e8e\u56de\u5f52\u95ee\u9898\u800c\u8a00\uff0c\u9700\u8981\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u6570\u503c\uff0c\u56e0\u6b64\u9884\u6d4b\u503c\u7531\u6700\u8fd1\u7684 \u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u5e73\u5747\u503c\u83b7\u5f97\u3002\u8bf7\u628a\u4e0a\u9762\u7684\u8fd9\u4e2a\u5206\u7c7b\u95ee\u9898\u8f6c\u5316\u4e3a\u56de\u5f52\u95ee\u9898\uff0c\u4ec5\u4f7f\u7528 KNeighborsRegressor \u6765\u5b8c\u6210\u4e0a\u8ff0\u7684 KNeighborsClassifier \u529f\u80fd\u3002 \u8bf7\u6839\u636e\u7b2c 1 \u95ee\u4e2d\u7684\u65b9\u6cd5\uff0c\u5bf9 audit \u6570\u636e\u96c6\u4e2d\u7684 Employment \u53d8\u91cf\u8fdb\u884c\u7f3a\u5931\u503c\u63d2\u8865\u3002 In [ 107 ]: df = pd . read_csv ( 'data/audit.csv' ) In [ 108 ]: df . head ( 3 ) Out [ 108 ]: ID Age Employment Marital Income Gender Hours 0 1004641 38 Private Unmarried 81838.00 Female 72 1 1010229 35 Private Absent 72099.00 Male 30 2 1024587 32 Private Divorced 154676.74 Male 40","title":"Ex2\uff1a\u7528\u56de\u5f52\u6a21\u578b\u89e3\u51b3\u5206\u7c7b\u95ee\u9898"},{"location":"pandas/part8/","text":"In [ 1 ]: import numpy as np In [ 2 ]: import pandas as pd \u4e00\u3001str \u5bf9\u8c61 1. str \u5bf9\u8c61\u7684\u8bbe\u8ba1\u610f\u56fe str \u5bf9\u8c61\u662f\u5b9a\u4e49\u5728 Index \u6216 Series \u4e0a\u7684\u5c5e\u6027\uff0c\u4e13\u95e8\u7528\u4e8e\u5904\u7406\u6bcf\u4e2a\u5143\u7d20\u7684\u6587\u672c\u5185\u5bb9\uff0c\u5176\u5185\u90e8\u5b9a\u4e49\u4e86\u5927\u91cf\u65b9\u6cd5\uff0c\u56e0\u6b64\u5bf9\u4e00\u4e2a\u5e8f\u5217\u8fdb\u884c\u6587\u672c\u5904\u7406\uff0c\u9996\u5148\u9700\u8981\u83b7\u53d6\u5176 str \u5bf9\u8c61\u3002\u5728 Python \u6807\u51c6\u5e93\u4e2d\u4e5f\u6709 str \u6a21\u5757\uff0c\u4e3a\u4e86\u4f7f\u7528\u4e0a\u7684\u4fbf\u5229\uff0c\u6709\u8bb8\u591a\u51fd\u6570\u7684\u7528\u6cd5 pandas \u7167\u642c\u4e86\u5b83\u7684\u8bbe\u8ba1\uff0c\u4f8b\u5982\u5b57\u6bcd\u8f6c\u4e3a\u5927\u5199\u7684\u64cd\u4f5c\uff1a In [ 3 ]: var = 'abcd' In [ 4 ]: str . upper ( var ) # Python\u5185\u7f6estr\u6a21\u5757 Out [ 4 ]: 'ABCD' In [ 5 ]: s = pd . Series ([ 'abcd' , 'efg' , 'hi' ]) In [ 6 ]: s . str Out [ 6 ]: < pandas . core . strings . accessor . StringMethods at 0x13630ffc430 > In [ 7 ]: s . str . upper () # pandas\u4e2dstr\u5bf9\u8c61\u4e0a\u7684upper\u65b9\u6cd5 Out [ 7 ]: 0 ABCD 1 EFG 2 HI dtype : object \u6839\u636e\u6587\u6863 API \u6750\u6599\uff0c\u5728 pandas \u7684 50 \u4e2a str \u5bf9\u8c61\u65b9\u6cd5\u4e2d\uff0c\u6709 31 \u4e2a\u662f\u548c\u6807\u51c6\u5e93\u4e2d\u7684 str \u6a21\u5757\u65b9\u6cd5\u540c\u540d\u4e14\u529f\u80fd\u4e00\u81f4\uff0c\u8fd9\u4e3a\u6279\u91cf\u5904\u7406\u5e8f\u5217\u63d0\u4f9b\u4e86\u6709\u529b\u7684\u5de5\u5177\u3002 2. [] \u7d22\u5f15\u5668[#] \u5bf9\u4e8e str \u5bf9\u8c61\u800c\u8a00\uff0c\u53ef\u7406\u89e3\u4e3a\u5176\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u4e86\u5e8f\u5217\u5316\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u5728\u4e00\u822c\u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u901a\u8fc7 [] \u53ef\u4ee5\u53d6\u51fa\u67d0\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\uff1a In [ 8 ]: var [ 0 ] Out [ 8 ]: 'a' \u540c\u65f6\u4e5f\u80fd\u901a\u8fc7\u5207\u7247\u5f97\u5230\u5b50\u4e32\uff1a In [ 9 ]: var [ - 1 : 0 : - 2 ] Out [ 9 ]: 'db' \u901a\u8fc7\u5bf9 str \u5bf9\u8c61\u4f7f\u7528 [] \u7d22\u5f15\u5668\uff0c\u53ef\u4ee5\u5b8c\u6210\u5b8c\u5168\u4e00\u81f4\u7684\u529f\u80fd\uff0c\u5e76\u4e14\u5982\u679c\u8d85\u51fa\u8303\u56f4\u5219\u8fd4\u56de\u7f3a\u5931\u503c\uff1a In [ 10 ]: s . str [ 0 ] Out [ 10 ]: 0 a 1 e 2 h dtype : object In [ 11 ]: s . str [ - 1 : 0 : - 2 ] Out [ 11 ]: 0 db 1 g 2 i dtype : object In [ 12 ]: s . str [ 2 ] Out [ 12 ]: 0 c 1 g 2 NaN dtype : object 3. string \u7c7b\u578b \u5728\u4e0a\u4e00\u7ae0\u63d0\u5230\uff0c\u4ece pandas \u7684 1.0.0 \u7248\u672c\u5f00\u59cb\uff0c\u5f15\u5165\u4e86 string \u7c7b\u578b\uff0c\u5176\u5f15\u5165\u7684\u52a8\u673a\u5728\u4e8e\uff1a\u539f\u6765\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u90fd\u4f1a\u4ee5 object \u7c7b\u578b\u7684 Series \u8fdb\u884c\u5b58\u50a8\uff0c\u4f46 object \u7c7b\u578b\u53ea\u5e94\u5f53\u5b58\u50a8\u6df7\u5408\u7c7b\u578b\uff0c\u4f8b\u5982\u540c\u65f6\u5b58\u50a8\u6d6e\u70b9\u3001\u5b57\u7b26\u4e32\u3001\u5b57\u5178\u3001\u5217\u8868\u3001\u81ea\u5b9a\u4e49\u7c7b\u578b\u7b49\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32\u6709\u5fc5\u8981\u540c\u6570\u503c\u578b\u6216 category \u4e00\u6837\uff0c\u5177\u6709\u81ea\u5df1\u7684\u6570\u636e\u5b58\u50a8\u7c7b\u578b\uff0c\u4ece\u800c\u5f15\u5165\u4e86 string \u7c7b\u578b\u3002 \u603b\u4f53\u4e0a\u8bf4\uff0c\u7edd\u5927\u591a\u6570\u5bf9\u4e8e object \u548c string \u7c7b\u578b\u7684\u5e8f\u5217\u4f7f\u7528 str \u5bf9\u8c61\u65b9\u6cd5\u4ea7\u751f\u7684\u7ed3\u679c\u662f\u4e00\u81f4\uff0c\u4f46\u662f\u5728\u4e0b\u9762\u63d0\u5230\u7684\u4e24\u70b9\u4e0a\u6709\u8f83\u5927\u5dee\u5f02\uff1a \u9996\u5148\uff0c\u5e94\u5f53\u5c3d\u91cf\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u5e8f\u5217\u4e2d\u7684\u503c\u90fd\u662f\u5b57\u7b26\u4e32\u7684\u60c5\u51b5\u4e0b\u624d\u4f7f\u7528 str \u5c5e\u6027\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u5176\u5fc5\u8981\u6761\u4ef6\u662f\u5e8f\u5217\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u53ef\u8fed\u4ee3\uff08Iterable\uff09\u5bf9\u8c61\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u5b57\u7b26\u4e32\u3001\u5b57\u5178\u3001\u5217\u8868\u3002\u5bf9\u4e8e\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c string \u7c7b\u578b\u7684 str \u5bf9\u8c61\u548c object \u7c7b\u578b\u7684 str \u5bf9\u8c61\u8fd4\u56de\u7ed3\u679c\u53ef\u80fd\u662f\u4e0d\u540c\u7684\u3002 In [ 13 ]: s = pd . Series ([{ 1 : 'temp_1' , 2 : 'temp_2' }, [ 'a' , 'b' ], 0.5 , 'my_string' ]) In [ 14 ]: s . str [ 1 ] Out [ 14 ]: 0 temp_1 1 b 2 NaN 3 y dtype : object In [ 15 ]: s . astype ( 'string' ) . str [ 1 ] Out [ 15 ]: 0 1 1 ' 2 . 3 y dtype : string \u9664\u4e86\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e32\u5143\u7d20\uff0c\u524d\u4e09\u4e2a\u5143\u7d20\u8fd4\u56de\u7684\u503c\u90fd\u4e0d\u540c\uff0c\u5176\u539f\u56e0\u5728\u4e8e\u5f53\u5e8f\u5217\u7c7b\u578b\u4e3a object \u65f6\uff0c\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c [] \u7d22\u5f15\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5b57\u5178\u800c\u8a00\uff0c\u8fd4\u56de temp_1 \u5b57\u7b26\u4e32\uff0c\u5bf9\u4e8e\u5217\u8868\u5219\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u503c\uff0c\u800c\u7b2c\u4e09\u4e2a\u4e3a\u4e0d\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u8fd4\u56de\u7f3a\u5931\u503c\uff0c\u7b2c\u56db\u4e2a\u662f\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c [] \u7d22\u5f15\u3002\u800c string \u7c7b\u578b\u7684 str \u5bf9\u8c61\u5148\u628a\u6574\u4e2a\u5143\u7d20\u8f6c\u4e3a\u5b57\u9762\u610f\u4e49\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\u5bf9\u4e8e\u5217\u8868\u800c\u8a00\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5373 \u201c{\u201d\uff0c\u800c\u5bf9\u4e8e\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e32\u5143\u7d20\u800c\u8a00\uff0c\u6070\u597d\u8f6c\u5316\u524d\u540e\u7684\u8868\u793a\u65b9\u6cd5\u4e00\u81f4\uff0c\u56e0\u6b64\u7ed3\u679c\u548c object \u7c7b\u578b\u4e00\u81f4\u3002 \u9664\u4e86\u5bf9\u4e8e\u67d0\u4e9b\u5bf9\u8c61\u7684 str \u5e8f\u5217\u5316\u65b9\u6cd5\u4e0d\u540c\u4e4b\u5916\uff0c\u4e24\u8005\u53e6\u5916\u7684\u4e00\u4e2a\u5dee\u522b\u5728\u4e8e\uff0c string \u7c7b\u578b\u662f Nullable \u7c7b\u578b\uff0c\u4f46 object \u4e0d\u662f\u3002\u8fd9\u610f\u5473\u7740 string \u7c7b\u578b\u7684\u5e8f\u5217\uff0c\u5982\u679c\u8c03\u7528\u7684 str \u65b9\u6cd5\u8fd4\u56de\u503c\u4e3a\u6574\u6570 Series \u548c\u5e03\u5c14 Series \u65f6\uff0c\u5176\u5206\u522b\u5bf9\u5e94\u7684 dtype \u662f Int \u548c boolean \u7684 Nullable \u7c7b\u578b\uff0c\u800c object \u7c7b\u578b\u5219\u4f1a\u5206\u522b\u8fd4\u56de int/float \u548c bool/object \uff0c\u53d6\u51b3\u4e8e\u7f3a\u5931\u503c\u7684\u5b58\u5728\u4e0e\u5426\u3002\u540c\u65f6\uff0c\u5b57\u7b26\u4e32\u7684\u6bd4\u8f83\u64cd\u4f5c\uff0c\u4e5f\u5177\u6709\u76f8\u4f3c\u7684\u7279\u6027\uff0c string \u8fd4\u56de Nullable \u7c7b\u578b\uff0c\u4f46 object \u4e0d\u4f1a\u3002 In [ 16 ]: s = pd . Series ([ 'a' ]) In [ 17 ]: s . str . len () Out [ 17 ]: 0 1 dtype : int64 In [ 18 ]: s . astype ( 'string' ) . str . len () Out [ 18 ]: 0 1 dtype : Int64 In [ 19 ]: s == 'a' Out [ 19 ]: 0 True dtype : bool In [ 20 ]: s . astype ( 'string' ) == 'a' Out [ 20 ]: 0 True dtype : boolean In [ 21 ]: s = pd . Series ([ 'a' , np . nan ]) # \u5e26\u6709\u7f3a\u5931\u503c In [ 22 ]: s . str . len () Out [ 22 ]: 0 1.0 1 NaN dtype : float64 In [ 23 ]: s . astype ( 'string' ) . str . len () Out [ 23 ]: 0 1 1 < NA > dtype : Int64 In [ 24 ]: s == 'a' Out [ 24 ]: 0 True 1 False dtype : bool In [ 25 ]: s . astype ( 'string' ) == 'a' Out [ 25 ]: 0 True 1 < NA > dtype : boolean \u6700\u540e\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u5168\u4f53\u5143\u7d20\u4e3a\u6570\u503c\u7c7b\u578b\u7684\u5e8f\u5217\uff0c\u5373\u4f7f\u5176\u7c7b\u578b\u4e3a object \u6216\u8005 category \u4e5f\u4e0d\u5141\u8bb8\u76f4\u63a5\u4f7f\u7528 str \u5c5e\u6027\u3002\u5982\u679c\u9700\u8981\u628a\u6570\u5b57\u5f53\u6210 string \u7c7b\u578b\u5904\u7406\uff0c\u53ef\u4ee5\u4f7f\u7528 astype \u5f3a\u5236\u8f6c\u6362\u4e3a string \u7c7b\u578b\u7684 Series \uff1a In [ 26 ]: s = pd . Series ([ 12 , 345 , 6789 ]) In [ 27 ]: s . astype ( 'string' ) . str [ 1 ] Out [ 27 ]: 0 2 1 4 2 7 dtype : string \u4e8c\u3001\u6b63\u5219\u8868\u8fbe\u5f0f\u57fa\u7840 \u8fd9\u4e00\u8282\u7684\u4e24\u4e2a\u8868\u683c\u6765\u81ea\u4e8e learn-regex-zh \u8fd9\u4e2a\u5173\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u9879\u76ee\uff0c\u5176\u4f7f\u7528 MIT \u5f00\u6e90\u8bb8\u53ef\u534f\u8bae\u3002\u8fd9\u91cc\u53ea\u662f\u4ecb\u7ecd\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u57fa\u672c\u7528\u6cd5\uff0c\u9700\u8981\u7cfb\u7edf\u5b66\u4e60\u7684\u8bfb\u8005\u53ef\u53c2\u8003 \u6b63\u5219\u8868\u8fbe\u5f0f\u5fc5\u77e5\u5fc5\u4f1a \u4e00\u4e66\u3002 1. \u4e00\u822c\u5b57\u7b26\u7684\u5339\u914d \u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u4e00\u79cd\u6309\u7167\u67d0\u79cd\u6b63\u5219\u6a21\u5f0f\uff0c\u4ece\u5de6\u5230\u53f3\u5339\u914d\u5b57\u7b26\u4e32\u4e2d\u5185\u5bb9\u7684\u4e00\u79cd\u5de5\u5177\u3002\u5bf9\u4e8e\u4e00\u822c\u7684\u5b57\u7b26\u800c\u8a00\uff0c\u5b83\u53ef\u4ee5\u627e\u5230\u5176\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u4e3a\u4e86\u6f14\u793a\u4fbf\u5229\uff0c\u4f7f\u7528\u4e86 python \u4e2d re \u6a21\u5757\u7684 findall \u51fd\u6570\u6765\u5339\u914d\u6240\u6709\u51fa\u73b0\u8fc7\u4f46\u4e0d\u91cd\u53e0\u7684\u6a21\u5f0f\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5f85\u5339\u914d\u7684\u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u5b57\u7b26\u4e32\u4e2d\u627e\u51fa apple \uff1a In [ 28 ]: import re In [ 29 ]: re . findall ( r 'Apple' , 'Apple! This Is an Apple!' ) Out [ 29 ]: [ 'Apple' , 'Apple' ] 2. \u5143\u5b57\u7b26\u57fa\u7840 \u5143\u5b57\u7b26 \u63cf\u8ff0 . \u5339\u914d\u9664\u6362\u884c\u7b26\u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26 [ ] \u5b57\u7b26\u7c7b\uff0c\u5339\u914d\u65b9\u62ec\u53f7\u4e2d\u5305\u542b\u7684\u4efb\u610f\u5b57\u7b26\u3002 [^] \u5426\u5b9a\u5b57\u7b26\u7c7b\uff0c\u5339\u914d\u65b9\u62ec\u53f7\u4e2d\u4e0d\u5305\u542b\u7684\u4efb\u610f\u5b57\u7b26 * \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u96f6\u6b21\u6216\u591a\u6b21 + \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u4e00\u6b21\u6216\u591a\u6b21 ? \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u96f6\u6b21\u6216\u4e00\u6b21 {n,m} \u82b1\u62ec\u53f7\uff0c\u5339\u914d\u524d\u9762\u5b57\u7b26\u81f3\u5c11 n \u6b21\uff0c\u4f46\u662f\u4e0d\u8d85\u8fc7 m \u6b21 (xyz) \u5b57\u7b26\u7ec4\uff0c\u6309\u7167\u786e\u5207\u7684\u987a\u5e8f\u5339\u914d\u5b57\u7b26 xyz\u3002 | \u5206\u652f\u7ed3\u6784\uff0c\u5339\u914d\u7b26\u53f7\u4e4b\u524d\u7684\u5b57\u7b26\u6216\u540e\u9762\u7684\u5b57\u7b26 \\ \u8f6c\u4e49\u7b26\uff0c\u5b83\u53ef\u4ee5\u8fd8\u539f\u5143\u5b57\u7b26\u539f\u6765\u7684\u542b\u4e49 ^ \u5339\u914d\u884c\u7684\u5f00\u59cb $ \u5339\u914d\u884c\u7684\u7ed3\u675f In [ 30 ]: re . findall ( r '.' , 'abc' ) Out [ 30 ]: [ 'a' , 'b' , 'c' ] In [ 31 ]: re . findall ( r '[ac]' , 'abc' ) Out [ 31 ]: [ 'a' , 'c' ] In [ 32 ]: re . findall ( r '[^ac]' , 'abc' ) Out [ 32 ]: [ 'b' ] In [ 33 ]: re . findall ( r '[ab] {2} ' , 'aaaabbbb' ) # {n}\u6307\u5339\u914dn\u6b21 Out [ 33 ]: [ 'aa' , 'aa' , 'bb' , 'bb' ] In [ 34 ]: re . findall ( r 'aaa|bbb' , 'aaaabbbb' ) Out [ 34 ]: [ 'aaa' , 'bbb' ] In [ 35 ]: re . findall ( r 'a \\\\ ?|a\\*' , 'aa?a*a' ) Out [ 35 ]: [ 'a' , 'a' , 'a' , 'a' ] In [ 36 ]: re . findall ( r 'a?.' , 'abaacadaae' ) Out [ 36 ]: [ 'ab' , 'aa' , 'c' , 'ad' , 'aa' , 'e' ] 3. \u7b80\u5199\u5b57\u7b26\u96c6 \u6b64\u5916\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u8fd8\u6709\u4e00\u7c7b\u7b80\u5199\u5b57\u7b26\u96c6\uff0c\u5176\u7b49\u4ef7\u4e8e\u4e00\u7ec4\u5b57\u7b26\u7684\u96c6\u5408\uff1a \u7b80\u5199 \u63cf\u8ff0 \\w \u5339\u914d\u6240\u6709\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf: [a-zA-Z0-9_] \\W \u5339\u914d\u975e\u5b57\u6bcd\u548c\u6570\u5b57\u7684\u5b57\u7b26: [^\\w] \\d \u5339\u914d\u6570\u5b57: [0-9] \\D \u5339\u914d\u975e\u6570\u5b57: [^\\d] \\s \u5339\u914d\u7a7a\u683c\u7b26: [\\t\\n\\f\\r\\p{Z}] \\S \u5339\u914d\u975e\u7a7a\u683c\u7b26: [^\\s] \\B \u5339\u914d\u4e00\u7ec4\u975e\u7a7a\u5b57\u7b26\u5f00\u5934\u6216\u7ed3\u5c3e\u7684\u4f4d\u7f6e\uff0c\u4e0d\u4ee3\u8868\u5177\u4f53\u5b57\u7b26 In [ 37 ]: re . findall ( r '.s' , 'Apple! This Is an Apple!' ) Out [ 37 ]: [ 'is' , 'Is' ] In [ 38 ]: re . findall ( r '\\w {2} ' , '09 8? 7w c_ 9q p@' ) Out [ 38 ]: [ '09' , '7w' , 'c_' , '9q' ] In [ 39 ]: re . findall ( r '\\w\\W\\B' , '09 8? 7w c_ 9q p@' ) Out [ 39 ]: [ '8?' , 'p@' ] In [ 40 ]: re . findall ( r '.\\s.' , 'Constant dropping wears the stone.' ) Out [ 40 ]: [ 't d' , 'g w' , 's t' , 'e s' ] In [ 41 ]: re . findall ( r '\u4e0a\u6d77\u5e02(.{2,3}\u533a)(.{2,3}\u8def)(\\d+\u53f7)' , .... : '\u4e0a\u6d77\u5e02\u9ec4\u6d66\u533a\u65b9\u6d5c\u4e2d\u8def249\u53f7 \u4e0a\u6d77\u5e02\u5b9d\u5c71\u533a\u5bc6\u5c71\u8def5\u53f7' ) .... : Out [ 41 ]: [( '\u9ec4\u6d66\u533a' , '\u65b9\u6d5c\u4e2d\u8def' , '249\u53f7' ), ( '\u5b9d\u5c71\u533a' , '\u5bc6\u5c71\u8def' , '5\u53f7' )] \u4e09\u3001\u6587\u672c\u5904\u7406\u7684\u4e94\u7c7b\u64cd\u4f5c 1. \u62c6\u5206 str.split \u80fd\u591f\u628a\u5b57\u7b26\u4e32\u7684\u5217\u8fdb\u884c\u62c6\u5206\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u53ef\u9009\u53c2\u6570\u5305\u62ec\u4ece\u5de6\u5230\u53f3\u7684\u6700\u5927\u62c6\u5206\u6b21\u6570 n \uff0c\u662f\u5426\u5c55\u5f00\u4e3a\u591a\u4e2a\u5217 expand \u3002 In [ 42 ]: s = pd . Series ([ '\u4e0a\u6d77\u5e02\u9ec4\u6d66\u533a\u65b9\u6d5c\u4e2d\u8def249\u53f7' , .... : '\u4e0a\u6d77\u5e02\u5b9d\u5c71\u533a\u5bc6\u5c71\u8def5\u53f7' ]) .... : In [ 43 ]: s . str . split ( '[\u5e02\u533a\u8def]' ) Out [ 43 ]: 0 [ \u4e0a\u6d77 , \u9ec4\u6d66 , \u65b9\u6d5c\u4e2d , 249 \u53f7 ] 1 [ \u4e0a\u6d77 , \u5b9d\u5c71 , \u5bc6\u5c71 , 5 \u53f7 ] dtype : object In [ 44 ]: s . str . split ( '[\u5e02\u533a\u8def]' , n = 2 , expand = True ) Out [ 44 ]: 0 1 2 0 \u4e0a\u6d77 \u9ec4\u6d66 \u65b9\u6d5c\u4e2d\u8def249\u53f7 1 \u4e0a\u6d77 \u5b9d\u5c71 \u5bc6\u5c71\u8def5\u53f7 \u4e0e\u5176\u7c7b\u4f3c\u7684\u51fd\u6570\u662f str.rsplit \uff0c\u5176\u533a\u522b\u5728\u4e8e\u4f7f\u7528 n \u53c2\u6570\u7684\u65f6\u5019\u662f\u4ece\u53f3\u5230\u5de6\u9650\u5236\u6700\u5927\u62c6\u5206\u6b21\u6570\u3002\u4f46\u662f\u5f53\u524d\u7248\u672c\u4e0b rsplit \u56e0\u4e3a bug \u800c\u65e0\u6cd5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u5206\u5272\uff1a In [ 45 ]: s . str . rsplit ( '[\u5e02\u533a\u8def]' , n = 2 , expand = True ) Out [ 45 ]: 0 0 \u4e0a\u6d77\u5e02\u9ec4\u6d66\u533a\u65b9\u6d5c\u4e2d\u8def249\u53f7 1 \u4e0a\u6d77\u5e02\u5b9d\u5c71\u533a\u5bc6\u5c71\u8def5\u53f7 2. \u5408\u5e76 \u5173\u4e8e\u5408\u5e76\u4e00\u5171\u6709\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u662f str.join \u548c str.cat \u3002 str.join \u8868\u793a\u7528\u67d0\u4e2a\u8fde\u63a5\u7b26\u628a Series \u4e2d\u7684\u5b57\u7b26\u4e32\u5217\u8868\u8fde\u63a5\u8d77\u6765\uff0c\u5982\u679c\u5217\u8868\u4e2d\u51fa\u73b0\u4e86\u975e\u5b57\u7b26\u4e32\u5143\u7d20\u5219\u8fd4\u56de\u7f3a\u5931\u503c\uff1a In [ 46 ]: s = pd . Series ([[ 'a' , 'b' ], [ 1 , 'a' ], [[ 'a' , 'b' ], 'c' ]]) In [ 47 ]: s . str . join ( '-' ) Out [ 47 ]: 0 a - b 1 NaN 2 NaN dtype : object str.cat \u7528\u4e8e\u5408\u5e76\u4e24\u4e2a\u5e8f\u5217\uff0c\u4e3b\u8981\u53c2\u6570\u4e3a\u8fde\u63a5\u7b26 sep \u3001\u8fde\u63a5\u5f62\u5f0f join \u4ee5\u53ca\u7f3a\u5931\u503c\u66ff\u4ee3\u7b26\u53f7 na_rep \uff0c\u5176\u4e2d\u8fde\u63a5\u5f62\u5f0f\u9ed8\u8ba4\u4e3a\u4ee5\u7d22\u5f15\u4e3a\u952e\u7684\u5de6\u8fde\u63a5\u3002 In [ 48 ]: s1 = pd . Series ([ 'a' , 'b' ]) In [ 49 ]: s2 = pd . Series ([ 'cat' , 'dog' ]) In [ 50 ]: s1 . str . cat ( s2 , sep = '-' ) Out [ 50 ]: 0 a - cat 1 b - dog dtype : object In [ 51 ]: s2 . index = [ 1 , 2 ] In [ 52 ]: s1 . str . cat ( s2 , sep = '-' , na_rep = '?' , join = 'outer' ) Out [ 52 ]: 0 a - ? 1 b - cat 2 ? - dog dtype : object 3. \u5339\u914d str.contains \u8fd4\u56de\u4e86\u6bcf\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5305\u542b\u6b63\u5219\u6a21\u5f0f\u7684\u5e03\u5c14\u5e8f\u5217\uff1a In [ 53 ]: s = pd . Series ([ 'my cat' , 'he is fat' , 'railway station' ]) In [ 54 ]: s . str . contains ( '\\s\\wat' ) Out [ 54 ]: 0 True 1 True 2 False dtype : bool str.startswith \u548c str.endswith \u8fd4\u56de\u4e86\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4ee5\u7ed9\u5b9a\u6a21\u5f0f\u4e3a\u5f00\u59cb\u548c\u7ed3\u675f\u7684\u5e03\u5c14\u5e8f\u5217\uff0c\u5b83\u4eec\u90fd\u4e0d\u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f\uff1a In [ 55 ]: s . str . startswith ( 'my' ) Out [ 55 ]: 0 True 1 False 2 False dtype : bool In [ 56 ]: s . str . endswith ( 't' ) Out [ 56 ]: 0 True 1 True 2 False dtype : bool \u5982\u679c\u9700\u8981\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u68c0\u6d4b\u5f00\u59cb\u6216\u7ed3\u675f\u5b57\u7b26\u4e32\u7684\u6a21\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528 str.match \uff0c\u5176\u8fd4\u56de\u4e86\u6bcf\u4e2a\u5b57\u7b26\u4e32\u8d77\u59cb\u5904\u662f\u5426\u7b26\u5408\u7ed9\u5b9a\u6b63\u5219\u6a21\u5f0f\u7684\u5e03\u5c14\u5e8f\u5217\uff1a In [ 57 ]: s . str . match ( 'm|h' ) Out [ 57 ]: 0 True 1 True 2 False dtype : bool In [ 58 ]: s . str [:: - 1 ] . str . match ( 'ta[f|g]|n' ) # \u53cd\u8f6c\u540e\u5339\u914d Out [ 58 ]: 0 False 1 True 2 True dtype : bool \u5f53\u7136\uff0c\u8fd9\u4e9b\u4e5f\u80fd\u901a\u8fc7\u5728 str.contains \u7684\u6b63\u5219\u4e2d\u4f7f\u7528 ^ \u548c $ \u6765\u5b9e\u73b0\uff1a In [ 59 ]: s . str . contains ( '^[m|h]' ) Out [ 59 ]: 0 True 1 True 2 False dtype : bool In [ 60 ]: s . str . contains ( '[f|g]at|n$' ) Out [ 60 ]: 0 False 1 True 2 True dtype : bool \u9664\u4e86\u4e0a\u8ff0\u8fd4\u56de\u503c\u4e3a\u5e03\u5c14\u7684\u5339\u914d\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u8fd4\u56de\u7d22\u5f15\u7684\u5339\u914d\u51fd\u6570\uff0c\u5373 str.find \u4e0e str.rfind \uff0c\u5176\u5206\u522b\u8fd4\u56de\u4ece\u5de6\u5230\u53f3\u548c\u4ece\u53f3\u5230\u5de6\u7b2c\u4e00\u6b21\u5339\u914d\u7684\u4f4d\u7f6e\u7684\u7d22\u5f15\uff0c\u672a\u627e\u5230\u5219\u8fd4\u56de - 1\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e24\u4e2a\u51fd\u6570\u4e0d\u652f\u6301\u6b63\u5219\u5339\u914d\uff0c\u53ea\u80fd\u7528\u4e8e\u5b57\u7b26\u5b50\u4e32\u7684\u5339\u914d\uff1a In [ 61 ]: s = pd . Series ([ 'This is an apple. That is not an apple.' ]) In [ 62 ]: s . str . find ( 'apple' ) Out [ 62 ]: 0 11 dtype : int64 In [ 63 ]: s . str . rfind ( 'apple' ) Out [ 63 ]: 0 33 dtype : int64 4. \u66ff\u6362 str.replace \u548c replace \u5e76\u4e0d\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5728\u4f7f\u7528\u5b57\u7b26\u4e32\u66ff\u6362\u65f6\u5e94\u5f53\u4f7f\u7528\u524d\u8005\u3002 In [ 64 ]: s = pd . Series ([ 'a_1_b' , 'c_?' ]) In [ 65 ]: s . str . replace ( '\\d|\\?' , 'new' , regex = True ) Out [ 65 ]: 0 a_new_b 1 c_new dtype : object \u5f53\u9700\u8981\u5bf9\u4e0d\u540c\u90e8\u5206\u8fdb\u884c\u6709\u5dee\u522b\u7684\u66ff\u6362\u65f6\uff0c\u53ef\u4ee5\u5229\u7528 \u5b50\u7ec4 \u7684\u65b9\u6cd5\uff0c\u5e76\u4e14\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u66ff\u6362\u51fd\u6570\u6765\u5206\u522b\u8fdb\u884c\u5904\u7406\uff0c\u6ce8\u610f group(k) \u4ee3\u8868\u5339\u914d\u5230\u7684\u7b2c k \u4e2a\u5b50\u7ec4\uff08\u5706\u62ec\u53f7\u4e4b\u95f4\u7684\u5185\u5bb9\uff09\uff1a In [ 66 ]: s = pd . Series ([ '\u4e0a\u6d77\u5e02\u9ec4\u6d66\u533a\u65b9\u6d5c\u4e2d\u8def249\u53f7' , .... : '\u4e0a\u6d77\u5e02\u5b9d\u5c71\u533a\u5bc6\u5c71\u8def5\u53f7' , .... : '\u5317\u4eac\u5e02\u660c\u5e73\u533a\u5317\u519c\u8def2\u53f7' ]) .... : In [ 67 ]: pat = '(\\w+\u5e02)(\\w+\u533a)(\\w+\u8def)(\\d+\u53f7)' In [ 68 ]: city = { '\u4e0a\u6d77\u5e02' : 'Shanghai' , '\u5317\u4eac\u5e02' : 'Beijing' } In [ 69 ]: district = { '\u660c\u5e73\u533a' : 'CP District' , .... : '\u9ec4\u6d66\u533a' : 'HP District' , .... : '\u5b9d\u5c71\u533a' : 'BS District' } .... : In [ 70 ]: road = { '\u65b9\u6d5c\u4e2d\u8def' : 'Mid Fangbin Road' , .... : '\u5bc6\u5c71\u8def' : 'Mishan Road' , .... : '\u5317\u519c\u8def' : 'Beinong Road' } .... : In [ 71 ]: def my_func ( m ): .... : str_city = city [ m . group ( 1 )] .... : str_district = district [ m . group ( 2 )] .... : str_road = road [ m . group ( 3 )] .... : str_no = 'No. ' + m . group ( 4 )[: - 1 ] .... : return ' ' . join ([ str_city , .... : str_district , .... : str_road , .... : str_no ]) .... : In [ 72 ]: s . str . replace ( pat , my_func , regex = True ) Out [ 72 ]: 0 Shanghai HP District Mid Fangbin Road No . 249 1 Shanghai BS District Mishan Road No . 5 2 Beijing CP District Beinong Road No . 2 dtype : object \u8fd9\u91cc\u7684\u6570\u5b57\u6807\u8bc6\u5e76\u4e0d\u76f4\u89c2\uff0c\u53ef\u4ee5\u4f7f\u7528 \u547d\u540d\u5b50\u7ec4 \u66f4\u52a0\u6e05\u6670\u5730\u5199\u51fa\u5b50\u7ec4\u4ee3\u8868\u7684\u542b\u4e49\uff1a In [ 73 ]: pat = '(?P<\u5e02\u540d>\\w+\u5e02)(?P<\u533a\u540d>\\w+\u533a)(?P<\u8def\u540d>\\w+\u8def)(?P<\u7f16\u53f7>\\d+\u53f7)' In [ 74 ]: def my_func ( m ): .... : str_city = city [ m . group ( '\u5e02\u540d' )] .... : str_district = district [ m . group ( '\u533a\u540d' )] .... : str_road = road [ m . group ( '\u8def\u540d' )] .... : str_no = 'No. ' + m . group ( '\u7f16\u53f7' )[: - 1 ] .... : return ' ' . join ([ str_city , .... : str_district , .... : str_road , .... : str_no ]) .... : In [ 75 ]: s . str . replace ( pat , my_func , regex = True ) Out [ 75 ]: 0 Shanghai HP District Mid Fangbin Road No . 249 1 Shanghai BS District Mishan Road No . 5 2 Beijing CP District Beinong Road No . 2 dtype : object \u8fd9\u91cc\u867d\u7136\u770b\u8d77\u6765\u6709\u4e9b\u7e41\u6742\uff0c\u4f46\u662f\u5b9e\u9645\u6570\u636e\u5904\u7406\u4e2d\u5bf9\u5e94\u7684\u66ff\u6362\uff0c\u4e00\u822c\u90fd\u4f1a\u901a\u8fc7\u4ee3\u7801\u6765\u83b7\u53d6\u6570\u636e\u4ece\u800c\u6784\u9020\u5b57\u5178\u6620\u5c04\uff0c\u5728\u5177\u4f53\u5199\u6cd5\u4e0a\u4f1a\u7b80\u6d01\u7684\u591a\u3002 5. \u63d0\u53d6 \u63d0\u53d6\u65e2\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u79cd\u8fd4\u56de\u5177\u4f53\u5143\u7d20\uff08\u800c\u4e0d\u662f\u5e03\u5c14\u503c\u6216\u5143\u7d20\u5bf9\u5e94\u7684\u7d22\u5f15\u4f4d\u7f6e\uff09\u7684\u5339\u914d\u64cd\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u62c6\u5206\u64cd\u4f5c\u3002\u524d\u9762\u63d0\u5230\u7684 str.split \u4f8b\u5b50\u4e2d\u4f1a\u628a\u5206\u9694\u7b26\u53bb\u9664\uff0c\u8fd9\u5e76\u4e0d\u662f\u7528\u6237\u60f3\u8981\u7684\u6548\u679c\uff0c\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u7528 str.extract \u8fdb\u884c\u63d0\u53d6\uff1a In [ 76 ]: pat = '(\\w+\u5e02)(\\w+\u533a)(\\w+\u8def)(\\d+\u53f7)' In [ 77 ]: s . str . extract ( pat ) Out [ 77 ]: 0 1 2 3 0 \u4e0a\u6d77\u5e02 \u9ec4\u6d66\u533a \u65b9\u6d5c\u4e2d\u8def 249 \u53f7 1 \u4e0a\u6d77\u5e02 \u5b9d\u5c71\u533a \u5bc6\u5c71\u8def 5 \u53f7 2 \u5317\u4eac\u5e02 \u660c\u5e73\u533a \u5317\u519c\u8def 2 \u53f7 \u901a\u8fc7\u5b50\u7ec4\u7684\u547d\u540d\uff0c\u53ef\u4ee5\u76f4\u63a5\u5bf9\u65b0\u751f\u6210 DataFrame \u7684\u5217\u547d\u540d\uff1a In [ 78 ]: pat = '(?P<\u5e02\u540d>\\w+\u5e02)(?P<\u533a\u540d>\\w+\u533a)(?P<\u8def\u540d>\\w+\u8def)(?P<\u7f16\u53f7>\\d+\u53f7)' In [ 79 ]: s . str . extract ( pat ) Out [ 79 ]: \u5e02\u540d \u533a\u540d \u8def\u540d \u7f16\u53f7 0 \u4e0a\u6d77\u5e02 \u9ec4\u6d66\u533a \u65b9\u6d5c\u4e2d\u8def 249 \u53f7 1 \u4e0a\u6d77\u5e02 \u5b9d\u5c71\u533a \u5bc6\u5c71\u8def 5 \u53f7 2 \u5317\u4eac\u5e02 \u660c\u5e73\u533a \u5317\u519c\u8def 2 \u53f7 str.extractall \u4e0d\u540c\u4e8e str.extract \u53ea\u5339\u914d\u4e00\u6b21\uff0c\u5b83\u4f1a\u628a\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u6a21\u5f0f\u5168\u90e8\u5339\u914d\u51fa\u6765\uff0c\u5982\u679c\u5b58\u5728\u591a\u4e2a\u7ed3\u679c\uff0c\u5219\u4ee5\u591a\u7ea7\u7d22\u5f15\u7684\u65b9\u5f0f\u5b58\u50a8\uff1a In [ 80 ]: s = pd . Series ([ 'A135T15,A26S5' , 'B674S2,B25T6' ], index = [ 'my_A' , 'my_B' ]) In [ 81 ]: pat = '[A|B](\\d+)[T|S](\\d+)' In [ 82 ]: s . str . extractall ( pat ) Out [ 82 ]: 0 1 match my_A 0 135 15 1 26 5 my_B 0 674 2 1 25 6 In [ 83 ]: pat_with_name = '[A|B](?P<name1>\\d+)[T|S](?P<name2>\\d+)' In [ 84 ]: s . str . extractall ( pat_with_name ) Out [ 84 ]: name1 name2 match my_A 0 135 15 1 26 5 my_B 0 674 2 1 25 6 str.findall \u7684\u529f\u80fd\u7c7b\u4f3c\u4e8e str.extractall \uff0c\u533a\u522b\u5728\u4e8e\u524d\u8005\u628a\u7ed3\u679c\u5b58\u5165\u5217\u8868\u4e2d\uff0c\u800c\u540e\u8005\u5904\u7406\u4e3a\u591a\u7ea7\u7d22\u5f15\uff0c\u6bcf\u4e2a\u884c\u53ea\u5bf9\u5e94\u4e00\u7ec4\u5339\u914d\uff0c\u800c\u4e0d\u662f\u628a\u6240\u6709\u5339\u914d\u7ec4\u5408\u6784\u6210\u5217\u8868\u3002 In [ 85 ]: s . str . findall ( pat ) Out [ 85 ]: my_A [( 135 , 15 ), ( 26 , 5 )] my_B [( 674 , 2 ), ( 25 , 6 )] dtype : object \u56db\u3001\u5e38\u7528\u5b57\u7b26\u4e32\u51fd\u6570 \u9664\u4e86\u4e0a\u8ff0\u4ecb\u7ecd\u7684\u4e94\u7c7b\u5b57\u7b26\u4e32\u64cd\u4f5c\u6709\u5173\u7684\u51fd\u6570\u4e4b\u5916\uff0c str \u5bf9\u8c61\u4e0a\u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5b9e\u7528\u7684\u5176\u4ed6\u65b9\u6cd5\uff0c\u5728\u6b64\u8fdb\u884c\u4ecb\u7ecd\uff1a 1. \u5b57\u6bcd\u578b\u51fd\u6570 upper, lower, title, capitalize, swapcase \u8fd9\u4e94\u4e2a\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u8f6c\u5316\uff0c\u4ece\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u5c31\u5bb9\u6613\u9886\u4f1a\u5176\u529f\u80fd\uff1a In [ 86 ]: s = pd . Series ([ 'lower' , 'CAPITALS' , 'this is a sentence' , 'SwApCaSe' ]) In [ 87 ]: s . str . upper () Out [ 87 ]: 0 LOWER 1 CAPITALS 2 THIS IS A SENTENCE 3 SWAPCASE dtype : object In [ 88 ]: s . str . lower () Out [ 88 ]: 0 lower 1 capitals 2 this is a sentence 3 swapcase dtype : object In [ 89 ]: s . str . title () Out [ 89 ]: 0 Lower 1 Capitals 2 This Is A Sentence 3 Swapcase dtype : object In [ 90 ]: s . str . capitalize () Out [ 90 ]: 0 Lower 1 Capitals 2 This is a sentence 3 Swapcase dtype : object In [ 91 ]: s . str . swapcase () Out [ 91 ]: 0 LOWER 1 capitals 2 THIS IS A SENTENCE 3 sWaPcAsE dtype : object 2. \u6570\u503c\u578b\u51fd\u6570 \u8fd9\u91cc\u7740\u91cd\u9700\u8981\u4ecb\u7ecd\u7684\u662f pd.to_numeric \u65b9\u6cd5\uff0c\u5b83\u867d\u7136\u4e0d\u662f str \u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u80fd\u591f\u5bf9\u5b57\u7b26\u683c\u5f0f\u7684\u6570\u503c\u8fdb\u884c\u5feb\u901f\u8f6c\u6362\u548c\u7b5b\u9009\u3002\u5176\u4e3b\u8981\u53c2\u6570\u5305\u62ec errors \u548c downcast \u5206\u522b\u4ee3\u8868\u4e86\u975e\u6570\u503c\u7684\u5904\u7406\u6a21\u5f0f\u548c\u8f6c\u6362\u7c7b\u578b\u3002\u5176\u4e2d\uff0c\u5bf9\u4e8e\u4e0d\u80fd\u8f6c\u6362\u4e3a\u6570\u503c\u7684\u6709\u4e09\u79cd errors \u9009\u9879\uff0c raise, coerce, ignore \u5206\u522b\u8868\u793a\u76f4\u63a5\u62a5\u9519\u3001\u8bbe\u4e3a\u7f3a\u5931\u4ee5\u53ca\u4fdd\u6301\u539f\u6765\u7684\u5b57\u7b26\u4e32\u3002 In [ 92 ]: s = pd . Series ([ '1' , '2.2' , '2e' , '??' , '-2.1' , '0' ]) In [ 93 ]: pd . to_numeric ( s , errors = 'ignore' ) Out [ 93 ]: 0 1 1 2.2 2 2 e 3 ?? 4 - 2.1 5 0 dtype : object In [ 94 ]: pd . to_numeric ( s , errors = 'coerce' ) Out [ 94 ]: 0 1.0 1 2.2 2 NaN 3 NaN 4 - 2.1 5 0.0 dtype : float64 \u5728\u6570\u636e\u6e05\u6d17\u65f6\uff0c\u53ef\u4ee5\u5229\u7528 coerce \u7684\u8bbe\u5b9a\uff0c\u5feb\u901f\u67e5\u770b\u975e\u6570\u503c\u578b\u7684\u884c\uff1a In [ 95 ]: s [ pd . to_numeric ( s , errors = 'coerce' ) . isna ()] Out [ 95 ]: 2 2 e 3 ?? dtype : object 3. \u7edf\u8ba1\u578b\u51fd\u6570 count \u548c len \u7684\u4f5c\u7528\u5206\u522b\u662f\u8fd4\u56de\u51fa\u73b0\u6b63\u5219\u6a21\u5f0f\u7684\u6b21\u6570\u548c\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff1a In [ 96 ]: s = pd . Series ([ 'cat rat fat at' , 'get feed sheet heat' ]) In [ 97 ]: s . str . count ( '[r|f]at|ee' ) Out [ 97 ]: 0 2 1 2 dtype : int64 In [ 98 ]: s . str . len () Out [ 98 ]: 0 14 1 19 dtype : int64 4. \u683c\u5f0f\u578b\u51fd\u6570 \u683c\u5f0f\u578b\u51fd\u6570\u4e3b\u8981\u5206\u4e3a\u4e24\u7c7b\uff0c\u7b2c\u4e00\u79cd\u662f\u9664\u7a7a\u578b\uff0c\u7b2c\u4e8c\u79cd\u662f\u586b\u5145\u578b\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u7c7b\u51fd\u6570\u4e00\u5171\u6709\u4e09\u79cd\uff0c\u5b83\u4eec\u5206\u522b\u662f strip, rstrip, lstrip \uff0c\u5206\u522b\u4ee3\u8868\u53bb\u9664\u4e24\u4fa7\u7a7a\u683c\u3001\u53f3\u4fa7\u7a7a\u683c\u548c\u5de6\u4fa7\u7a7a\u683c\u3002\u8fd9\u4e9b\u51fd\u6570\u5728\u6570\u636e\u6e05\u6d17\u65f6\u662f\u6709\u7528\u7684\uff0c\u7279\u522b\u662f\u5217\u540d\u542b\u6709\u975e\u6cd5\u7a7a\u683c\u7684\u65f6\u5019\u3002 In [ 99 ]: my_index = pd . Index ([ ' col1' , 'col2 ' , ' col3 ' ]) In [ 100 ]: my_index . str . strip () . str . len () Out [ 100 ]: Int64Index ([ 4 , 4 , 4 ], dtype = 'int64' ) In [ 101 ]: my_index . str . rstrip () . str . len () Out [ 101 ]: Int64Index ([ 5 , 4 , 5 ], dtype = 'int64' ) In [ 102 ]: my_index . str . lstrip () . str . len () Out [ 102 ]: Int64Index ([ 4 , 5 , 5 ], dtype = 'int64' ) \u5bf9\u4e8e\u586b\u5145\u578b\u51fd\u6570\u800c\u8a00\uff0c pad \u662f\u6700\u7075\u6d3b\u7684\uff0c\u5b83\u53ef\u4ee5\u9009\u5b9a\u5b57\u7b26\u4e32\u957f\u5ea6\u3001\u586b\u5145\u7684\u65b9\u5411\u548c\u586b\u5145\u5185\u5bb9\uff1a In [ 103 ]: s = pd . Series ([ 'a' , 'b' , 'c' ]) In [ 104 ]: s . str . pad ( 5 , 'left' , '*' ) Out [ 104 ]: 0 **** a 1 **** b 2 **** c dtype : object In [ 105 ]: s . str . pad ( 5 , 'right' , '*' ) Out [ 105 ]: 0 a **** 1 b **** 2 c **** dtype : object In [ 106 ]: s . str . pad ( 5 , 'both' , '*' ) Out [ 106 ]: 0 ** a ** 1 ** b ** 2 ** c ** dtype : object \u4e0a\u8ff0\u7684\u4e09\u79cd\u60c5\u51b5\u53ef\u4ee5\u5206\u522b\u7528 rjust, ljust, center \u6765\u7b49\u6548\u5b8c\u6210\uff0c\u9700\u8981\u6ce8\u610f ljust \u662f\u6307\u53f3\u4fa7\u586b\u5145\u800c\u4e0d\u662f\u5de6\u4fa7\u586b\u5145\uff1a In [ 107 ]: s . str . rjust ( 5 , '*' ) Out [ 107 ]: 0 **** a 1 **** b 2 **** c dtype : object In [ 108 ]: s . str . ljust ( 5 , '*' ) Out [ 108 ]: 0 a **** 1 b **** 2 c **** dtype : object In [ 109 ]: s . str . center ( 5 , '*' ) Out [ 109 ]: 0 ** a ** 1 ** b ** 2 ** c ** dtype : object \u5728\u8bfb\u53d6 excel \u6587\u4ef6\u65f6\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0\u6570\u5b57\u524d\u8865 0 \u7684\u9700\u6c42\uff0c\u4f8b\u5982\u8bc1\u5238\u4ee3\u7801\u8bfb\u5165\u7684\u65f6\u5019\u4f1a\u628a\u201d000007\u201d \u4f5c\u4e3a\u6570\u503c 7 \u6765\u5904\u7406\uff0c pandas \u4e2d\u9664\u4e86\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u7684\u5de6\u4fa7\u586b\u5145\u51fd\u6570\u8fdb\u884c\u64cd\u4f5c\u4e4b\u5916\uff0c\u8fd8\u53ef\u7528 zfill \u6765\u5b9e\u73b0\u3002 In [ 110 ]: s = pd . Series ([ 7 , 155 , 303000 ]) . astype ( 'string' ) In [ 111 ]: s . str . pad ( 6 , 'left' , '0' ) Out [ 111 ]: 0 000007 1 000155 2 303000 dtype : string In [ 112 ]: s . str . rjust ( 6 , '0' ) Out [ 112 ]: 0 000007 1 000155 2 303000 dtype : string In [ 113 ]: s . str . zfill ( 6 ) Out [ 113 ]: 0 000007 1 000155 2 303000 dtype : string \u4e94\u3001\u7ec3\u4e60 Ex1\uff1a\u623f\u5c4b\u4fe1\u606f\u6570\u636e\u96c6 \u73b0\u6709\u4e00\u4efd\u623f\u5c4b\u4fe1\u606f\u6570\u636e\u96c6\u5982\u4e0b\uff1a In [ 114 ]: df = pd . read_excel ( 'data/house_info.xls' , usecols = [ ..... : 'floor' , 'year' , 'area' , 'price' ]) ..... : In [ 115 ]: df . head ( 3 ) Out [ 115 ]: floor year area price 0 \u9ad8\u5c42 \uff08 \u51716\u5c42 \uff09 1986 \u5e74\u5efa 58.23 \u33a1 155 \u4e07 1 \u4e2d\u5c42 \uff08 \u517120\u5c42 \uff09 2020 \u5e74\u5efa 88 \u33a1 155 \u4e07 2 \u4f4e\u5c42 \uff08 \u517128\u5c42 \uff09 2010 \u5e74\u5efa 89.33 \u33a1 365 \u4e07 \u5c06 year \u5217\u6539\u4e3a\u6574\u6570\u5e74\u4efd\u5b58\u50a8\u3002 \u5c06 floor \u5217\u66ff\u6362\u4e3a Level, Highest \u4e24\u5217\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u5206\u522b\u4e3a string \u7c7b\u578b\u7684\u5c42\u7c7b\u522b\uff08\u9ad8\u5c42\u3001\u4e2d\u5c42\u3001\u4f4e\u5c42\uff09\u4e0e\u6574\u6570\u7c7b\u578b\u7684\u6700\u9ad8\u5c42\u6570\u3002 \u8ba1\u7b97\u623f\u5c4b\u6bcf\u5e73\u7c73\u7684\u5747\u4ef7 avg_price \uff0c\u4ee5 ***\u5143/\u5e73\u7c73 \u7684\u683c\u5f0f\u5b58\u50a8\u5230\u8868\u4e2d\uff0c\u5176\u4e2d *** \u4e3a\u6574\u6570\u3002 Ex2\uff1a\u300a\u6743\u529b\u7684\u6e38\u620f\u300b\u5267\u672c\u6570\u636e\u96c6 \u73b0\u6709\u4e00\u4efd\u6743\u529b\u7684\u6e38\u620f\u5267\u672c\u6570\u636e\u96c6\u5982\u4e0b\uff1a In [ 116 ]: df = pd . read_csv ( 'data/script.csv' ) In [ 117 ]: df . head ( 3 ) Out [ 117 ]: Release Date Season Episode Episode Title Name Sentence 0 2011 - 04 - 17 Season 1 Episode 1 Winter is Coming waymar royce What do you expect ? They 're savages. One lot s... 1 2011 - 04 - 17 Season 1 Episode 1 Winter is Coming will I 've never seen wildlings do a thing like this... 2 2011 - 04 - 17 Season 1 Episode 1 Winter is Coming waymar royce How close did you get ? \u8ba1\u7b97\u6bcf\u4e00\u4e2a Episode \u7684\u53f0\u8bcd\u6761\u6570\u3002 \u4ee5\u7a7a\u683c\u4e3a\u5355\u8bcd\u7684\u5206\u5272\u7b26\u53f7\uff0c\u8bf7\u6c42\u51fa\u5355\u53e5\u53f0\u8bcd\u5e73\u5747\u5355\u8bcd\u91cf\u6700\u591a\u7684\u524d\u4e94\u4e2a\u4eba\u3002 \u82e5\u67d0\u4eba\u7684\u53f0\u8bcd\u4e2d\u542b\u6709\u95ee\u53f7\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u8bf4\u53f0\u8bcd\u7684\u4eba\u5373\u4e3a\u56de\u7b54\u8005\u3002\u82e5\u4e0a\u4e00\u4eba\u53f0\u8bcd\u4e2d\u542b\u6709 \u4e2a\u95ee\u53f7\uff0c\u5219\u8ba4\u4e3a\u56de\u7b54\u8005\u56de\u7b54\u4e86 \u4e2a\u95ee\u9898\uff0c\u8bf7\u6c42\u51fa\u56de\u7b54\u6700\u591a\u95ee\u9898\u7684\u524d\u4e94\u4e2a\u4eba\u3002","title":"\u516b\u3001\u6587\u672c\u6570\u636e"},{"location":"pandas/part8/#str","text":"","title":"\u4e00\u3001str \u5bf9\u8c61"},{"location":"pandas/part8/#1-str","text":"str \u5bf9\u8c61\u662f\u5b9a\u4e49\u5728 Index \u6216 Series \u4e0a\u7684\u5c5e\u6027\uff0c\u4e13\u95e8\u7528\u4e8e\u5904\u7406\u6bcf\u4e2a\u5143\u7d20\u7684\u6587\u672c\u5185\u5bb9\uff0c\u5176\u5185\u90e8\u5b9a\u4e49\u4e86\u5927\u91cf\u65b9\u6cd5\uff0c\u56e0\u6b64\u5bf9\u4e00\u4e2a\u5e8f\u5217\u8fdb\u884c\u6587\u672c\u5904\u7406\uff0c\u9996\u5148\u9700\u8981\u83b7\u53d6\u5176 str \u5bf9\u8c61\u3002\u5728 Python \u6807\u51c6\u5e93\u4e2d\u4e5f\u6709 str \u6a21\u5757\uff0c\u4e3a\u4e86\u4f7f\u7528\u4e0a\u7684\u4fbf\u5229\uff0c\u6709\u8bb8\u591a\u51fd\u6570\u7684\u7528\u6cd5 pandas \u7167\u642c\u4e86\u5b83\u7684\u8bbe\u8ba1\uff0c\u4f8b\u5982\u5b57\u6bcd\u8f6c\u4e3a\u5927\u5199\u7684\u64cd\u4f5c\uff1a In [ 3 ]: var = 'abcd' In [ 4 ]: str . upper ( var ) # Python\u5185\u7f6estr\u6a21\u5757 Out [ 4 ]: 'ABCD' In [ 5 ]: s = pd . Series ([ 'abcd' , 'efg' , 'hi' ]) In [ 6 ]: s . str Out [ 6 ]: < pandas . core . strings . accessor . StringMethods at 0x13630ffc430 > In [ 7 ]: s . str . upper () # pandas\u4e2dstr\u5bf9\u8c61\u4e0a\u7684upper\u65b9\u6cd5 Out [ 7 ]: 0 ABCD 1 EFG 2 HI dtype : object \u6839\u636e\u6587\u6863 API \u6750\u6599\uff0c\u5728 pandas \u7684 50 \u4e2a str \u5bf9\u8c61\u65b9\u6cd5\u4e2d\uff0c\u6709 31 \u4e2a\u662f\u548c\u6807\u51c6\u5e93\u4e2d\u7684 str \u6a21\u5757\u65b9\u6cd5\u540c\u540d\u4e14\u529f\u80fd\u4e00\u81f4\uff0c\u8fd9\u4e3a\u6279\u91cf\u5904\u7406\u5e8f\u5217\u63d0\u4f9b\u4e86\u6709\u529b\u7684\u5de5\u5177\u3002","title":"1. str \u5bf9\u8c61\u7684\u8bbe\u8ba1\u610f\u56fe"},{"location":"pandas/part8/#2","text":"\u5bf9\u4e8e str \u5bf9\u8c61\u800c\u8a00\uff0c\u53ef\u7406\u89e3\u4e3a\u5176\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u4e86\u5e8f\u5217\u5316\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u5728\u4e00\u822c\u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u901a\u8fc7 [] \u53ef\u4ee5\u53d6\u51fa\u67d0\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\uff1a In [ 8 ]: var [ 0 ] Out [ 8 ]: 'a' \u540c\u65f6\u4e5f\u80fd\u901a\u8fc7\u5207\u7247\u5f97\u5230\u5b50\u4e32\uff1a In [ 9 ]: var [ - 1 : 0 : - 2 ] Out [ 9 ]: 'db' \u901a\u8fc7\u5bf9 str \u5bf9\u8c61\u4f7f\u7528 [] \u7d22\u5f15\u5668\uff0c\u53ef\u4ee5\u5b8c\u6210\u5b8c\u5168\u4e00\u81f4\u7684\u529f\u80fd\uff0c\u5e76\u4e14\u5982\u679c\u8d85\u51fa\u8303\u56f4\u5219\u8fd4\u56de\u7f3a\u5931\u503c\uff1a In [ 10 ]: s . str [ 0 ] Out [ 10 ]: 0 a 1 e 2 h dtype : object In [ 11 ]: s . str [ - 1 : 0 : - 2 ] Out [ 11 ]: 0 db 1 g 2 i dtype : object In [ 12 ]: s . str [ 2 ] Out [ 12 ]: 0 c 1 g 2 NaN dtype : object","title":"2. [] \u7d22\u5f15\u5668[#]"},{"location":"pandas/part8/#3-string","text":"\u5728\u4e0a\u4e00\u7ae0\u63d0\u5230\uff0c\u4ece pandas \u7684 1.0.0 \u7248\u672c\u5f00\u59cb\uff0c\u5f15\u5165\u4e86 string \u7c7b\u578b\uff0c\u5176\u5f15\u5165\u7684\u52a8\u673a\u5728\u4e8e\uff1a\u539f\u6765\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u90fd\u4f1a\u4ee5 object \u7c7b\u578b\u7684 Series \u8fdb\u884c\u5b58\u50a8\uff0c\u4f46 object \u7c7b\u578b\u53ea\u5e94\u5f53\u5b58\u50a8\u6df7\u5408\u7c7b\u578b\uff0c\u4f8b\u5982\u540c\u65f6\u5b58\u50a8\u6d6e\u70b9\u3001\u5b57\u7b26\u4e32\u3001\u5b57\u5178\u3001\u5217\u8868\u3001\u81ea\u5b9a\u4e49\u7c7b\u578b\u7b49\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32\u6709\u5fc5\u8981\u540c\u6570\u503c\u578b\u6216 category \u4e00\u6837\uff0c\u5177\u6709\u81ea\u5df1\u7684\u6570\u636e\u5b58\u50a8\u7c7b\u578b\uff0c\u4ece\u800c\u5f15\u5165\u4e86 string \u7c7b\u578b\u3002 \u603b\u4f53\u4e0a\u8bf4\uff0c\u7edd\u5927\u591a\u6570\u5bf9\u4e8e object \u548c string \u7c7b\u578b\u7684\u5e8f\u5217\u4f7f\u7528 str \u5bf9\u8c61\u65b9\u6cd5\u4ea7\u751f\u7684\u7ed3\u679c\u662f\u4e00\u81f4\uff0c\u4f46\u662f\u5728\u4e0b\u9762\u63d0\u5230\u7684\u4e24\u70b9\u4e0a\u6709\u8f83\u5927\u5dee\u5f02\uff1a \u9996\u5148\uff0c\u5e94\u5f53\u5c3d\u91cf\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u5e8f\u5217\u4e2d\u7684\u503c\u90fd\u662f\u5b57\u7b26\u4e32\u7684\u60c5\u51b5\u4e0b\u624d\u4f7f\u7528 str \u5c5e\u6027\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u5176\u5fc5\u8981\u6761\u4ef6\u662f\u5e8f\u5217\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u53ef\u8fed\u4ee3\uff08Iterable\uff09\u5bf9\u8c61\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u5b57\u7b26\u4e32\u3001\u5b57\u5178\u3001\u5217\u8868\u3002\u5bf9\u4e8e\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c string \u7c7b\u578b\u7684 str \u5bf9\u8c61\u548c object \u7c7b\u578b\u7684 str \u5bf9\u8c61\u8fd4\u56de\u7ed3\u679c\u53ef\u80fd\u662f\u4e0d\u540c\u7684\u3002 In [ 13 ]: s = pd . Series ([{ 1 : 'temp_1' , 2 : 'temp_2' }, [ 'a' , 'b' ], 0.5 , 'my_string' ]) In [ 14 ]: s . str [ 1 ] Out [ 14 ]: 0 temp_1 1 b 2 NaN 3 y dtype : object In [ 15 ]: s . astype ( 'string' ) . str [ 1 ] Out [ 15 ]: 0 1 1 ' 2 . 3 y dtype : string \u9664\u4e86\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e32\u5143\u7d20\uff0c\u524d\u4e09\u4e2a\u5143\u7d20\u8fd4\u56de\u7684\u503c\u90fd\u4e0d\u540c\uff0c\u5176\u539f\u56e0\u5728\u4e8e\u5f53\u5e8f\u5217\u7c7b\u578b\u4e3a object \u65f6\uff0c\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c [] \u7d22\u5f15\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5b57\u5178\u800c\u8a00\uff0c\u8fd4\u56de temp_1 \u5b57\u7b26\u4e32\uff0c\u5bf9\u4e8e\u5217\u8868\u5219\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u503c\uff0c\u800c\u7b2c\u4e09\u4e2a\u4e3a\u4e0d\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u8fd4\u56de\u7f3a\u5931\u503c\uff0c\u7b2c\u56db\u4e2a\u662f\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c [] \u7d22\u5f15\u3002\u800c string \u7c7b\u578b\u7684 str \u5bf9\u8c61\u5148\u628a\u6574\u4e2a\u5143\u7d20\u8f6c\u4e3a\u5b57\u9762\u610f\u4e49\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\u5bf9\u4e8e\u5217\u8868\u800c\u8a00\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5373 \u201c{\u201d\uff0c\u800c\u5bf9\u4e8e\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e32\u5143\u7d20\u800c\u8a00\uff0c\u6070\u597d\u8f6c\u5316\u524d\u540e\u7684\u8868\u793a\u65b9\u6cd5\u4e00\u81f4\uff0c\u56e0\u6b64\u7ed3\u679c\u548c object \u7c7b\u578b\u4e00\u81f4\u3002 \u9664\u4e86\u5bf9\u4e8e\u67d0\u4e9b\u5bf9\u8c61\u7684 str \u5e8f\u5217\u5316\u65b9\u6cd5\u4e0d\u540c\u4e4b\u5916\uff0c\u4e24\u8005\u53e6\u5916\u7684\u4e00\u4e2a\u5dee\u522b\u5728\u4e8e\uff0c string \u7c7b\u578b\u662f Nullable \u7c7b\u578b\uff0c\u4f46 object \u4e0d\u662f\u3002\u8fd9\u610f\u5473\u7740 string \u7c7b\u578b\u7684\u5e8f\u5217\uff0c\u5982\u679c\u8c03\u7528\u7684 str \u65b9\u6cd5\u8fd4\u56de\u503c\u4e3a\u6574\u6570 Series \u548c\u5e03\u5c14 Series \u65f6\uff0c\u5176\u5206\u522b\u5bf9\u5e94\u7684 dtype \u662f Int \u548c boolean \u7684 Nullable \u7c7b\u578b\uff0c\u800c object \u7c7b\u578b\u5219\u4f1a\u5206\u522b\u8fd4\u56de int/float \u548c bool/object \uff0c\u53d6\u51b3\u4e8e\u7f3a\u5931\u503c\u7684\u5b58\u5728\u4e0e\u5426\u3002\u540c\u65f6\uff0c\u5b57\u7b26\u4e32\u7684\u6bd4\u8f83\u64cd\u4f5c\uff0c\u4e5f\u5177\u6709\u76f8\u4f3c\u7684\u7279\u6027\uff0c string \u8fd4\u56de Nullable \u7c7b\u578b\uff0c\u4f46 object \u4e0d\u4f1a\u3002 In [ 16 ]: s = pd . Series ([ 'a' ]) In [ 17 ]: s . str . len () Out [ 17 ]: 0 1 dtype : int64 In [ 18 ]: s . astype ( 'string' ) . str . len () Out [ 18 ]: 0 1 dtype : Int64 In [ 19 ]: s == 'a' Out [ 19 ]: 0 True dtype : bool In [ 20 ]: s . astype ( 'string' ) == 'a' Out [ 20 ]: 0 True dtype : boolean In [ 21 ]: s = pd . Series ([ 'a' , np . nan ]) # \u5e26\u6709\u7f3a\u5931\u503c In [ 22 ]: s . str . len () Out [ 22 ]: 0 1.0 1 NaN dtype : float64 In [ 23 ]: s . astype ( 'string' ) . str . len () Out [ 23 ]: 0 1 1 < NA > dtype : Int64 In [ 24 ]: s == 'a' Out [ 24 ]: 0 True 1 False dtype : bool In [ 25 ]: s . astype ( 'string' ) == 'a' Out [ 25 ]: 0 True 1 < NA > dtype : boolean \u6700\u540e\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u5168\u4f53\u5143\u7d20\u4e3a\u6570\u503c\u7c7b\u578b\u7684\u5e8f\u5217\uff0c\u5373\u4f7f\u5176\u7c7b\u578b\u4e3a object \u6216\u8005 category \u4e5f\u4e0d\u5141\u8bb8\u76f4\u63a5\u4f7f\u7528 str \u5c5e\u6027\u3002\u5982\u679c\u9700\u8981\u628a\u6570\u5b57\u5f53\u6210 string \u7c7b\u578b\u5904\u7406\uff0c\u53ef\u4ee5\u4f7f\u7528 astype \u5f3a\u5236\u8f6c\u6362\u4e3a string \u7c7b\u578b\u7684 Series \uff1a In [ 26 ]: s = pd . Series ([ 12 , 345 , 6789 ]) In [ 27 ]: s . astype ( 'string' ) . str [ 1 ] Out [ 27 ]: 0 2 1 4 2 7 dtype : string","title":"3. string \u7c7b\u578b"},{"location":"pandas/part8/#_1","text":"\u8fd9\u4e00\u8282\u7684\u4e24\u4e2a\u8868\u683c\u6765\u81ea\u4e8e learn-regex-zh \u8fd9\u4e2a\u5173\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u9879\u76ee\uff0c\u5176\u4f7f\u7528 MIT \u5f00\u6e90\u8bb8\u53ef\u534f\u8bae\u3002\u8fd9\u91cc\u53ea\u662f\u4ecb\u7ecd\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u57fa\u672c\u7528\u6cd5\uff0c\u9700\u8981\u7cfb\u7edf\u5b66\u4e60\u7684\u8bfb\u8005\u53ef\u53c2\u8003 \u6b63\u5219\u8868\u8fbe\u5f0f\u5fc5\u77e5\u5fc5\u4f1a \u4e00\u4e66\u3002","title":"\u4e8c\u3001\u6b63\u5219\u8868\u8fbe\u5f0f\u57fa\u7840"},{"location":"pandas/part8/#1","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u4e00\u79cd\u6309\u7167\u67d0\u79cd\u6b63\u5219\u6a21\u5f0f\uff0c\u4ece\u5de6\u5230\u53f3\u5339\u914d\u5b57\u7b26\u4e32\u4e2d\u5185\u5bb9\u7684\u4e00\u79cd\u5de5\u5177\u3002\u5bf9\u4e8e\u4e00\u822c\u7684\u5b57\u7b26\u800c\u8a00\uff0c\u5b83\u53ef\u4ee5\u627e\u5230\u5176\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u4e3a\u4e86\u6f14\u793a\u4fbf\u5229\uff0c\u4f7f\u7528\u4e86 python \u4e2d re \u6a21\u5757\u7684 findall \u51fd\u6570\u6765\u5339\u914d\u6240\u6709\u51fa\u73b0\u8fc7\u4f46\u4e0d\u91cd\u53e0\u7684\u6a21\u5f0f\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5f85\u5339\u914d\u7684\u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u5b57\u7b26\u4e32\u4e2d\u627e\u51fa apple \uff1a In [ 28 ]: import re In [ 29 ]: re . findall ( r 'Apple' , 'Apple! This Is an Apple!' ) Out [ 29 ]: [ 'Apple' , 'Apple' ]","title":"1. \u4e00\u822c\u5b57\u7b26\u7684\u5339\u914d"},{"location":"pandas/part8/#2_1","text":"\u5143\u5b57\u7b26 \u63cf\u8ff0 . \u5339\u914d\u9664\u6362\u884c\u7b26\u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26 [ ] \u5b57\u7b26\u7c7b\uff0c\u5339\u914d\u65b9\u62ec\u53f7\u4e2d\u5305\u542b\u7684\u4efb\u610f\u5b57\u7b26\u3002 [^] \u5426\u5b9a\u5b57\u7b26\u7c7b\uff0c\u5339\u914d\u65b9\u62ec\u53f7\u4e2d\u4e0d\u5305\u542b\u7684\u4efb\u610f\u5b57\u7b26 * \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u96f6\u6b21\u6216\u591a\u6b21 + \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u4e00\u6b21\u6216\u591a\u6b21 ? \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u96f6\u6b21\u6216\u4e00\u6b21 {n,m} \u82b1\u62ec\u53f7\uff0c\u5339\u914d\u524d\u9762\u5b57\u7b26\u81f3\u5c11 n \u6b21\uff0c\u4f46\u662f\u4e0d\u8d85\u8fc7 m \u6b21 (xyz) \u5b57\u7b26\u7ec4\uff0c\u6309\u7167\u786e\u5207\u7684\u987a\u5e8f\u5339\u914d\u5b57\u7b26 xyz\u3002 | \u5206\u652f\u7ed3\u6784\uff0c\u5339\u914d\u7b26\u53f7\u4e4b\u524d\u7684\u5b57\u7b26\u6216\u540e\u9762\u7684\u5b57\u7b26 \\ \u8f6c\u4e49\u7b26\uff0c\u5b83\u53ef\u4ee5\u8fd8\u539f\u5143\u5b57\u7b26\u539f\u6765\u7684\u542b\u4e49 ^ \u5339\u914d\u884c\u7684\u5f00\u59cb $ \u5339\u914d\u884c\u7684\u7ed3\u675f In [ 30 ]: re . findall ( r '.' , 'abc' ) Out [ 30 ]: [ 'a' , 'b' , 'c' ] In [ 31 ]: re . findall ( r '[ac]' , 'abc' ) Out [ 31 ]: [ 'a' , 'c' ] In [ 32 ]: re . findall ( r '[^ac]' , 'abc' ) Out [ 32 ]: [ 'b' ] In [ 33 ]: re . findall ( r '[ab] {2} ' , 'aaaabbbb' ) # {n}\u6307\u5339\u914dn\u6b21 Out [ 33 ]: [ 'aa' , 'aa' , 'bb' , 'bb' ] In [ 34 ]: re . findall ( r 'aaa|bbb' , 'aaaabbbb' ) Out [ 34 ]: [ 'aaa' , 'bbb' ] In [ 35 ]: re . findall ( r 'a \\\\ ?|a\\*' , 'aa?a*a' ) Out [ 35 ]: [ 'a' , 'a' , 'a' , 'a' ] In [ 36 ]: re . findall ( r 'a?.' , 'abaacadaae' ) Out [ 36 ]: [ 'ab' , 'aa' , 'c' , 'ad' , 'aa' , 'e' ]","title":"2. \u5143\u5b57\u7b26\u57fa\u7840"},{"location":"pandas/part8/#3","text":"\u6b64\u5916\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u8fd8\u6709\u4e00\u7c7b\u7b80\u5199\u5b57\u7b26\u96c6\uff0c\u5176\u7b49\u4ef7\u4e8e\u4e00\u7ec4\u5b57\u7b26\u7684\u96c6\u5408\uff1a \u7b80\u5199 \u63cf\u8ff0 \\w \u5339\u914d\u6240\u6709\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf: [a-zA-Z0-9_] \\W \u5339\u914d\u975e\u5b57\u6bcd\u548c\u6570\u5b57\u7684\u5b57\u7b26: [^\\w] \\d \u5339\u914d\u6570\u5b57: [0-9] \\D \u5339\u914d\u975e\u6570\u5b57: [^\\d] \\s \u5339\u914d\u7a7a\u683c\u7b26: [\\t\\n\\f\\r\\p{Z}] \\S \u5339\u914d\u975e\u7a7a\u683c\u7b26: [^\\s] \\B \u5339\u914d\u4e00\u7ec4\u975e\u7a7a\u5b57\u7b26\u5f00\u5934\u6216\u7ed3\u5c3e\u7684\u4f4d\u7f6e\uff0c\u4e0d\u4ee3\u8868\u5177\u4f53\u5b57\u7b26 In [ 37 ]: re . findall ( r '.s' , 'Apple! This Is an Apple!' ) Out [ 37 ]: [ 'is' , 'Is' ] In [ 38 ]: re . findall ( r '\\w {2} ' , '09 8? 7w c_ 9q p@' ) Out [ 38 ]: [ '09' , '7w' , 'c_' , '9q' ] In [ 39 ]: re . findall ( r '\\w\\W\\B' , '09 8? 7w c_ 9q p@' ) Out [ 39 ]: [ '8?' , 'p@' ] In [ 40 ]: re . findall ( r '.\\s.' , 'Constant dropping wears the stone.' ) Out [ 40 ]: [ 't d' , 'g w' , 's t' , 'e s' ] In [ 41 ]: re . findall ( r '\u4e0a\u6d77\u5e02(.{2,3}\u533a)(.{2,3}\u8def)(\\d+\u53f7)' , .... : '\u4e0a\u6d77\u5e02\u9ec4\u6d66\u533a\u65b9\u6d5c\u4e2d\u8def249\u53f7 \u4e0a\u6d77\u5e02\u5b9d\u5c71\u533a\u5bc6\u5c71\u8def5\u53f7' ) .... : Out [ 41 ]: [( '\u9ec4\u6d66\u533a' , '\u65b9\u6d5c\u4e2d\u8def' , '249\u53f7' ), ( '\u5b9d\u5c71\u533a' , '\u5bc6\u5c71\u8def' , '5\u53f7' )]","title":"3. \u7b80\u5199\u5b57\u7b26\u96c6"},{"location":"pandas/part8/#_2","text":"","title":"\u4e09\u3001\u6587\u672c\u5904\u7406\u7684\u4e94\u7c7b\u64cd\u4f5c"},{"location":"pandas/part8/#1_1","text":"str.split \u80fd\u591f\u628a\u5b57\u7b26\u4e32\u7684\u5217\u8fdb\u884c\u62c6\u5206\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u53ef\u9009\u53c2\u6570\u5305\u62ec\u4ece\u5de6\u5230\u53f3\u7684\u6700\u5927\u62c6\u5206\u6b21\u6570 n \uff0c\u662f\u5426\u5c55\u5f00\u4e3a\u591a\u4e2a\u5217 expand \u3002 In [ 42 ]: s = pd . Series ([ '\u4e0a\u6d77\u5e02\u9ec4\u6d66\u533a\u65b9\u6d5c\u4e2d\u8def249\u53f7' , .... : '\u4e0a\u6d77\u5e02\u5b9d\u5c71\u533a\u5bc6\u5c71\u8def5\u53f7' ]) .... : In [ 43 ]: s . str . split ( '[\u5e02\u533a\u8def]' ) Out [ 43 ]: 0 [ \u4e0a\u6d77 , \u9ec4\u6d66 , \u65b9\u6d5c\u4e2d , 249 \u53f7 ] 1 [ \u4e0a\u6d77 , \u5b9d\u5c71 , \u5bc6\u5c71 , 5 \u53f7 ] dtype : object In [ 44 ]: s . str . split ( '[\u5e02\u533a\u8def]' , n = 2 , expand = True ) Out [ 44 ]: 0 1 2 0 \u4e0a\u6d77 \u9ec4\u6d66 \u65b9\u6d5c\u4e2d\u8def249\u53f7 1 \u4e0a\u6d77 \u5b9d\u5c71 \u5bc6\u5c71\u8def5\u53f7 \u4e0e\u5176\u7c7b\u4f3c\u7684\u51fd\u6570\u662f str.rsplit \uff0c\u5176\u533a\u522b\u5728\u4e8e\u4f7f\u7528 n \u53c2\u6570\u7684\u65f6\u5019\u662f\u4ece\u53f3\u5230\u5de6\u9650\u5236\u6700\u5927\u62c6\u5206\u6b21\u6570\u3002\u4f46\u662f\u5f53\u524d\u7248\u672c\u4e0b rsplit \u56e0\u4e3a bug \u800c\u65e0\u6cd5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u5206\u5272\uff1a In [ 45 ]: s . str . rsplit ( '[\u5e02\u533a\u8def]' , n = 2 , expand = True ) Out [ 45 ]: 0 0 \u4e0a\u6d77\u5e02\u9ec4\u6d66\u533a\u65b9\u6d5c\u4e2d\u8def249\u53f7 1 \u4e0a\u6d77\u5e02\u5b9d\u5c71\u533a\u5bc6\u5c71\u8def5\u53f7","title":"1. \u62c6\u5206"},{"location":"pandas/part8/#2_2","text":"\u5173\u4e8e\u5408\u5e76\u4e00\u5171\u6709\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u662f str.join \u548c str.cat \u3002 str.join \u8868\u793a\u7528\u67d0\u4e2a\u8fde\u63a5\u7b26\u628a Series \u4e2d\u7684\u5b57\u7b26\u4e32\u5217\u8868\u8fde\u63a5\u8d77\u6765\uff0c\u5982\u679c\u5217\u8868\u4e2d\u51fa\u73b0\u4e86\u975e\u5b57\u7b26\u4e32\u5143\u7d20\u5219\u8fd4\u56de\u7f3a\u5931\u503c\uff1a In [ 46 ]: s = pd . Series ([[ 'a' , 'b' ], [ 1 , 'a' ], [[ 'a' , 'b' ], 'c' ]]) In [ 47 ]: s . str . join ( '-' ) Out [ 47 ]: 0 a - b 1 NaN 2 NaN dtype : object str.cat \u7528\u4e8e\u5408\u5e76\u4e24\u4e2a\u5e8f\u5217\uff0c\u4e3b\u8981\u53c2\u6570\u4e3a\u8fde\u63a5\u7b26 sep \u3001\u8fde\u63a5\u5f62\u5f0f join \u4ee5\u53ca\u7f3a\u5931\u503c\u66ff\u4ee3\u7b26\u53f7 na_rep \uff0c\u5176\u4e2d\u8fde\u63a5\u5f62\u5f0f\u9ed8\u8ba4\u4e3a\u4ee5\u7d22\u5f15\u4e3a\u952e\u7684\u5de6\u8fde\u63a5\u3002 In [ 48 ]: s1 = pd . Series ([ 'a' , 'b' ]) In [ 49 ]: s2 = pd . Series ([ 'cat' , 'dog' ]) In [ 50 ]: s1 . str . cat ( s2 , sep = '-' ) Out [ 50 ]: 0 a - cat 1 b - dog dtype : object In [ 51 ]: s2 . index = [ 1 , 2 ] In [ 52 ]: s1 . str . cat ( s2 , sep = '-' , na_rep = '?' , join = 'outer' ) Out [ 52 ]: 0 a - ? 1 b - cat 2 ? - dog dtype : object","title":"2. \u5408\u5e76"},{"location":"pandas/part8/#3_1","text":"str.contains \u8fd4\u56de\u4e86\u6bcf\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5305\u542b\u6b63\u5219\u6a21\u5f0f\u7684\u5e03\u5c14\u5e8f\u5217\uff1a In [ 53 ]: s = pd . Series ([ 'my cat' , 'he is fat' , 'railway station' ]) In [ 54 ]: s . str . contains ( '\\s\\wat' ) Out [ 54 ]: 0 True 1 True 2 False dtype : bool str.startswith \u548c str.endswith \u8fd4\u56de\u4e86\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4ee5\u7ed9\u5b9a\u6a21\u5f0f\u4e3a\u5f00\u59cb\u548c\u7ed3\u675f\u7684\u5e03\u5c14\u5e8f\u5217\uff0c\u5b83\u4eec\u90fd\u4e0d\u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f\uff1a In [ 55 ]: s . str . startswith ( 'my' ) Out [ 55 ]: 0 True 1 False 2 False dtype : bool In [ 56 ]: s . str . endswith ( 't' ) Out [ 56 ]: 0 True 1 True 2 False dtype : bool \u5982\u679c\u9700\u8981\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u68c0\u6d4b\u5f00\u59cb\u6216\u7ed3\u675f\u5b57\u7b26\u4e32\u7684\u6a21\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528 str.match \uff0c\u5176\u8fd4\u56de\u4e86\u6bcf\u4e2a\u5b57\u7b26\u4e32\u8d77\u59cb\u5904\u662f\u5426\u7b26\u5408\u7ed9\u5b9a\u6b63\u5219\u6a21\u5f0f\u7684\u5e03\u5c14\u5e8f\u5217\uff1a In [ 57 ]: s . str . match ( 'm|h' ) Out [ 57 ]: 0 True 1 True 2 False dtype : bool In [ 58 ]: s . str [:: - 1 ] . str . match ( 'ta[f|g]|n' ) # \u53cd\u8f6c\u540e\u5339\u914d Out [ 58 ]: 0 False 1 True 2 True dtype : bool \u5f53\u7136\uff0c\u8fd9\u4e9b\u4e5f\u80fd\u901a\u8fc7\u5728 str.contains \u7684\u6b63\u5219\u4e2d\u4f7f\u7528 ^ \u548c $ \u6765\u5b9e\u73b0\uff1a In [ 59 ]: s . str . contains ( '^[m|h]' ) Out [ 59 ]: 0 True 1 True 2 False dtype : bool In [ 60 ]: s . str . contains ( '[f|g]at|n$' ) Out [ 60 ]: 0 False 1 True 2 True dtype : bool \u9664\u4e86\u4e0a\u8ff0\u8fd4\u56de\u503c\u4e3a\u5e03\u5c14\u7684\u5339\u914d\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u8fd4\u56de\u7d22\u5f15\u7684\u5339\u914d\u51fd\u6570\uff0c\u5373 str.find \u4e0e str.rfind \uff0c\u5176\u5206\u522b\u8fd4\u56de\u4ece\u5de6\u5230\u53f3\u548c\u4ece\u53f3\u5230\u5de6\u7b2c\u4e00\u6b21\u5339\u914d\u7684\u4f4d\u7f6e\u7684\u7d22\u5f15\uff0c\u672a\u627e\u5230\u5219\u8fd4\u56de - 1\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e24\u4e2a\u51fd\u6570\u4e0d\u652f\u6301\u6b63\u5219\u5339\u914d\uff0c\u53ea\u80fd\u7528\u4e8e\u5b57\u7b26\u5b50\u4e32\u7684\u5339\u914d\uff1a In [ 61 ]: s = pd . Series ([ 'This is an apple. That is not an apple.' ]) In [ 62 ]: s . str . find ( 'apple' ) Out [ 62 ]: 0 11 dtype : int64 In [ 63 ]: s . str . rfind ( 'apple' ) Out [ 63 ]: 0 33 dtype : int64","title":"3. \u5339\u914d"},{"location":"pandas/part8/#4","text":"str.replace \u548c replace \u5e76\u4e0d\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5728\u4f7f\u7528\u5b57\u7b26\u4e32\u66ff\u6362\u65f6\u5e94\u5f53\u4f7f\u7528\u524d\u8005\u3002 In [ 64 ]: s = pd . Series ([ 'a_1_b' , 'c_?' ]) In [ 65 ]: s . str . replace ( '\\d|\\?' , 'new' , regex = True ) Out [ 65 ]: 0 a_new_b 1 c_new dtype : object \u5f53\u9700\u8981\u5bf9\u4e0d\u540c\u90e8\u5206\u8fdb\u884c\u6709\u5dee\u522b\u7684\u66ff\u6362\u65f6\uff0c\u53ef\u4ee5\u5229\u7528 \u5b50\u7ec4 \u7684\u65b9\u6cd5\uff0c\u5e76\u4e14\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u66ff\u6362\u51fd\u6570\u6765\u5206\u522b\u8fdb\u884c\u5904\u7406\uff0c\u6ce8\u610f group(k) \u4ee3\u8868\u5339\u914d\u5230\u7684\u7b2c k \u4e2a\u5b50\u7ec4\uff08\u5706\u62ec\u53f7\u4e4b\u95f4\u7684\u5185\u5bb9\uff09\uff1a In [ 66 ]: s = pd . Series ([ '\u4e0a\u6d77\u5e02\u9ec4\u6d66\u533a\u65b9\u6d5c\u4e2d\u8def249\u53f7' , .... : '\u4e0a\u6d77\u5e02\u5b9d\u5c71\u533a\u5bc6\u5c71\u8def5\u53f7' , .... : '\u5317\u4eac\u5e02\u660c\u5e73\u533a\u5317\u519c\u8def2\u53f7' ]) .... : In [ 67 ]: pat = '(\\w+\u5e02)(\\w+\u533a)(\\w+\u8def)(\\d+\u53f7)' In [ 68 ]: city = { '\u4e0a\u6d77\u5e02' : 'Shanghai' , '\u5317\u4eac\u5e02' : 'Beijing' } In [ 69 ]: district = { '\u660c\u5e73\u533a' : 'CP District' , .... : '\u9ec4\u6d66\u533a' : 'HP District' , .... : '\u5b9d\u5c71\u533a' : 'BS District' } .... : In [ 70 ]: road = { '\u65b9\u6d5c\u4e2d\u8def' : 'Mid Fangbin Road' , .... : '\u5bc6\u5c71\u8def' : 'Mishan Road' , .... : '\u5317\u519c\u8def' : 'Beinong Road' } .... : In [ 71 ]: def my_func ( m ): .... : str_city = city [ m . group ( 1 )] .... : str_district = district [ m . group ( 2 )] .... : str_road = road [ m . group ( 3 )] .... : str_no = 'No. ' + m . group ( 4 )[: - 1 ] .... : return ' ' . join ([ str_city , .... : str_district , .... : str_road , .... : str_no ]) .... : In [ 72 ]: s . str . replace ( pat , my_func , regex = True ) Out [ 72 ]: 0 Shanghai HP District Mid Fangbin Road No . 249 1 Shanghai BS District Mishan Road No . 5 2 Beijing CP District Beinong Road No . 2 dtype : object \u8fd9\u91cc\u7684\u6570\u5b57\u6807\u8bc6\u5e76\u4e0d\u76f4\u89c2\uff0c\u53ef\u4ee5\u4f7f\u7528 \u547d\u540d\u5b50\u7ec4 \u66f4\u52a0\u6e05\u6670\u5730\u5199\u51fa\u5b50\u7ec4\u4ee3\u8868\u7684\u542b\u4e49\uff1a In [ 73 ]: pat = '(?P<\u5e02\u540d>\\w+\u5e02)(?P<\u533a\u540d>\\w+\u533a)(?P<\u8def\u540d>\\w+\u8def)(?P<\u7f16\u53f7>\\d+\u53f7)' In [ 74 ]: def my_func ( m ): .... : str_city = city [ m . group ( '\u5e02\u540d' )] .... : str_district = district [ m . group ( '\u533a\u540d' )] .... : str_road = road [ m . group ( '\u8def\u540d' )] .... : str_no = 'No. ' + m . group ( '\u7f16\u53f7' )[: - 1 ] .... : return ' ' . join ([ str_city , .... : str_district , .... : str_road , .... : str_no ]) .... : In [ 75 ]: s . str . replace ( pat , my_func , regex = True ) Out [ 75 ]: 0 Shanghai HP District Mid Fangbin Road No . 249 1 Shanghai BS District Mishan Road No . 5 2 Beijing CP District Beinong Road No . 2 dtype : object \u8fd9\u91cc\u867d\u7136\u770b\u8d77\u6765\u6709\u4e9b\u7e41\u6742\uff0c\u4f46\u662f\u5b9e\u9645\u6570\u636e\u5904\u7406\u4e2d\u5bf9\u5e94\u7684\u66ff\u6362\uff0c\u4e00\u822c\u90fd\u4f1a\u901a\u8fc7\u4ee3\u7801\u6765\u83b7\u53d6\u6570\u636e\u4ece\u800c\u6784\u9020\u5b57\u5178\u6620\u5c04\uff0c\u5728\u5177\u4f53\u5199\u6cd5\u4e0a\u4f1a\u7b80\u6d01\u7684\u591a\u3002","title":"4. \u66ff\u6362"},{"location":"pandas/part8/#5","text":"\u63d0\u53d6\u65e2\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u79cd\u8fd4\u56de\u5177\u4f53\u5143\u7d20\uff08\u800c\u4e0d\u662f\u5e03\u5c14\u503c\u6216\u5143\u7d20\u5bf9\u5e94\u7684\u7d22\u5f15\u4f4d\u7f6e\uff09\u7684\u5339\u914d\u64cd\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u62c6\u5206\u64cd\u4f5c\u3002\u524d\u9762\u63d0\u5230\u7684 str.split \u4f8b\u5b50\u4e2d\u4f1a\u628a\u5206\u9694\u7b26\u53bb\u9664\uff0c\u8fd9\u5e76\u4e0d\u662f\u7528\u6237\u60f3\u8981\u7684\u6548\u679c\uff0c\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u7528 str.extract \u8fdb\u884c\u63d0\u53d6\uff1a In [ 76 ]: pat = '(\\w+\u5e02)(\\w+\u533a)(\\w+\u8def)(\\d+\u53f7)' In [ 77 ]: s . str . extract ( pat ) Out [ 77 ]: 0 1 2 3 0 \u4e0a\u6d77\u5e02 \u9ec4\u6d66\u533a \u65b9\u6d5c\u4e2d\u8def 249 \u53f7 1 \u4e0a\u6d77\u5e02 \u5b9d\u5c71\u533a \u5bc6\u5c71\u8def 5 \u53f7 2 \u5317\u4eac\u5e02 \u660c\u5e73\u533a \u5317\u519c\u8def 2 \u53f7 \u901a\u8fc7\u5b50\u7ec4\u7684\u547d\u540d\uff0c\u53ef\u4ee5\u76f4\u63a5\u5bf9\u65b0\u751f\u6210 DataFrame \u7684\u5217\u547d\u540d\uff1a In [ 78 ]: pat = '(?P<\u5e02\u540d>\\w+\u5e02)(?P<\u533a\u540d>\\w+\u533a)(?P<\u8def\u540d>\\w+\u8def)(?P<\u7f16\u53f7>\\d+\u53f7)' In [ 79 ]: s . str . extract ( pat ) Out [ 79 ]: \u5e02\u540d \u533a\u540d \u8def\u540d \u7f16\u53f7 0 \u4e0a\u6d77\u5e02 \u9ec4\u6d66\u533a \u65b9\u6d5c\u4e2d\u8def 249 \u53f7 1 \u4e0a\u6d77\u5e02 \u5b9d\u5c71\u533a \u5bc6\u5c71\u8def 5 \u53f7 2 \u5317\u4eac\u5e02 \u660c\u5e73\u533a \u5317\u519c\u8def 2 \u53f7 str.extractall \u4e0d\u540c\u4e8e str.extract \u53ea\u5339\u914d\u4e00\u6b21\uff0c\u5b83\u4f1a\u628a\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u6a21\u5f0f\u5168\u90e8\u5339\u914d\u51fa\u6765\uff0c\u5982\u679c\u5b58\u5728\u591a\u4e2a\u7ed3\u679c\uff0c\u5219\u4ee5\u591a\u7ea7\u7d22\u5f15\u7684\u65b9\u5f0f\u5b58\u50a8\uff1a In [ 80 ]: s = pd . Series ([ 'A135T15,A26S5' , 'B674S2,B25T6' ], index = [ 'my_A' , 'my_B' ]) In [ 81 ]: pat = '[A|B](\\d+)[T|S](\\d+)' In [ 82 ]: s . str . extractall ( pat ) Out [ 82 ]: 0 1 match my_A 0 135 15 1 26 5 my_B 0 674 2 1 25 6 In [ 83 ]: pat_with_name = '[A|B](?P<name1>\\d+)[T|S](?P<name2>\\d+)' In [ 84 ]: s . str . extractall ( pat_with_name ) Out [ 84 ]: name1 name2 match my_A 0 135 15 1 26 5 my_B 0 674 2 1 25 6 str.findall \u7684\u529f\u80fd\u7c7b\u4f3c\u4e8e str.extractall \uff0c\u533a\u522b\u5728\u4e8e\u524d\u8005\u628a\u7ed3\u679c\u5b58\u5165\u5217\u8868\u4e2d\uff0c\u800c\u540e\u8005\u5904\u7406\u4e3a\u591a\u7ea7\u7d22\u5f15\uff0c\u6bcf\u4e2a\u884c\u53ea\u5bf9\u5e94\u4e00\u7ec4\u5339\u914d\uff0c\u800c\u4e0d\u662f\u628a\u6240\u6709\u5339\u914d\u7ec4\u5408\u6784\u6210\u5217\u8868\u3002 In [ 85 ]: s . str . findall ( pat ) Out [ 85 ]: my_A [( 135 , 15 ), ( 26 , 5 )] my_B [( 674 , 2 ), ( 25 , 6 )] dtype : object","title":"5. \u63d0\u53d6"},{"location":"pandas/part8/#_3","text":"\u9664\u4e86\u4e0a\u8ff0\u4ecb\u7ecd\u7684\u4e94\u7c7b\u5b57\u7b26\u4e32\u64cd\u4f5c\u6709\u5173\u7684\u51fd\u6570\u4e4b\u5916\uff0c str \u5bf9\u8c61\u4e0a\u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5b9e\u7528\u7684\u5176\u4ed6\u65b9\u6cd5\uff0c\u5728\u6b64\u8fdb\u884c\u4ecb\u7ecd\uff1a","title":"\u56db\u3001\u5e38\u7528\u5b57\u7b26\u4e32\u51fd\u6570"},{"location":"pandas/part8/#1_2","text":"upper, lower, title, capitalize, swapcase \u8fd9\u4e94\u4e2a\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u8f6c\u5316\uff0c\u4ece\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u5c31\u5bb9\u6613\u9886\u4f1a\u5176\u529f\u80fd\uff1a In [ 86 ]: s = pd . Series ([ 'lower' , 'CAPITALS' , 'this is a sentence' , 'SwApCaSe' ]) In [ 87 ]: s . str . upper () Out [ 87 ]: 0 LOWER 1 CAPITALS 2 THIS IS A SENTENCE 3 SWAPCASE dtype : object In [ 88 ]: s . str . lower () Out [ 88 ]: 0 lower 1 capitals 2 this is a sentence 3 swapcase dtype : object In [ 89 ]: s . str . title () Out [ 89 ]: 0 Lower 1 Capitals 2 This Is A Sentence 3 Swapcase dtype : object In [ 90 ]: s . str . capitalize () Out [ 90 ]: 0 Lower 1 Capitals 2 This is a sentence 3 Swapcase dtype : object In [ 91 ]: s . str . swapcase () Out [ 91 ]: 0 LOWER 1 capitals 2 THIS IS A SENTENCE 3 sWaPcAsE dtype : object","title":"1. \u5b57\u6bcd\u578b\u51fd\u6570"},{"location":"pandas/part8/#2_3","text":"\u8fd9\u91cc\u7740\u91cd\u9700\u8981\u4ecb\u7ecd\u7684\u662f pd.to_numeric \u65b9\u6cd5\uff0c\u5b83\u867d\u7136\u4e0d\u662f str \u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u80fd\u591f\u5bf9\u5b57\u7b26\u683c\u5f0f\u7684\u6570\u503c\u8fdb\u884c\u5feb\u901f\u8f6c\u6362\u548c\u7b5b\u9009\u3002\u5176\u4e3b\u8981\u53c2\u6570\u5305\u62ec errors \u548c downcast \u5206\u522b\u4ee3\u8868\u4e86\u975e\u6570\u503c\u7684\u5904\u7406\u6a21\u5f0f\u548c\u8f6c\u6362\u7c7b\u578b\u3002\u5176\u4e2d\uff0c\u5bf9\u4e8e\u4e0d\u80fd\u8f6c\u6362\u4e3a\u6570\u503c\u7684\u6709\u4e09\u79cd errors \u9009\u9879\uff0c raise, coerce, ignore \u5206\u522b\u8868\u793a\u76f4\u63a5\u62a5\u9519\u3001\u8bbe\u4e3a\u7f3a\u5931\u4ee5\u53ca\u4fdd\u6301\u539f\u6765\u7684\u5b57\u7b26\u4e32\u3002 In [ 92 ]: s = pd . Series ([ '1' , '2.2' , '2e' , '??' , '-2.1' , '0' ]) In [ 93 ]: pd . to_numeric ( s , errors = 'ignore' ) Out [ 93 ]: 0 1 1 2.2 2 2 e 3 ?? 4 - 2.1 5 0 dtype : object In [ 94 ]: pd . to_numeric ( s , errors = 'coerce' ) Out [ 94 ]: 0 1.0 1 2.2 2 NaN 3 NaN 4 - 2.1 5 0.0 dtype : float64 \u5728\u6570\u636e\u6e05\u6d17\u65f6\uff0c\u53ef\u4ee5\u5229\u7528 coerce \u7684\u8bbe\u5b9a\uff0c\u5feb\u901f\u67e5\u770b\u975e\u6570\u503c\u578b\u7684\u884c\uff1a In [ 95 ]: s [ pd . to_numeric ( s , errors = 'coerce' ) . isna ()] Out [ 95 ]: 2 2 e 3 ?? dtype : object","title":"2. \u6570\u503c\u578b\u51fd\u6570"},{"location":"pandas/part8/#3_2","text":"count \u548c len \u7684\u4f5c\u7528\u5206\u522b\u662f\u8fd4\u56de\u51fa\u73b0\u6b63\u5219\u6a21\u5f0f\u7684\u6b21\u6570\u548c\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff1a In [ 96 ]: s = pd . Series ([ 'cat rat fat at' , 'get feed sheet heat' ]) In [ 97 ]: s . str . count ( '[r|f]at|ee' ) Out [ 97 ]: 0 2 1 2 dtype : int64 In [ 98 ]: s . str . len () Out [ 98 ]: 0 14 1 19 dtype : int64","title":"3. \u7edf\u8ba1\u578b\u51fd\u6570"},{"location":"pandas/part8/#4_1","text":"\u683c\u5f0f\u578b\u51fd\u6570\u4e3b\u8981\u5206\u4e3a\u4e24\u7c7b\uff0c\u7b2c\u4e00\u79cd\u662f\u9664\u7a7a\u578b\uff0c\u7b2c\u4e8c\u79cd\u662f\u586b\u5145\u578b\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u7c7b\u51fd\u6570\u4e00\u5171\u6709\u4e09\u79cd\uff0c\u5b83\u4eec\u5206\u522b\u662f strip, rstrip, lstrip \uff0c\u5206\u522b\u4ee3\u8868\u53bb\u9664\u4e24\u4fa7\u7a7a\u683c\u3001\u53f3\u4fa7\u7a7a\u683c\u548c\u5de6\u4fa7\u7a7a\u683c\u3002\u8fd9\u4e9b\u51fd\u6570\u5728\u6570\u636e\u6e05\u6d17\u65f6\u662f\u6709\u7528\u7684\uff0c\u7279\u522b\u662f\u5217\u540d\u542b\u6709\u975e\u6cd5\u7a7a\u683c\u7684\u65f6\u5019\u3002 In [ 99 ]: my_index = pd . Index ([ ' col1' , 'col2 ' , ' col3 ' ]) In [ 100 ]: my_index . str . strip () . str . len () Out [ 100 ]: Int64Index ([ 4 , 4 , 4 ], dtype = 'int64' ) In [ 101 ]: my_index . str . rstrip () . str . len () Out [ 101 ]: Int64Index ([ 5 , 4 , 5 ], dtype = 'int64' ) In [ 102 ]: my_index . str . lstrip () . str . len () Out [ 102 ]: Int64Index ([ 4 , 5 , 5 ], dtype = 'int64' ) \u5bf9\u4e8e\u586b\u5145\u578b\u51fd\u6570\u800c\u8a00\uff0c pad \u662f\u6700\u7075\u6d3b\u7684\uff0c\u5b83\u53ef\u4ee5\u9009\u5b9a\u5b57\u7b26\u4e32\u957f\u5ea6\u3001\u586b\u5145\u7684\u65b9\u5411\u548c\u586b\u5145\u5185\u5bb9\uff1a In [ 103 ]: s = pd . Series ([ 'a' , 'b' , 'c' ]) In [ 104 ]: s . str . pad ( 5 , 'left' , '*' ) Out [ 104 ]: 0 **** a 1 **** b 2 **** c dtype : object In [ 105 ]: s . str . pad ( 5 , 'right' , '*' ) Out [ 105 ]: 0 a **** 1 b **** 2 c **** dtype : object In [ 106 ]: s . str . pad ( 5 , 'both' , '*' ) Out [ 106 ]: 0 ** a ** 1 ** b ** 2 ** c ** dtype : object \u4e0a\u8ff0\u7684\u4e09\u79cd\u60c5\u51b5\u53ef\u4ee5\u5206\u522b\u7528 rjust, ljust, center \u6765\u7b49\u6548\u5b8c\u6210\uff0c\u9700\u8981\u6ce8\u610f ljust \u662f\u6307\u53f3\u4fa7\u586b\u5145\u800c\u4e0d\u662f\u5de6\u4fa7\u586b\u5145\uff1a In [ 107 ]: s . str . rjust ( 5 , '*' ) Out [ 107 ]: 0 **** a 1 **** b 2 **** c dtype : object In [ 108 ]: s . str . ljust ( 5 , '*' ) Out [ 108 ]: 0 a **** 1 b **** 2 c **** dtype : object In [ 109 ]: s . str . center ( 5 , '*' ) Out [ 109 ]: 0 ** a ** 1 ** b ** 2 ** c ** dtype : object \u5728\u8bfb\u53d6 excel \u6587\u4ef6\u65f6\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0\u6570\u5b57\u524d\u8865 0 \u7684\u9700\u6c42\uff0c\u4f8b\u5982\u8bc1\u5238\u4ee3\u7801\u8bfb\u5165\u7684\u65f6\u5019\u4f1a\u628a\u201d000007\u201d \u4f5c\u4e3a\u6570\u503c 7 \u6765\u5904\u7406\uff0c pandas \u4e2d\u9664\u4e86\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u7684\u5de6\u4fa7\u586b\u5145\u51fd\u6570\u8fdb\u884c\u64cd\u4f5c\u4e4b\u5916\uff0c\u8fd8\u53ef\u7528 zfill \u6765\u5b9e\u73b0\u3002 In [ 110 ]: s = pd . Series ([ 7 , 155 , 303000 ]) . astype ( 'string' ) In [ 111 ]: s . str . pad ( 6 , 'left' , '0' ) Out [ 111 ]: 0 000007 1 000155 2 303000 dtype : string In [ 112 ]: s . str . rjust ( 6 , '0' ) Out [ 112 ]: 0 000007 1 000155 2 303000 dtype : string In [ 113 ]: s . str . zfill ( 6 ) Out [ 113 ]: 0 000007 1 000155 2 303000 dtype : string","title":"4. \u683c\u5f0f\u578b\u51fd\u6570"},{"location":"pandas/part8/#_4","text":"","title":"\u4e94\u3001\u7ec3\u4e60"},{"location":"pandas/part8/#ex1","text":"\u73b0\u6709\u4e00\u4efd\u623f\u5c4b\u4fe1\u606f\u6570\u636e\u96c6\u5982\u4e0b\uff1a In [ 114 ]: df = pd . read_excel ( 'data/house_info.xls' , usecols = [ ..... : 'floor' , 'year' , 'area' , 'price' ]) ..... : In [ 115 ]: df . head ( 3 ) Out [ 115 ]: floor year area price 0 \u9ad8\u5c42 \uff08 \u51716\u5c42 \uff09 1986 \u5e74\u5efa 58.23 \u33a1 155 \u4e07 1 \u4e2d\u5c42 \uff08 \u517120\u5c42 \uff09 2020 \u5e74\u5efa 88 \u33a1 155 \u4e07 2 \u4f4e\u5c42 \uff08 \u517128\u5c42 \uff09 2010 \u5e74\u5efa 89.33 \u33a1 365 \u4e07 \u5c06 year \u5217\u6539\u4e3a\u6574\u6570\u5e74\u4efd\u5b58\u50a8\u3002 \u5c06 floor \u5217\u66ff\u6362\u4e3a Level, Highest \u4e24\u5217\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u5206\u522b\u4e3a string \u7c7b\u578b\u7684\u5c42\u7c7b\u522b\uff08\u9ad8\u5c42\u3001\u4e2d\u5c42\u3001\u4f4e\u5c42\uff09\u4e0e\u6574\u6570\u7c7b\u578b\u7684\u6700\u9ad8\u5c42\u6570\u3002 \u8ba1\u7b97\u623f\u5c4b\u6bcf\u5e73\u7c73\u7684\u5747\u4ef7 avg_price \uff0c\u4ee5 ***\u5143/\u5e73\u7c73 \u7684\u683c\u5f0f\u5b58\u50a8\u5230\u8868\u4e2d\uff0c\u5176\u4e2d *** \u4e3a\u6574\u6570\u3002","title":"Ex1\uff1a\u623f\u5c4b\u4fe1\u606f\u6570\u636e\u96c6"},{"location":"pandas/part8/#ex2","text":"\u73b0\u6709\u4e00\u4efd\u6743\u529b\u7684\u6e38\u620f\u5267\u672c\u6570\u636e\u96c6\u5982\u4e0b\uff1a In [ 116 ]: df = pd . read_csv ( 'data/script.csv' ) In [ 117 ]: df . head ( 3 ) Out [ 117 ]: Release Date Season Episode Episode Title Name Sentence 0 2011 - 04 - 17 Season 1 Episode 1 Winter is Coming waymar royce What do you expect ? They 're savages. One lot s... 1 2011 - 04 - 17 Season 1 Episode 1 Winter is Coming will I 've never seen wildlings do a thing like this... 2 2011 - 04 - 17 Season 1 Episode 1 Winter is Coming waymar royce How close did you get ? \u8ba1\u7b97\u6bcf\u4e00\u4e2a Episode \u7684\u53f0\u8bcd\u6761\u6570\u3002 \u4ee5\u7a7a\u683c\u4e3a\u5355\u8bcd\u7684\u5206\u5272\u7b26\u53f7\uff0c\u8bf7\u6c42\u51fa\u5355\u53e5\u53f0\u8bcd\u5e73\u5747\u5355\u8bcd\u91cf\u6700\u591a\u7684\u524d\u4e94\u4e2a\u4eba\u3002 \u82e5\u67d0\u4eba\u7684\u53f0\u8bcd\u4e2d\u542b\u6709\u95ee\u53f7\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u8bf4\u53f0\u8bcd\u7684\u4eba\u5373\u4e3a\u56de\u7b54\u8005\u3002\u82e5\u4e0a\u4e00\u4eba\u53f0\u8bcd\u4e2d\u542b\u6709 \u4e2a\u95ee\u53f7\uff0c\u5219\u8ba4\u4e3a\u56de\u7b54\u8005\u56de\u7b54\u4e86 \u4e2a\u95ee\u9898\uff0c\u8bf7\u6c42\u51fa\u56de\u7b54\u6700\u591a\u95ee\u9898\u7684\u524d\u4e94\u4e2a\u4eba\u3002","title":"Ex2\uff1a\u300a\u6743\u529b\u7684\u6e38\u620f\u300b\u5267\u672c\u6570\u636e\u96c6"},{"location":"pandas/part9/","text":"In [ 1 ]: import numpy as np In [ 2 ]: import pandas as pd \u4e00\u3001cat \u5bf9\u8c61 1. cat \u5bf9\u8c61\u7684\u5c5e\u6027 \u5728 pandas \u4e2d\u63d0\u4f9b\u4e86 category \u7c7b\u578b\uff0c\u4f7f\u7528\u6237\u80fd\u591f\u5904\u7406\u5206\u7c7b\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5c06\u4e00\u4e2a\u666e\u901a\u5e8f\u5217\u8f6c\u6362\u6210\u5206\u7c7b\u53d8\u91cf\u53ef\u4ee5\u4f7f\u7528 astype \u65b9\u6cd5\u3002 In [ 3 ]: df = pd . read_csv ( 'data/learn_pandas.csv' , ... : usecols = [ 'Grade' , 'Name' , 'Gender' , 'Height' , 'Weight' ]) ... : In [ 4 ]: s = df . Grade . astype ( 'category' ) In [ 5 ]: s . head () Out [ 5 ]: 0 Freshman 1 Freshman 2 Senior 3 Sophomore 4 Sophomore Name : Grade , dtype : category Categories ( 4 , object ): [ 'Freshman' , 'Junior' , 'Senior' , 'Sophomore' ] \u5728\u4e00\u4e2a\u5206\u7c7b\u7c7b\u578b\u7684 Series \u4e2d\u5b9a\u4e49\u4e86 cat \u5bf9\u8c61\uff0c\u5b83\u548c\u4e0a\u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u7684 str \u5bf9\u8c61\u7c7b\u4f3c\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5c5e\u6027\u548c\u65b9\u6cd5\u6765\u8fdb\u884c\u5206\u7c7b\u7c7b\u522b\u7684\u64cd\u4f5c\u3002 In [ 6 ]: s . cat Out [ 6 ]: < pandas . core . arrays . categorical . CategoricalAccessor object at 0x000001364229E940 > \u5bf9\u4e8e\u4e00\u4e2a\u5177\u4f53\u7684\u5206\u7c7b\uff0c\u6709\u4e24\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\u5176\u4e00\u4e3a\u7c7b\u522b\u7684\u672c\u8eab\uff0c\u5b83\u4ee5 Index \u7c7b\u578b\u5b58\u50a8\uff0c\u5176\u4e8c\u4e3a\u662f\u5426\u6709\u5e8f\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u901a\u8fc7 cat \u7684\u5c5e\u6027\u88ab\u8bbf\u95ee\uff1a In [ 7 ]: s . cat . categories Out [ 7 ]: Index ([ 'Freshman' , 'Junior' , 'Senior' , 'Sophomore' ], dtype = 'object' ) In [ 8 ]: s . cat . ordered Out [ 8 ]: False \u53e6\u5916\uff0c\u6bcf\u4e00\u4e2a\u5e8f\u5217\u7684\u7c7b\u522b\u4f1a\u88ab\u8d4b\u4e88\u552f\u4e00\u7684\u6574\u6570\u7f16\u53f7\uff0c\u5b83\u4eec\u7684\u7f16\u53f7\u53d6\u51b3\u4e8e cat.categories \u4e2d\u7684\u987a\u5e8f\uff0c\u8be5\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7 codes \u8bbf\u95ee\uff1a In [ 9 ]: s . cat . codes . head () Out [ 9 ]: 0 0 1 0 2 2 3 3 4 3 dtype : int8 2. \u7c7b\u522b\u7684\u589e\u52a0\u3001\u5220\u9664\u548c\u4fee\u6539 \u901a\u8fc7 cat \u5bf9\u8c61\u7684 categories \u5c5e\u6027\u80fd\u591f\u5b8c\u6210\u5bf9\u7c7b\u522b\u7684\u67e5\u8be2\uff0c\u90a3\u4e48\u5e94\u8be5\u5982\u4f55\u8fdb\u884c \u201c\u589e\u6539\u67e5\u5220\u201d \u7684\u5176\u4ed6\u4e09\u4e2a\u64cd\u4f5c\u5462\uff1f \u7c7b\u522b\u4e0d\u5f97\u76f4\u63a5\u4fee\u6539 \u5728\u7b2c\u4e09\u7ae0\u4e2d\u66fe\u63d0\u5230\uff0c\u7d22\u5f15 Index \u7c7b\u578b\u662f\u65e0\u6cd5\u7528 index_obj[0] = item \u6765\u4fee\u6539\u7684\uff0c\u800c categories \u88ab\u5b58\u50a8\u5728 Index \u4e2d\uff0c\u56e0\u6b64 pandas \u5728 cat \u5c5e\u6027\u4e0a\u5b9a\u4e49\u4e86\u82e5\u5e72\u65b9\u6cd5\u6765\u8fbe\u5230\u76f8\u540c\u7684\u76ee\u7684\u3002 \u9996\u5148\uff0c\u5bf9\u4e8e\u7c7b\u522b\u7684\u589e\u52a0\u53ef\u4ee5\u4f7f\u7528 add_categories \uff1a In [ 10 ]: s = s . cat . add_categories ( 'Graduate' ) # \u589e\u52a0\u4e00\u4e2a\u6bd5\u4e1a\u751f\u7c7b\u522b In [ 11 ]: s . cat . categories Out [ 11 ]: Index ([ 'Freshman' , 'Junior' , 'Senior' , 'Sophomore' , 'Graduate' ], dtype = 'object' ) \u82e5\u8981\u5220\u9664\u67d0\u4e00\u4e2a\u7c7b\u522b\u53ef\u4ee5\u4f7f\u7528 remove_categories \uff0c\u540c\u65f6\u6240\u6709\u539f\u6765\u5e8f\u5217\u4e2d\u7684\u8be5\u7c7b\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u7f3a\u5931\u3002\u4f8b\u5982\uff0c\u5220\u9664\u5927\u4e00\u7684\u7c7b\u522b\uff1a In [ 12 ]: s = s . cat . remove_categories ( 'Freshman' ) In [ 13 ]: s . cat . categories Out [ 13 ]: Index ([ 'Junior' , 'Senior' , 'Sophomore' , 'Graduate' ], dtype = 'object' ) In [ 14 ]: s . head () Out [ 14 ]: 0 NaN 1 NaN 2 Senior 3 Sophomore 4 Sophomore Name : Grade , dtype : category Categories ( 4 , object ): [ 'Junior' , 'Senior' , 'Sophomore' , 'Graduate' ] \u6b64\u5916\u53ef\u4ee5\u4f7f\u7528 set_categories \u76f4\u63a5\u8bbe\u7f6e\u5e8f\u5217\u7684\u65b0\u7c7b\u522b\uff0c\u539f\u6765\u7684\u7c7b\u522b\u4e2d\u5982\u679c\u5b58\u5728\u5143\u7d20\u4e0d\u5c5e\u4e8e\u65b0\u7c7b\u522b\uff0c\u90a3\u4e48\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u7f3a\u5931\u3002 In [ 15 ]: s = s . cat . set_categories ([ 'Sophomore' , 'PhD' ]) # \u65b0\u7c7b\u522b\u4e3a\u5927\u4e8c\u5b66\u751f\u548c\u535a\u58eb In [ 16 ]: s . cat . categories Out [ 16 ]: Index ([ 'Sophomore' , 'PhD' ], dtype = 'object' ) In [ 17 ]: s . head () Out [ 17 ]: 0 NaN 1 NaN 2 NaN 3 Sophomore 4 Sophomore Name : Grade , dtype : category Categories ( 2 , object ): [ 'Sophomore' , 'PhD' ] \u5982\u679c\u60f3\u8981\u5220\u9664\u672a\u51fa\u73b0\u5728\u5e8f\u5217\u4e2d\u7684\u7c7b\u522b\uff0c\u53ef\u4ee5\u4f7f\u7528 remove_unused_categories \u6765\u5b9e\u73b0\uff1a In [ 18 ]: s = s . cat . remove_unused_categories () # \u79fb\u9664\u4e86\u672a\u51fa\u73b0\u7684\u535a\u58eb\u751f\u7c7b\u522b In [ 19 ]: s . cat . categories Out [ 19 ]: Index ([ 'Sophomore' ], dtype = 'object' ) \u6700\u540e\uff0c\u201c\u589e\u6539\u67e5\u5220\u201d \u4e2d\u8fd8\u5269\u4e0b\u4fee\u6539\u7684\u64cd\u4f5c\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7 rename_categories \u65b9\u6cd5\u5b8c\u6210\uff0c\u540c\u65f6\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u5bf9\u539f\u5e8f\u5217\u7684\u5bf9\u5e94\u503c\u4e5f\u8fdb\u884c\u76f8\u5e94\u4fee\u6539\u3002\u4f8b\u5982\uff0c\u73b0\u5728\u628a Sophomore \u6539\u6210\u4e2d\u6587\u7684 \u672c\u79d1\u4e8c\u5e74\u7ea7\u5b66\u751f \uff1a In [ 20 ]: s = s . cat . rename_categories ({ 'Sophomore' : '\u672c\u79d1\u4e8c\u5e74\u7ea7\u5b66\u751f' }) In [ 21 ]: s . head () Out [ 21 ]: 0 NaN 1 NaN 2 NaN 3 \u672c\u79d1\u4e8c\u5e74\u7ea7\u5b66\u751f 4 \u672c\u79d1\u4e8c\u5e74\u7ea7\u5b66\u751f Name : Grade , dtype : category Categories ( 1 , object ): [ '\u672c\u79d1\u4e8c\u5e74\u7ea7\u5b66\u751f' ] \u4e8c\u3001\u6709\u5e8f\u5206\u7c7b 1. \u5e8f\u7684\u5efa\u7acb \u6709\u5e8f\u7c7b\u522b\u548c\u65e0\u5e8f\u7c7b\u522b\u53ef\u4ee5\u901a\u8fc7 as_unordered \u548c reorder_categories \u4e92\u76f8\u8f6c\u5316\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u540e\u8005\u4f20\u5165\u7684\u53c2\u6570\u5fc5\u987b\u662f\u7531\u5f53\u524d\u5e8f\u5217\u7684\u65e0\u5e8f\u7c7b\u522b\u6784\u6210\u7684\u5217\u8868\uff0c\u4e0d\u80fd\u591f\u589e\u52a0\u65b0\u7684\u7c7b\u522b\uff0c\u4e5f\u4e0d\u80fd\u7f3a\u5c11\u539f\u6765\u7684\u7c7b\u522b\uff0c\u5e76\u4e14\u5fc5\u987b\u6307\u5b9a\u53c2\u6570 ordered=True \uff0c\u5426\u5219\u65b9\u6cd5\u65e0\u6548\u3002\u4f8b\u5982\uff0c\u5bf9\u5e74\u7ea7\u9ad8\u4f4e\u8fdb\u884c\u76f8\u5bf9\u5927\u5c0f\u7684\u7c7b\u522b\u5212\u5206\uff0c\u7136\u540e\u518d\u6062\u590d\u65e0\u5e8f\u72b6\u6001\uff1a In [ 22 ]: s = df . Grade . astype ( 'category' ) In [ 23 ]: s = s . cat . reorder_categories ([ 'Freshman' , 'Sophomore' , .... : 'Junior' , 'Senior' ], ordered = True ) .... : In [ 24 ]: s . head () Out [ 24 ]: 0 Freshman 1 Freshman 2 Senior 3 Sophomore 4 Sophomore Name : Grade , dtype : category Categories ( 4 , object ): [ 'Freshman' < 'Sophomore' < 'Junior' < 'Senior' ] In [ 25 ]: s . cat . as_unordered () . head () Out [ 25 ]: 0 Freshman 1 Freshman 2 Senior 3 Sophomore 4 Sophomore Name : Grade , dtype : category Categories ( 4 , object ): [ 'Freshman' , 'Sophomore' , 'Junior' , 'Senior' ] \u7c7b\u522b\u4e0d\u5f97\u76f4\u63a5\u4fee\u6539 \u5982\u679c\u4e0d\u60f3\u6307\u5b9a ordered=True \u53c2\u6570\uff0c\u90a3\u4e48\u53ef\u4ee5\u5148\u7528 s.cat.as_ordered() \u8f6c\u5316\u4e3a\u6709\u5e8f\u7c7b\u522b\uff0c\u518d\u5229\u7528 reorder_categories \u8fdb\u884c\u5177\u4f53\u7684\u76f8\u5bf9\u5927\u5c0f\u8c03\u6574\u3002 2. \u6392\u5e8f\u548c\u6bd4\u8f83 \u5728\u7b2c\u4e8c\u7ae0\u4e2d\uff0c\u66fe\u63d0\u5230\u4e86\u5b57\u7b26\u4e32\u548c\u6570\u503c\u7c7b\u578b\u5e8f\u5217\u7684\u6392\u5e8f\uff0c\u6b64\u65f6\u5c31\u8981\u8bf4\u660e\u5206\u7c7b\u53d8\u91cf\u7684\u6392\u5e8f\uff1a\u53ea\u9700\u628a\u5217\u7684\u7c7b\u578b\u4fee\u6539\u4e3a category \u540e\uff0c\u518d\u8d4b\u4e88\u76f8\u5e94\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5c31\u80fd\u6b63\u5e38\u5730\u4f7f\u7528 sort_index \u548c sort_values \u3002\u4f8b\u5982\uff0c\u5bf9\u5e74\u7ea7\u8fdb\u884c\u6392\u5e8f\uff1a In [ 26 ]: df . Grade = df . Grade . astype ( 'category' ) In [ 27 ]: df . Grade = df . Grade . cat . reorder_categories ([ 'Freshman' , .... : 'Sophomore' , .... : 'Junior' , .... : 'Senior' ], ordered = True ) .... : In [ 28 ]: df . sort_values ( 'Grade' ) . head () # \u503c\u6392\u5e8f Out [ 28 ]: Grade Name Gender Height Weight 0 Freshman Gaopeng Yang Female 158.9 46.0 105 Freshman Qiang Shi Female 164.5 52.0 96 Freshman Changmei Feng Female 163.8 56.0 88 Freshman Xiaopeng Han Female 164.1 53.0 81 Freshman Yanli Zhang Female 165.1 52.0 In [ 29 ]: df . set_index ( 'Grade' ) . sort_index () . head () # \u7d22\u5f15\u6392\u5e8f Out [ 29 ]: Name Gender Height Weight Grade Freshman Gaopeng Yang Female 158.9 46.0 Freshman Qiang Shi Female 164.5 52.0 Freshman Changmei Feng Female 163.8 56.0 Freshman Xiaopeng Han Female 164.1 53.0 Freshman Yanli Zhang Female 165.1 52.0 \u7531\u4e8e\u5e8f\u7684\u5efa\u7acb\uff0c\u56e0\u6b64\u5c31\u53ef\u4ee5\u8fdb\u884c\u6bd4\u8f83\u64cd\u4f5c\u3002\u5206\u7c7b\u53d8\u91cf\u7684\u6bd4\u8f83\u64cd\u4f5c\u5206\u4e3a\u4e24\u7c7b\uff0c\u7b2c\u4e00\u79cd\u662f == \u6216 != \u5173\u7cfb\u7684\u6bd4\u8f83\uff0c\u6bd4\u8f83\u7684\u5bf9\u8c61\u53ef\u4ee5\u662f\u6807\u91cf\u6216\u8005\u540c\u957f\u5ea6\u7684 Series \uff08\u6216 list \uff09\uff0c\u7b2c\u4e8c\u79cd\u662f >,>=,<,<= \u56db\u7c7b\u5927\u5c0f\u5173\u7cfb\u7684\u6bd4\u8f83\uff0c\u6bd4\u8f83\u7684\u5bf9\u8c61\u548c\u7b2c\u4e00\u79cd\u7c7b\u4f3c\uff0c\u4f46\u662f\u6240\u6709\u53c2\u4e0e\u6bd4\u8f83\u7684\u5143\u7d20\u5fc5\u987b\u5c5e\u4e8e\u539f\u5e8f\u5217\u7684 categories \uff0c\u540c\u65f6\u8981\u548c\u539f\u5e8f\u5217\u5177\u6709\u76f8\u540c\u7684\u7d22\u5f15\u3002 In [ 30 ]: res1 = df . Grade == 'Sophomore' In [ 31 ]: res1 . head () Out [ 31 ]: 0 False 1 False 2 False 3 True 4 True Name : Grade , dtype : bool In [ 32 ]: res2 = df . Grade == [ 'PhD' ] * df . shape [ 0 ] In [ 33 ]: res2 . head () Out [ 33 ]: 0 False 1 False 2 False 3 False 4 False Name : Grade , dtype : bool In [ 34 ]: res3 = df . Grade <= 'Sophomore' In [ 35 ]: res3 . head () Out [ 35 ]: 0 True 1 True 2 False 3 True 4 True Name : Grade , dtype : bool In [ 36 ]: res4 = df . Grade <= df . Grade . sample ( .... : frac = 1 ) . reset_index ( .... : drop = True ) # \u6253\u4e71\u540e\u6bd4\u8f83 .... : In [ 37 ]: res4 . head () Out [ 37 ]: 0 True 1 True 2 False 3 True 4 True Name : Grade , dtype : bool \u4e09\u3001\u533a\u95f4\u7c7b\u522b 1. \u5229\u7528 cut \u548c qcut \u8fdb\u884c\u533a\u95f4\u6784\u9020 \u533a\u95f4\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\u522b\uff0c\u5728\u5b9e\u9645\u6570\u636e\u5206\u6790\u4e2d\uff0c\u533a\u95f4\u5e8f\u5217\u5f80\u5f80\u662f\u901a\u8fc7 cut \u548c qcut \u65b9\u6cd5\u8fdb\u884c\u6784\u9020\u7684\uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u80fd\u591f\u628a\u539f\u5e8f\u5217\u7684\u6570\u503c\u7279\u5f81\u8fdb\u884c\u88c5\u7bb1\uff0c\u5373\u7528\u533a\u95f4\u4f4d\u7f6e\u6765\u4ee3\u66ff\u539f\u6765\u7684\u5177\u4f53\u6570\u503c\u3002 \u9996\u5148\u4ecb\u7ecd cut \u7684\u5e38\u89c1\u7528\u6cd5\uff1a \u5176\u4e2d\uff0c\u6700\u91cd\u8981\u7684\u53c2\u6570\u662f bins \uff0c\u5982\u679c\u4f20\u5165\u6574\u6570 n \uff0c\u5219\u4ee3\u8868\u628a\u6574\u4e2a\u4f20\u5165\u6570\u7ec4\u7684\u6309\u7167\u6700\u5927\u548c\u6700\u5c0f\u503c\u7b49\u95f4\u8ddd\u5730\u5206\u4e3a n \u6bb5\u3002\u7531\u4e8e\u533a\u95f4\u9ed8\u8ba4\u662f\u5de6\u5f00\u53f3\u95ed\uff0c\u9700\u8981\u5728\u8c03\u6574\u65f6\u628a\u6700\u5c0f\u503c\u5305\u542b\u8fdb\u53bb\uff0c\u5728 pandas \u4e2d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5728\u503c\u6700\u5c0f\u7684\u533a\u95f4\u5de6\u7aef\u70b9\u518d\u51cf\u53bb 0.001*(max-min) \uff0c\u56e0\u6b64\u5982\u679c\u5bf9\u5e8f\u5217 [1,2] \u5212\u5206\u4e3a 2 \u4e2a\u7bb1\u5b50\u65f6\uff0c\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u7684\u8303\u56f4 (0.999,1.5] \uff0c\u7b2c\u4e8c\u4e2a\u7bb1\u5b50\u7684\u8303\u56f4\u662f (1.5,2] \u3002\u5982\u679c\u9700\u8981\u6307\u5b9a\u5de6\u95ed\u53f3\u5f00\u65f6\uff0c\u9700\u8981\u628a right \u53c2\u6570\u8bbe\u7f6e\u4e3a False \uff0c\u76f8\u5e94\u7684\u533a\u95f4\u8c03\u6574\u65b9\u6cd5\u662f\u5728\u503c\u6700\u5927\u7684\u533a\u95f4\u53f3\u7aef\u70b9\u518d\u52a0\u4e0a 0.001*(max-min) \u3002 In [ 38 ]: s = pd . Series ([ 1 , 2 ]) In [ 39 ]: pd . cut ( s , bins = 2 ) Out [ 39 ]: 0 ( 0.999 , 1.5 ] 1 ( 1.5 , 2.0 ] dtype : category Categories ( 2 , interval [ float64 ]): [( 0.999 , 1.5 ] < ( 1.5 , 2.0 ]] In [ 40 ]: pd . cut ( s , bins = 2 , right = False ) Out [ 40 ]: 0 [ 1.0 , 1.5 ) 1 [ 1.5 , 2.001 ) dtype : category Categories ( 2 , interval [ float64 ]): [[ 1.0 , 1.5 ) < [ 1.5 , 2.001 )] bins \u7684\u53e6\u4e00\u4e2a\u5e38\u89c1\u7528\u6cd5\u662f\u6307\u5b9a\u533a\u95f4\u5206\u5272\u70b9\u7684\u5217\u8868\uff08\u4f7f\u7528 np.infty \u53ef\u4ee5\u8868\u793a\u65e0\u7a77\u5927\uff09\uff1a In [ 41 ]: pd . cut ( s , bins = [ - np . infty , 1.2 , 1.8 , 2.2 , np . infty ]) Out [ 41 ]: 0 ( - inf , 1.2 ] 1 ( 1.8 , 2.2 ] dtype : category Categories ( 4 , interval [ float64 ]): [( - inf , 1.2 ] < ( 1.2 , 1.8 ] < ( 1.8 , 2.2 ] < ( 2.2 , inf ]] \u53e6\u5916\u4e24\u4e2a\u5e38\u7528\u53c2\u6570\u4e3a labels \u548c retbins \uff0c\u5206\u522b\u4ee3\u8868\u4e86\u533a\u95f4\u7684\u540d\u5b57\u548c\u662f\u5426\u8fd4\u56de\u5206\u5272\u70b9\uff08\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff09\uff1a In [ 42 ]: s = pd . Series ([ 1 , 2 ]) In [ 43 ]: res = pd . cut ( s , bins = 2 , labels = [ 'small' , 'big' ], retbins = True ) In [ 44 ]: res [ 0 ] Out [ 44 ]: 0 small 1 big dtype : category Categories ( 2 , object ): [ 'small' < 'big' ] In [ 45 ]: res [ 1 ] # \u8be5\u5143\u7d20\u4e3a\u8fd4\u56de\u7684\u5206\u5272\u70b9 Out [ 45 ]: array ([ 0.999 , 1.5 , 2. ]) \u4ece\u7528\u6cd5\u4e0a\u6765\u8bf4\uff0c qcut \u548c cut \u51e0\u4e4e\u6ca1\u6709\u5dee\u522b\uff0c\u53ea\u662f\u628a bins \u53c2\u6570\u53d8\u6210\u7684 q \u53c2\u6570\uff0c qcut \u4e2d\u7684 q \u662f\u6307 quantile \u3002\u8fd9\u91cc\u7684 q \u4e3a\u6574\u6570 n \u65f6\uff0c\u6307\u6309\u7167 n \u7b49\u5206\u4f4d\u6570\u628a\u6570\u636e\u5206\u7bb1\uff0c\u8fd8\u53ef\u4ee5\u4f20\u5165\u6d6e\u70b9\u5217\u8868\u6307\u4ee3\u76f8\u5e94\u7684\u5206\u4f4d\u6570\u5206\u5272\u70b9\u3002 In [ 46 ]: s = df . Weight In [ 47 ]: pd . qcut ( s , q = 3 ) . head () Out [ 47 ]: 0 ( 33.999 , 48.0 ] 1 ( 55.0 , 89.0 ] 2 ( 55.0 , 89.0 ] 3 ( 33.999 , 48.0 ] 4 ( 55.0 , 89.0 ] Name : Weight , dtype : category Categories ( 3 , interval [ float64 ]): [( 33.999 , 48.0 ] < ( 48.0 , 55.0 ] < ( 55.0 , 89.0 ]] In [ 48 ]: pd . qcut ( s , q = [ 0 , 0.2 , 0.8 , 1 ]) . head () Out [ 48 ]: 0 ( 44.0 , 69.4 ] 1 ( 69.4 , 89.0 ] 2 ( 69.4 , 89.0 ] 3 ( 33.999 , 44.0 ] 4 ( 69.4 , 89.0 ] Name : Weight , dtype : category Categories ( 3 , interval [ float64 ]): [( 33.999 , 44.0 ] < ( 44.0 , 69.4 ] < ( 69.4 , 89.0 ]] 2. \u4e00\u822c\u533a\u95f4\u7684\u6784\u9020 \u5bf9\u4e8e\u67d0\u4e00\u4e2a\u5177\u4f53\u7684\u533a\u95f4\u800c\u8a00\uff0c\u5176\u5177\u5907\u4e09\u4e2a\u8981\u7d20\uff0c\u5373\u5de6\u7aef\u70b9\u3001\u53f3\u7aef\u70b9\u548c\u7aef\u70b9\u7684\u5f00\u95ed\u72b6\u6001\uff0c\u5176\u4e2d\u5f00\u95ed\u72b6\u6001\u53ef\u4ee5\u6307\u5b9a right, left, both, neither \u4e2d\u7684\u4e00\u7c7b\uff1a In [ 49 ]: my_interval = pd . Interval ( 0 , 1 , 'right' ) In [ 50 ]: my_interval Out [ 50 ]: Interval ( 0 , 1 , closed = 'right' ) \u5176\u5c5e\u6027\u5305\u542b\u4e86 mid, length, right, left, closed \uff0c\u5206\u522b\u8868\u793a\u4e2d\u70b9\u3001\u957f\u5ea6\u3001\u53f3\u7aef\u70b9\u3001\u5de6\u7aef\u70b9\u548c\u5f00\u95ed\u72b6\u6001\u3002 \u4f7f\u7528 in \u53ef\u4ee5\u5224\u65ad\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u533a\u95f4\uff1a In [ 51 ]: 0.5 in my_interval Out [ 51 ]: True \u4f7f\u7528 overlaps \u53ef\u4ee5\u5224\u65ad\u4e24\u4e2a\u533a\u95f4\u662f\u5426\u6709\u4ea4\u96c6\uff1a In [ 52 ]: my_interval_2 = pd . Interval ( 0.5 , 1.5 , 'left' ) In [ 53 ]: my_interval . overlaps ( my_interval_2 ) Out [ 53 ]: True \u4e00\u822c\u800c\u8a00\uff0c pd.IntervalIndex \u5bf9\u8c61\u6709\u56db\u7c7b\u65b9\u6cd5\u751f\u6210\uff0c\u5206\u522b\u662f from_breaks, from_arrays, from_tuples, interval_range \uff0c\u5b83\u4eec\u5206\u522b\u5e94\u7528\u4e8e\u4e0d\u540c\u7684\u60c5\u51b5\uff1a from_breaks \u7684\u529f\u80fd\u7c7b\u4f3c\u4e8e cut \u6216 qcut \u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7\u540e\u4e24\u4e2a\u662f\u901a\u8fc7\u8ba1\u7b97\u5f97\u5230\u7684\u5206\u5272\u70b9\uff0c\u800c\u524d\u8005\u662f\u76f4\u63a5\u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u5206\u5272\u70b9\uff1a In [ 54 ]: pd . IntervalIndex . from_breaks ([ 1 , 3 , 6 , 10 ], closed = 'both' ) Out [ 54 ]: IntervalIndex ([[ 1 , 3 ], [ 3 , 6 ], [ 6 , 10 ]], closed = 'both' , dtype = 'interval[int64]' ) from_arrays \u662f\u5206\u522b\u4f20\u5165\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u7684\u5217\u8868\uff0c\u9002\u7528\u4e8e\u6709\u4ea4\u96c6\u5e76\u4e14\u77e5\u9053\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u60c5\u51b5\uff1a In [ 55 ]: pd . IntervalIndex . from_arrays ( left = [ 1 , 3 , 6 , 10 ], .... : right = [ 5 , 4 , 9 , 11 ], .... : closed = 'neither' ) .... : Out [ 55 ]: IntervalIndex ([( 1 , 5 ), ( 3 , 4 ), ( 6 , 9 ), ( 10 , 11 )], closed = 'neither' , dtype = 'interval[int64]' ) from_tuples \u4f20\u5165\u7684\u662f\u8d77\u70b9\u548c\u7ec8\u70b9\u5143\u7ec4\u6784\u6210\u7684\u5217\u8868\uff1a In [ 56 ]: pd . IntervalIndex . from_tuples ([( 1 , 5 ),( 3 , 4 ),( 6 , 9 ),( 10 , 11 )], .... : closed = 'neither' ) .... : Out [ 56 ]: IntervalIndex ([( 1 , 5 ), ( 3 , 4 ), ( 6 , 9 ), ( 10 , 11 )], closed = 'neither' , dtype = 'interval[int64]' ) \u4e00\u4e2a\u7b49\u5dee\u7684\u533a\u95f4\u5e8f\u5217\u7531\u8d77\u70b9\u3001\u7ec8\u70b9\u3001\u533a\u95f4\u4e2a\u6570\u548c\u533a\u95f4\u957f\u5ea6\u51b3\u5b9a\uff0c\u5176\u4e2d\u4e09\u4e2a\u91cf\u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u5269\u4e0b\u4e00\u4e2a\u91cf\u5c31\u786e\u5b9a\u4e86\uff0c interval_range \u4e2d\u7684 start, end, periods, freq \u53c2\u6570\u5c31\u5bf9\u5e94\u4e86\u8fd9\u56db\u4e2a\u91cf\uff0c\u4ece\u800c\u5c31\u80fd\u6784\u9020\u51fa\u76f8\u5e94\u7684\u533a\u95f4\uff1a In [ 57 ]: pd . interval_range ( start = 1 , end = 5 , periods = 8 ) Out [ 57 ]: IntervalIndex ([( 1.0 , 1.5 ], ( 1.5 , 2.0 ], ( 2.0 , 2.5 ], ( 2.5 , 3.0 ], ( 3.0 , 3.5 ], ( 3.5 , 4.0 ], ( 4.0 , 4.5 ], ( 4.5 , 5.0 ]], closed = 'right' , dtype = 'interval[float64]' ) In [ 58 ]: pd . interval_range ( end = 5 , periods = 8 , freq = 0.5 ) Out [ 58 ]: IntervalIndex ([( 1.0 , 1.5 ], ( 1.5 , 2.0 ], ( 2.0 , 2.5 ], ( 2.5 , 3.0 ], ( 3.0 , 3.5 ], ( 3.5 , 4.0 ], ( 4.0 , 4.5 ], ( 4.5 , 5.0 ]], closed = 'right' , dtype = 'interval[float64]' ) \u7ec3\u4e00\u7ec3 \u65e0\u8bba\u662f interval_range \u8fd8\u662f\u4e0b\u4e00\u7ae0\u65f6\u95f4\u5e8f\u5217\u4e2d\u7684 date_range \u90fd\u662f\u7ed9\u5b9a\u4e86\u7b49\u5dee\u5e8f\u5217\u4e2d\u56db\u8981\u7d20\u4e2d\u7684\u4e09\u4e2a\uff0c\u4ece\u800c\u786e\u5b9a\u6574\u4e2a\u5e8f\u5217\u3002\u8bf7\u56de\u987e\u7b49\u5dee\u6570\u5217\u4e2d\u7684\u9996\u9879\u3001\u672b\u9879\u3001\u9879\u6570\u548c\u516c\u5dee\u7684\u8054\u7cfb\uff0c\u5199\u51fa interval_range \u4e2d\u56db\u4e2a\u53c2\u6570\u4e4b\u95f4\u7684\u6052\u7b49\u5173\u7cfb\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528 pd.IntervalIndex([...], closed=...) \uff0c\u628a Interval \u7c7b\u578b\u7684\u5217\u8868\u7ec4\u6210\u4f20\u5165\u5176\u4e2d\u8f6c\u4e3a\u533a\u95f4\u7d22\u5f15\uff0c\u90a3\u4e48\u6240\u6709\u7684\u533a\u95f4\u4f1a\u88ab\u5f3a\u5236\u8f6c\u4e3a\u6307\u5b9a\u7684 closed \u7c7b\u578b\uff0c\u56e0\u4e3a pd.IntervalIndex \u53ea\u5141\u8bb8\u5b58\u653e\u540c\u4e00\u79cd\u5f00\u95ed\u533a\u95f4\u7684 Interval \u5bf9\u8c61\u3002 In [ 59 ]: my_interval Out [ 59 ]: Interval ( 0 , 1 , closed = 'right' ) In [ 60 ]: my_interval_2 Out [ 60 ]: Interval ( 0.5 , 1.5 , closed = 'left' ) In [ 61 ]: pd . IntervalIndex ([ my_interval , my_interval_2 ], closed = 'left' ) Out [ 61 ]: IntervalIndex ([[ 0.0 , 1.0 ), [ 0.5 , 1.5 )], closed = 'left' , dtype = 'interval[float64]' ) 3. \u533a\u95f4\u7684\u5c5e\u6027\u4e0e\u65b9\u6cd5 IntervalIndex \u4e0a\u4e5f\u5b9a\u4e49\u4e86\u4e00\u4e9b\u6709\u7528\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002\u540c\u65f6\uff0c\u5982\u679c\u60f3\u8981\u5177\u4f53\u5229\u7528 cut \u6216\u8005 qcut \u7684\u7ed3\u679c\u8fdb\u884c\u5206\u6790\uff0c\u90a3\u4e48\u9700\u8981\u5148\u5c06\u5176\u8f6c\u4e3a\u8be5\u79cd\u7d22\u5f15\u7c7b\u578b\uff1a In [ 62 ]: id_interval = pd . IntervalIndex ( pd . cut ( s , 3 )) \u4e0e\u5355\u4e2a Interval \u7c7b\u578b\u76f8\u4f3c\uff0c IntervalIndex \u6709\u82e5\u5e72\u5e38\u7528\u5c5e\u6027\uff1a left, right, mid, length \uff0c\u5206\u522b\u8868\u793a\u5de6\u53f3\u7aef\u70b9\u3001\u4e24\u7aef\u70b9\u5747\u503c\u548c\u533a\u95f4\u957f\u5ea6\u3002 In [ 63 ]: id_demo = id_interval [: 5 ] # \u9009\u51fa\u524d5\u4e2a\u5c55\u793a In [ 64 ]: id_demo Out [ 64 ]: IntervalIndex ([( 33.945 , 52.333 ], ( 52.333 , 70.667 ], ( 70.667 , 89.0 ], ( 33.945 , 52.333 ], ( 70.667 , 89.0 ]], closed = 'right' , name = 'Weight' , dtype = 'interval[float64]' ) In [ 65 ]: id_demo . left Out [ 65 ]: Float64Index ([ 33.945 , 52.333 , 70.667 , 33.945 , 70.667 ], dtype = 'float64' ) In [ 66 ]: id_demo . right Out [ 66 ]: Float64Index ([ 52.333 , 70.667 , 89.0 , 52.333 , 89.0 ], dtype = 'float64' ) In [ 67 ]: id_demo . mid Out [ 67 ]: Float64Index ([ 43.138999999999996 , 61.5 , 79.8335 , 43.138999999999996 , 79.8335 ], dtype = 'float64' ) In [ 68 ]: id_demo . length Out [ 68 ]: Float64Index ([ 18.387999999999998 , 18.334000000000003 , 18.333 , 18.387999999999998 , 18.333 ], dtype = 'float64' ) IntervalIndex \u8fd8\u6709\u4e24\u4e2a\u5e38\u7528\u65b9\u6cd5\uff0c\u5305\u62ec contains \u548c overlaps \uff0c\u5206\u522b\u6307\u9010\u4e2a\u5224\u65ad\u6bcf\u4e2a\u533a\u95f4\u662f\u5426\u5305\u542b\u67d0\u5143\u7d20\uff0c\u4ee5\u53ca\u662f\u5426\u548c\u4e00\u4e2a pd.Interval \u5bf9\u8c61\u6709\u4ea4\u96c6\u3002 In [ 69 ]: id_demo . contains ( 4 ) Out [ 69 ]: array ([ False , False , False , False , False ]) In [ 70 ]: id_demo . overlaps ( pd . Interval ( 40 , 60 )) Out [ 70 ]: array ([ True , True , False , True , False ]) \u56db\u3001\u7ec3\u4e60 Ex1\uff1a\u7edf\u8ba1\u672a\u51fa\u73b0\u7684\u7c7b\u522b \u5728\u7b2c\u4e94\u7ae0\u4e2d\u4ecb\u7ecd\u4e86 crosstab \u51fd\u6570\uff0c\u5728\u9ed8\u8ba4\u53c2\u6570\u4e0b\u5b83\u80fd\u591f\u5bf9\u4e24\u4e2a\u5217\u7684\u7ec4\u5408\u51fa\u73b0\u7684\u9891\u6570\u8fdb\u884c\u7edf\u8ba1\u6c47\u603b\uff1a In [ 71 ]: df = pd . DataFrame ({ 'A' :[ 'a' , 'b' , 'c' , 'a' ], .... : 'B' :[ 'cat' , 'cat' , 'dog' , 'cat' ]}) .... : In [ 72 ]: pd . crosstab ( df . A , df . B ) Out [ 72 ]: B cat dog A a 2 0 b 1 0 c 0 1 \u4f46\u4e8b\u5b9e\u4e0a\u6709\u4e9b\u5217\u5b58\u50a8\u7684\u662f\u5206\u7c7b\u53d8\u91cf\uff0c\u5217\u4e2d\u5e76\u4e0d\u4e00\u5b9a\u5305\u542b\u6240\u6709\u7684\u7c7b\u522b\uff0c\u6b64\u65f6\u5982\u679c\u60f3\u8981\u5bf9\u8fd9\u4e9b\u672a\u51fa\u73b0\u7684\u7c7b\u522b\u5728 crosstab \u7ed3\u679c\u4e2d\u4e5f\u8fdb\u884c\u6c47\u603b\uff0c\u5219\u53ef\u4ee5\u6307\u5b9a dropna \u53c2\u6570\u4e3a False \uff1a In [ 73 ]: df . B = df . B . astype ( 'category' ) . cat . add_categories ( 'sheep' ) In [ 74 ]: pd . crosstab ( df . A , df . B , dropna = False ) Out [ 74 ]: B cat dog sheep A a 2 0 0 b 1 0 0 c 0 1 0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u5e26\u6709 dropna \u53c2\u6570\u7684 my_crosstab \u51fd\u6570\u6765\u5b8c\u6210\u4e0a\u9762\u7684\u529f\u80fd\u3002 Ex2\uff1a\u94bb\u77f3\u6570\u636e\u96c6 \u73b0\u6709\u4e00\u4efd\u5173\u4e8e\u94bb\u77f3\u7684\u6570\u636e\u96c6\uff0c\u5176\u4e2d carat, cut, clarity, price \u5206\u522b\u8868\u793a\u514b\u62c9\u91cd\u91cf\u3001\u5207\u5272\u8d28\u91cf\u3001\u7eaf\u51c0\u5ea6\u548c\u4ef7\u683c\uff0c\u6837\u4f8b\u5982\u4e0b\uff1a In [ 75 ]: df = pd . read_csv ( 'data/diamonds.csv' ) In [ 76 ]: df . head ( 3 ) Out [ 76 ]: carat cut clarity price 0 0.23 Ideal SI2 326 1 0.21 Premium SI1 326 2 0.23 Good VS1 327 \u5206\u522b\u5bf9 df.cut \u5728 object \u7c7b\u578b\u548c category \u7c7b\u578b\u4e0b\u4f7f\u7528 nunique \u51fd\u6570\uff0c\u5e76\u6bd4\u8f83\u5b83\u4eec\u7684\u6027\u80fd\u3002 \u94bb\u77f3\u7684\u5207\u5272\u8d28\u91cf\u53ef\u4ee5\u5206\u4e3a\u4e94\u4e2a\u7b49\u7ea7\uff0c\u7531\u6b21\u5230\u597d\u5206\u522b\u662f Fair, Good, Very Good, Premium, Ideal \uff0c\u7eaf\u51c0\u5ea6\u6709\u516b\u4e2a\u7b49\u7ea7\uff0c\u7531\u6b21\u5230\u597d\u5206\u522b\u662f I1, SI2, SI1, VS2, VS1, VVS2, VVS1, IF \uff0c\u8bf7\u5bf9\u5207\u5272\u8d28\u91cf\u6309\u7167 \u7531\u597d\u5230\u6b21 \u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u76f8\u540c\u5207\u5272\u8d28\u91cf\u7684\u94bb\u77f3\uff0c\u6309\u7167\u7eaf\u51c0\u5ea6\u8fdb\u884c \u7531\u6b21\u5230\u597d \u7684\u6392\u5e8f\u3002 \u5206\u522b\u91c7\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u628a cut, clarity \u8fd9\u4e24\u5217\u6309\u7167 \u7531\u597d\u5230\u6b21 \u7684\u987a\u5e8f\uff0c\u6620\u5c04\u5230\u4ece 0 \u5230 n-1 \u7684\u6574\u6570\uff0c\u5176\u4e2d n \u8868\u793a\u7c7b\u522b\u7684\u4e2a\u6570\u3002 \u5bf9\u6bcf\u514b\u62c9\u7684\u4ef7\u683c\u5206\u522b\u6309\u7167\u5206\u4f4d\u6570\uff08q=[0.2, 0.4, 0.6, 0.8]\uff09\u4e0e [1000, 3500, 5500, 18000] \u5272\u70b9\u8fdb\u884c\u5206\u7bb1\u5f97\u5230\u4e94\u4e2a\u7c7b\u522b Very Low, Low, Mid, High, Very High \uff0c\u5e76\u628a\u6309\u8fd9\u4e24\u79cd\u5206\u7bb1\u65b9\u6cd5\u5f97\u5230\u7684 category \u5e8f\u5217\u4f9d\u6b21\u6dfb\u52a0\u5230\u539f\u8868\u4e2d\u3002 \u7b2c 4 \u95ee\u4e2d\u6309\u7167\u6574\u6570\u5206\u7bb1\u5f97\u5230\u7684\u5e8f\u5217\u4e2d\uff0c\u662f\u5426\u51fa\u73b0\u4e86\u6240\u6709\u7684\u7c7b\u522b\uff1f\u5982\u679c\u5b58\u5728\u6ca1\u6709\u51fa\u73b0\u7684\u7c7b\u522b\u8bf7\u628a\u8be5\u7c7b\u522b\u5220\u9664\u3002 \u5bf9\u7b2c 4 \u95ee\u4e2d\u6309\u7167\u5206\u4f4d\u6570\u5206\u7bb1\u5f97\u5230\u7684\u5e8f\u5217\uff0c\u6c42\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u6240\u5728\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u503c\u548c\u957f\u5ea6\u3002","title":"\u4e5d\u3001\u5206\u7c7b\u6570\u636e"},{"location":"pandas/part9/#cat","text":"","title":"\u4e00\u3001cat \u5bf9\u8c61"},{"location":"pandas/part9/#1-cat","text":"\u5728 pandas \u4e2d\u63d0\u4f9b\u4e86 category \u7c7b\u578b\uff0c\u4f7f\u7528\u6237\u80fd\u591f\u5904\u7406\u5206\u7c7b\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5c06\u4e00\u4e2a\u666e\u901a\u5e8f\u5217\u8f6c\u6362\u6210\u5206\u7c7b\u53d8\u91cf\u53ef\u4ee5\u4f7f\u7528 astype \u65b9\u6cd5\u3002 In [ 3 ]: df = pd . read_csv ( 'data/learn_pandas.csv' , ... : usecols = [ 'Grade' , 'Name' , 'Gender' , 'Height' , 'Weight' ]) ... : In [ 4 ]: s = df . Grade . astype ( 'category' ) In [ 5 ]: s . head () Out [ 5 ]: 0 Freshman 1 Freshman 2 Senior 3 Sophomore 4 Sophomore Name : Grade , dtype : category Categories ( 4 , object ): [ 'Freshman' , 'Junior' , 'Senior' , 'Sophomore' ] \u5728\u4e00\u4e2a\u5206\u7c7b\u7c7b\u578b\u7684 Series \u4e2d\u5b9a\u4e49\u4e86 cat \u5bf9\u8c61\uff0c\u5b83\u548c\u4e0a\u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u7684 str \u5bf9\u8c61\u7c7b\u4f3c\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5c5e\u6027\u548c\u65b9\u6cd5\u6765\u8fdb\u884c\u5206\u7c7b\u7c7b\u522b\u7684\u64cd\u4f5c\u3002 In [ 6 ]: s . cat Out [ 6 ]: < pandas . core . arrays . categorical . CategoricalAccessor object at 0x000001364229E940 > \u5bf9\u4e8e\u4e00\u4e2a\u5177\u4f53\u7684\u5206\u7c7b\uff0c\u6709\u4e24\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\u5176\u4e00\u4e3a\u7c7b\u522b\u7684\u672c\u8eab\uff0c\u5b83\u4ee5 Index \u7c7b\u578b\u5b58\u50a8\uff0c\u5176\u4e8c\u4e3a\u662f\u5426\u6709\u5e8f\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u901a\u8fc7 cat \u7684\u5c5e\u6027\u88ab\u8bbf\u95ee\uff1a In [ 7 ]: s . cat . categories Out [ 7 ]: Index ([ 'Freshman' , 'Junior' , 'Senior' , 'Sophomore' ], dtype = 'object' ) In [ 8 ]: s . cat . ordered Out [ 8 ]: False \u53e6\u5916\uff0c\u6bcf\u4e00\u4e2a\u5e8f\u5217\u7684\u7c7b\u522b\u4f1a\u88ab\u8d4b\u4e88\u552f\u4e00\u7684\u6574\u6570\u7f16\u53f7\uff0c\u5b83\u4eec\u7684\u7f16\u53f7\u53d6\u51b3\u4e8e cat.categories \u4e2d\u7684\u987a\u5e8f\uff0c\u8be5\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7 codes \u8bbf\u95ee\uff1a In [ 9 ]: s . cat . codes . head () Out [ 9 ]: 0 0 1 0 2 2 3 3 4 3 dtype : int8","title":"1. cat \u5bf9\u8c61\u7684\u5c5e\u6027"},{"location":"pandas/part9/#2","text":"\u901a\u8fc7 cat \u5bf9\u8c61\u7684 categories \u5c5e\u6027\u80fd\u591f\u5b8c\u6210\u5bf9\u7c7b\u522b\u7684\u67e5\u8be2\uff0c\u90a3\u4e48\u5e94\u8be5\u5982\u4f55\u8fdb\u884c \u201c\u589e\u6539\u67e5\u5220\u201d \u7684\u5176\u4ed6\u4e09\u4e2a\u64cd\u4f5c\u5462\uff1f \u7c7b\u522b\u4e0d\u5f97\u76f4\u63a5\u4fee\u6539 \u5728\u7b2c\u4e09\u7ae0\u4e2d\u66fe\u63d0\u5230\uff0c\u7d22\u5f15 Index \u7c7b\u578b\u662f\u65e0\u6cd5\u7528 index_obj[0] = item \u6765\u4fee\u6539\u7684\uff0c\u800c categories \u88ab\u5b58\u50a8\u5728 Index \u4e2d\uff0c\u56e0\u6b64 pandas \u5728 cat \u5c5e\u6027\u4e0a\u5b9a\u4e49\u4e86\u82e5\u5e72\u65b9\u6cd5\u6765\u8fbe\u5230\u76f8\u540c\u7684\u76ee\u7684\u3002 \u9996\u5148\uff0c\u5bf9\u4e8e\u7c7b\u522b\u7684\u589e\u52a0\u53ef\u4ee5\u4f7f\u7528 add_categories \uff1a In [ 10 ]: s = s . cat . add_categories ( 'Graduate' ) # \u589e\u52a0\u4e00\u4e2a\u6bd5\u4e1a\u751f\u7c7b\u522b In [ 11 ]: s . cat . categories Out [ 11 ]: Index ([ 'Freshman' , 'Junior' , 'Senior' , 'Sophomore' , 'Graduate' ], dtype = 'object' ) \u82e5\u8981\u5220\u9664\u67d0\u4e00\u4e2a\u7c7b\u522b\u53ef\u4ee5\u4f7f\u7528 remove_categories \uff0c\u540c\u65f6\u6240\u6709\u539f\u6765\u5e8f\u5217\u4e2d\u7684\u8be5\u7c7b\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u7f3a\u5931\u3002\u4f8b\u5982\uff0c\u5220\u9664\u5927\u4e00\u7684\u7c7b\u522b\uff1a In [ 12 ]: s = s . cat . remove_categories ( 'Freshman' ) In [ 13 ]: s . cat . categories Out [ 13 ]: Index ([ 'Junior' , 'Senior' , 'Sophomore' , 'Graduate' ], dtype = 'object' ) In [ 14 ]: s . head () Out [ 14 ]: 0 NaN 1 NaN 2 Senior 3 Sophomore 4 Sophomore Name : Grade , dtype : category Categories ( 4 , object ): [ 'Junior' , 'Senior' , 'Sophomore' , 'Graduate' ] \u6b64\u5916\u53ef\u4ee5\u4f7f\u7528 set_categories \u76f4\u63a5\u8bbe\u7f6e\u5e8f\u5217\u7684\u65b0\u7c7b\u522b\uff0c\u539f\u6765\u7684\u7c7b\u522b\u4e2d\u5982\u679c\u5b58\u5728\u5143\u7d20\u4e0d\u5c5e\u4e8e\u65b0\u7c7b\u522b\uff0c\u90a3\u4e48\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u7f3a\u5931\u3002 In [ 15 ]: s = s . cat . set_categories ([ 'Sophomore' , 'PhD' ]) # \u65b0\u7c7b\u522b\u4e3a\u5927\u4e8c\u5b66\u751f\u548c\u535a\u58eb In [ 16 ]: s . cat . categories Out [ 16 ]: Index ([ 'Sophomore' , 'PhD' ], dtype = 'object' ) In [ 17 ]: s . head () Out [ 17 ]: 0 NaN 1 NaN 2 NaN 3 Sophomore 4 Sophomore Name : Grade , dtype : category Categories ( 2 , object ): [ 'Sophomore' , 'PhD' ] \u5982\u679c\u60f3\u8981\u5220\u9664\u672a\u51fa\u73b0\u5728\u5e8f\u5217\u4e2d\u7684\u7c7b\u522b\uff0c\u53ef\u4ee5\u4f7f\u7528 remove_unused_categories \u6765\u5b9e\u73b0\uff1a In [ 18 ]: s = s . cat . remove_unused_categories () # \u79fb\u9664\u4e86\u672a\u51fa\u73b0\u7684\u535a\u58eb\u751f\u7c7b\u522b In [ 19 ]: s . cat . categories Out [ 19 ]: Index ([ 'Sophomore' ], dtype = 'object' ) \u6700\u540e\uff0c\u201c\u589e\u6539\u67e5\u5220\u201d \u4e2d\u8fd8\u5269\u4e0b\u4fee\u6539\u7684\u64cd\u4f5c\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7 rename_categories \u65b9\u6cd5\u5b8c\u6210\uff0c\u540c\u65f6\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u5bf9\u539f\u5e8f\u5217\u7684\u5bf9\u5e94\u503c\u4e5f\u8fdb\u884c\u76f8\u5e94\u4fee\u6539\u3002\u4f8b\u5982\uff0c\u73b0\u5728\u628a Sophomore \u6539\u6210\u4e2d\u6587\u7684 \u672c\u79d1\u4e8c\u5e74\u7ea7\u5b66\u751f \uff1a In [ 20 ]: s = s . cat . rename_categories ({ 'Sophomore' : '\u672c\u79d1\u4e8c\u5e74\u7ea7\u5b66\u751f' }) In [ 21 ]: s . head () Out [ 21 ]: 0 NaN 1 NaN 2 NaN 3 \u672c\u79d1\u4e8c\u5e74\u7ea7\u5b66\u751f 4 \u672c\u79d1\u4e8c\u5e74\u7ea7\u5b66\u751f Name : Grade , dtype : category Categories ( 1 , object ): [ '\u672c\u79d1\u4e8c\u5e74\u7ea7\u5b66\u751f' ]","title":"2. \u7c7b\u522b\u7684\u589e\u52a0\u3001\u5220\u9664\u548c\u4fee\u6539"},{"location":"pandas/part9/#_1","text":"","title":"\u4e8c\u3001\u6709\u5e8f\u5206\u7c7b"},{"location":"pandas/part9/#1","text":"\u6709\u5e8f\u7c7b\u522b\u548c\u65e0\u5e8f\u7c7b\u522b\u53ef\u4ee5\u901a\u8fc7 as_unordered \u548c reorder_categories \u4e92\u76f8\u8f6c\u5316\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u540e\u8005\u4f20\u5165\u7684\u53c2\u6570\u5fc5\u987b\u662f\u7531\u5f53\u524d\u5e8f\u5217\u7684\u65e0\u5e8f\u7c7b\u522b\u6784\u6210\u7684\u5217\u8868\uff0c\u4e0d\u80fd\u591f\u589e\u52a0\u65b0\u7684\u7c7b\u522b\uff0c\u4e5f\u4e0d\u80fd\u7f3a\u5c11\u539f\u6765\u7684\u7c7b\u522b\uff0c\u5e76\u4e14\u5fc5\u987b\u6307\u5b9a\u53c2\u6570 ordered=True \uff0c\u5426\u5219\u65b9\u6cd5\u65e0\u6548\u3002\u4f8b\u5982\uff0c\u5bf9\u5e74\u7ea7\u9ad8\u4f4e\u8fdb\u884c\u76f8\u5bf9\u5927\u5c0f\u7684\u7c7b\u522b\u5212\u5206\uff0c\u7136\u540e\u518d\u6062\u590d\u65e0\u5e8f\u72b6\u6001\uff1a In [ 22 ]: s = df . Grade . astype ( 'category' ) In [ 23 ]: s = s . cat . reorder_categories ([ 'Freshman' , 'Sophomore' , .... : 'Junior' , 'Senior' ], ordered = True ) .... : In [ 24 ]: s . head () Out [ 24 ]: 0 Freshman 1 Freshman 2 Senior 3 Sophomore 4 Sophomore Name : Grade , dtype : category Categories ( 4 , object ): [ 'Freshman' < 'Sophomore' < 'Junior' < 'Senior' ] In [ 25 ]: s . cat . as_unordered () . head () Out [ 25 ]: 0 Freshman 1 Freshman 2 Senior 3 Sophomore 4 Sophomore Name : Grade , dtype : category Categories ( 4 , object ): [ 'Freshman' , 'Sophomore' , 'Junior' , 'Senior' ] \u7c7b\u522b\u4e0d\u5f97\u76f4\u63a5\u4fee\u6539 \u5982\u679c\u4e0d\u60f3\u6307\u5b9a ordered=True \u53c2\u6570\uff0c\u90a3\u4e48\u53ef\u4ee5\u5148\u7528 s.cat.as_ordered() \u8f6c\u5316\u4e3a\u6709\u5e8f\u7c7b\u522b\uff0c\u518d\u5229\u7528 reorder_categories \u8fdb\u884c\u5177\u4f53\u7684\u76f8\u5bf9\u5927\u5c0f\u8c03\u6574\u3002","title":"1. \u5e8f\u7684\u5efa\u7acb"},{"location":"pandas/part9/#2_1","text":"\u5728\u7b2c\u4e8c\u7ae0\u4e2d\uff0c\u66fe\u63d0\u5230\u4e86\u5b57\u7b26\u4e32\u548c\u6570\u503c\u7c7b\u578b\u5e8f\u5217\u7684\u6392\u5e8f\uff0c\u6b64\u65f6\u5c31\u8981\u8bf4\u660e\u5206\u7c7b\u53d8\u91cf\u7684\u6392\u5e8f\uff1a\u53ea\u9700\u628a\u5217\u7684\u7c7b\u578b\u4fee\u6539\u4e3a category \u540e\uff0c\u518d\u8d4b\u4e88\u76f8\u5e94\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5c31\u80fd\u6b63\u5e38\u5730\u4f7f\u7528 sort_index \u548c sort_values \u3002\u4f8b\u5982\uff0c\u5bf9\u5e74\u7ea7\u8fdb\u884c\u6392\u5e8f\uff1a In [ 26 ]: df . Grade = df . Grade . astype ( 'category' ) In [ 27 ]: df . Grade = df . Grade . cat . reorder_categories ([ 'Freshman' , .... : 'Sophomore' , .... : 'Junior' , .... : 'Senior' ], ordered = True ) .... : In [ 28 ]: df . sort_values ( 'Grade' ) . head () # \u503c\u6392\u5e8f Out [ 28 ]: Grade Name Gender Height Weight 0 Freshman Gaopeng Yang Female 158.9 46.0 105 Freshman Qiang Shi Female 164.5 52.0 96 Freshman Changmei Feng Female 163.8 56.0 88 Freshman Xiaopeng Han Female 164.1 53.0 81 Freshman Yanli Zhang Female 165.1 52.0 In [ 29 ]: df . set_index ( 'Grade' ) . sort_index () . head () # \u7d22\u5f15\u6392\u5e8f Out [ 29 ]: Name Gender Height Weight Grade Freshman Gaopeng Yang Female 158.9 46.0 Freshman Qiang Shi Female 164.5 52.0 Freshman Changmei Feng Female 163.8 56.0 Freshman Xiaopeng Han Female 164.1 53.0 Freshman Yanli Zhang Female 165.1 52.0 \u7531\u4e8e\u5e8f\u7684\u5efa\u7acb\uff0c\u56e0\u6b64\u5c31\u53ef\u4ee5\u8fdb\u884c\u6bd4\u8f83\u64cd\u4f5c\u3002\u5206\u7c7b\u53d8\u91cf\u7684\u6bd4\u8f83\u64cd\u4f5c\u5206\u4e3a\u4e24\u7c7b\uff0c\u7b2c\u4e00\u79cd\u662f == \u6216 != \u5173\u7cfb\u7684\u6bd4\u8f83\uff0c\u6bd4\u8f83\u7684\u5bf9\u8c61\u53ef\u4ee5\u662f\u6807\u91cf\u6216\u8005\u540c\u957f\u5ea6\u7684 Series \uff08\u6216 list \uff09\uff0c\u7b2c\u4e8c\u79cd\u662f >,>=,<,<= \u56db\u7c7b\u5927\u5c0f\u5173\u7cfb\u7684\u6bd4\u8f83\uff0c\u6bd4\u8f83\u7684\u5bf9\u8c61\u548c\u7b2c\u4e00\u79cd\u7c7b\u4f3c\uff0c\u4f46\u662f\u6240\u6709\u53c2\u4e0e\u6bd4\u8f83\u7684\u5143\u7d20\u5fc5\u987b\u5c5e\u4e8e\u539f\u5e8f\u5217\u7684 categories \uff0c\u540c\u65f6\u8981\u548c\u539f\u5e8f\u5217\u5177\u6709\u76f8\u540c\u7684\u7d22\u5f15\u3002 In [ 30 ]: res1 = df . Grade == 'Sophomore' In [ 31 ]: res1 . head () Out [ 31 ]: 0 False 1 False 2 False 3 True 4 True Name : Grade , dtype : bool In [ 32 ]: res2 = df . Grade == [ 'PhD' ] * df . shape [ 0 ] In [ 33 ]: res2 . head () Out [ 33 ]: 0 False 1 False 2 False 3 False 4 False Name : Grade , dtype : bool In [ 34 ]: res3 = df . Grade <= 'Sophomore' In [ 35 ]: res3 . head () Out [ 35 ]: 0 True 1 True 2 False 3 True 4 True Name : Grade , dtype : bool In [ 36 ]: res4 = df . Grade <= df . Grade . sample ( .... : frac = 1 ) . reset_index ( .... : drop = True ) # \u6253\u4e71\u540e\u6bd4\u8f83 .... : In [ 37 ]: res4 . head () Out [ 37 ]: 0 True 1 True 2 False 3 True 4 True Name : Grade , dtype : bool","title":"2. \u6392\u5e8f\u548c\u6bd4\u8f83"},{"location":"pandas/part9/#_2","text":"","title":"\u4e09\u3001\u533a\u95f4\u7c7b\u522b"},{"location":"pandas/part9/#1-cut-qcut","text":"\u533a\u95f4\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\u522b\uff0c\u5728\u5b9e\u9645\u6570\u636e\u5206\u6790\u4e2d\uff0c\u533a\u95f4\u5e8f\u5217\u5f80\u5f80\u662f\u901a\u8fc7 cut \u548c qcut \u65b9\u6cd5\u8fdb\u884c\u6784\u9020\u7684\uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u80fd\u591f\u628a\u539f\u5e8f\u5217\u7684\u6570\u503c\u7279\u5f81\u8fdb\u884c\u88c5\u7bb1\uff0c\u5373\u7528\u533a\u95f4\u4f4d\u7f6e\u6765\u4ee3\u66ff\u539f\u6765\u7684\u5177\u4f53\u6570\u503c\u3002 \u9996\u5148\u4ecb\u7ecd cut \u7684\u5e38\u89c1\u7528\u6cd5\uff1a \u5176\u4e2d\uff0c\u6700\u91cd\u8981\u7684\u53c2\u6570\u662f bins \uff0c\u5982\u679c\u4f20\u5165\u6574\u6570 n \uff0c\u5219\u4ee3\u8868\u628a\u6574\u4e2a\u4f20\u5165\u6570\u7ec4\u7684\u6309\u7167\u6700\u5927\u548c\u6700\u5c0f\u503c\u7b49\u95f4\u8ddd\u5730\u5206\u4e3a n \u6bb5\u3002\u7531\u4e8e\u533a\u95f4\u9ed8\u8ba4\u662f\u5de6\u5f00\u53f3\u95ed\uff0c\u9700\u8981\u5728\u8c03\u6574\u65f6\u628a\u6700\u5c0f\u503c\u5305\u542b\u8fdb\u53bb\uff0c\u5728 pandas \u4e2d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5728\u503c\u6700\u5c0f\u7684\u533a\u95f4\u5de6\u7aef\u70b9\u518d\u51cf\u53bb 0.001*(max-min) \uff0c\u56e0\u6b64\u5982\u679c\u5bf9\u5e8f\u5217 [1,2] \u5212\u5206\u4e3a 2 \u4e2a\u7bb1\u5b50\u65f6\uff0c\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u7684\u8303\u56f4 (0.999,1.5] \uff0c\u7b2c\u4e8c\u4e2a\u7bb1\u5b50\u7684\u8303\u56f4\u662f (1.5,2] \u3002\u5982\u679c\u9700\u8981\u6307\u5b9a\u5de6\u95ed\u53f3\u5f00\u65f6\uff0c\u9700\u8981\u628a right \u53c2\u6570\u8bbe\u7f6e\u4e3a False \uff0c\u76f8\u5e94\u7684\u533a\u95f4\u8c03\u6574\u65b9\u6cd5\u662f\u5728\u503c\u6700\u5927\u7684\u533a\u95f4\u53f3\u7aef\u70b9\u518d\u52a0\u4e0a 0.001*(max-min) \u3002 In [ 38 ]: s = pd . Series ([ 1 , 2 ]) In [ 39 ]: pd . cut ( s , bins = 2 ) Out [ 39 ]: 0 ( 0.999 , 1.5 ] 1 ( 1.5 , 2.0 ] dtype : category Categories ( 2 , interval [ float64 ]): [( 0.999 , 1.5 ] < ( 1.5 , 2.0 ]] In [ 40 ]: pd . cut ( s , bins = 2 , right = False ) Out [ 40 ]: 0 [ 1.0 , 1.5 ) 1 [ 1.5 , 2.001 ) dtype : category Categories ( 2 , interval [ float64 ]): [[ 1.0 , 1.5 ) < [ 1.5 , 2.001 )] bins \u7684\u53e6\u4e00\u4e2a\u5e38\u89c1\u7528\u6cd5\u662f\u6307\u5b9a\u533a\u95f4\u5206\u5272\u70b9\u7684\u5217\u8868\uff08\u4f7f\u7528 np.infty \u53ef\u4ee5\u8868\u793a\u65e0\u7a77\u5927\uff09\uff1a In [ 41 ]: pd . cut ( s , bins = [ - np . infty , 1.2 , 1.8 , 2.2 , np . infty ]) Out [ 41 ]: 0 ( - inf , 1.2 ] 1 ( 1.8 , 2.2 ] dtype : category Categories ( 4 , interval [ float64 ]): [( - inf , 1.2 ] < ( 1.2 , 1.8 ] < ( 1.8 , 2.2 ] < ( 2.2 , inf ]] \u53e6\u5916\u4e24\u4e2a\u5e38\u7528\u53c2\u6570\u4e3a labels \u548c retbins \uff0c\u5206\u522b\u4ee3\u8868\u4e86\u533a\u95f4\u7684\u540d\u5b57\u548c\u662f\u5426\u8fd4\u56de\u5206\u5272\u70b9\uff08\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff09\uff1a In [ 42 ]: s = pd . Series ([ 1 , 2 ]) In [ 43 ]: res = pd . cut ( s , bins = 2 , labels = [ 'small' , 'big' ], retbins = True ) In [ 44 ]: res [ 0 ] Out [ 44 ]: 0 small 1 big dtype : category Categories ( 2 , object ): [ 'small' < 'big' ] In [ 45 ]: res [ 1 ] # \u8be5\u5143\u7d20\u4e3a\u8fd4\u56de\u7684\u5206\u5272\u70b9 Out [ 45 ]: array ([ 0.999 , 1.5 , 2. ]) \u4ece\u7528\u6cd5\u4e0a\u6765\u8bf4\uff0c qcut \u548c cut \u51e0\u4e4e\u6ca1\u6709\u5dee\u522b\uff0c\u53ea\u662f\u628a bins \u53c2\u6570\u53d8\u6210\u7684 q \u53c2\u6570\uff0c qcut \u4e2d\u7684 q \u662f\u6307 quantile \u3002\u8fd9\u91cc\u7684 q \u4e3a\u6574\u6570 n \u65f6\uff0c\u6307\u6309\u7167 n \u7b49\u5206\u4f4d\u6570\u628a\u6570\u636e\u5206\u7bb1\uff0c\u8fd8\u53ef\u4ee5\u4f20\u5165\u6d6e\u70b9\u5217\u8868\u6307\u4ee3\u76f8\u5e94\u7684\u5206\u4f4d\u6570\u5206\u5272\u70b9\u3002 In [ 46 ]: s = df . Weight In [ 47 ]: pd . qcut ( s , q = 3 ) . head () Out [ 47 ]: 0 ( 33.999 , 48.0 ] 1 ( 55.0 , 89.0 ] 2 ( 55.0 , 89.0 ] 3 ( 33.999 , 48.0 ] 4 ( 55.0 , 89.0 ] Name : Weight , dtype : category Categories ( 3 , interval [ float64 ]): [( 33.999 , 48.0 ] < ( 48.0 , 55.0 ] < ( 55.0 , 89.0 ]] In [ 48 ]: pd . qcut ( s , q = [ 0 , 0.2 , 0.8 , 1 ]) . head () Out [ 48 ]: 0 ( 44.0 , 69.4 ] 1 ( 69.4 , 89.0 ] 2 ( 69.4 , 89.0 ] 3 ( 33.999 , 44.0 ] 4 ( 69.4 , 89.0 ] Name : Weight , dtype : category Categories ( 3 , interval [ float64 ]): [( 33.999 , 44.0 ] < ( 44.0 , 69.4 ] < ( 69.4 , 89.0 ]]","title":"1. \u5229\u7528 cut \u548c qcut \u8fdb\u884c\u533a\u95f4\u6784\u9020"},{"location":"pandas/part9/#2_2","text":"\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u5177\u4f53\u7684\u533a\u95f4\u800c\u8a00\uff0c\u5176\u5177\u5907\u4e09\u4e2a\u8981\u7d20\uff0c\u5373\u5de6\u7aef\u70b9\u3001\u53f3\u7aef\u70b9\u548c\u7aef\u70b9\u7684\u5f00\u95ed\u72b6\u6001\uff0c\u5176\u4e2d\u5f00\u95ed\u72b6\u6001\u53ef\u4ee5\u6307\u5b9a right, left, both, neither \u4e2d\u7684\u4e00\u7c7b\uff1a In [ 49 ]: my_interval = pd . Interval ( 0 , 1 , 'right' ) In [ 50 ]: my_interval Out [ 50 ]: Interval ( 0 , 1 , closed = 'right' ) \u5176\u5c5e\u6027\u5305\u542b\u4e86 mid, length, right, left, closed \uff0c\u5206\u522b\u8868\u793a\u4e2d\u70b9\u3001\u957f\u5ea6\u3001\u53f3\u7aef\u70b9\u3001\u5de6\u7aef\u70b9\u548c\u5f00\u95ed\u72b6\u6001\u3002 \u4f7f\u7528 in \u53ef\u4ee5\u5224\u65ad\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u533a\u95f4\uff1a In [ 51 ]: 0.5 in my_interval Out [ 51 ]: True \u4f7f\u7528 overlaps \u53ef\u4ee5\u5224\u65ad\u4e24\u4e2a\u533a\u95f4\u662f\u5426\u6709\u4ea4\u96c6\uff1a In [ 52 ]: my_interval_2 = pd . Interval ( 0.5 , 1.5 , 'left' ) In [ 53 ]: my_interval . overlaps ( my_interval_2 ) Out [ 53 ]: True \u4e00\u822c\u800c\u8a00\uff0c pd.IntervalIndex \u5bf9\u8c61\u6709\u56db\u7c7b\u65b9\u6cd5\u751f\u6210\uff0c\u5206\u522b\u662f from_breaks, from_arrays, from_tuples, interval_range \uff0c\u5b83\u4eec\u5206\u522b\u5e94\u7528\u4e8e\u4e0d\u540c\u7684\u60c5\u51b5\uff1a from_breaks \u7684\u529f\u80fd\u7c7b\u4f3c\u4e8e cut \u6216 qcut \u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7\u540e\u4e24\u4e2a\u662f\u901a\u8fc7\u8ba1\u7b97\u5f97\u5230\u7684\u5206\u5272\u70b9\uff0c\u800c\u524d\u8005\u662f\u76f4\u63a5\u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u5206\u5272\u70b9\uff1a In [ 54 ]: pd . IntervalIndex . from_breaks ([ 1 , 3 , 6 , 10 ], closed = 'both' ) Out [ 54 ]: IntervalIndex ([[ 1 , 3 ], [ 3 , 6 ], [ 6 , 10 ]], closed = 'both' , dtype = 'interval[int64]' ) from_arrays \u662f\u5206\u522b\u4f20\u5165\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u7684\u5217\u8868\uff0c\u9002\u7528\u4e8e\u6709\u4ea4\u96c6\u5e76\u4e14\u77e5\u9053\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u60c5\u51b5\uff1a In [ 55 ]: pd . IntervalIndex . from_arrays ( left = [ 1 , 3 , 6 , 10 ], .... : right = [ 5 , 4 , 9 , 11 ], .... : closed = 'neither' ) .... : Out [ 55 ]: IntervalIndex ([( 1 , 5 ), ( 3 , 4 ), ( 6 , 9 ), ( 10 , 11 )], closed = 'neither' , dtype = 'interval[int64]' ) from_tuples \u4f20\u5165\u7684\u662f\u8d77\u70b9\u548c\u7ec8\u70b9\u5143\u7ec4\u6784\u6210\u7684\u5217\u8868\uff1a In [ 56 ]: pd . IntervalIndex . from_tuples ([( 1 , 5 ),( 3 , 4 ),( 6 , 9 ),( 10 , 11 )], .... : closed = 'neither' ) .... : Out [ 56 ]: IntervalIndex ([( 1 , 5 ), ( 3 , 4 ), ( 6 , 9 ), ( 10 , 11 )], closed = 'neither' , dtype = 'interval[int64]' ) \u4e00\u4e2a\u7b49\u5dee\u7684\u533a\u95f4\u5e8f\u5217\u7531\u8d77\u70b9\u3001\u7ec8\u70b9\u3001\u533a\u95f4\u4e2a\u6570\u548c\u533a\u95f4\u957f\u5ea6\u51b3\u5b9a\uff0c\u5176\u4e2d\u4e09\u4e2a\u91cf\u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u5269\u4e0b\u4e00\u4e2a\u91cf\u5c31\u786e\u5b9a\u4e86\uff0c interval_range \u4e2d\u7684 start, end, periods, freq \u53c2\u6570\u5c31\u5bf9\u5e94\u4e86\u8fd9\u56db\u4e2a\u91cf\uff0c\u4ece\u800c\u5c31\u80fd\u6784\u9020\u51fa\u76f8\u5e94\u7684\u533a\u95f4\uff1a In [ 57 ]: pd . interval_range ( start = 1 , end = 5 , periods = 8 ) Out [ 57 ]: IntervalIndex ([( 1.0 , 1.5 ], ( 1.5 , 2.0 ], ( 2.0 , 2.5 ], ( 2.5 , 3.0 ], ( 3.0 , 3.5 ], ( 3.5 , 4.0 ], ( 4.0 , 4.5 ], ( 4.5 , 5.0 ]], closed = 'right' , dtype = 'interval[float64]' ) In [ 58 ]: pd . interval_range ( end = 5 , periods = 8 , freq = 0.5 ) Out [ 58 ]: IntervalIndex ([( 1.0 , 1.5 ], ( 1.5 , 2.0 ], ( 2.0 , 2.5 ], ( 2.5 , 3.0 ], ( 3.0 , 3.5 ], ( 3.5 , 4.0 ], ( 4.0 , 4.5 ], ( 4.5 , 5.0 ]], closed = 'right' , dtype = 'interval[float64]' ) \u7ec3\u4e00\u7ec3 \u65e0\u8bba\u662f interval_range \u8fd8\u662f\u4e0b\u4e00\u7ae0\u65f6\u95f4\u5e8f\u5217\u4e2d\u7684 date_range \u90fd\u662f\u7ed9\u5b9a\u4e86\u7b49\u5dee\u5e8f\u5217\u4e2d\u56db\u8981\u7d20\u4e2d\u7684\u4e09\u4e2a\uff0c\u4ece\u800c\u786e\u5b9a\u6574\u4e2a\u5e8f\u5217\u3002\u8bf7\u56de\u987e\u7b49\u5dee\u6570\u5217\u4e2d\u7684\u9996\u9879\u3001\u672b\u9879\u3001\u9879\u6570\u548c\u516c\u5dee\u7684\u8054\u7cfb\uff0c\u5199\u51fa interval_range \u4e2d\u56db\u4e2a\u53c2\u6570\u4e4b\u95f4\u7684\u6052\u7b49\u5173\u7cfb\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528 pd.IntervalIndex([...], closed=...) \uff0c\u628a Interval \u7c7b\u578b\u7684\u5217\u8868\u7ec4\u6210\u4f20\u5165\u5176\u4e2d\u8f6c\u4e3a\u533a\u95f4\u7d22\u5f15\uff0c\u90a3\u4e48\u6240\u6709\u7684\u533a\u95f4\u4f1a\u88ab\u5f3a\u5236\u8f6c\u4e3a\u6307\u5b9a\u7684 closed \u7c7b\u578b\uff0c\u56e0\u4e3a pd.IntervalIndex \u53ea\u5141\u8bb8\u5b58\u653e\u540c\u4e00\u79cd\u5f00\u95ed\u533a\u95f4\u7684 Interval \u5bf9\u8c61\u3002 In [ 59 ]: my_interval Out [ 59 ]: Interval ( 0 , 1 , closed = 'right' ) In [ 60 ]: my_interval_2 Out [ 60 ]: Interval ( 0.5 , 1.5 , closed = 'left' ) In [ 61 ]: pd . IntervalIndex ([ my_interval , my_interval_2 ], closed = 'left' ) Out [ 61 ]: IntervalIndex ([[ 0.0 , 1.0 ), [ 0.5 , 1.5 )], closed = 'left' , dtype = 'interval[float64]' )","title":"2. \u4e00\u822c\u533a\u95f4\u7684\u6784\u9020"},{"location":"pandas/part9/#3","text":"IntervalIndex \u4e0a\u4e5f\u5b9a\u4e49\u4e86\u4e00\u4e9b\u6709\u7528\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002\u540c\u65f6\uff0c\u5982\u679c\u60f3\u8981\u5177\u4f53\u5229\u7528 cut \u6216\u8005 qcut \u7684\u7ed3\u679c\u8fdb\u884c\u5206\u6790\uff0c\u90a3\u4e48\u9700\u8981\u5148\u5c06\u5176\u8f6c\u4e3a\u8be5\u79cd\u7d22\u5f15\u7c7b\u578b\uff1a In [ 62 ]: id_interval = pd . IntervalIndex ( pd . cut ( s , 3 )) \u4e0e\u5355\u4e2a Interval \u7c7b\u578b\u76f8\u4f3c\uff0c IntervalIndex \u6709\u82e5\u5e72\u5e38\u7528\u5c5e\u6027\uff1a left, right, mid, length \uff0c\u5206\u522b\u8868\u793a\u5de6\u53f3\u7aef\u70b9\u3001\u4e24\u7aef\u70b9\u5747\u503c\u548c\u533a\u95f4\u957f\u5ea6\u3002 In [ 63 ]: id_demo = id_interval [: 5 ] # \u9009\u51fa\u524d5\u4e2a\u5c55\u793a In [ 64 ]: id_demo Out [ 64 ]: IntervalIndex ([( 33.945 , 52.333 ], ( 52.333 , 70.667 ], ( 70.667 , 89.0 ], ( 33.945 , 52.333 ], ( 70.667 , 89.0 ]], closed = 'right' , name = 'Weight' , dtype = 'interval[float64]' ) In [ 65 ]: id_demo . left Out [ 65 ]: Float64Index ([ 33.945 , 52.333 , 70.667 , 33.945 , 70.667 ], dtype = 'float64' ) In [ 66 ]: id_demo . right Out [ 66 ]: Float64Index ([ 52.333 , 70.667 , 89.0 , 52.333 , 89.0 ], dtype = 'float64' ) In [ 67 ]: id_demo . mid Out [ 67 ]: Float64Index ([ 43.138999999999996 , 61.5 , 79.8335 , 43.138999999999996 , 79.8335 ], dtype = 'float64' ) In [ 68 ]: id_demo . length Out [ 68 ]: Float64Index ([ 18.387999999999998 , 18.334000000000003 , 18.333 , 18.387999999999998 , 18.333 ], dtype = 'float64' ) IntervalIndex \u8fd8\u6709\u4e24\u4e2a\u5e38\u7528\u65b9\u6cd5\uff0c\u5305\u62ec contains \u548c overlaps \uff0c\u5206\u522b\u6307\u9010\u4e2a\u5224\u65ad\u6bcf\u4e2a\u533a\u95f4\u662f\u5426\u5305\u542b\u67d0\u5143\u7d20\uff0c\u4ee5\u53ca\u662f\u5426\u548c\u4e00\u4e2a pd.Interval \u5bf9\u8c61\u6709\u4ea4\u96c6\u3002 In [ 69 ]: id_demo . contains ( 4 ) Out [ 69 ]: array ([ False , False , False , False , False ]) In [ 70 ]: id_demo . overlaps ( pd . Interval ( 40 , 60 )) Out [ 70 ]: array ([ True , True , False , True , False ])","title":"3. \u533a\u95f4\u7684\u5c5e\u6027\u4e0e\u65b9\u6cd5"},{"location":"pandas/part9/#_3","text":"","title":"\u56db\u3001\u7ec3\u4e60"},{"location":"pandas/part9/#ex1","text":"\u5728\u7b2c\u4e94\u7ae0\u4e2d\u4ecb\u7ecd\u4e86 crosstab \u51fd\u6570\uff0c\u5728\u9ed8\u8ba4\u53c2\u6570\u4e0b\u5b83\u80fd\u591f\u5bf9\u4e24\u4e2a\u5217\u7684\u7ec4\u5408\u51fa\u73b0\u7684\u9891\u6570\u8fdb\u884c\u7edf\u8ba1\u6c47\u603b\uff1a In [ 71 ]: df = pd . DataFrame ({ 'A' :[ 'a' , 'b' , 'c' , 'a' ], .... : 'B' :[ 'cat' , 'cat' , 'dog' , 'cat' ]}) .... : In [ 72 ]: pd . crosstab ( df . A , df . B ) Out [ 72 ]: B cat dog A a 2 0 b 1 0 c 0 1 \u4f46\u4e8b\u5b9e\u4e0a\u6709\u4e9b\u5217\u5b58\u50a8\u7684\u662f\u5206\u7c7b\u53d8\u91cf\uff0c\u5217\u4e2d\u5e76\u4e0d\u4e00\u5b9a\u5305\u542b\u6240\u6709\u7684\u7c7b\u522b\uff0c\u6b64\u65f6\u5982\u679c\u60f3\u8981\u5bf9\u8fd9\u4e9b\u672a\u51fa\u73b0\u7684\u7c7b\u522b\u5728 crosstab \u7ed3\u679c\u4e2d\u4e5f\u8fdb\u884c\u6c47\u603b\uff0c\u5219\u53ef\u4ee5\u6307\u5b9a dropna \u53c2\u6570\u4e3a False \uff1a In [ 73 ]: df . B = df . B . astype ( 'category' ) . cat . add_categories ( 'sheep' ) In [ 74 ]: pd . crosstab ( df . A , df . B , dropna = False ) Out [ 74 ]: B cat dog sheep A a 2 0 0 b 1 0 0 c 0 1 0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u5e26\u6709 dropna \u53c2\u6570\u7684 my_crosstab \u51fd\u6570\u6765\u5b8c\u6210\u4e0a\u9762\u7684\u529f\u80fd\u3002","title":"Ex1\uff1a\u7edf\u8ba1\u672a\u51fa\u73b0\u7684\u7c7b\u522b"},{"location":"pandas/part9/#ex2","text":"\u73b0\u6709\u4e00\u4efd\u5173\u4e8e\u94bb\u77f3\u7684\u6570\u636e\u96c6\uff0c\u5176\u4e2d carat, cut, clarity, price \u5206\u522b\u8868\u793a\u514b\u62c9\u91cd\u91cf\u3001\u5207\u5272\u8d28\u91cf\u3001\u7eaf\u51c0\u5ea6\u548c\u4ef7\u683c\uff0c\u6837\u4f8b\u5982\u4e0b\uff1a In [ 75 ]: df = pd . read_csv ( 'data/diamonds.csv' ) In [ 76 ]: df . head ( 3 ) Out [ 76 ]: carat cut clarity price 0 0.23 Ideal SI2 326 1 0.21 Premium SI1 326 2 0.23 Good VS1 327 \u5206\u522b\u5bf9 df.cut \u5728 object \u7c7b\u578b\u548c category \u7c7b\u578b\u4e0b\u4f7f\u7528 nunique \u51fd\u6570\uff0c\u5e76\u6bd4\u8f83\u5b83\u4eec\u7684\u6027\u80fd\u3002 \u94bb\u77f3\u7684\u5207\u5272\u8d28\u91cf\u53ef\u4ee5\u5206\u4e3a\u4e94\u4e2a\u7b49\u7ea7\uff0c\u7531\u6b21\u5230\u597d\u5206\u522b\u662f Fair, Good, Very Good, Premium, Ideal \uff0c\u7eaf\u51c0\u5ea6\u6709\u516b\u4e2a\u7b49\u7ea7\uff0c\u7531\u6b21\u5230\u597d\u5206\u522b\u662f I1, SI2, SI1, VS2, VS1, VVS2, VVS1, IF \uff0c\u8bf7\u5bf9\u5207\u5272\u8d28\u91cf\u6309\u7167 \u7531\u597d\u5230\u6b21 \u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u76f8\u540c\u5207\u5272\u8d28\u91cf\u7684\u94bb\u77f3\uff0c\u6309\u7167\u7eaf\u51c0\u5ea6\u8fdb\u884c \u7531\u6b21\u5230\u597d \u7684\u6392\u5e8f\u3002 \u5206\u522b\u91c7\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u628a cut, clarity \u8fd9\u4e24\u5217\u6309\u7167 \u7531\u597d\u5230\u6b21 \u7684\u987a\u5e8f\uff0c\u6620\u5c04\u5230\u4ece 0 \u5230 n-1 \u7684\u6574\u6570\uff0c\u5176\u4e2d n \u8868\u793a\u7c7b\u522b\u7684\u4e2a\u6570\u3002 \u5bf9\u6bcf\u514b\u62c9\u7684\u4ef7\u683c\u5206\u522b\u6309\u7167\u5206\u4f4d\u6570\uff08q=[0.2, 0.4, 0.6, 0.8]\uff09\u4e0e [1000, 3500, 5500, 18000] \u5272\u70b9\u8fdb\u884c\u5206\u7bb1\u5f97\u5230\u4e94\u4e2a\u7c7b\u522b Very Low, Low, Mid, High, Very High \uff0c\u5e76\u628a\u6309\u8fd9\u4e24\u79cd\u5206\u7bb1\u65b9\u6cd5\u5f97\u5230\u7684 category \u5e8f\u5217\u4f9d\u6b21\u6dfb\u52a0\u5230\u539f\u8868\u4e2d\u3002 \u7b2c 4 \u95ee\u4e2d\u6309\u7167\u6574\u6570\u5206\u7bb1\u5f97\u5230\u7684\u5e8f\u5217\u4e2d\uff0c\u662f\u5426\u51fa\u73b0\u4e86\u6240\u6709\u7684\u7c7b\u522b\uff1f\u5982\u679c\u5b58\u5728\u6ca1\u6709\u51fa\u73b0\u7684\u7c7b\u522b\u8bf7\u628a\u8be5\u7c7b\u522b\u5220\u9664\u3002 \u5bf9\u7b2c 4 \u95ee\u4e2d\u6309\u7167\u5206\u4f4d\u6570\u5206\u7bb1\u5f97\u5230\u7684\u5e8f\u5217\uff0c\u6c42\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u6240\u5728\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u503c\u548c\u957f\u5ea6\u3002","title":"Ex2\uff1a\u94bb\u77f3\u6570\u636e\u96c6"},{"location":"programming/python/built-in-func/","text":"\u5e38\u7528\u5185\u7f6e\u51fd\u6570 01. eval\u548cexec\u51fd\u6570 1.1. \u51fd\u6570\u7684\u8bed\u6cd5\u548c\u5b9a\u4e49 eval() \u548c exec() \u51fd\u6570\u7684\u529f\u80fd\u662f\u76f8\u4f3c\u7684\uff0c\u90fd\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684 Python \u4ee3\u7801\uff08\u4ee3\u7801\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u63d0\u4f9b\uff09\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a Python \u7684\u89e3\u91ca\u5668\u3002\u4e8c\u8005\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0ceval() \u6267\u884c\u5b8c\u8981\u8fd4\u56de\u7ed3\u679c\uff0c\u800c exec() \u6267\u884c\u5b8c\u4e0d\u8fd4\u56de\u7ed3\u679c\u3002 \u4e24\u4e2a\u51fd\u6570\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a eval(expression[, globals[, locals]]) expression -- \u8868\u8fbe\u5f0f\u3002 globals -- \u53d8\u91cf\u4f5c\u7528\u57df\uff0c\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u5982\u679c\u88ab\u63d0\u4f9b\uff0c\u5219\u5fc5\u987b\u662f\u4e00\u4e2a\u5b57\u5178\u5bf9\u8c61\u3002 locals -- \u53d8\u91cf\u4f5c\u7528\u57df\uff0c\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u5982\u679c\u88ab\u63d0\u4f9b\uff0c\u53ef\u4ee5\u662f\u4efb\u4f55\u6620\u5c04\u5bf9\u8c61\u3002\u5f53\u5b83\u548c globals \u4e2d\u6709\u91cd\u590d\u6216\u51b2\u7a81\u65f6\uff0c\u4ee5 locals \u7684\u4e3a\u51c6\u3002\u5982\u679c locals \u6ca1\u6709\u88ab\u63d0\u4f9b\uff0c\u5219\u9ed8\u8ba4\u4e3a globals\u3002 1.2 \u57fa\u672c\u5e94\u7528 dic = {} #\u5b9a\u4e49\u4e00\u4e2a\u5b57\u5178 dic [ 'b' ] = 3 #\u5728 dic \u4e2d\u52a0\u4e00\u6761\u5143\u7d20\uff0ckey \u4e3a b print ( dic . keys ()) #\u5148\u5c06 dic \u7684 key \u6253\u5370\u51fa\u6765\uff0c\u6709\u4e00\u4e2a\u5143\u7d20 b exec ( \"a = 4\" , dic ) #\u5728 exec \u6267\u884c\u7684\u8bed\u53e5\u540e\u9762\u8ddf\u4e00\u4e2a\u4f5c\u7528\u57df dic print ( dic . keys ()) #exec \u540e\uff0cdic \u7684 key \u591a\u4e86\u4e00\u4e2a >>> dict_keys ([ 'b' ]) dict_keys ([ 'b' , '__builtins__' , 'a' ]) \u4e0a\u9762\u7684\u5b9e\u4f8b\uff0c\u901a\u8fc7 exec() \u51fd\u6570\u5c06 a=4 \u6dfb\u52a0\u5230\u5b57\u5178\u5185\uff0c\u4f5c\u7528\u57df\u662f dic \u8fd9\u4e2a\u5b57\u5178 a = 10 b = 20 c = 30 g = { 'a' : 6 , 'b' : 8 } #\u5b9a\u4e49\u4e00\u4e2a\u5b57\u5178 t = { 'b' : 100 , 'c' : 10 } #\u5b9a\u4e49\u4e00\u4e2a\u5b57\u5178 print ( eval ( 'a+b+c' , g , t )) #\u5b9a\u4e49\u4e00\u4e2a\u5b57\u5178 116 >>> 116 \u4e0a\u9762\u5b9e\u4f8b\u6f14\u793a\u4e86\u53c2\u6570 locals \u7684\u4f5c\u7528\uff0c\u5f53 locals \u548c globals \u91cd\u590d\u6216\u51b2\u7a81\u65f6\uff0c\u4ee5 locals \u4e3a\u51c6\u3002 1.2 eval\u548cexec\u7684\u533a\u522b\uff1a a = 1 exec ( \"a = 2\" ) #\u76f8\u5f53\u4e8e\u76f4\u63a5\u6267\u884c a=2 print ( a ) a = exec ( \"2+3\" ) #\u76f8\u5f53\u4e8e\u76f4\u63a5\u6267\u884c 2+3\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8fd4\u56de\u503c\uff0ca \u5e94\u4e3a None print ( a ) a = eval ( '2+3' ) #\u6267\u884c 2+3\uff0c\u5e76\u628a\u7ed3\u679c\u8fd4\u56de\u7ed9 a print ( a ) >>> 2 None 5 \u901a\u8fc7\u4e0a\u9762\u5b9e\u4f8b\uff0ceval() \u6267\u884c\u5b8c\u4f1a\u8fd4\u56de\u7ed3\u679c\uff0c\u800c exec() \u6267\u884c\u5b8c\u4e0d\u8fd4\u56de\u7ed3\u679c\u3002 exec() \u4e2d\u6700\u9002\u5408\u653e\u7f6e\u8fd0\u884c\u540e\u6ca1\u6709\u7ed3\u679c\u7684\u8bed\u53e5\uff0c\u800c eval() \u4e2d\u9002\u5408\u653e\u7f6e\u6709\u7ed3\u679c\u8fd4\u56de\u7684\u8bed\u53e5\u3002 \u5982\u679c eval() \u91cc\u653e\u7f6e\u4e00\u4e2a\u6ca1\u6709\u7ed3\u679c\u8fd4\u56de\u7684\u8bed\u53e5,\u89e3\u91ca\u5668\u4f1a\u62a5\u9519\u3002 02. map\u51fd\u6570 2.1 \u8bed\u6cd5\u548c\u8fd4\u56de map ( function , iterable ) \u5176\u4e2d\uff0cfunction \u53c2\u6570\u8868\u793a\u8981\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u53ef\u4ee5\u662f\u5185\u7f6e\u51fd\u6570\u3001\u81ea\u5b9a\u4e49\u51fd\u6570\u6216\u8005 lambda \u533f\u540d\u51fd\u6570\uff1biterable \u8868\u793a\u4e00\u4e2a\u6216\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u53ef\u4ee5\u662f\u5217\u8868\u3001\u5b57\u7b26\u4e32\u7b49\u3002 map() \u51fd\u6570\u7684\u529f\u80fd\u662f\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u90fd\u8c03\u7528\u6307\u5b9a\u7684\u51fd\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a map \u5bf9\u8c61\u3002 \u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2a map \u5bf9\u8c61\uff0c\u4e0d\u80fd\u76f4\u63a5\u8f93\u51fa\uff0c\u53ef\u4ee5\u901a\u8fc7 for \u5faa\u73af\u6216\u8005 list() \u51fd\u6570\u6765\u663e\u793a\u3002 2.2 map\u51fd\u6570\u7684\u4f7f\u7528 \u5982\u679c\u9700\u6c42\u662f\u5c06\u4e00\u4e2a\u5217\u8868\u7684\u5185\u5143\u7d20\u90fd*2\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\uff1a l = list ( range ( 1 , 7 )) # \u5b9a\u4e49\u4e00\u4e2a\u5217\u8868 def demo ( x ): # \u5b9a\u4e49*2\u7684\u51fd\u6570 return x * 2 f = map ( demo , l ) # \u4f7f\u7528map\u51fd\u6570\u5c06\u5217\u8868\u5185\u7684\u6bcf\u4e2a\u503c\u90fd\u4ee5\u51fd\u6570demo\u7684\u65b9\u5f0f*2\uff0c\u5e76\u4ee5\u53d8\u91cff\u63a5\u6536 for i in f : # \u5faa\u73af\u904d\u5386map\u5bf9\u8c61\uff0c\u5e76\u8f93\u51fa print ( i , end = \",\" ) print ( list ( map ( demo , l ))) # \u4f7f\u7528list\u65b9\u5f0f\u8f6c\u6362map\u5bf9\u8c61\uff0c\u4ee5\u5217\u8868\u65b9\u5f0f\u8f93\u51fa >>> 2 , 4 , 6 , 8 , 10 , 12 , [ 2 , 4 , 6 , 8 , 10 , 12 ] \u4ee5\u4e0a\u5b9e\u4f8b\u4f7f\u7528map\u51fd\u6570\uff0c\u628a\u5217\u8868\u4ee5demo\u51fd\u6570\u65b9\u5f0f\u8fd0\u884c\uff0c\u5e76\u63a5\u53d7\u5176\u7ed3\u679c\u3002 \u914d\u5408lambda\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5c06\u6b64\u4ee3\u7801\u8fdb\u4e00\u6b65\u7b80\u5199\uff1a print ( list ( map ( lambda x : x * 2 , list ( range ( 1 , 7 ))))) >>> [ 2 , 4 , 6 , 8 , 10 , 12 ] map\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u591a\u4e2a\u5e8f\u5217\u4f5c\u4e3a\u53c2\u6570\uff0c\u4ee5\u4e0b\u5b9e\u4f8b\u6f14\u793a\u5c06\u4e24\u4e2a\u5217\u8868\u7684\u503c\u76f8\u52a0\uff1a print ( list ( map ( lambda x , y : x + y ,[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]))) >>> [ 5 , 7 , 9 ] 03. filter\u51fd\u6570 filter\u662f\u4e00\u4e2a\u7b5b\u9009\u5668\uff0c\u4e3b\u8981\u4f5c\u7528\u662f\u4ee5\u4f20\u5165\u7684\u51fd\u6570\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u7b5b\u9009\u64cd\u4f5c filter ( function , iterable ) function \uff1a\u8868\u793a\u4f20\u5165\u4e00\u4e2a\u51fd\u6570 iterable : \u8868\u793a\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 filter() \u51fd\u6570\u7684\u529f\u80fd\u662f\u5bf9 iterable \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u90fd\u4f7f\u7528 function \u51fd\u6570\u5224\u65ad\uff0c\u5e76\u8fd4\u56de True \u6216\u8005 False\uff0c\u6700\u540e\u5c06\u8fd4\u56de True \u7684\u5143\u7d20\u7ec4\u6210\u4e00\u4e2a\u65b0\u7684\u53ef\u904d\u5386\u7684\u96c6\u5408\u3002 \u6f14\u793a\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\u5185\u6240\u6709\u7684\u5076\u6570 print ( list ( filter ( lambda x : x % 2 == 0 ,[ 1 , 2 , 3 , 4 , 5 , 6 ]))) >>> [ 2 , 4 , 6 ] 04. reduce\u51fd\u6570 reduce\u51fd\u6570 \u4ee5\u524d\u662fpython\u7684\u5185\u7f6e\u51fd\u6570\uff0c\u4f46\u73b0\u5728\u88ab\u79fb\u5230 functools \u6a21\u5757\u513f\u5185\u3002\u6240\u4ee5\u4f7f\u7528 reduce \u4e4b\u524d\u9700\u8981\u5148\u5bfc\u5165 from functools import reduce reduce \u8bed\u6cd5 reduce function , sequence function\uff1a\u5fc5\u987b\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570 sequence\uff1a\u5e8f\u5217 from functools import reduce print ( reduce ( lambda x , y : x * y , [ 1 , 2 , 3 , 4 , 5 ])) >>> 120 \u53c2\u6570\u4f20\u9012\u89c4\u5219\uff1a \u7b2c\u4e00\u6b21\u4f20\u503c \uff1a x = 1 , y = 2 \u7b2c\u4e8c\u6b21 \uff1a x\u7684\u503c\u4e3a\u7b2c\u4e00\u6b21\u8fd0\u7b97\u540e\u7684\u503c \uff0c \u5373x = 1 * 2 \uff0c x = 2 , y\u4f20\u5165\u4e0b\u4e00\u4e2a\u503c \uff0c \u5373y = 3 \u7b2c\u4e09\u6b21 \uff1a x = 2 * 3 y = 4 \u7b2c\u56db\u6b21 \uff1a x = 6 * 4 y = 5 \u7b2c\u4e94\u6b21 \uff1a x = 24 * 5 , \u5373x = 120 \uff0c \u540e\u7eed\u65e0\u503c \uff0c \u8fd0\u884c\u7ed3\u675f 05. zip\u51fd\u6570 zip() \u51fd\u6570\u7528\u4e8e\u5c06\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5c06\u5bf9\u8c61\u4e2d\u5bf9\u5e94\u7684\u5143\u7d20\u6253\u5305\u6210\u4e00\u4e2a\u4e2a\u5143\u7ec4\uff0c\u7136\u540e\u8fd4\u56de\u7531\u8fd9\u4e9b\u5143\u7ec4\u7ec4\u6210\u7684\u5217\u8868\u3002 \u5982\u679c\u5404\u4e2a\u8fed\u4ee3\u5668\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u4e00\u81f4\uff0c\u5219\u8fd4\u56de\u5217\u8868\u957f\u5ea6\u4e0e\u6700\u77ed\u7684\u5bf9\u8c61\u76f8\u540c\uff0c\u5229\u7528 * \u53f7\u64cd\u4f5c\u7b26\uff0c\u53ef\u4ee5\u5c06\u5143\u7ec4\u89e3\u538b\u4e3a\u5217\u8868\u3002 5.1 \u8bed\u6cd5 zip ( iterable , ... ) \u5176\u4e2d iterable,... \u8868\u793a\u591a\u4e2a\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u5178\u3001\u96c6\u5408\u3001\u5b57\u7b26\u4e32\uff0c\u751a\u81f3\u8fd8\u53ef\u4ee5\u4e3a range() \u533a\u95f4\u3002 5.2 \u5b9e\u4f8b a = [ 1 , 2 , 3 ] b = ( 4 , 5 , 6 ) c = { 4 , 5 , 6 , 7 , 8 } abzip = zip ( a , b ) # \u6253\u5305\u4e3a\u5143\u7ec4\u7684ab print ( list ( abzip )) # \u8f6c\u6362\u4e3a\u5217\u8868\u540e\u6253\u5370 bczip = zip ( b , c ) print ( list ( bczip )) # \u5143\u7d20\u4e2a\u6570\u4e8e\u6700\u77ed\u7684\u5217\u8868\u4e00\u81f4 print ( list ( zip ( * bczip ))) # \u4f7f\u7528zip\uff08*\u538b\u7f29\u5305\uff09\u53ef\u4ee5\u89e3\u538b\uff0c\u4ee5\u5217\u8868\u7684\u4e8c\u7ef4\u5f62\u5f0f\u6253\u5370\u3002 >>> [( 1 , 4 ), ( 2 , 5 ), ( 3 , 6 )] [( 4 , 4 ), ( 5 , 5 ), ( 6 , 6 )] [( 4 , 5 , 6 ), ( 4 , 5 , 6 )] 5.3 \u8fd4\u56de\u503c\u4e0e\u6253\u5370 zip() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5982\u679c\u9700\u8981\u5c55\u793a\u5217\u8868\uff0c\u9700\u8981\u4f7f\u7528 list() \u5c06\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5217\u8868 06. reversed\u51fd\u6570 reserved() \u662f Pyton \u5185\u7f6e\u51fd\u6570\u4e4b\u4e00\uff0c\u5176\u529f\u80fd\u662f\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5e8f\u5217\uff08\u5305\u62ec\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u7b26\u4e32\u4ee5\u53ca range(n) \u533a\u95f4\uff09\uff0c\u8be5\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u9006\u5e8f\u5e8f\u5217\u7684\u8fed\u4ee3\u5668\uff08\u7528\u4e8e\u904d\u5386\u8be5\u9006\u5e8f\u5e8f\u5217\uff09\u3002 #\u5c06\u5217\u8868\u8fdb\u884c\u9006\u5e8f print ([ x for x in reversed ([ 1 , 2 , 3 , 4 , 5 ])]) #\u5c06\u5143\u7ec4\u8fdb\u884c\u9006\u5e8f print ([ x for x in reversed (( 1 , 2 , 3 , 4 , 5 ))]) #\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u9006\u5e8f print ([ x for x in reversed ( \"abcdefg\" )]) #\u5c06 range() \u751f\u6210\u7684\u533a\u95f4\u5217\u8868\u8fdb\u884c\u9006\u5e8f print ([ x for x in reversed ( range ( 10 ))]) \u4ee5\u4e0a\u793a\u4f8b\u7684\u8f93\u51fa\u4e3a\uff1a [ 5 , 4 , 3 , 2 , 1 ] [ 5 , 4 , 3 , 2 , 1 ] [ 'g' , 'f' , 'e' , 'd' , 'c' , 'b' , 'a' ] [ 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 , 0 ] \u9664\u4e86\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u65b9\u5f0f\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 list() \u51fd\u6570\uff0c\u5c06 reversed() \u51fd\u6570\u9006\u5e8f\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\uff0c\u76f4\u63a5\u8f6c\u6362\u6210\u5217\u8868\u3002\u4f8b\u5982\uff1a #\u5c06\u5217\u8868\u8fdb\u884c\u9006\u5e8f print ( list ( reversed ([ 1 , 2 , 3 , 4 , 5 ]))) >>> [ 5 , 4 , 3 , 2 , 1 ] \u518d\u6b21\u5f3a\u8c03\uff0c\u4f7f\u7528 reversed() \u51fd\u6570\u8fdb\u884c\u9006\u5e8f\u64cd\u4f5c\uff0c\u5e76\u4e0d\u4f1a\u4fee\u6539\u539f\u6765\u5e8f\u5217\u4e2d\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u4f8b\u5982\uff1a a = [ 1 , 2 , 3 , 4 , 5 ] #\u5c06\u5217\u8868\u8fdb\u884c\u9006\u5e8f print ( list ( reversed ( a ))) print ( \"a=\" , a ) >>> [ 5 , 4 , 3 , 2 , 1 ] a = [ 1 , 2 , 3 , 4 , 5 ] 07. sorted\u51fd\u6570 sorted() \u4f5c\u4e3aPython \u5185\u7f6e\u51fd\u6570\u4e4b\u4e00\uff0c\u5176\u529f\u80fd\u662f\u5bf9\u5e8f\u5217\uff08\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u5178\u3001\u96c6\u5408\u3001\u8fd8\u5305\u62ec\u5b57\u7b26\u4e32\uff09\u8fdb\u884c\u6392\u5e8f\u3002 list = sorted ( iterable , key = None , reverse = False ) iterable: \u8868\u793a\u6307\u5b9a\u7684\u5e8f\u5217 key\uff1a\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 reverse: \u9ed8\u8ba4\u4e3a\u5347\u5e8f\uff08False)\uff0c\u53ef\u4ee5\u6307\u5b9areverse\u7684\u503c\u4e3aTrue\uff0c\u5c06\u5e8f\u5217\u964d\u5e8f\u6392\u5217 \ud83d\udca1 key \u548creverse\u7684\u53c2\u6570\u662f\u53ef\u9009\u53c2\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u5ffd\u7565 #\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f a = [ 5 , 3 , 4 , 2 , 1 ] print ( sorted ( a )) #\u5bf9\u5143\u7ec4\u8fdb\u884c\u6392\u5e8f a = ( 5 , 4 , 3 , 1 , 2 ) print ( sorted ( a )) #\u5b57\u5178\u9ed8\u8ba4\u6309\u7167key\u8fdb\u884c\u6392\u5e8f a = { 4 : 1 , \\ 5 : 2 , \\ 3 : 3 , \\ 2 : 6 , \\ 1 : 8 } print ( sorted ( a . items ())) #\u5bf9\u96c6\u5408\u8fdb\u884c\u6392\u5e8f a = { 1 , 5 , 3 , 2 , 4 } print ( sorted ( a )) #\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u6392\u5e8f a = \"51423\" print ( sorted ( a )) \u4ee5\u4e0a\u7a0b\u5e8f\u6267\u884c\u7ed3\u679c\u4e3a\uff1a [ 1 , 2 , 3 , 4 , 5 ] [ 1 , 2 , 3 , 4 , 5 ] [( 1 , 8 ), ( 2 , 6 ), ( 3 , 3 ), ( 4 , 1 ), ( 5 , 2 )] [ 1 , 2 , 3 , 4 , 5 ] [ '1' , '2' , '3' , '4' , '5' ] \u5bf9\u539f\u6709\u5e8f\u5217\u7684\u5f71\u54cd \u4f7f\u7528 sorted() \u51fd\u6570\u5bf9\u5e8f\u5217\u8fdb\u884c\u6392\u5e8f\uff0c \u5e76\u4e0d\u4f1a\u5728\u539f\u5e8f\u5217\u7684\u57fa\u7840\u8fdb\u884c\u4fee\u6539\uff0c\u800c\u662f\u4f1a\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u6392\u597d\u5e8f\u7684\u5217\u8868\u3002\u4f8b\u5982\uff1a #\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f a = [ 5 , 3 , 4 , 2 , 1 ] print ( sorted ( a )) #\u518d\u6b21\u8f93\u51fa\u539f\u6765\u7684\u5217\u8868 a print ( a ) >>> [ 1 , 2 , 3 , 4 , 5 ] [ 5 , 3 , 4 , 2 , 1 ] reverse\u53c2\u6570 sorted(\uff09 \u51fd\u6570\u9ed8\u8ba4\u5bf9\u5e8f\u5217\u4e2d\u5143\u7d20\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u901a\u8fc7\u624b\u52a8\u5c06\u5176 reverse \u53c2\u6570\u503c\u6539\u4e3a True\uff0c\u53ef\u5b9e\u73b0\u964d\u5e8f\u6392\u5e8f\u3002\u4f8b\u5982\uff1a","title":"\u5185\u7f6e\u51fd\u6570"},{"location":"programming/python/built-in-func/#_1","text":"","title":"\u5e38\u7528\u5185\u7f6e\u51fd\u6570"},{"location":"programming/python/built-in-func/#01-evalexec","text":"","title":"01. eval\u548cexec\u51fd\u6570"},{"location":"programming/python/built-in-func/#11","text":"eval() \u548c exec() \u51fd\u6570\u7684\u529f\u80fd\u662f\u76f8\u4f3c\u7684\uff0c\u90fd\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684 Python \u4ee3\u7801\uff08\u4ee3\u7801\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u63d0\u4f9b\uff09\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a Python \u7684\u89e3\u91ca\u5668\u3002\u4e8c\u8005\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0ceval() \u6267\u884c\u5b8c\u8981\u8fd4\u56de\u7ed3\u679c\uff0c\u800c exec() \u6267\u884c\u5b8c\u4e0d\u8fd4\u56de\u7ed3\u679c\u3002 \u4e24\u4e2a\u51fd\u6570\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a eval(expression[, globals[, locals]]) expression -- \u8868\u8fbe\u5f0f\u3002 globals -- \u53d8\u91cf\u4f5c\u7528\u57df\uff0c\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u5982\u679c\u88ab\u63d0\u4f9b\uff0c\u5219\u5fc5\u987b\u662f\u4e00\u4e2a\u5b57\u5178\u5bf9\u8c61\u3002 locals -- \u53d8\u91cf\u4f5c\u7528\u57df\uff0c\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u5982\u679c\u88ab\u63d0\u4f9b\uff0c\u53ef\u4ee5\u662f\u4efb\u4f55\u6620\u5c04\u5bf9\u8c61\u3002\u5f53\u5b83\u548c globals \u4e2d\u6709\u91cd\u590d\u6216\u51b2\u7a81\u65f6\uff0c\u4ee5 locals \u7684\u4e3a\u51c6\u3002\u5982\u679c locals \u6ca1\u6709\u88ab\u63d0\u4f9b\uff0c\u5219\u9ed8\u8ba4\u4e3a globals\u3002","title":"1.1. \u51fd\u6570\u7684\u8bed\u6cd5\u548c\u5b9a\u4e49"},{"location":"programming/python/built-in-func/#12","text":"dic = {} #\u5b9a\u4e49\u4e00\u4e2a\u5b57\u5178 dic [ 'b' ] = 3 #\u5728 dic \u4e2d\u52a0\u4e00\u6761\u5143\u7d20\uff0ckey \u4e3a b print ( dic . keys ()) #\u5148\u5c06 dic \u7684 key \u6253\u5370\u51fa\u6765\uff0c\u6709\u4e00\u4e2a\u5143\u7d20 b exec ( \"a = 4\" , dic ) #\u5728 exec \u6267\u884c\u7684\u8bed\u53e5\u540e\u9762\u8ddf\u4e00\u4e2a\u4f5c\u7528\u57df dic print ( dic . keys ()) #exec \u540e\uff0cdic \u7684 key \u591a\u4e86\u4e00\u4e2a >>> dict_keys ([ 'b' ]) dict_keys ([ 'b' , '__builtins__' , 'a' ]) \u4e0a\u9762\u7684\u5b9e\u4f8b\uff0c\u901a\u8fc7 exec() \u51fd\u6570\u5c06 a=4 \u6dfb\u52a0\u5230\u5b57\u5178\u5185\uff0c\u4f5c\u7528\u57df\u662f dic \u8fd9\u4e2a\u5b57\u5178 a = 10 b = 20 c = 30 g = { 'a' : 6 , 'b' : 8 } #\u5b9a\u4e49\u4e00\u4e2a\u5b57\u5178 t = { 'b' : 100 , 'c' : 10 } #\u5b9a\u4e49\u4e00\u4e2a\u5b57\u5178 print ( eval ( 'a+b+c' , g , t )) #\u5b9a\u4e49\u4e00\u4e2a\u5b57\u5178 116 >>> 116 \u4e0a\u9762\u5b9e\u4f8b\u6f14\u793a\u4e86\u53c2\u6570 locals \u7684\u4f5c\u7528\uff0c\u5f53 locals \u548c globals \u91cd\u590d\u6216\u51b2\u7a81\u65f6\uff0c\u4ee5 locals \u4e3a\u51c6\u3002","title":"1.2 \u57fa\u672c\u5e94\u7528"},{"location":"programming/python/built-in-func/#12-evalexec","text":"a = 1 exec ( \"a = 2\" ) #\u76f8\u5f53\u4e8e\u76f4\u63a5\u6267\u884c a=2 print ( a ) a = exec ( \"2+3\" ) #\u76f8\u5f53\u4e8e\u76f4\u63a5\u6267\u884c 2+3\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8fd4\u56de\u503c\uff0ca \u5e94\u4e3a None print ( a ) a = eval ( '2+3' ) #\u6267\u884c 2+3\uff0c\u5e76\u628a\u7ed3\u679c\u8fd4\u56de\u7ed9 a print ( a ) >>> 2 None 5 \u901a\u8fc7\u4e0a\u9762\u5b9e\u4f8b\uff0ceval() \u6267\u884c\u5b8c\u4f1a\u8fd4\u56de\u7ed3\u679c\uff0c\u800c exec() \u6267\u884c\u5b8c\u4e0d\u8fd4\u56de\u7ed3\u679c\u3002 exec() \u4e2d\u6700\u9002\u5408\u653e\u7f6e\u8fd0\u884c\u540e\u6ca1\u6709\u7ed3\u679c\u7684\u8bed\u53e5\uff0c\u800c eval() \u4e2d\u9002\u5408\u653e\u7f6e\u6709\u7ed3\u679c\u8fd4\u56de\u7684\u8bed\u53e5\u3002 \u5982\u679c eval() \u91cc\u653e\u7f6e\u4e00\u4e2a\u6ca1\u6709\u7ed3\u679c\u8fd4\u56de\u7684\u8bed\u53e5,\u89e3\u91ca\u5668\u4f1a\u62a5\u9519\u3002","title":"1.2 eval\u548cexec\u7684\u533a\u522b\uff1a"},{"location":"programming/python/built-in-func/#02-map","text":"","title":"02. map\u51fd\u6570"},{"location":"programming/python/built-in-func/#21","text":"map ( function , iterable ) \u5176\u4e2d\uff0cfunction \u53c2\u6570\u8868\u793a\u8981\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u53ef\u4ee5\u662f\u5185\u7f6e\u51fd\u6570\u3001\u81ea\u5b9a\u4e49\u51fd\u6570\u6216\u8005 lambda \u533f\u540d\u51fd\u6570\uff1biterable \u8868\u793a\u4e00\u4e2a\u6216\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u53ef\u4ee5\u662f\u5217\u8868\u3001\u5b57\u7b26\u4e32\u7b49\u3002 map() \u51fd\u6570\u7684\u529f\u80fd\u662f\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u90fd\u8c03\u7528\u6307\u5b9a\u7684\u51fd\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a map \u5bf9\u8c61\u3002 \u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2a map \u5bf9\u8c61\uff0c\u4e0d\u80fd\u76f4\u63a5\u8f93\u51fa\uff0c\u53ef\u4ee5\u901a\u8fc7 for \u5faa\u73af\u6216\u8005 list() \u51fd\u6570\u6765\u663e\u793a\u3002","title":"2.1 \u8bed\u6cd5\u548c\u8fd4\u56de"},{"location":"programming/python/built-in-func/#22-map","text":"\u5982\u679c\u9700\u6c42\u662f\u5c06\u4e00\u4e2a\u5217\u8868\u7684\u5185\u5143\u7d20\u90fd*2\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\uff1a l = list ( range ( 1 , 7 )) # \u5b9a\u4e49\u4e00\u4e2a\u5217\u8868 def demo ( x ): # \u5b9a\u4e49*2\u7684\u51fd\u6570 return x * 2 f = map ( demo , l ) # \u4f7f\u7528map\u51fd\u6570\u5c06\u5217\u8868\u5185\u7684\u6bcf\u4e2a\u503c\u90fd\u4ee5\u51fd\u6570demo\u7684\u65b9\u5f0f*2\uff0c\u5e76\u4ee5\u53d8\u91cff\u63a5\u6536 for i in f : # \u5faa\u73af\u904d\u5386map\u5bf9\u8c61\uff0c\u5e76\u8f93\u51fa print ( i , end = \",\" ) print ( list ( map ( demo , l ))) # \u4f7f\u7528list\u65b9\u5f0f\u8f6c\u6362map\u5bf9\u8c61\uff0c\u4ee5\u5217\u8868\u65b9\u5f0f\u8f93\u51fa >>> 2 , 4 , 6 , 8 , 10 , 12 , [ 2 , 4 , 6 , 8 , 10 , 12 ] \u4ee5\u4e0a\u5b9e\u4f8b\u4f7f\u7528map\u51fd\u6570\uff0c\u628a\u5217\u8868\u4ee5demo\u51fd\u6570\u65b9\u5f0f\u8fd0\u884c\uff0c\u5e76\u63a5\u53d7\u5176\u7ed3\u679c\u3002 \u914d\u5408lambda\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5c06\u6b64\u4ee3\u7801\u8fdb\u4e00\u6b65\u7b80\u5199\uff1a print ( list ( map ( lambda x : x * 2 , list ( range ( 1 , 7 ))))) >>> [ 2 , 4 , 6 , 8 , 10 , 12 ] map\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u591a\u4e2a\u5e8f\u5217\u4f5c\u4e3a\u53c2\u6570\uff0c\u4ee5\u4e0b\u5b9e\u4f8b\u6f14\u793a\u5c06\u4e24\u4e2a\u5217\u8868\u7684\u503c\u76f8\u52a0\uff1a print ( list ( map ( lambda x , y : x + y ,[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]))) >>> [ 5 , 7 , 9 ]","title":"2.2 map\u51fd\u6570\u7684\u4f7f\u7528"},{"location":"programming/python/built-in-func/#03-filter","text":"filter\u662f\u4e00\u4e2a\u7b5b\u9009\u5668\uff0c\u4e3b\u8981\u4f5c\u7528\u662f\u4ee5\u4f20\u5165\u7684\u51fd\u6570\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u7b5b\u9009\u64cd\u4f5c filter ( function , iterable ) function \uff1a\u8868\u793a\u4f20\u5165\u4e00\u4e2a\u51fd\u6570 iterable : \u8868\u793a\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 filter() \u51fd\u6570\u7684\u529f\u80fd\u662f\u5bf9 iterable \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u90fd\u4f7f\u7528 function \u51fd\u6570\u5224\u65ad\uff0c\u5e76\u8fd4\u56de True \u6216\u8005 False\uff0c\u6700\u540e\u5c06\u8fd4\u56de True \u7684\u5143\u7d20\u7ec4\u6210\u4e00\u4e2a\u65b0\u7684\u53ef\u904d\u5386\u7684\u96c6\u5408\u3002 \u6f14\u793a\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\u5185\u6240\u6709\u7684\u5076\u6570 print ( list ( filter ( lambda x : x % 2 == 0 ,[ 1 , 2 , 3 , 4 , 5 , 6 ]))) >>> [ 2 , 4 , 6 ]","title":"03. filter\u51fd\u6570"},{"location":"programming/python/built-in-func/#04-reduce","text":"reduce\u51fd\u6570 \u4ee5\u524d\u662fpython\u7684\u5185\u7f6e\u51fd\u6570\uff0c\u4f46\u73b0\u5728\u88ab\u79fb\u5230 functools \u6a21\u5757\u513f\u5185\u3002\u6240\u4ee5\u4f7f\u7528 reduce \u4e4b\u524d\u9700\u8981\u5148\u5bfc\u5165 from functools import reduce reduce \u8bed\u6cd5 reduce function , sequence function\uff1a\u5fc5\u987b\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570 sequence\uff1a\u5e8f\u5217 from functools import reduce print ( reduce ( lambda x , y : x * y , [ 1 , 2 , 3 , 4 , 5 ])) >>> 120 \u53c2\u6570\u4f20\u9012\u89c4\u5219\uff1a \u7b2c\u4e00\u6b21\u4f20\u503c \uff1a x = 1 , y = 2 \u7b2c\u4e8c\u6b21 \uff1a x\u7684\u503c\u4e3a\u7b2c\u4e00\u6b21\u8fd0\u7b97\u540e\u7684\u503c \uff0c \u5373x = 1 * 2 \uff0c x = 2 , y\u4f20\u5165\u4e0b\u4e00\u4e2a\u503c \uff0c \u5373y = 3 \u7b2c\u4e09\u6b21 \uff1a x = 2 * 3 y = 4 \u7b2c\u56db\u6b21 \uff1a x = 6 * 4 y = 5 \u7b2c\u4e94\u6b21 \uff1a x = 24 * 5 , \u5373x = 120 \uff0c \u540e\u7eed\u65e0\u503c \uff0c \u8fd0\u884c\u7ed3\u675f","title":"04. reduce\u51fd\u6570"},{"location":"programming/python/built-in-func/#05-zip","text":"zip() \u51fd\u6570\u7528\u4e8e\u5c06\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5c06\u5bf9\u8c61\u4e2d\u5bf9\u5e94\u7684\u5143\u7d20\u6253\u5305\u6210\u4e00\u4e2a\u4e2a\u5143\u7ec4\uff0c\u7136\u540e\u8fd4\u56de\u7531\u8fd9\u4e9b\u5143\u7ec4\u7ec4\u6210\u7684\u5217\u8868\u3002 \u5982\u679c\u5404\u4e2a\u8fed\u4ee3\u5668\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u4e00\u81f4\uff0c\u5219\u8fd4\u56de\u5217\u8868\u957f\u5ea6\u4e0e\u6700\u77ed\u7684\u5bf9\u8c61\u76f8\u540c\uff0c\u5229\u7528 * \u53f7\u64cd\u4f5c\u7b26\uff0c\u53ef\u4ee5\u5c06\u5143\u7ec4\u89e3\u538b\u4e3a\u5217\u8868\u3002","title":"05. zip\u51fd\u6570"},{"location":"programming/python/built-in-func/#51","text":"zip ( iterable , ... ) \u5176\u4e2d iterable,... \u8868\u793a\u591a\u4e2a\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u5178\u3001\u96c6\u5408\u3001\u5b57\u7b26\u4e32\uff0c\u751a\u81f3\u8fd8\u53ef\u4ee5\u4e3a range() \u533a\u95f4\u3002","title":"5.1 \u8bed\u6cd5"},{"location":"programming/python/built-in-func/#52","text":"a = [ 1 , 2 , 3 ] b = ( 4 , 5 , 6 ) c = { 4 , 5 , 6 , 7 , 8 } abzip = zip ( a , b ) # \u6253\u5305\u4e3a\u5143\u7ec4\u7684ab print ( list ( abzip )) # \u8f6c\u6362\u4e3a\u5217\u8868\u540e\u6253\u5370 bczip = zip ( b , c ) print ( list ( bczip )) # \u5143\u7d20\u4e2a\u6570\u4e8e\u6700\u77ed\u7684\u5217\u8868\u4e00\u81f4 print ( list ( zip ( * bczip ))) # \u4f7f\u7528zip\uff08*\u538b\u7f29\u5305\uff09\u53ef\u4ee5\u89e3\u538b\uff0c\u4ee5\u5217\u8868\u7684\u4e8c\u7ef4\u5f62\u5f0f\u6253\u5370\u3002 >>> [( 1 , 4 ), ( 2 , 5 ), ( 3 , 6 )] [( 4 , 4 ), ( 5 , 5 ), ( 6 , 6 )] [( 4 , 5 , 6 ), ( 4 , 5 , 6 )]","title":"5.2 \u5b9e\u4f8b"},{"location":"programming/python/built-in-func/#53","text":"zip() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5982\u679c\u9700\u8981\u5c55\u793a\u5217\u8868\uff0c\u9700\u8981\u4f7f\u7528 list() \u5c06\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5217\u8868","title":"5.3 \u8fd4\u56de\u503c\u4e0e\u6253\u5370"},{"location":"programming/python/built-in-func/#06-reversed","text":"reserved() \u662f Pyton \u5185\u7f6e\u51fd\u6570\u4e4b\u4e00\uff0c\u5176\u529f\u80fd\u662f\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5e8f\u5217\uff08\u5305\u62ec\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u7b26\u4e32\u4ee5\u53ca range(n) \u533a\u95f4\uff09\uff0c\u8be5\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u9006\u5e8f\u5e8f\u5217\u7684\u8fed\u4ee3\u5668\uff08\u7528\u4e8e\u904d\u5386\u8be5\u9006\u5e8f\u5e8f\u5217\uff09\u3002 #\u5c06\u5217\u8868\u8fdb\u884c\u9006\u5e8f print ([ x for x in reversed ([ 1 , 2 , 3 , 4 , 5 ])]) #\u5c06\u5143\u7ec4\u8fdb\u884c\u9006\u5e8f print ([ x for x in reversed (( 1 , 2 , 3 , 4 , 5 ))]) #\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u9006\u5e8f print ([ x for x in reversed ( \"abcdefg\" )]) #\u5c06 range() \u751f\u6210\u7684\u533a\u95f4\u5217\u8868\u8fdb\u884c\u9006\u5e8f print ([ x for x in reversed ( range ( 10 ))]) \u4ee5\u4e0a\u793a\u4f8b\u7684\u8f93\u51fa\u4e3a\uff1a [ 5 , 4 , 3 , 2 , 1 ] [ 5 , 4 , 3 , 2 , 1 ] [ 'g' , 'f' , 'e' , 'd' , 'c' , 'b' , 'a' ] [ 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 , 0 ] \u9664\u4e86\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u65b9\u5f0f\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 list() \u51fd\u6570\uff0c\u5c06 reversed() \u51fd\u6570\u9006\u5e8f\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\uff0c\u76f4\u63a5\u8f6c\u6362\u6210\u5217\u8868\u3002\u4f8b\u5982\uff1a #\u5c06\u5217\u8868\u8fdb\u884c\u9006\u5e8f print ( list ( reversed ([ 1 , 2 , 3 , 4 , 5 ]))) >>> [ 5 , 4 , 3 , 2 , 1 ] \u518d\u6b21\u5f3a\u8c03\uff0c\u4f7f\u7528 reversed() \u51fd\u6570\u8fdb\u884c\u9006\u5e8f\u64cd\u4f5c\uff0c\u5e76\u4e0d\u4f1a\u4fee\u6539\u539f\u6765\u5e8f\u5217\u4e2d\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u4f8b\u5982\uff1a a = [ 1 , 2 , 3 , 4 , 5 ] #\u5c06\u5217\u8868\u8fdb\u884c\u9006\u5e8f print ( list ( reversed ( a ))) print ( \"a=\" , a ) >>> [ 5 , 4 , 3 , 2 , 1 ] a = [ 1 , 2 , 3 , 4 , 5 ]","title":"06. reversed\u51fd\u6570"},{"location":"programming/python/built-in-func/#07-sorted","text":"sorted() \u4f5c\u4e3aPython \u5185\u7f6e\u51fd\u6570\u4e4b\u4e00\uff0c\u5176\u529f\u80fd\u662f\u5bf9\u5e8f\u5217\uff08\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u5178\u3001\u96c6\u5408\u3001\u8fd8\u5305\u62ec\u5b57\u7b26\u4e32\uff09\u8fdb\u884c\u6392\u5e8f\u3002 list = sorted ( iterable , key = None , reverse = False ) iterable: \u8868\u793a\u6307\u5b9a\u7684\u5e8f\u5217 key\uff1a\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 reverse: \u9ed8\u8ba4\u4e3a\u5347\u5e8f\uff08False)\uff0c\u53ef\u4ee5\u6307\u5b9areverse\u7684\u503c\u4e3aTrue\uff0c\u5c06\u5e8f\u5217\u964d\u5e8f\u6392\u5217 \ud83d\udca1 key \u548creverse\u7684\u53c2\u6570\u662f\u53ef\u9009\u53c2\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u5ffd\u7565 #\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f a = [ 5 , 3 , 4 , 2 , 1 ] print ( sorted ( a )) #\u5bf9\u5143\u7ec4\u8fdb\u884c\u6392\u5e8f a = ( 5 , 4 , 3 , 1 , 2 ) print ( sorted ( a )) #\u5b57\u5178\u9ed8\u8ba4\u6309\u7167key\u8fdb\u884c\u6392\u5e8f a = { 4 : 1 , \\ 5 : 2 , \\ 3 : 3 , \\ 2 : 6 , \\ 1 : 8 } print ( sorted ( a . items ())) #\u5bf9\u96c6\u5408\u8fdb\u884c\u6392\u5e8f a = { 1 , 5 , 3 , 2 , 4 } print ( sorted ( a )) #\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u6392\u5e8f a = \"51423\" print ( sorted ( a )) \u4ee5\u4e0a\u7a0b\u5e8f\u6267\u884c\u7ed3\u679c\u4e3a\uff1a [ 1 , 2 , 3 , 4 , 5 ] [ 1 , 2 , 3 , 4 , 5 ] [( 1 , 8 ), ( 2 , 6 ), ( 3 , 3 ), ( 4 , 1 ), ( 5 , 2 )] [ 1 , 2 , 3 , 4 , 5 ] [ '1' , '2' , '3' , '4' , '5' ]","title":"07. sorted\u51fd\u6570"},{"location":"programming/python/built-in-func/#_2","text":"\u4f7f\u7528 sorted() \u51fd\u6570\u5bf9\u5e8f\u5217\u8fdb\u884c\u6392\u5e8f\uff0c \u5e76\u4e0d\u4f1a\u5728\u539f\u5e8f\u5217\u7684\u57fa\u7840\u8fdb\u884c\u4fee\u6539\uff0c\u800c\u662f\u4f1a\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u6392\u597d\u5e8f\u7684\u5217\u8868\u3002\u4f8b\u5982\uff1a #\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f a = [ 5 , 3 , 4 , 2 , 1 ] print ( sorted ( a )) #\u518d\u6b21\u8f93\u51fa\u539f\u6765\u7684\u5217\u8868 a print ( a ) >>> [ 1 , 2 , 3 , 4 , 5 ] [ 5 , 3 , 4 , 2 , 1 ]","title":"\u5bf9\u539f\u6709\u5e8f\u5217\u7684\u5f71\u54cd"},{"location":"programming/python/built-in-func/#reverse","text":"sorted(\uff09 \u51fd\u6570\u9ed8\u8ba4\u5bf9\u5e8f\u5217\u4e2d\u5143\u7d20\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u901a\u8fc7\u624b\u52a8\u5c06\u5176 reverse \u53c2\u6570\u503c\u6539\u4e3a True\uff0c\u53ef\u5b9e\u73b0\u964d\u5e8f\u6392\u5e8f\u3002\u4f8b\u5982\uff1a","title":"reverse\u53c2\u6570"},{"location":"programming/python/class-attribute/","text":"\u65e0\u8bba\u662f\u7c7b\u5c5e\u6027\u8fd8\u662f\u7c7b\u65b9\u6cd5\uff0c\u90fd\u65e0\u6cd5\u50cf\u666e\u901a\u53d8\u91cf\u6216\u8005\u51fd\u6570\u90a3\u6837\uff0c\u5728\u7c7b\u7684\u5916\u90e8\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u7c7b\u770b\u505a\u4e00\u4e2a\u72ec\u7acb\u7684\u7a7a\u95f4\uff0c\u5219\u7c7b\u5c5e\u6027\u5176\u5b9e\u5c31\u662f\u5728\u7c7b\u4f53\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u7c7b\u65b9\u6cd5\u662f\u5728\u7c7b\u4f53\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u3002 \u5728\u7c7b\u4f53\u4e2d\uff0c\u6839\u636e\u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e\u4e0d\u540c\uff0c\u4ee5\u53ca\u5b9a\u4e49\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u7c7b\u5c5e\u6027\u53c8\u53ef\u7ec6\u5206\u4e3a\u4ee5\u4e0b 3 \u79cd\u7c7b\u578b\uff1a \u7c7b\u5c5e\u6027(\u7c7b\u53d8\u91cf)\uff1a\u7c7b\u4f53\u4e2d\uff0c\u6240\u6709\u51fd\u6570\u4e4b\u5916\uff0c\u5b9a\u4e49\u7684\u53d8\u91cf \u5b9e\u4f8b\u5c5e\u6027(\u5b9e\u4f8b\u53d8\u91cf)\uff1a\u7c7b\u4f53\u4e2d\uff0c\u6240\u6709\u51fd\u6570\u5185\u90e8\uff0c\u4ee5 self.\u53d8\u91cf\u540d \u7684\u65b9\u5f0f\u5b9a\u4e49\u7684\u53d8\u91cf \u5c40\u90e8\u53d8\u91cf\uff1a\u7c7b\u4f53\u4e2d\uff0c\u6240\u6709\u51fd\u6570\u5185\u90e8\uff0c\u4ee5 \u53d8\u91cf\u540d=\u53d8\u91cf\u503c \u7684\u65b9\u5f0f\u5b9a\u4e49\u7684\u53d8\u91cf\u3002 01. \u7c7b\u5c5e\u6027(\u7c7b\u53d8\u91cf) \u7c7b\u53d8\u91cf\u6307\u7684\u662f\u5728\u7c7b\u4e2d\uff0c\u4f46\u5728\u5404\u4e2a\u7c7b\u65b9\u6cd5\u5916\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1a class Demo : url = \"www.baidu.com\" title = \"\u767e\u5ea6\" def say_hello ( self , name ): print ( \"\u5927\u5bb6\u597d\uff0c\u6211\u53eb {} \" . format ( name )) \u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c url \u548c title \u5c31\u5c5e\u4e8e\u7c7b\u53d8\u91cf\u3002 \u7c7b\u53d8\u91cf\u7684\u7279\u70b9\u662f\uff0c\u6240\u4ee5\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u90fd\u540c\u65f6\u5171\u4eab\u7c7b\u53d8\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7c7b\u53d8\u91cf\u5728\u6240\u6709\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e2d\u662f\u4f5c\u4e3a\u516c\u7528\u8d44\u6e90\u5b58\u5728\u7684\u3002 \u7c7b\u65b9\u6cd5\u548c\u53d8\u91cf\u8c03\u7528\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a \u76f4\u63a5\u901a\u8fc7\u7c7b\u540d\u8c03\u7528 \u901a\u8fc7\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8c03\u7528 1.1 \u901a\u8fc7\u7c7b\u540d\u8c03\u7528\u7c7b\u53d8\u91cf # \u4f7f\u7528\u7c7b\u540d\u76f4\u63a5\u8c03\u7528 print ( Demo . url ) print ( Demo . title ) # \u4fee\u6539\u7c7b\u540d\u4e0d\u4ec5\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\uff0c\u8fd8\u53ef\u4ee5\u4fee\u6539\u53d8\u91cf\u7684\u503c Demo . url = \"www.qq.com\" Demo . title = \"\u817e\u8baf\" print ( Demo . url ) print ( Demo . title ) >>> www . baidu . com \u767e\u5ea6 www . qq . com \u817e\u8baf \u56e0\u4e3a\u7c7b\u53d8\u91cf\u4e3a\u6240\u6709\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5171\u6709\uff0c\u901a\u8fc7\u7c7b\u540d\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u503c\uff0c\u4f1a\u5f71\u54cd\u6240\u6709\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff1a print ( \"\u4fee\u6539\u524d\u7684\u7c7b\u53d8\u91cf\" ) test1 = Demo () print ( test1 . url ) print ( test1 . title ) test2 = Demo () print ( test2 . url ) print ( test2 . title ) print ( \"\u4fee\u6539\u540e\uff0c\u5404\u7c7b\u5bf9\u8c61\u4e2d\u7c7b\u53d8\u91cf\u7684\u503c\" ) Demo . url = \"www.qq.com\" Demo . title = \"\u817e\u8baf\" print ( test1 . url ) print ( test1 . title ) print ( test2 . url ) print ( test2 . title ) >>> \u4fee\u6539\u524d\u7684\u7c7b\u53d8\u91cf www . baidu . com \u767e\u5ea6 www . baidu . com \u767e\u5ea6 \u4fee\u6539\u540e \uff0c \u5404\u7c7b\u5bf9\u8c61\u4e2d\u7c7b\u53d8\u91cf\u7684\u503c www . qq . com \u817e\u8baf www . qq . com \u817e\u8baf 1.2 \u901a\u8fc7\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8c03\u7528\u7c7b\u53d8\u91cf test1 = Demo () print ( test1 . url ) print ( test1 . title ) >>> www . baidu . com \u767e\u5ea6 \u901a\u8fc7\u7c7b\u5bf9\u8c61\u662f\u65e0\u6cd5\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u3002\u901a\u8fc7\u7c7b\u5bf9\u8c61\u5bf9\u7c7b\u53d8\u91cf\u8d4b\u503c\uff0c\u5176\u672c\u8d28\u5c06\u4e0d\u518d\u662f\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u503c\uff0c\u800c\u662f\u5728\u7ed9\u8be5\u5bf9\u8c61\u5b9a\u4e49\u65b0\u7684\u5b9e\u4f8b\u53d8\u91cf \u4f46\u662f\uff0c\u53ef\u4ee5\u52a8\u6001\u7684\u4e3a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u6dfb\u52a0\u7c7b\u53d8\u91cf test1 = Demo () test1 . slogan = \"\u767e\u5ea6\u4e00\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053\" print ( test1 . slogan ) >>> \u767e\u5ea6\u4e00\u4e0b \uff0c \u4f60\u5c31\u77e5\u9053 02. \u5b9e\u4f8b\u53d8\u91cf(\u5b9e\u4f8b\u5c5e\u6027) \u5b9e\u4f8b\u53d8\u91cf\u6307\u7684\u662f\u5728\u4efb\u610f\u7c7b\u65b9\u6cd5\u5185\u90e8\uff0c\u4ee5\u201c self.\u53d8\u91cf\u540d \u201d\u7684\u65b9\u5f0f\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u5176\u7279\u70b9\u662f\u53ea\u4f5c\u7528\u4e8e\u8c03\u7528\u65b9\u6cd5\u7684\u5bf9\u8c61\u3002\u5b9e\u4f8b\u53d8\u91cf\u53ea\u80fd\u901a\u8fc7\u5bf9\u8c61\u540d\u8bbf\u95ee\uff0c\u4e0d\u80fd\u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee\u3002 class Demo : def __init__ ( self ): self . name = \"\u5c0f\u660e\" self . age = 18 def say ( self ): self . weight = 120 \u5728Demo\u7c7b\u4e2d\uff0c name \u3001 age \u3001 weight \u90fd\u662f\u5b9e\u4f8b\u53d8\u91cf\u3002\u7531\u4e8e __Init__ \u662f\u6784\u9020\u51fd\u6570\uff0c\u4f1a\u5728\u521b\u5efa\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u65f6\u81ea\u52a8\u8c03\u7528\uff0c\u800c say \u65b9\u6cd5\u9700\u8981\u624b\u52a8\u8c03\u7528\u3002\u56e0\u6b64 Demo \u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u90fd\u4f1a\u5305\u542b name \u548c age \u5b9e\u4f8b\u53d8\u91cf\uff0c\u800c\u53ea\u6709\u8c03\u7528\u4e86 say \u65b9\u6cd5\uff0c\u624d\u5305\u542b weight \u53d8\u91cf test1 = Demo () print ( test1 . name ) print ( test1 . age ) # \u7531\u4e8e\u672a\u8c03\u7528say\u65b9\u6cd5\uff0c \u6240\u4ee5\u4e0b\u9762\u7684\u8fd9\u53e5\u4f1a\u62a5\u9519 # print(test1.weight) test2 = Demo () test2 . say () print ( test2 . weight ) >>> \u5c0f\u660e 18 120 2.1 \u4f7f\u7528\u5b9e\u4f8b\u5316\u5bf9\u8c61\u65e0\u6cd5\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u539f\u56e0 \u4f7f\u7528\u7c7b\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u53d8\u91cf\uff0c\u4f46\u65e0\u6cd5\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u503c\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u901a\u8fc7\u7c7b\u5bf9\u8c61\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u503c\uff0c\u4e0d\u662f\u5728\u7ed9\u7c7b\u53d8\u91cf\u8d4b\u503c\uff0c\u672c\u8d28\u4e0a\u662f\u518d\u5b9a\u4e49\u65b0\u7684\u5b9e\u4f8b\u53d8\u91cf\u3002 test1 = Demo () # \u7c7b\u5bf9\u8c61\u8bbf\u95ee\u7c7b\u53d8\u91cf print ( test1 . url ) # \u7c7b\u5bf9\u8c61\u7684\u65b9\u5f0f\u5c1d\u8bd5\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u503c test1 . url = \"www.qq.com\" # \u518d\u6b21\u8bbf\u95ee\uff0c\u67e5\u770b\u4fee\u6539\u540e\u7684\u7ed3\u679c print ( test1 . url ) # \u67e5\u770b\u7c7b\u53d8\u91cf\u7684\u503c print ( Demo . url ) >>> www . baidu . com www . qq . com www . baidu . com \u4ee5\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u901a\u8fc7\u7c7b\u5bf9\u8c61\u662f\u65e0\u6cd5\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u503c\u7684\uff0c\u672c\u8d28\u662f\u5728\u7ed9\u7c7b\u53d8\u91cf test1 \u5b9a\u4e49\u65b0\u7684\u5b9e\u4f8b\u53d8\u91cf\u3002 \u5728\u7c7b\u4e2d\uff0c\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf\u53ef\u4ee5\u540c\u540d\uff0c\u4f46\u662f\u5728\u4f7f\u7528\u7c7b\u5bf9\u8c61\u7684\u65b9\u5f0f\u8c03\u7528\u540c\u4e00\u4e2a\u53d8\u91cf\u540d\u65f6\uff0cpython\u4f1a\u4f18\u5148\u9009\u62e9\u5b9e\u4f8b\u53d8\u91cf\uff0c\u6240\u4ee5\u5728\u4ee3\u7801\u7f16\u5199\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\u7c7b\u5bf9\u8c61\u7684\u65b9\u5f0f\u8c03\u7528\u7c7b\u53d8\u91cf\u3002 2.2 \u7c7b\u5bf9\u8c61\u65b9\u5f0f\u4fee\u6539\u5b9e\u4f8b\u53d8\u91cf\u7684\u503c \u548c\u7c7b\u5bf9\u8c61\u4e0d\u540c\uff0c\u901a\u8fc7\u67d0\u4e2a\u5bf9\u8c61\u4fee\u6539\u5b9e\u4f8b\u53d8\u91cf\u7684\u503c\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u66f4\u4e0d\u4f1a\u5f71\u54cd\u540c\u540d\u7684\u7c7b\u53d8\u91cf\uff1a class Demo : name = \"\u6770\u68ee\u65af\u5766\u68ee\" # \u7c7b\u53d8\u91cf weight = 180 # \u7c7b\u53d8\u91cf def __init__ ( self ): self . name = \"xiaomei\" # \u5b9e\u4f8b\u53d8\u91cf self . weight = 96 # \u5b9e\u4f8b\u53d8\u91cf # \u5b9a\u4e49\u4e00\u4e2asay\u65b9\u6cd5 def say ( self ): self . type = \"\u5b66\u751f\" # \u5b9e\u4f8b\u53d8\u91cf test1 = Demo () # \u4fee\u6539test1\u5bf9\u8c61\u7684\u5b9e\u4f8b\u53d8\u91cf test1 . name = \"yaya\" test1 . weight = 80 print ( test1 . name ) print ( test1 . weight ) # \u5b9a\u4e49\u53e6\u4e00\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61 test2 = Demo () print ( test2 . name ) print ( test2 . weight ) # \u67e5\u770b\u7c7b\u53d8\u91cf\u7684\u503c print ( Demo . name ) print ( Demo . weight ) >>> yaya 80 xiaomei 96 \u6770\u68ee\u65af\u5766\u68ee 180 2.3 \u7c7b\u5bf9\u8c61\u6dfb\u52a0\u65b0\u7684\u5b9e\u4f8b\u53d8\u91cf python\u53ea\u652f\u6301\u4e3a\u7279\u5b9a\u7684\u5bf9\u8c61\u6dfb\u52a0\u5b9e\u4f8b\u53d8\u91cf\u3002\u4f8b\u5982\u5728\u524d\u9762\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\uff0c\u6dfb\u52a0 ismarriage \u5b9e\u4f8b\u53d8\u91cf\uff1a test1 . ismarriage = \"\u672a\u5a5a\" print ( test1 . ismarriage ) print ( test2 . ismarriage ) >>> \u672a\u5a5a AttributeError : 'Demo' object has no attribute 'ismarriage' 03. \u5c40\u90e8\u53d8\u91cf \u5728\u7c7b\u65b9\u6cd5\u5185\uff0c\u76f4\u63a5\u4ee5 \u53d8\u91cf\u540d=\u503c \u7684\u65b9\u5f0f\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u662f\u5c40\u90e8\u53d8\u91cf\uff1a class Demo : # \u5b9a\u4e49\u4e00\u4e2acount\u65b9\u6cd5 def count ( self , money ): sale = 0.8 * money print ( \"\u4f18\u60e0\u540e\u7684\u4ef7\u683c\u4e3a {} \" . format ( sale )) xigua = Demo () xigua . count ( 10 ) >>> \u4f18\u60e0\u540e\u7684\u4ef7\u683c\u4e3a8 .0 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5c40\u90e8\u53d8\u91cf\u662f\u4e3a\u4e86\u7c7b\u65b9\u6cd5\u7684\u529f\u80fd\u5b9e\u73b0\uff0c\u4e0d\u80fd\u76f4\u63a5\u901a\u8fc7\u7c7b\u5bf9\u8c61\u8c03\u7528\u4f7f\u7528\u3002\u5c40\u90e8\u53d8\u91cf\u53ea\u80fd\u7528\u4e8e\u6240\u5728\u51fd\u6570\u4e2d\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5c40\u90e8\u53d8\u91cf\u4e5f\u4f1a\u88ab\u9500\u6bc1","title":"\u7c7b\u53d8\u91cf"},{"location":"programming/python/class-attribute/#01","text":"\u7c7b\u53d8\u91cf\u6307\u7684\u662f\u5728\u7c7b\u4e2d\uff0c\u4f46\u5728\u5404\u4e2a\u7c7b\u65b9\u6cd5\u5916\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1a class Demo : url = \"www.baidu.com\" title = \"\u767e\u5ea6\" def say_hello ( self , name ): print ( \"\u5927\u5bb6\u597d\uff0c\u6211\u53eb {} \" . format ( name )) \u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c url \u548c title \u5c31\u5c5e\u4e8e\u7c7b\u53d8\u91cf\u3002 \u7c7b\u53d8\u91cf\u7684\u7279\u70b9\u662f\uff0c\u6240\u4ee5\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u90fd\u540c\u65f6\u5171\u4eab\u7c7b\u53d8\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7c7b\u53d8\u91cf\u5728\u6240\u6709\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e2d\u662f\u4f5c\u4e3a\u516c\u7528\u8d44\u6e90\u5b58\u5728\u7684\u3002 \u7c7b\u65b9\u6cd5\u548c\u53d8\u91cf\u8c03\u7528\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a \u76f4\u63a5\u901a\u8fc7\u7c7b\u540d\u8c03\u7528 \u901a\u8fc7\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8c03\u7528","title":"01. \u7c7b\u5c5e\u6027(\u7c7b\u53d8\u91cf)"},{"location":"programming/python/class-attribute/#11","text":"# \u4f7f\u7528\u7c7b\u540d\u76f4\u63a5\u8c03\u7528 print ( Demo . url ) print ( Demo . title ) # \u4fee\u6539\u7c7b\u540d\u4e0d\u4ec5\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\uff0c\u8fd8\u53ef\u4ee5\u4fee\u6539\u53d8\u91cf\u7684\u503c Demo . url = \"www.qq.com\" Demo . title = \"\u817e\u8baf\" print ( Demo . url ) print ( Demo . title ) >>> www . baidu . com \u767e\u5ea6 www . qq . com \u817e\u8baf \u56e0\u4e3a\u7c7b\u53d8\u91cf\u4e3a\u6240\u6709\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5171\u6709\uff0c\u901a\u8fc7\u7c7b\u540d\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u503c\uff0c\u4f1a\u5f71\u54cd\u6240\u6709\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff1a print ( \"\u4fee\u6539\u524d\u7684\u7c7b\u53d8\u91cf\" ) test1 = Demo () print ( test1 . url ) print ( test1 . title ) test2 = Demo () print ( test2 . url ) print ( test2 . title ) print ( \"\u4fee\u6539\u540e\uff0c\u5404\u7c7b\u5bf9\u8c61\u4e2d\u7c7b\u53d8\u91cf\u7684\u503c\" ) Demo . url = \"www.qq.com\" Demo . title = \"\u817e\u8baf\" print ( test1 . url ) print ( test1 . title ) print ( test2 . url ) print ( test2 . title ) >>> \u4fee\u6539\u524d\u7684\u7c7b\u53d8\u91cf www . baidu . com \u767e\u5ea6 www . baidu . com \u767e\u5ea6 \u4fee\u6539\u540e \uff0c \u5404\u7c7b\u5bf9\u8c61\u4e2d\u7c7b\u53d8\u91cf\u7684\u503c www . qq . com \u817e\u8baf www . qq . com \u817e\u8baf","title":"1.1 \u901a\u8fc7\u7c7b\u540d\u8c03\u7528\u7c7b\u53d8\u91cf"},{"location":"programming/python/class-attribute/#12","text":"test1 = Demo () print ( test1 . url ) print ( test1 . title ) >>> www . baidu . com \u767e\u5ea6 \u901a\u8fc7\u7c7b\u5bf9\u8c61\u662f\u65e0\u6cd5\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u3002\u901a\u8fc7\u7c7b\u5bf9\u8c61\u5bf9\u7c7b\u53d8\u91cf\u8d4b\u503c\uff0c\u5176\u672c\u8d28\u5c06\u4e0d\u518d\u662f\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u503c\uff0c\u800c\u662f\u5728\u7ed9\u8be5\u5bf9\u8c61\u5b9a\u4e49\u65b0\u7684\u5b9e\u4f8b\u53d8\u91cf \u4f46\u662f\uff0c\u53ef\u4ee5\u52a8\u6001\u7684\u4e3a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u6dfb\u52a0\u7c7b\u53d8\u91cf test1 = Demo () test1 . slogan = \"\u767e\u5ea6\u4e00\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053\" print ( test1 . slogan ) >>> \u767e\u5ea6\u4e00\u4e0b \uff0c \u4f60\u5c31\u77e5\u9053","title":"1.2 \u901a\u8fc7\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8c03\u7528\u7c7b\u53d8\u91cf"},{"location":"programming/python/class-attribute/#02","text":"\u5b9e\u4f8b\u53d8\u91cf\u6307\u7684\u662f\u5728\u4efb\u610f\u7c7b\u65b9\u6cd5\u5185\u90e8\uff0c\u4ee5\u201c self.\u53d8\u91cf\u540d \u201d\u7684\u65b9\u5f0f\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u5176\u7279\u70b9\u662f\u53ea\u4f5c\u7528\u4e8e\u8c03\u7528\u65b9\u6cd5\u7684\u5bf9\u8c61\u3002\u5b9e\u4f8b\u53d8\u91cf\u53ea\u80fd\u901a\u8fc7\u5bf9\u8c61\u540d\u8bbf\u95ee\uff0c\u4e0d\u80fd\u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee\u3002 class Demo : def __init__ ( self ): self . name = \"\u5c0f\u660e\" self . age = 18 def say ( self ): self . weight = 120 \u5728Demo\u7c7b\u4e2d\uff0c name \u3001 age \u3001 weight \u90fd\u662f\u5b9e\u4f8b\u53d8\u91cf\u3002\u7531\u4e8e __Init__ \u662f\u6784\u9020\u51fd\u6570\uff0c\u4f1a\u5728\u521b\u5efa\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u65f6\u81ea\u52a8\u8c03\u7528\uff0c\u800c say \u65b9\u6cd5\u9700\u8981\u624b\u52a8\u8c03\u7528\u3002\u56e0\u6b64 Demo \u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u90fd\u4f1a\u5305\u542b name \u548c age \u5b9e\u4f8b\u53d8\u91cf\uff0c\u800c\u53ea\u6709\u8c03\u7528\u4e86 say \u65b9\u6cd5\uff0c\u624d\u5305\u542b weight \u53d8\u91cf test1 = Demo () print ( test1 . name ) print ( test1 . age ) # \u7531\u4e8e\u672a\u8c03\u7528say\u65b9\u6cd5\uff0c \u6240\u4ee5\u4e0b\u9762\u7684\u8fd9\u53e5\u4f1a\u62a5\u9519 # print(test1.weight) test2 = Demo () test2 . say () print ( test2 . weight ) >>> \u5c0f\u660e 18 120","title":"02. \u5b9e\u4f8b\u53d8\u91cf(\u5b9e\u4f8b\u5c5e\u6027)"},{"location":"programming/python/class-attribute/#21","text":"\u4f7f\u7528\u7c7b\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u53d8\u91cf\uff0c\u4f46\u65e0\u6cd5\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u503c\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u901a\u8fc7\u7c7b\u5bf9\u8c61\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u503c\uff0c\u4e0d\u662f\u5728\u7ed9\u7c7b\u53d8\u91cf\u8d4b\u503c\uff0c\u672c\u8d28\u4e0a\u662f\u518d\u5b9a\u4e49\u65b0\u7684\u5b9e\u4f8b\u53d8\u91cf\u3002 test1 = Demo () # \u7c7b\u5bf9\u8c61\u8bbf\u95ee\u7c7b\u53d8\u91cf print ( test1 . url ) # \u7c7b\u5bf9\u8c61\u7684\u65b9\u5f0f\u5c1d\u8bd5\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u503c test1 . url = \"www.qq.com\" # \u518d\u6b21\u8bbf\u95ee\uff0c\u67e5\u770b\u4fee\u6539\u540e\u7684\u7ed3\u679c print ( test1 . url ) # \u67e5\u770b\u7c7b\u53d8\u91cf\u7684\u503c print ( Demo . url ) >>> www . baidu . com www . qq . com www . baidu . com \u4ee5\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u901a\u8fc7\u7c7b\u5bf9\u8c61\u662f\u65e0\u6cd5\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u503c\u7684\uff0c\u672c\u8d28\u662f\u5728\u7ed9\u7c7b\u53d8\u91cf test1 \u5b9a\u4e49\u65b0\u7684\u5b9e\u4f8b\u53d8\u91cf\u3002 \u5728\u7c7b\u4e2d\uff0c\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf\u53ef\u4ee5\u540c\u540d\uff0c\u4f46\u662f\u5728\u4f7f\u7528\u7c7b\u5bf9\u8c61\u7684\u65b9\u5f0f\u8c03\u7528\u540c\u4e00\u4e2a\u53d8\u91cf\u540d\u65f6\uff0cpython\u4f1a\u4f18\u5148\u9009\u62e9\u5b9e\u4f8b\u53d8\u91cf\uff0c\u6240\u4ee5\u5728\u4ee3\u7801\u7f16\u5199\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\u7c7b\u5bf9\u8c61\u7684\u65b9\u5f0f\u8c03\u7528\u7c7b\u53d8\u91cf\u3002","title":"2.1 \u4f7f\u7528\u5b9e\u4f8b\u5316\u5bf9\u8c61\u65e0\u6cd5\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u539f\u56e0"},{"location":"programming/python/class-attribute/#22","text":"\u548c\u7c7b\u5bf9\u8c61\u4e0d\u540c\uff0c\u901a\u8fc7\u67d0\u4e2a\u5bf9\u8c61\u4fee\u6539\u5b9e\u4f8b\u53d8\u91cf\u7684\u503c\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u66f4\u4e0d\u4f1a\u5f71\u54cd\u540c\u540d\u7684\u7c7b\u53d8\u91cf\uff1a class Demo : name = \"\u6770\u68ee\u65af\u5766\u68ee\" # \u7c7b\u53d8\u91cf weight = 180 # \u7c7b\u53d8\u91cf def __init__ ( self ): self . name = \"xiaomei\" # \u5b9e\u4f8b\u53d8\u91cf self . weight = 96 # \u5b9e\u4f8b\u53d8\u91cf # \u5b9a\u4e49\u4e00\u4e2asay\u65b9\u6cd5 def say ( self ): self . type = \"\u5b66\u751f\" # \u5b9e\u4f8b\u53d8\u91cf test1 = Demo () # \u4fee\u6539test1\u5bf9\u8c61\u7684\u5b9e\u4f8b\u53d8\u91cf test1 . name = \"yaya\" test1 . weight = 80 print ( test1 . name ) print ( test1 . weight ) # \u5b9a\u4e49\u53e6\u4e00\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61 test2 = Demo () print ( test2 . name ) print ( test2 . weight ) # \u67e5\u770b\u7c7b\u53d8\u91cf\u7684\u503c print ( Demo . name ) print ( Demo . weight ) >>> yaya 80 xiaomei 96 \u6770\u68ee\u65af\u5766\u68ee 180","title":"2.2 \u7c7b\u5bf9\u8c61\u65b9\u5f0f\u4fee\u6539\u5b9e\u4f8b\u53d8\u91cf\u7684\u503c"},{"location":"programming/python/class-attribute/#23","text":"python\u53ea\u652f\u6301\u4e3a\u7279\u5b9a\u7684\u5bf9\u8c61\u6dfb\u52a0\u5b9e\u4f8b\u53d8\u91cf\u3002\u4f8b\u5982\u5728\u524d\u9762\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\uff0c\u6dfb\u52a0 ismarriage \u5b9e\u4f8b\u53d8\u91cf\uff1a test1 . ismarriage = \"\u672a\u5a5a\" print ( test1 . ismarriage ) print ( test2 . ismarriage ) >>> \u672a\u5a5a AttributeError : 'Demo' object has no attribute 'ismarriage'","title":"2.3 \u7c7b\u5bf9\u8c61\u6dfb\u52a0\u65b0\u7684\u5b9e\u4f8b\u53d8\u91cf"},{"location":"programming/python/class-attribute/#03","text":"\u5728\u7c7b\u65b9\u6cd5\u5185\uff0c\u76f4\u63a5\u4ee5 \u53d8\u91cf\u540d=\u503c \u7684\u65b9\u5f0f\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u662f\u5c40\u90e8\u53d8\u91cf\uff1a class Demo : # \u5b9a\u4e49\u4e00\u4e2acount\u65b9\u6cd5 def count ( self , money ): sale = 0.8 * money print ( \"\u4f18\u60e0\u540e\u7684\u4ef7\u683c\u4e3a {} \" . format ( sale )) xigua = Demo () xigua . count ( 10 ) >>> \u4f18\u60e0\u540e\u7684\u4ef7\u683c\u4e3a8 .0 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5c40\u90e8\u53d8\u91cf\u662f\u4e3a\u4e86\u7c7b\u65b9\u6cd5\u7684\u529f\u80fd\u5b9e\u73b0\uff0c\u4e0d\u80fd\u76f4\u63a5\u901a\u8fc7\u7c7b\u5bf9\u8c61\u8c03\u7528\u4f7f\u7528\u3002\u5c40\u90e8\u53d8\u91cf\u53ea\u80fd\u7528\u4e8e\u6240\u5728\u51fd\u6570\u4e2d\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5c40\u90e8\u53d8\u91cf\u4e5f\u4f1a\u88ab\u9500\u6bc1","title":"03. \u5c40\u90e8\u53d8\u91cf"},{"location":"programming/python/class/","text":"01. \u9762\u5411\u5bf9\u8c61 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08Object-oriented Programming\uff0c\u7b80\u79f0 OOP \uff09\uff0c\u662f\u4e00\u79cd\u5c01\u88c5\u4ee3\u7801\u7684\u65b9\u6cd5\u3002 \u5c06\u6570\u636e\u6254\u8fdb\u5217\u8868\uff0c\u4ee3\u7801\u5757\u6254\u8fdb\u51fd\u6570\uff0c\u90fd\u662f\u5c01\u88c5\u7684\u7b80\u5355\u5f62\u5f0f\u3002\u9762\u5411\u5bf9\u8c61\u672c\u8d28\u4e5f\u662f\u4e00\u79cd\u5c01\u88c5\uff0c\u6a21\u62df\u771f\u5b9e\u4e16\u754c\u7684\u5b9e\u7269\uff0c\u5c06\u6570\u636e\u548c\u51fd\u6570\u5c01\u88c5\u8fdb\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4e0d\u540c\u7684\u5bf9\u8c61\u5404\u53f8\u5176\u804c\uff0c\u5b8c\u6210\u6700\u7ec8\u9700\u6c42\u7684\u4e00\u79cd\u7f16\u7a0b\u65b9\u6cd5 \u4e3e\u4f8b\u8bf4\u660e\uff0c\u5982\u679c\u8981\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7684\u601d\u7ef4\u5c01\u88c5\u5c0f\u72d7\uff0c\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u9762\u63cf\u8ff0\uff1a \u4ece\u7279\u5f81\u63cf\u8ff0\uff0c\u5982\u989c\u8272\u3001\u91cd\u91cf\u3001\u540d\u5b57\u7b49\uff1b \u4ece\u884c\u4e3a\u63cf\u8ff0\uff0c\u5982\u4f1a\u53eb\uff0c\u4f1a\u8df3\uff0c\u4f1a\u7761\u89c9\u7b49\uff1b \u901a\u8fc7\u4ee5\u4e0a\u4e24\u4e2a\u65b9\u9762\u63cf\u8ff0\u5c0f\u72d7\u7684\u5c5e\u6027\u548c\u884c\u4e3a\uff0c\u5c06\u4e00\u7cfb\u5217\u6570\u636e\u548c\u51fd\u6570\u5c01\u88c5\u5230\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u5728\u9700\u8981\u4f7f\u7528\u7684\u65f6\u5019\u8c03\u7528\u4e0d\u540c\u7684\u5c5e\u6027\u6216\u65b9\u6cd5\uff0c\u5c31\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u8fc7\u7a0b\u3002 1.1 \u9762\u5411\u5bf9\u8c61\u76f8\u5173\u672f\u8bed \u7c7b\uff1a\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u6a21\u677f\uff0c\u901a\u8fc7\u7c7b\u53ef\u4ee5\u521b\u5efa\u65e0\u6570\u4e2a\u5177\u4f53\u5b9e\u4f8b\u3002\u6bd4\u5982\u524d\u9762\u7684\u5c0f\u72d7\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u521b\u5efa\u65e0\u6570\u6709\u4e0d\u540c\u7279\u5f81\u548c\u884c\u4e3a\u7684\u5c0f\u72d7\uff08\u8fd9\u4e00\u8fc7\u7a0b\u53c8\u79f0\u4e3a \u5b9e\u4f8b\u5316 \uff09 \u5bf9\u8c61\uff1a\u7c7b\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u901a\u8fc7\u7c7b\u521b\u5efa\u7684\u5b9e\u4f8b\uff08\u53c8\u79f0\u5bf9\u8c61\uff09\u624d\u80fd\u4f7f\u7528\u3002\u4f8b\u5982\u98de\u673a\u56fe\u7eb8\uff08\u7c7b\uff09\u672c\u8eab\u5e76\u4e0d\u80fd\u4f7f\u7528\uff0c\u4f46\u662f\u6309\u7167\u56fe\u7eb8\u521b\u5efa\u51fa\u7684\u98de\u673a\uff08\u5bf9\u8c61\uff09\u5c31\u53ef\u4ee5\u4f7f\u7528\u3002 \u5c5e\u6027\uff1a\u7c7b\u4e2d\u6240\u6709\u53d8\u91cf\u79f0\u4e3a\u5c5e\u6027\uff0c\u5982\u5c0f\u72d7\u7684\u989c\u8272\u3001\u91cd\u91cf\u3001\u540d\u5b57\u7b49\u7279\u5f81\u3002 \u65b9\u6cd5\uff1a\u7c7b\u4e2d\u6240\u6709\u51fd\u6570\u79f0\u4e3a\u65b9\u6cd5\u3002\u5982\u5c0f\u72d7\u4f1a\u53eb\u3001\u4f1a\u8df3\u3001\u4f1a\u7761\u89c9\u7684\u51fd\u6570\u3002\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u5c0f\u72d7\u505a\u51fa\u4e0d\u540c\u884c\u4e3a\u3002 02. \u7c7b\u7684\u5b9a\u4e49 \u7c7b\uff08\u82f1\u6587\u540d class \uff09\uff0c\u662f\u5177\u6709\u76f8\u540c\u7279\u6027\uff08\u5c5e\u6027\uff09\u548c\u884c\u4e3a\uff08\u65b9\u6cd5\uff09\u7684\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09\u7684\u62bd\u8c61\u6a21\u677f\u3002 \u7c7b\u4e0e\u5bf9\u8c61\u7684\u5173\u7cfb\u5c31\u5982\u6a21\u5177\u548c\u94f8\u4ef6\u7684\u5173\u7cfb\uff0c\u7c7b\u7684\u5b9e\u4f8b\u5316\u7684\u7ed3\u679c\u5c31\u662f\u5bf9\u8c61\uff0c\u800c\u5bf9\u8c61\u7684\u62bd\u8c61\u5c31\u662f\u7c7b\uff0c\u7c7b\u63cf\u8ff0\u4e86\u4e00\u7ec4\u6709\u76f8\u540c\u7279\u6027\uff08\u5c5e\u6027\uff09\u548c\u76f8\u540c\u884c\u4e3a\uff08\u65b9\u6cd5\uff09\u7684\u5bf9\u8c61\u3002 2.1 class \u5b9a\u4e49\u7c7b \u5728python\u4e2d\uff0c\u5b9a\u4e49\u7c7b\u4f7f\u7528 class \u5173\u952e\u5b57\u5b9e\u73b0\uff0c\u57fa\u672c\u8bed\u6cd5\u5982\u4e0b: class \u7c7b\u540d : \u591a\u4e2a \uff08 >= 0 \uff09 \u7c7b\u5c5e\u6027 \u591a\u4e2a \uff08 >= 0 \uff09 \u7c7b\u65b9\u6cd5 \u7c7b\u5c5e\u6027\uff1a\u5728\u7c7b\u4e2d\uff0c\u6240\u6709\u51fd\u6570\u4e4b\u5916\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u6210\u4e3a\u7c7b\u5c5e\u6027\u6216\u7c7b\u53d8\u91cf \u7c7b\u65b9\u6cd5\uff1a\u5728\u7c7b\u4e2d\uff0c\u5b9a\u4e49\u7684\u6240\u6709\u51fd\u6570\uff0c\u6210\u4e3a\u7c7b\u65b9\u6cd5 \ud83d\udca1 \u7c7b\u540d\u5e94\u4f7f\u7528\u5927\u9a7c\u5cf0\u547d\u540d\u65b9\u6cd5\uff0c\u5373\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5982`Student` \u3002\u5982\u679c\u6709\u591a\u4e2a\u5355\u8bcd\uff0c\u6bcf\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u9700\u8981\u5927\u5199\uff0c\u5982`MyFirstDemo` class MyFirstDemo : \"\"\"\u7c7b\u7684\u6ce8\u91ca\u6587\u6863\"\"\" age = 18 def __init__ ( self , name ): self . name = name def run ( self ): print ( f \" { self . name } \u8dd1\u8d77\u6765\u4e86\" ) 2.2 \u7c7b\u7684\u5b9e\u4f8b\u5316 \u7c7b\u7684\u5b9e\u4f8b\u5316\u662f\u5c06\u5b9a\u4e49\u597d\u7684\u7c7b\u5b9a\u4e49\u7ed9\u4e00\u4e2a\u5bf9\u8c61\uff0c\u901a\u8fc7 \u5bf9\u8c61.\u7c7b\u65b9\u6cd5 \u6216 \u5bf9\u8c61.\u7c7b\u5c5e\u6027 \u7684\u65b9\u5f0f\u53ef\u4ee5\u8c03\u7528\u7c7b\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\u548c\u53d8\u91cf\u3002 \u5728\u5b9e\u4f8b\u5316\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u6784\u9020\u7684\u7c7b\u6ca1\u6709\u624b\u52a8\u6dfb\u52a0 __init__() \u51fd\u6570\uff0c\u53c8\u6216\u8005\u6dfb\u52a0\u7684 __init__() \u51fd\u6570\u4e2d\u9664\u4e86 self \u6ca1\u6709\u5176\u4ed6\u7684\u53c2\u6570\uff0c\u5219\u521b\u5efa\u5bf9\u8c61\u65f6\u7684\u53c2\u6570\u53ef\u4ee5\u7701\u7565\u4e0d\u5199 \u5982\u4e0b\u4ee3\u7801\u521b\u5efa\u4e86\u540d\u4e3a MyFirstDemo \u7684\u7c7b\uff0c\u5e76\u5bf9\u9f50\u8fdb\u884c\u4e86\u5b9e\u4f8b\u5316\uff1a class MyFirstDemo : \"\"\"\u7c7b\u7684\u6ce8\u91ca\u6587\u6863\"\"\" age = 18 def __init__ ( self , name ): self . name = name def run ( self ): print ( f \" { self . name } \u8dd1\u8d77\u6765\u4e86\" ) dog = MyFirstDemo ( name = \"\u65fa\u8d22\" ) \u5728\u5b9e\u4f8b\u5316\u8fc7\u7a0b\u4e2d\uff0c\u4f20\u53c2\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u7684\u4f4d\u7f6e\u4f20\u53c2\u3001\u5173\u952e\u5b57\u4f20\u53c2\u3002 self \u53c2\u6570python\u4f1a\u81ea\u52a8\u4f20\u9012\uff0c\u65e0\u9700\u4f20\u9012\u5b9e\u53c2\u3002 2.3 \u7c7b\u5bf9\u8c61\u7684\u4f7f\u7528 \u5b9a\u4e49\u7684\u7c7b\u53ea\u6709\u8fdb\u884c\u5b9e\u4f8b\u5316\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u8be5\u7c7b\u521b\u5efa\u5bf9\u8c61\u4e4b\u540e\uff0c\u624d\u80fd\u4f7f\u7528\u3002\u5b9e\u4f8b\u5316\u540e\u7684\u7c7b\u5bf9\u8c61\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u8bbf\u95ee\u6216\u4fee\u6539\u7c7b\u5bf9\u8c61\u5177\u6709\u7684\u5b9e\u4f8b\u53d8\u91cf\uff0c\u751a\u81f3\u53ef\u4ee5\u6dfb\u52a0\u65b0\u7684\u5b9e\u4f8b\u53d8\u91cf\u6216\u5220\u9664\u5df2\u6709\u7684\u5b9e\u4f8b\u53d8\u91cf \u8c03\u7528\u7c7b\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u5305\u62ec\u8c03\u7528\u73b0\u6709\u7684\u65b9\u6cd5\uff0c\u4ee5\u53ca\u7ed9\u7c7b\u5bf9\u8c61\u52a8\u6001\u6dfb\u52a0\u65b9\u6cd5 \u4ee5\u4e0b\u4ee3\u7801\u6f14\u793a\u5c06 MyFirstDemo \u5b9e\u4f8b\u5316\u540e\uff0c\u8bbf\u95ee\u7c7b\u5bf9\u8c61\u7684\u5b9e\u4f8b\u53d8\u91cf class MyFirstDemo : \"\"\"\u7c7b\u7684\u6ce8\u91ca\u6587\u6863\"\"\" age = 18 def __init__ ( self , name ): self . name = name def run ( self ): print ( f \" { self . name } \u8dd1\u8d77\u6765\u4e86\" ) dog = MyFirstDemo ( name = \"\u65fa\u8d22\" ) print ( dog . age ) >>> 18 \u5c06\u7c7b\u5b9e\u4f8b\u5316\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 \u5b9e\u4f8b\u5bf9\u8c61.\u53d8\u91cf \u7684\u65b9\u5f0f\u4fee\u6539\u5b9e\u4f8b\u5bf9\u8c61\u7684\u503c dog . age = 21 print ( dog . age ) >>> 21 \u7ed9\u7c7b\u5bf9\u8c61\u52a8\u6001\u6dfb\u52a0/\u5220\u9664\u53d8\u91cf dog . whight = \"10\u65a4\" print ( dog . whight ) >>> 10 \u65a4 # \u4f7f\u7528del\u5173\u952e\u5b57\u53ef\u4ee5\u52a8\u6001\u5220\u9664\u7c7b\u5c5e\u6027 del dog . whight print ( dog . whight ) >>> AttributeError : 'MyFirstDemo' object has no attribute 'whight' \u7c7b\u5bf9\u8c61\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u5982\u679c\u65b9\u6cd5\u5185\u4ec5\u6709 self \u4e00\u4e2a\u53c2\u6570\uff0c\u5219\u4e0d\u9700\u8981\u4f20\u53c2 dog . run () >>> \u65fa\u8d22\u8dd1\u8d77\u6765\u4e86 \u7ed9\u7c7b\u5bf9\u8c61\u52a8\u6001\u6dfb\u52a0\u65b9\u6cd5 \u5148\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 def info ( self ): print ( \"\u8fd9\u662f\u65b0\u589e\u7684info\u65b9\u6cd5\" , self ) #\u4f7f\u7528info\u5bf9dog\u5bf9\u8c61\u7684foo\u65b9\u6cd5\u8d4b\u503c\uff08\u52a8\u6001\u7ed1\u5b9a\u65b9\u6cd5\uff09 dog . foo = info # python\u4e0d\u4f1a\u81ea\u52a8\u5c06\u8c03\u7528\u8005\u7ed1\u5b9a\u7b2c\u4e00\u53c2\u6570\uff0c\u5373\u4f7f\u4f20\u9012self\u53c2\u6570\u4e5f\u6ca1\u7528\u3002 dog . foo () >>> TypeError : info () missing 1 required positional argument : 'self' #\u8c03\u7528\u65f6\u9700\u8981\u4f20\u9012\u7c7b\u5bf9self\u8fdb\u884c\u7ed1\u5b9a dog . foo ( MyFirstDemo ) >>> \u8fd9\u662f\u65b0\u589e\u7684info\u65b9\u6cd5 < class ' __main__ . MyFirstDemo '> 03. \u5185\u7f6e\u65b9\u6cd5\u548c\u5c5e\u6027 3.1 self \u53c2\u6570 \ud83d\udca1 \u540c\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u4ea7\u751f\u591a\u4e2a\u5bf9\u8c61\uff0c\u5f53\u67d0\u4e2a\u5bf9\u8c61\u8c03\u7528\u7c7b\u65b9\u6cd5\u65f6\uff0c\u8be5\u5bf9\u8c61\u4f1a\u628a\u81ea\u8eab\u7684\u5f15\u7528\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u81ea\u52a8\u4f20\u7ed9\u8be5\u65b9\u6cd5\uff0cPython \u4f1a\u81ea\u52a8\u7ed1\u5b9a\u7c7b\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u6307\u5411\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u5bf9\u8c61\u3002\u5982\u6b64\uff0cPython\u89e3\u91ca\u5668\u5c31\u80fd\u77e5\u9053\u5230\u5e95\u8981\u64cd\u4f5c\u54ea\u4e2a\u5bf9\u8c61\u7684\u65b9\u6cd5\u4e86\u3002\u65e0\u8bba\u662f\u7c7b\u4e2d\u7684\u6784\u9020\u51fd\u6570\u8fd8\u662f\u666e\u901a\u7684\u7c7b\u65b9\u6cd5\uff0c\u5b9e\u9645\u8c03\u7528\u5b83\u4eec\u7684\u8c01\uff0c\u5219\u7b2c\u4e00\u4e2a\u53c2\u6570 self \u5c31\u4ee3\u8868\u8c01\u3002 \u5982\u679c\u628a\u7c7b\u6bd4\u4f5c\u9020\u623f\u5b50\u7684\u56fe\u7eb8\uff0c\u90a3\u4e48\u7c7b\u5b9e\u4f8b\u5316\u540e\u7684\u5bf9\u8c61\u662f\u771f\u6b63\u53ef\u4ee5\u4f4f\u7684\u623f\u5b50\u3002\u6839\u636e\u4e00\u5f20\u56fe\u7eb8\uff08\u7c7b\uff09\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u6210\u5343\u4e0a\u4e07\u7684\u623f\u5b50\uff08\u7c7b\u5bf9\u8c61\uff09\uff0c\u6bcf\u4e2a\u623f\u5b50\u957f\u76f8\u90fd\u662f\u7c7b\u4f3c\u7684\uff08\u90fd\u6709\u76f8\u540c\u7684\u7c7b\u53d8\u91cf\u548c\u7c7b\u65b9\u6cd5\uff09\uff0c\u4f46\u5b83\u4eec\u90fd\u6709\u5404\u81ea\u7684\u4e3b\u4eba\uff0c\u90a3\u4e48\u5982\u4f55\u5bf9\u5b83\u4eec\u8fdb\u884c\u533a\u5206\u5462\uff1f \u901a\u8fc7 self \u53c2\u6570\uff0c\u5b83\u5c31\u76f8\u5f53\u4e8e\u6bcf\u4e2a\u623f\u5b50\u7684\u95e8\u94a5\u5319\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u623f\u5b50\u7684\u4e3b\u4eba\u4ec5\u80fd\u8fdb\u5165\u81ea\u5df1\u7684\u623f\u5b50\uff08\u6bcf\u4e2a\u7c7b\u5bf9\u8c61\u53ea\u80fd\u8c03\u7528\u81ea\u5df1\u7684\u7c7b\u53d8\u91cf\u548c\u7c7b\u65b9\u6cd5\uff09\u3002 class Person : def __init__ ( self ): print ( \"\u6b63\u5728\u6267\u884c\u6784\u9020\u65b9\u6cd5\" ) # \u5b9a\u4e49\u4e00\u4e2astudy()\u5b9e\u4f8b\u65b9\u6cd5 def study ( self ): print ( self , \"\u6b63\u5728\u5b66\u4e60python\" ) zhangsan = Person () zhangsan . study () print ( \"--------\" ) lisi = Person () lisi . study () >>> \u6b63\u5728\u6267\u884c\u6784\u9020\u65b9\u6cd5 < __main__ . Person object at 0x7f806dfb3358 > \u6b63\u5728\u5b66\u4e60python -------- \u6b63\u5728\u6267\u884c\u6784\u9020\u65b9\u6cd5 < __main__ . Person object at 0x7f806dfb33c8 > \u6b63\u5728\u5b66\u4e60python \u4ee5\u4e0a\u7684\u4ee3\u7801\u4e2d\uff0cstudy\u4e2d\u7684 self \u4ee3\u8868\u8be5\u65b9\u6cd5\u7684\u8c03\u7528\u8005\uff0c\u5373\u8c01\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u90a3\u4e48 self \u5c31\u4ee3\u8868\u8c01\u3002 3.2 __init__ \u521d\u59cb\u5316\u65b9\u6cd5 \u5728\u521b\u5efa\u7c7b\u65f6\uff0c\u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0 __init__() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u7c7b\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u6210\u4e3a\u6784\u9020\u65b9\u6cd5\uff08\u6216\u6784\u9020\u51fd\u6570\u6216\u521d\u59cb\u5316\u65b9\u6cd5\uff09 \u6784\u9020\u65b9\u6cd5\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\u65f6\u4f7f\u7528\uff0c\u6bcf\u5f53\u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61\u65f6\uff0c\u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u8c03\u7528\u5b83\u3002\u521d\u59cb\u5316\u65b9\u6cd5\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a def __init__ ( self , * args ): \u4ee3\u7801\u5757 __init__ \u65b9\u6cd5\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u53c2\u6570\uff0c\u4f46\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u540d\u4e3a self \u7684\u53c2\u6570\uff0c\u4e14\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 class Person : def __init__ ( self ): print ( \"\u6b63\u5728\u6267\u884c\u6784\u9020\u65b9\u6cd5\" ) # \u5b9a\u4e49\u4e00\u4e2astudy()\u5b9e\u4f8b\u65b9\u6cd5 def study ( self ): print ( self , \"\u6b63\u5728\u5b66\u4e60python\" ) zhangsan = Person () >>> \u6b63\u5728\u6267\u884c\u6784\u9020\u65b9\u6cd5 \u6784\u9020\u51fd\u6570\u662f\u5728\u521b\u5efa\u7c7b\u5bf9\u8c61\u65f6\u5c31\u5f00\u59cb\u8fd0\u884c 3.3 __del__ \u65b9\u6cd5 \u5728python\u4e2d\uff0c\u4ee5 \u7c7b\u578b() \u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u4e3a\u5bf9\u8c61\u5206\u914d\u5b8c\u7a7a\u95f4\u540e\uff0c\u81ea\u52a8\u8c03\u7528 __init__() \u65b9\u6cd5 \u5f53\u4e00\u4e2a\u5bf9\u8c61\u88ab\u4ece\u5185\u5b58\u4e2d\u9500\u6bc1\u524d\uff0c\u4f1a\u81ea\u52a8\u8c03\u7528 __del__() \u65b9\u6cd5 **__del__ \u65b9\u6cd5\u7684\u5e94\u7528\u573a\u666f** __init__ \u6539\u9020\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u521b\u5efa\u5bf9\u8c61\u66f4\u52a0\u7075\u6d3b __del__ \u5982\u679c\u5e0c\u671b\u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u524d\uff0c\u518d\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b __del__ \u65b9\u6cd5 \u7c7b\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f \u4e00\u4e2a\u5bf9\u8c61\u4ece\u8c03\u7528 \u7c7b\u540d() \u521b\u5efa\uff0c\u751f\u547d\u5468\u671f\u5f00\u59cb \u4e00\u4e2a\u5bf9\u8c61\u7684 __del__ \u65b9\u6cd5\u4e00\u65e6\u88ab\u8c03\u7528\uff0c\u751f\u547d\u5468\u671f\u7ed3\u675f \u5728\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u5185\uff0c\u53ef\u4ee5\u8bbf\u95ee\u5bf9\u8c61\u5c5e\u6027\uff0c\u6216\u8005\u8ba9\u5bf9\u8c61\u8c03\u7528\u65b9\u6cd5 class Person : age = 18 def __init__ ( self , name ): self . name = name print ( \" %s \u5f00\u59cb\u8fd0\u884c\" % self . name ) def __del__ ( self ): print ( \" %s \u8fd0\u884c\u7ed3\u675f\" % self . name ) zhangsan = Person ( \"\u5c0f\u660e\" ) print ( zhangsan . name ) print ( zhangsan . age ) >>> \u5c0f\u660e\u5f00\u59cb\u8fd0\u884c \u5c0f\u660e 18 \u5c0f\u660e\u8fd0\u884c\u7ed3\u675f 3.4 __str__ \u65b9\u6cd5 \u5728 Python \u4e2d\uff0c\u4f7f\u7528 print \u8f93\u51fa \u5bf9\u8c61\u53d8\u91cf \uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f1a\u8f93\u51fa\u8fd9\u4e2a\u53d8\u91cf \u5f15\u7528\u7684\u5bf9\u8c61 \u662f \u7531\u54ea\u4e00\u4e2a\u7c7b\u521b\u5efa\u7684\u5bf9\u8c61 \uff0c\u4ee5\u53ca \u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740 \uff08 \u5341\u516d\u8fdb\u5236\u8868\u793a \uff09 \u5982\u679c\u5728\u5f00\u53d1\u4e2d\uff0c\u5e0c\u671b\u4f7f\u7528 print \u8f93\u51fa \u5bf9\u8c61\u53d8\u91cf \u65f6\uff0c\u80fd\u591f\u6253\u5370 \u81ea\u5b9a\u4e49\u7684\u5185\u5bb9 \uff0c\u5c31\u53ef\u4ee5\u5229\u7528 __str__ \u8fd9\u4e2a\u5185\u7f6e\u65b9\u6cd5\u4e86 \u6ce8\u610f\uff1a str \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32 class Person : def __init__ ( self , name ): self . name = name print ( \" %s \u5f00\u59cb\u8fd0\u884c\" % self . name ) def __del__ ( self ): print ( \" %s \u8fd0\u884c\u7ed3\u675f\" % self . name ) def __str__ ( self ): return \"\u5927\u5bb6\u597d\uff0c\u6211\u53eb %s \" % self . name xiaoming = Person ( \"\u5c0f\u660e\" ) print ( xiaoming ) >>> \u5c0f\u660e\u5f00\u59cb\u8fd0\u884c \u5927\u5bb6\u597d \uff0c \u6211\u53eb\u5c0f\u660e \u5c0f\u660e\u8fd0\u884c\u7ed3\u675f","title":"\u9762\u5411\u5bf9\u8c61"},{"location":"programming/python/class/#01","text":"\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08Object-oriented Programming\uff0c\u7b80\u79f0 OOP \uff09\uff0c\u662f\u4e00\u79cd\u5c01\u88c5\u4ee3\u7801\u7684\u65b9\u6cd5\u3002 \u5c06\u6570\u636e\u6254\u8fdb\u5217\u8868\uff0c\u4ee3\u7801\u5757\u6254\u8fdb\u51fd\u6570\uff0c\u90fd\u662f\u5c01\u88c5\u7684\u7b80\u5355\u5f62\u5f0f\u3002\u9762\u5411\u5bf9\u8c61\u672c\u8d28\u4e5f\u662f\u4e00\u79cd\u5c01\u88c5\uff0c\u6a21\u62df\u771f\u5b9e\u4e16\u754c\u7684\u5b9e\u7269\uff0c\u5c06\u6570\u636e\u548c\u51fd\u6570\u5c01\u88c5\u8fdb\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4e0d\u540c\u7684\u5bf9\u8c61\u5404\u53f8\u5176\u804c\uff0c\u5b8c\u6210\u6700\u7ec8\u9700\u6c42\u7684\u4e00\u79cd\u7f16\u7a0b\u65b9\u6cd5 \u4e3e\u4f8b\u8bf4\u660e\uff0c\u5982\u679c\u8981\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7684\u601d\u7ef4\u5c01\u88c5\u5c0f\u72d7\uff0c\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u9762\u63cf\u8ff0\uff1a \u4ece\u7279\u5f81\u63cf\u8ff0\uff0c\u5982\u989c\u8272\u3001\u91cd\u91cf\u3001\u540d\u5b57\u7b49\uff1b \u4ece\u884c\u4e3a\u63cf\u8ff0\uff0c\u5982\u4f1a\u53eb\uff0c\u4f1a\u8df3\uff0c\u4f1a\u7761\u89c9\u7b49\uff1b \u901a\u8fc7\u4ee5\u4e0a\u4e24\u4e2a\u65b9\u9762\u63cf\u8ff0\u5c0f\u72d7\u7684\u5c5e\u6027\u548c\u884c\u4e3a\uff0c\u5c06\u4e00\u7cfb\u5217\u6570\u636e\u548c\u51fd\u6570\u5c01\u88c5\u5230\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u5728\u9700\u8981\u4f7f\u7528\u7684\u65f6\u5019\u8c03\u7528\u4e0d\u540c\u7684\u5c5e\u6027\u6216\u65b9\u6cd5\uff0c\u5c31\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u8fc7\u7a0b\u3002","title":"01. \u9762\u5411\u5bf9\u8c61"},{"location":"programming/python/class/#11","text":"\u7c7b\uff1a\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u6a21\u677f\uff0c\u901a\u8fc7\u7c7b\u53ef\u4ee5\u521b\u5efa\u65e0\u6570\u4e2a\u5177\u4f53\u5b9e\u4f8b\u3002\u6bd4\u5982\u524d\u9762\u7684\u5c0f\u72d7\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u521b\u5efa\u65e0\u6570\u6709\u4e0d\u540c\u7279\u5f81\u548c\u884c\u4e3a\u7684\u5c0f\u72d7\uff08\u8fd9\u4e00\u8fc7\u7a0b\u53c8\u79f0\u4e3a \u5b9e\u4f8b\u5316 \uff09 \u5bf9\u8c61\uff1a\u7c7b\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u901a\u8fc7\u7c7b\u521b\u5efa\u7684\u5b9e\u4f8b\uff08\u53c8\u79f0\u5bf9\u8c61\uff09\u624d\u80fd\u4f7f\u7528\u3002\u4f8b\u5982\u98de\u673a\u56fe\u7eb8\uff08\u7c7b\uff09\u672c\u8eab\u5e76\u4e0d\u80fd\u4f7f\u7528\uff0c\u4f46\u662f\u6309\u7167\u56fe\u7eb8\u521b\u5efa\u51fa\u7684\u98de\u673a\uff08\u5bf9\u8c61\uff09\u5c31\u53ef\u4ee5\u4f7f\u7528\u3002 \u5c5e\u6027\uff1a\u7c7b\u4e2d\u6240\u6709\u53d8\u91cf\u79f0\u4e3a\u5c5e\u6027\uff0c\u5982\u5c0f\u72d7\u7684\u989c\u8272\u3001\u91cd\u91cf\u3001\u540d\u5b57\u7b49\u7279\u5f81\u3002 \u65b9\u6cd5\uff1a\u7c7b\u4e2d\u6240\u6709\u51fd\u6570\u79f0\u4e3a\u65b9\u6cd5\u3002\u5982\u5c0f\u72d7\u4f1a\u53eb\u3001\u4f1a\u8df3\u3001\u4f1a\u7761\u89c9\u7684\u51fd\u6570\u3002\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u5c0f\u72d7\u505a\u51fa\u4e0d\u540c\u884c\u4e3a\u3002","title":"1.1 \u9762\u5411\u5bf9\u8c61\u76f8\u5173\u672f\u8bed"},{"location":"programming/python/class/#02","text":"\u7c7b\uff08\u82f1\u6587\u540d class \uff09\uff0c\u662f\u5177\u6709\u76f8\u540c\u7279\u6027\uff08\u5c5e\u6027\uff09\u548c\u884c\u4e3a\uff08\u65b9\u6cd5\uff09\u7684\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09\u7684\u62bd\u8c61\u6a21\u677f\u3002 \u7c7b\u4e0e\u5bf9\u8c61\u7684\u5173\u7cfb\u5c31\u5982\u6a21\u5177\u548c\u94f8\u4ef6\u7684\u5173\u7cfb\uff0c\u7c7b\u7684\u5b9e\u4f8b\u5316\u7684\u7ed3\u679c\u5c31\u662f\u5bf9\u8c61\uff0c\u800c\u5bf9\u8c61\u7684\u62bd\u8c61\u5c31\u662f\u7c7b\uff0c\u7c7b\u63cf\u8ff0\u4e86\u4e00\u7ec4\u6709\u76f8\u540c\u7279\u6027\uff08\u5c5e\u6027\uff09\u548c\u76f8\u540c\u884c\u4e3a\uff08\u65b9\u6cd5\uff09\u7684\u5bf9\u8c61\u3002","title":"02. \u7c7b\u7684\u5b9a\u4e49"},{"location":"programming/python/class/#21-class","text":"\u5728python\u4e2d\uff0c\u5b9a\u4e49\u7c7b\u4f7f\u7528 class \u5173\u952e\u5b57\u5b9e\u73b0\uff0c\u57fa\u672c\u8bed\u6cd5\u5982\u4e0b: class \u7c7b\u540d : \u591a\u4e2a \uff08 >= 0 \uff09 \u7c7b\u5c5e\u6027 \u591a\u4e2a \uff08 >= 0 \uff09 \u7c7b\u65b9\u6cd5 \u7c7b\u5c5e\u6027\uff1a\u5728\u7c7b\u4e2d\uff0c\u6240\u6709\u51fd\u6570\u4e4b\u5916\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u6210\u4e3a\u7c7b\u5c5e\u6027\u6216\u7c7b\u53d8\u91cf \u7c7b\u65b9\u6cd5\uff1a\u5728\u7c7b\u4e2d\uff0c\u5b9a\u4e49\u7684\u6240\u6709\u51fd\u6570\uff0c\u6210\u4e3a\u7c7b\u65b9\u6cd5 \ud83d\udca1 \u7c7b\u540d\u5e94\u4f7f\u7528\u5927\u9a7c\u5cf0\u547d\u540d\u65b9\u6cd5\uff0c\u5373\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5982`Student` \u3002\u5982\u679c\u6709\u591a\u4e2a\u5355\u8bcd\uff0c\u6bcf\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u9700\u8981\u5927\u5199\uff0c\u5982`MyFirstDemo` class MyFirstDemo : \"\"\"\u7c7b\u7684\u6ce8\u91ca\u6587\u6863\"\"\" age = 18 def __init__ ( self , name ): self . name = name def run ( self ): print ( f \" { self . name } \u8dd1\u8d77\u6765\u4e86\" )","title":"2.1 class \u5b9a\u4e49\u7c7b"},{"location":"programming/python/class/#22","text":"\u7c7b\u7684\u5b9e\u4f8b\u5316\u662f\u5c06\u5b9a\u4e49\u597d\u7684\u7c7b\u5b9a\u4e49\u7ed9\u4e00\u4e2a\u5bf9\u8c61\uff0c\u901a\u8fc7 \u5bf9\u8c61.\u7c7b\u65b9\u6cd5 \u6216 \u5bf9\u8c61.\u7c7b\u5c5e\u6027 \u7684\u65b9\u5f0f\u53ef\u4ee5\u8c03\u7528\u7c7b\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\u548c\u53d8\u91cf\u3002 \u5728\u5b9e\u4f8b\u5316\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u6784\u9020\u7684\u7c7b\u6ca1\u6709\u624b\u52a8\u6dfb\u52a0 __init__() \u51fd\u6570\uff0c\u53c8\u6216\u8005\u6dfb\u52a0\u7684 __init__() \u51fd\u6570\u4e2d\u9664\u4e86 self \u6ca1\u6709\u5176\u4ed6\u7684\u53c2\u6570\uff0c\u5219\u521b\u5efa\u5bf9\u8c61\u65f6\u7684\u53c2\u6570\u53ef\u4ee5\u7701\u7565\u4e0d\u5199 \u5982\u4e0b\u4ee3\u7801\u521b\u5efa\u4e86\u540d\u4e3a MyFirstDemo \u7684\u7c7b\uff0c\u5e76\u5bf9\u9f50\u8fdb\u884c\u4e86\u5b9e\u4f8b\u5316\uff1a class MyFirstDemo : \"\"\"\u7c7b\u7684\u6ce8\u91ca\u6587\u6863\"\"\" age = 18 def __init__ ( self , name ): self . name = name def run ( self ): print ( f \" { self . name } \u8dd1\u8d77\u6765\u4e86\" ) dog = MyFirstDemo ( name = \"\u65fa\u8d22\" ) \u5728\u5b9e\u4f8b\u5316\u8fc7\u7a0b\u4e2d\uff0c\u4f20\u53c2\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u7684\u4f4d\u7f6e\u4f20\u53c2\u3001\u5173\u952e\u5b57\u4f20\u53c2\u3002 self \u53c2\u6570python\u4f1a\u81ea\u52a8\u4f20\u9012\uff0c\u65e0\u9700\u4f20\u9012\u5b9e\u53c2\u3002","title":"2.2 \u7c7b\u7684\u5b9e\u4f8b\u5316"},{"location":"programming/python/class/#23","text":"\u5b9a\u4e49\u7684\u7c7b\u53ea\u6709\u8fdb\u884c\u5b9e\u4f8b\u5316\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u8be5\u7c7b\u521b\u5efa\u5bf9\u8c61\u4e4b\u540e\uff0c\u624d\u80fd\u4f7f\u7528\u3002\u5b9e\u4f8b\u5316\u540e\u7684\u7c7b\u5bf9\u8c61\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u8bbf\u95ee\u6216\u4fee\u6539\u7c7b\u5bf9\u8c61\u5177\u6709\u7684\u5b9e\u4f8b\u53d8\u91cf\uff0c\u751a\u81f3\u53ef\u4ee5\u6dfb\u52a0\u65b0\u7684\u5b9e\u4f8b\u53d8\u91cf\u6216\u5220\u9664\u5df2\u6709\u7684\u5b9e\u4f8b\u53d8\u91cf \u8c03\u7528\u7c7b\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u5305\u62ec\u8c03\u7528\u73b0\u6709\u7684\u65b9\u6cd5\uff0c\u4ee5\u53ca\u7ed9\u7c7b\u5bf9\u8c61\u52a8\u6001\u6dfb\u52a0\u65b9\u6cd5 \u4ee5\u4e0b\u4ee3\u7801\u6f14\u793a\u5c06 MyFirstDemo \u5b9e\u4f8b\u5316\u540e\uff0c\u8bbf\u95ee\u7c7b\u5bf9\u8c61\u7684\u5b9e\u4f8b\u53d8\u91cf class MyFirstDemo : \"\"\"\u7c7b\u7684\u6ce8\u91ca\u6587\u6863\"\"\" age = 18 def __init__ ( self , name ): self . name = name def run ( self ): print ( f \" { self . name } \u8dd1\u8d77\u6765\u4e86\" ) dog = MyFirstDemo ( name = \"\u65fa\u8d22\" ) print ( dog . age ) >>> 18 \u5c06\u7c7b\u5b9e\u4f8b\u5316\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 \u5b9e\u4f8b\u5bf9\u8c61.\u53d8\u91cf \u7684\u65b9\u5f0f\u4fee\u6539\u5b9e\u4f8b\u5bf9\u8c61\u7684\u503c dog . age = 21 print ( dog . age ) >>> 21 \u7ed9\u7c7b\u5bf9\u8c61\u52a8\u6001\u6dfb\u52a0/\u5220\u9664\u53d8\u91cf dog . whight = \"10\u65a4\" print ( dog . whight ) >>> 10 \u65a4 # \u4f7f\u7528del\u5173\u952e\u5b57\u53ef\u4ee5\u52a8\u6001\u5220\u9664\u7c7b\u5c5e\u6027 del dog . whight print ( dog . whight ) >>> AttributeError : 'MyFirstDemo' object has no attribute 'whight' \u7c7b\u5bf9\u8c61\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u5982\u679c\u65b9\u6cd5\u5185\u4ec5\u6709 self \u4e00\u4e2a\u53c2\u6570\uff0c\u5219\u4e0d\u9700\u8981\u4f20\u53c2 dog . run () >>> \u65fa\u8d22\u8dd1\u8d77\u6765\u4e86 \u7ed9\u7c7b\u5bf9\u8c61\u52a8\u6001\u6dfb\u52a0\u65b9\u6cd5 \u5148\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 def info ( self ): print ( \"\u8fd9\u662f\u65b0\u589e\u7684info\u65b9\u6cd5\" , self ) #\u4f7f\u7528info\u5bf9dog\u5bf9\u8c61\u7684foo\u65b9\u6cd5\u8d4b\u503c\uff08\u52a8\u6001\u7ed1\u5b9a\u65b9\u6cd5\uff09 dog . foo = info # python\u4e0d\u4f1a\u81ea\u52a8\u5c06\u8c03\u7528\u8005\u7ed1\u5b9a\u7b2c\u4e00\u53c2\u6570\uff0c\u5373\u4f7f\u4f20\u9012self\u53c2\u6570\u4e5f\u6ca1\u7528\u3002 dog . foo () >>> TypeError : info () missing 1 required positional argument : 'self' #\u8c03\u7528\u65f6\u9700\u8981\u4f20\u9012\u7c7b\u5bf9self\u8fdb\u884c\u7ed1\u5b9a dog . foo ( MyFirstDemo ) >>> \u8fd9\u662f\u65b0\u589e\u7684info\u65b9\u6cd5 < class ' __main__ . MyFirstDemo '>","title":"2.3 \u7c7b\u5bf9\u8c61\u7684\u4f7f\u7528"},{"location":"programming/python/class/#03","text":"","title":"03. \u5185\u7f6e\u65b9\u6cd5\u548c\u5c5e\u6027"},{"location":"programming/python/class/#31-self","text":"\ud83d\udca1 \u540c\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u4ea7\u751f\u591a\u4e2a\u5bf9\u8c61\uff0c\u5f53\u67d0\u4e2a\u5bf9\u8c61\u8c03\u7528\u7c7b\u65b9\u6cd5\u65f6\uff0c\u8be5\u5bf9\u8c61\u4f1a\u628a\u81ea\u8eab\u7684\u5f15\u7528\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u81ea\u52a8\u4f20\u7ed9\u8be5\u65b9\u6cd5\uff0cPython \u4f1a\u81ea\u52a8\u7ed1\u5b9a\u7c7b\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u6307\u5411\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u5bf9\u8c61\u3002\u5982\u6b64\uff0cPython\u89e3\u91ca\u5668\u5c31\u80fd\u77e5\u9053\u5230\u5e95\u8981\u64cd\u4f5c\u54ea\u4e2a\u5bf9\u8c61\u7684\u65b9\u6cd5\u4e86\u3002\u65e0\u8bba\u662f\u7c7b\u4e2d\u7684\u6784\u9020\u51fd\u6570\u8fd8\u662f\u666e\u901a\u7684\u7c7b\u65b9\u6cd5\uff0c\u5b9e\u9645\u8c03\u7528\u5b83\u4eec\u7684\u8c01\uff0c\u5219\u7b2c\u4e00\u4e2a\u53c2\u6570 self \u5c31\u4ee3\u8868\u8c01\u3002 \u5982\u679c\u628a\u7c7b\u6bd4\u4f5c\u9020\u623f\u5b50\u7684\u56fe\u7eb8\uff0c\u90a3\u4e48\u7c7b\u5b9e\u4f8b\u5316\u540e\u7684\u5bf9\u8c61\u662f\u771f\u6b63\u53ef\u4ee5\u4f4f\u7684\u623f\u5b50\u3002\u6839\u636e\u4e00\u5f20\u56fe\u7eb8\uff08\u7c7b\uff09\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u6210\u5343\u4e0a\u4e07\u7684\u623f\u5b50\uff08\u7c7b\u5bf9\u8c61\uff09\uff0c\u6bcf\u4e2a\u623f\u5b50\u957f\u76f8\u90fd\u662f\u7c7b\u4f3c\u7684\uff08\u90fd\u6709\u76f8\u540c\u7684\u7c7b\u53d8\u91cf\u548c\u7c7b\u65b9\u6cd5\uff09\uff0c\u4f46\u5b83\u4eec\u90fd\u6709\u5404\u81ea\u7684\u4e3b\u4eba\uff0c\u90a3\u4e48\u5982\u4f55\u5bf9\u5b83\u4eec\u8fdb\u884c\u533a\u5206\u5462\uff1f \u901a\u8fc7 self \u53c2\u6570\uff0c\u5b83\u5c31\u76f8\u5f53\u4e8e\u6bcf\u4e2a\u623f\u5b50\u7684\u95e8\u94a5\u5319\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u623f\u5b50\u7684\u4e3b\u4eba\u4ec5\u80fd\u8fdb\u5165\u81ea\u5df1\u7684\u623f\u5b50\uff08\u6bcf\u4e2a\u7c7b\u5bf9\u8c61\u53ea\u80fd\u8c03\u7528\u81ea\u5df1\u7684\u7c7b\u53d8\u91cf\u548c\u7c7b\u65b9\u6cd5\uff09\u3002 class Person : def __init__ ( self ): print ( \"\u6b63\u5728\u6267\u884c\u6784\u9020\u65b9\u6cd5\" ) # \u5b9a\u4e49\u4e00\u4e2astudy()\u5b9e\u4f8b\u65b9\u6cd5 def study ( self ): print ( self , \"\u6b63\u5728\u5b66\u4e60python\" ) zhangsan = Person () zhangsan . study () print ( \"--------\" ) lisi = Person () lisi . study () >>> \u6b63\u5728\u6267\u884c\u6784\u9020\u65b9\u6cd5 < __main__ . Person object at 0x7f806dfb3358 > \u6b63\u5728\u5b66\u4e60python -------- \u6b63\u5728\u6267\u884c\u6784\u9020\u65b9\u6cd5 < __main__ . Person object at 0x7f806dfb33c8 > \u6b63\u5728\u5b66\u4e60python \u4ee5\u4e0a\u7684\u4ee3\u7801\u4e2d\uff0cstudy\u4e2d\u7684 self \u4ee3\u8868\u8be5\u65b9\u6cd5\u7684\u8c03\u7528\u8005\uff0c\u5373\u8c01\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u90a3\u4e48 self \u5c31\u4ee3\u8868\u8c01\u3002","title":"3.1 self \u53c2\u6570"},{"location":"programming/python/class/#32-__init__","text":"\u5728\u521b\u5efa\u7c7b\u65f6\uff0c\u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0 __init__() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u7c7b\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u6210\u4e3a\u6784\u9020\u65b9\u6cd5\uff08\u6216\u6784\u9020\u51fd\u6570\u6216\u521d\u59cb\u5316\u65b9\u6cd5\uff09 \u6784\u9020\u65b9\u6cd5\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\u65f6\u4f7f\u7528\uff0c\u6bcf\u5f53\u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61\u65f6\uff0c\u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u8c03\u7528\u5b83\u3002\u521d\u59cb\u5316\u65b9\u6cd5\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a def __init__ ( self , * args ): \u4ee3\u7801\u5757 __init__ \u65b9\u6cd5\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u53c2\u6570\uff0c\u4f46\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u540d\u4e3a self \u7684\u53c2\u6570\uff0c\u4e14\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 class Person : def __init__ ( self ): print ( \"\u6b63\u5728\u6267\u884c\u6784\u9020\u65b9\u6cd5\" ) # \u5b9a\u4e49\u4e00\u4e2astudy()\u5b9e\u4f8b\u65b9\u6cd5 def study ( self ): print ( self , \"\u6b63\u5728\u5b66\u4e60python\" ) zhangsan = Person () >>> \u6b63\u5728\u6267\u884c\u6784\u9020\u65b9\u6cd5 \u6784\u9020\u51fd\u6570\u662f\u5728\u521b\u5efa\u7c7b\u5bf9\u8c61\u65f6\u5c31\u5f00\u59cb\u8fd0\u884c","title":"3.2 __init__ \u521d\u59cb\u5316\u65b9\u6cd5"},{"location":"programming/python/class/#33-__del__","text":"\u5728python\u4e2d\uff0c\u4ee5 \u7c7b\u578b() \u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u4e3a\u5bf9\u8c61\u5206\u914d\u5b8c\u7a7a\u95f4\u540e\uff0c\u81ea\u52a8\u8c03\u7528 __init__() \u65b9\u6cd5 \u5f53\u4e00\u4e2a\u5bf9\u8c61\u88ab\u4ece\u5185\u5b58\u4e2d\u9500\u6bc1\u524d\uff0c\u4f1a\u81ea\u52a8\u8c03\u7528 __del__() \u65b9\u6cd5 **__del__ \u65b9\u6cd5\u7684\u5e94\u7528\u573a\u666f** __init__ \u6539\u9020\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u521b\u5efa\u5bf9\u8c61\u66f4\u52a0\u7075\u6d3b __del__ \u5982\u679c\u5e0c\u671b\u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u524d\uff0c\u518d\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b __del__ \u65b9\u6cd5 \u7c7b\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f \u4e00\u4e2a\u5bf9\u8c61\u4ece\u8c03\u7528 \u7c7b\u540d() \u521b\u5efa\uff0c\u751f\u547d\u5468\u671f\u5f00\u59cb \u4e00\u4e2a\u5bf9\u8c61\u7684 __del__ \u65b9\u6cd5\u4e00\u65e6\u88ab\u8c03\u7528\uff0c\u751f\u547d\u5468\u671f\u7ed3\u675f \u5728\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u5185\uff0c\u53ef\u4ee5\u8bbf\u95ee\u5bf9\u8c61\u5c5e\u6027\uff0c\u6216\u8005\u8ba9\u5bf9\u8c61\u8c03\u7528\u65b9\u6cd5 class Person : age = 18 def __init__ ( self , name ): self . name = name print ( \" %s \u5f00\u59cb\u8fd0\u884c\" % self . name ) def __del__ ( self ): print ( \" %s \u8fd0\u884c\u7ed3\u675f\" % self . name ) zhangsan = Person ( \"\u5c0f\u660e\" ) print ( zhangsan . name ) print ( zhangsan . age ) >>> \u5c0f\u660e\u5f00\u59cb\u8fd0\u884c \u5c0f\u660e 18 \u5c0f\u660e\u8fd0\u884c\u7ed3\u675f","title":"3.3 __del__ \u65b9\u6cd5"},{"location":"programming/python/class/#34-__str__","text":"\u5728 Python \u4e2d\uff0c\u4f7f\u7528 print \u8f93\u51fa \u5bf9\u8c61\u53d8\u91cf \uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f1a\u8f93\u51fa\u8fd9\u4e2a\u53d8\u91cf \u5f15\u7528\u7684\u5bf9\u8c61 \u662f \u7531\u54ea\u4e00\u4e2a\u7c7b\u521b\u5efa\u7684\u5bf9\u8c61 \uff0c\u4ee5\u53ca \u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740 \uff08 \u5341\u516d\u8fdb\u5236\u8868\u793a \uff09 \u5982\u679c\u5728\u5f00\u53d1\u4e2d\uff0c\u5e0c\u671b\u4f7f\u7528 print \u8f93\u51fa \u5bf9\u8c61\u53d8\u91cf \u65f6\uff0c\u80fd\u591f\u6253\u5370 \u81ea\u5b9a\u4e49\u7684\u5185\u5bb9 \uff0c\u5c31\u53ef\u4ee5\u5229\u7528 __str__ \u8fd9\u4e2a\u5185\u7f6e\u65b9\u6cd5\u4e86 \u6ce8\u610f\uff1a str \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32 class Person : def __init__ ( self , name ): self . name = name print ( \" %s \u5f00\u59cb\u8fd0\u884c\" % self . name ) def __del__ ( self ): print ( \" %s \u8fd0\u884c\u7ed3\u675f\" % self . name ) def __str__ ( self ): return \"\u5927\u5bb6\u597d\uff0c\u6211\u53eb %s \" % self . name xiaoming = Person ( \"\u5c0f\u660e\" ) print ( xiaoming ) >>> \u5c0f\u660e\u5f00\u59cb\u8fd0\u884c \u5927\u5bb6\u597d \uff0c \u6211\u53eb\u5c0f\u660e \u5c0f\u660e\u8fd0\u884c\u7ed3\u675f","title":"3.4 __str__ \u65b9\u6cd5"},{"location":"programming/python/cycle/","text":"01. while \u5faa\u73af\u7684\u57fa\u7840\u4f7f\u7528 \u5faa\u73af\u7684\u4f5c\u7528\u5c31\u662f\u8ba9 \u6307\u5b9a\u7684\u4ee3\u7801 \u91cd\u590d\u7684\u6267\u884c while \u5faa\u73af\u6700\u5e38\u7528\u7684\u5e94\u7528\u573a\u666f\u5c31\u662f \u8ba9\u6267\u884c\u7684\u4ee3\u7801 \u6309\u7167 \u6307\u5b9a\u7684\u6b21\u6570 \u91cd\u590d \u6267\u884c # \u5b9a\u4e49\u8ba1\u6570\u5668 a = 0 # \u5b9a\u4e49\u8bb0\u5f55\u6700\u7ec8\u7ed3\u679c\u7684\u53d8\u91cf result = 0 while a <= 100 : result += a a += 1 print ( result ) >>> 5050 02. for \u5faa\u73af\u7684\u57fa\u7840\u4f7f\u7528 2.1 for\u5faa\u73af\u5b9a\u4e49\u548c\u8bed\u6cd5 for \u5faa\u73af\u7528\u4e8e\u904d\u5386\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002\u5982\u5b57\u7b26\u4e32\u3001\u5143\u7ec4\u3001\u5217\u8868\u3001\u5b57\u5178\u3001\u96c6\u5408\uff1b \u9010\u4e2a\u83b7\u53d6\u5e8f\u5217\u4e2d\u7684\u5404\u4e2a\u5143\u7d20\uff1b # for \u5faa\u73af\u7684\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a for \u8fed\u4ee3\u904d\u5386 in \u5e8f\u5217 \uff1a \u4ee3\u7801\u5757 \u8bed\u6cd5\u683c\u5f0f\u4e2d\uff0c\u8fed\u4ee3\u53d8\u91cf\u7528\u4e8e\u5b58\u653e\u4ece\u5e8f\u5217\u53d8\u91cf\u4e2d\u8bfb\u53d6\u7684\u5143\u7d20\u3002 2.2 \u904d\u5386\u5b57\u7b26\u4e32 url = \"https://www.baidu.com\" for i in url : print ( i , end = \"\" ) >>> https : // www . baidu . com \u5b9e\u4f8b\u4e2d\uff0c\u8fed\u4ee3\u53d8\u91cf\u4f9d\u6b21\u63a5\u53d7 url \u53d8\u91cf\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5e76\u5b58\u5165\u8fed\u4ee3\u904d\u5386 i \u4e2d\u3002 end=\u201d\u201d \u8868\u793a\u4e0d\u6362\u884c\u5c55\u793a\u3002 2.3 \u904d\u5386\u5217\u8868\u548c\u5143\u7ec4 # \u904d\u5386\u5143\u7ec4 tup = ( \"\u5c0f\u660e\" , 18 , \"boy\" ) for i in tup : print ( i ) >>> \u5c0f\u660e 18 boy # \u904d\u5386\u5217\u8868 list1 = [ \"\u5c0f\u660e\" , 18 , \"boy\" ] for i in list1 : print ( i ) >>> \u5c0f\u660e 18 boy 2.4 \u904d\u5386\u5b57\u5178\u548c\u96c6\u5408 \u904d\u5386\u5b57\u5178\u6709\u4e09\u79cd\u65b9\u5f0f\uff0c\u5206\u522b\u4e3a keys() values() items() dict1 = { \"name\" : \"\u5c0f\u660e\" , \"age\" : 18 , \"\u8eab\u9ad8\" : 1.75 } for i in dict1 . keys (): print ( i ) >>> name age \u8eab\u9ad8 \u904d\u5386\u5b57\u5178\u672c\u8eab\u5c31\u662f\u904d\u5386\u5b57\u5178\u7684key\u3002\u6240\u4ee5\u5982\u679c\u53ea\u60f3\u83b7\u53d6\u5b57\u5178\u7684key\uff0c\u53ef\u4ee5\u76f4\u63a5\u904d\u5386\u5b57\u5178\u53d8\u91cf\u540d\uff0c\u6216\u8005\u901a\u8fc7\u4e0a\u8ff0\u5b9e\u4f8b\uff0c\u4f7f\u7528\u5b57\u5178\u7684 keys() \u65b9\u6cd5\u3002 dict1 = { \"name\" : \"\u5c0f\u660e\" , \"age\" : 18 , \"\u8eab\u9ad8\" : 1.75 } for i in dict1 . items (): print ( i ) >>> ( 'name' , '\u5c0f\u660e' ) ( 'age' , 18 ) ( '\u8eab\u9ad8' , 1.75 ) items() \u65b9\u6cd5\u662f\u904d\u5386\u5b57\u5178\u952e\u503c\u5bf9\u3002\u8fd4\u56de\u662f\u5143\u7ec4\u3002 dict1 = { \"name\" : \"\u5c0f\u660e\" , \"age\" : 18 , \"\u8eab\u9ad8\" : 1.75 } for i in dict1 . values (): print ( i ) >>> \u5c0f\u660e 18 1.75 values() \u65b9\u6cd5\u662f\u904d\u5386\u5b57\u5178\u7684\u503c 03 .break \u8df3\u51fa\u5faa\u73af \u901a\u8fc7 break \u8bed\u53e5\u53ef\u4ee5\u4f7f\u5faa\u73af\u4f53\u5728\u904d\u5386\u6240\u6709\u9879\u76ee\u4e4b\u524d\u8df3\u51fa\u5faa\u73af\u4f53\uff0c\u7ec8\u6b62\u5faa\u73af\u3002 a = [ 1 , 2 , 3 ] for i in a : if i == 2 : break print ( i ) >> 1 04. continue \u8df3\u8fc7\u5f53\u524d\uff0c\u8fdb\u5165\u4e0b\u4e00\u6b21\u5faa\u73af continue \u8bed\u53e5\u53ef\u4ee5\u662f\u5faa\u73af\u4f53\u5728\u904d\u5386\u4e2d\uff0c\u8df3\u8fc7\u67d0\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fdb\u884c\u4e0b\u4e00\u6b21\u5faa\u73af\u3002\u6bd4\u5982\u4ece1\u6570\u52305\uff0c\u5f53\u6570\u52303\u65f6\u8df3\u8fc7\u3002 for i in range ( 6 ): if i == 3 : continue print ( i ) >>> 0 1 2 4 5 05. \u5faa\u73af\u4e2d\u7684else\u8bed\u53e5 \u5faa\u73af\u4e2d\u7684else\u5b57\u53e5\uff0c\u5728\u7a77\u5c3d\u5e8f\u5217\uff08for\u5faa\u73af\uff09\u6216\u6761\u4ef6\u53d8\u4e3afalse\uff08while\u5faa\u73af\uff09\u5bfc\u81f4\u5faa\u73af\u7ec8\u6b62\u65f6\u88ab\u6267\u884c\uff0c\u4f46\u5faa\u73af\u88abbreak\u7ec8\u6b62\u65f6\uff0c\u4e0d\u4f1a\u6267\u884c\u3002 for n in range ( 2 , 10 ): for x in range ( 2 , n ): if n % x == 0 : print ( n , '\u7b49\u4e8e' , x , '*' , n // x ) break else : # \u5faa\u73af\u4e2d\u6ca1\u6709\u627e\u5230\u5143\u7d20 print ( n , ' \u662f\u8d28\u6570' ) >>> 2 \u662f\u8d28\u6570 3 \u662f\u8d28\u6570 4 \u7b49\u4e8e 2 * 2 5 \u662f\u8d28\u6570 6 \u7b49\u4e8e 2 * 3 7 \u662f\u8d28\u6570 8 \u7b49\u4e8e 2 * 4 9 \u7b49\u4e8e 3 * 3 06. \u6807\u5fd7\u4f5c\u4e3a\u5faa\u73af\u6761\u4ef6 6.1 \u6807\u5fd7 \u5c06\u53d8\u91cf\u76f4\u63a5\u4f5c\u4e3a\u5faa\u73af\u6761\u4ef6 \u5f53\u53d8\u91cf\u6761\u4ef6\u4e3aFalse\u65f6\u9000\u51fa\u5faa\u73af\u3002\u4ee5\u4fdd\u6301\u7a0b\u5e8f\u5faa\u73af\u6301\u7eed\u8fdb\u884c\u3002 a = True while a : ms_a = input ( \"\u8bf7\u8f93\u5165\u4fe1\u606f\uff0c\u8f93\u5165quit\u9000\u51fa\uff1a\" ) if ms_a == \"quit\" : break else : print ( ms_a ) print ( \"\u5faa\u73af\u7ed3\u675f\" ) >>> ms_a = \"hello boy\" hello boy ms_a = \"quit\" \u5faa\u73af\u7ed3\u675f 6.2 while True \u4f7f\u7528 while True \u5c06\u4f7f\u7a0b\u5e8f\u6301\u7eed\u5faa\u73af\uff0c\u76f4\u5230\u9047\u5230 break \u624d\u4f1a\u7ec8\u6b62 while True : ms = input ( \"\u8bf7\u8f93\u5165\u4fe1\u606f\uff0c\u8f93\u51650\u9000\u51fa\uff1a\" ) if ms == \"0\" : break else : print ( ms ) print ( \"\u5faa\u73af\u7ed3\u675f\" ) >>> ms = \"hello\" hello ms = \"0\" \u5faa\u73af\u7ed3\u675f 07. range\u51fd\u6570 7.1 range \u51fd\u6570\u8bed\u6cd5 range\u51fd\u6570\u751f\u6210\u4e00\u7cfb\u5217\u6570\u5b57\u3002\u9ed8\u8ba4\u4ece0\u5f00\u59cb \u5982\u679c\u6307\u5b9a\u8303\u56f4\uff0c\u751f\u6210\u7684\u6570\u5b57\u662f\u5de6\u95ed\u53f3\u5f00\u7684\uff0c\u5982\u8981range(1,4)\u3002\u4e0d\u5305\u542b4 for i in range ( 3 ): print ( i , end = \",\" ) >>> 0 , 1 , 2 for i in range ( 1 , 4 ): print ( i , end = \",\" ) >>> 1 , 2 , 3 7.2 range\u5207\u7247 \u53ef\u4ee5\u6307\u5b9a\u6b65\u957f\uff0c\u8bbe\u7f6e\u6307\u5b9a\u6570\u5b57 for i in range ( 1 , 10 , 2 ): print ( i , end = \",\" ) >>> 1 , 3 , 5 , 7 , 9 , 7.3 range\u5217\u8868 range\u51fd\u6570\u8fd4\u56de\u4e0d\u662f\u5217\u8868\u3002\u5982\u679c\u8981\u5c06\u53d6\u503c\u8f6c\u6362\u4e3a\u5217\u8868\uff0c\u53ef\u4ee5\u4f7f\u7528 list() \u51fd\u6570\uff1a list1 = list ( range ( 2 , 11 , 2 )) print ( list1 ) >>> [ 2 , 4 , 6 , 8 , 10 ] 08. \u5faa\u73af\u5d4c\u5957 \u5f53 2 \u4e2a\uff08\u751a\u81f3\u591a\u4e2a\uff09\u5faa\u73af\u7ed3\u6784\u76f8\u4e92\u5d4c\u5957\u65f6\uff0c\u4f4d\u4e8e\u5916\u5c42\u7684\u5faa\u73af\u7ed3\u6784\u5e38\u7b80\u79f0\u4e3a \u5916\u5c42\u5faa\u73af \u6216 \u5916\u5faa\u73af \uff0c\u4f4d\u4e8e\u5185\u5c42\u7684\u5faa\u73af\u7ed3\u6784\u5e38\u7b80\u79f0\u4e3a \u5185\u5c42\u5faa\u73af \u6216 \u5185\u5faa\u73af \u3002 \u5faa\u73af\u5d4c\u5957\u7ed3\u6784\u7684\u4ee3\u7801\uff0cPython \u89e3\u91ca\u5668\u6267\u884c\u7684\u6d41\u7a0b\u4e3a\uff1a \u5f53\u5916\u5c42\u5faa\u73af\u6761\u4ef6\u4e3a True \u65f6\uff0c\u5219\u6267\u884c\u5916\u5c42\u5faa\u73af\u7ed3\u6784\u4e2d\u7684\u5faa\u73af\u4f53\uff1b \u5916\u5c42\u5faa\u73af\u4f53\u4e2d\u5305\u542b\u4e86\u666e\u901a\u7a0b\u5e8f\u548c\u5185\u5faa\u73af\uff0c\u5f53\u5185\u5c42\u5faa\u73af\u7684\u5faa\u73af\u6761\u4ef6\u4e3a True \u65f6\u4f1a\u6267\u884c\u6b64\u5faa\u73af\u4e2d\u7684\u5faa\u73af\u4f53\uff0c\u76f4\u5230\u5185\u5c42\u5faa\u73af\u6761\u4ef6\u4e3a False\uff0c\u8df3\u51fa\u5185\u5faa\u73af\uff1b \u5982\u679c\u6b64\u65f6\u5916\u5c42\u5faa\u73af\u7684\u6761\u4ef6\u4ecd\u4e3a True\uff0c\u5219\u8fd4\u56de\u7b2c 2 \u6b65\uff0c\u7ee7\u7eed\u6267\u884c\u5916\u5c42\u5faa\u73af\u4f53\uff0c\u76f4\u5230\u5916\u5c42\u5faa\u73af\u7684\u5faa\u73af\u6761\u4ef6\u4e3a False\uff1b \u5f53\u5185\u5c42\u5faa\u73af\u7684\u5faa\u73af\u6761\u4ef6\u4e3a False\uff0c\u4e14\u5916\u5c42\u5faa\u73af\u7684\u5faa\u73af\u6761\u4ef6\u4e5f\u4e3a False\uff0c\u5219\u6574\u4e2a\u5d4c\u5957\u5faa\u73af\u624d\u7b97\u6267\u884c\u5b8c\u6bd5\u3002 adj = [ \"red\" , \"big\" , \"tasty\" ] fruits = [ \"apple\" , \"banana\" , \"cherry\" ] for x in adj : for y in fruits : print ( x , y ) # \u4ee5\u4e0a\u793a\u4f8b\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a red apple red banana red cherry big apple big banana big cherry tasty apple tasty banana tasty cherry","title":"\u5faa\u73af"},{"location":"programming/python/cycle/#01-while","text":"\u5faa\u73af\u7684\u4f5c\u7528\u5c31\u662f\u8ba9 \u6307\u5b9a\u7684\u4ee3\u7801 \u91cd\u590d\u7684\u6267\u884c while \u5faa\u73af\u6700\u5e38\u7528\u7684\u5e94\u7528\u573a\u666f\u5c31\u662f \u8ba9\u6267\u884c\u7684\u4ee3\u7801 \u6309\u7167 \u6307\u5b9a\u7684\u6b21\u6570 \u91cd\u590d \u6267\u884c # \u5b9a\u4e49\u8ba1\u6570\u5668 a = 0 # \u5b9a\u4e49\u8bb0\u5f55\u6700\u7ec8\u7ed3\u679c\u7684\u53d8\u91cf result = 0 while a <= 100 : result += a a += 1 print ( result ) >>> 5050","title":"01. while \u5faa\u73af\u7684\u57fa\u7840\u4f7f\u7528"},{"location":"programming/python/cycle/#02-for","text":"","title":"02. for \u5faa\u73af\u7684\u57fa\u7840\u4f7f\u7528"},{"location":"programming/python/cycle/#21-for","text":"for \u5faa\u73af\u7528\u4e8e\u904d\u5386\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002\u5982\u5b57\u7b26\u4e32\u3001\u5143\u7ec4\u3001\u5217\u8868\u3001\u5b57\u5178\u3001\u96c6\u5408\uff1b \u9010\u4e2a\u83b7\u53d6\u5e8f\u5217\u4e2d\u7684\u5404\u4e2a\u5143\u7d20\uff1b # for \u5faa\u73af\u7684\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a for \u8fed\u4ee3\u904d\u5386 in \u5e8f\u5217 \uff1a \u4ee3\u7801\u5757 \u8bed\u6cd5\u683c\u5f0f\u4e2d\uff0c\u8fed\u4ee3\u53d8\u91cf\u7528\u4e8e\u5b58\u653e\u4ece\u5e8f\u5217\u53d8\u91cf\u4e2d\u8bfb\u53d6\u7684\u5143\u7d20\u3002","title":"2.1 for\u5faa\u73af\u5b9a\u4e49\u548c\u8bed\u6cd5"},{"location":"programming/python/cycle/#22","text":"url = \"https://www.baidu.com\" for i in url : print ( i , end = \"\" ) >>> https : // www . baidu . com \u5b9e\u4f8b\u4e2d\uff0c\u8fed\u4ee3\u53d8\u91cf\u4f9d\u6b21\u63a5\u53d7 url \u53d8\u91cf\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5e76\u5b58\u5165\u8fed\u4ee3\u904d\u5386 i \u4e2d\u3002 end=\u201d\u201d \u8868\u793a\u4e0d\u6362\u884c\u5c55\u793a\u3002","title":"2.2 \u904d\u5386\u5b57\u7b26\u4e32"},{"location":"programming/python/cycle/#23","text":"# \u904d\u5386\u5143\u7ec4 tup = ( \"\u5c0f\u660e\" , 18 , \"boy\" ) for i in tup : print ( i ) >>> \u5c0f\u660e 18 boy # \u904d\u5386\u5217\u8868 list1 = [ \"\u5c0f\u660e\" , 18 , \"boy\" ] for i in list1 : print ( i ) >>> \u5c0f\u660e 18 boy","title":"2.3 \u904d\u5386\u5217\u8868\u548c\u5143\u7ec4"},{"location":"programming/python/cycle/#24","text":"\u904d\u5386\u5b57\u5178\u6709\u4e09\u79cd\u65b9\u5f0f\uff0c\u5206\u522b\u4e3a keys() values() items() dict1 = { \"name\" : \"\u5c0f\u660e\" , \"age\" : 18 , \"\u8eab\u9ad8\" : 1.75 } for i in dict1 . keys (): print ( i ) >>> name age \u8eab\u9ad8 \u904d\u5386\u5b57\u5178\u672c\u8eab\u5c31\u662f\u904d\u5386\u5b57\u5178\u7684key\u3002\u6240\u4ee5\u5982\u679c\u53ea\u60f3\u83b7\u53d6\u5b57\u5178\u7684key\uff0c\u53ef\u4ee5\u76f4\u63a5\u904d\u5386\u5b57\u5178\u53d8\u91cf\u540d\uff0c\u6216\u8005\u901a\u8fc7\u4e0a\u8ff0\u5b9e\u4f8b\uff0c\u4f7f\u7528\u5b57\u5178\u7684 keys() \u65b9\u6cd5\u3002 dict1 = { \"name\" : \"\u5c0f\u660e\" , \"age\" : 18 , \"\u8eab\u9ad8\" : 1.75 } for i in dict1 . items (): print ( i ) >>> ( 'name' , '\u5c0f\u660e' ) ( 'age' , 18 ) ( '\u8eab\u9ad8' , 1.75 ) items() \u65b9\u6cd5\u662f\u904d\u5386\u5b57\u5178\u952e\u503c\u5bf9\u3002\u8fd4\u56de\u662f\u5143\u7ec4\u3002 dict1 = { \"name\" : \"\u5c0f\u660e\" , \"age\" : 18 , \"\u8eab\u9ad8\" : 1.75 } for i in dict1 . values (): print ( i ) >>> \u5c0f\u660e 18 1.75 values() \u65b9\u6cd5\u662f\u904d\u5386\u5b57\u5178\u7684\u503c","title":"2.4 \u904d\u5386\u5b57\u5178\u548c\u96c6\u5408"},{"location":"programming/python/cycle/#03-break","text":"\u901a\u8fc7 break \u8bed\u53e5\u53ef\u4ee5\u4f7f\u5faa\u73af\u4f53\u5728\u904d\u5386\u6240\u6709\u9879\u76ee\u4e4b\u524d\u8df3\u51fa\u5faa\u73af\u4f53\uff0c\u7ec8\u6b62\u5faa\u73af\u3002 a = [ 1 , 2 , 3 ] for i in a : if i == 2 : break print ( i ) >> 1","title":"03 .break \u8df3\u51fa\u5faa\u73af"},{"location":"programming/python/cycle/#04-continue","text":"continue \u8bed\u53e5\u53ef\u4ee5\u662f\u5faa\u73af\u4f53\u5728\u904d\u5386\u4e2d\uff0c\u8df3\u8fc7\u67d0\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fdb\u884c\u4e0b\u4e00\u6b21\u5faa\u73af\u3002\u6bd4\u5982\u4ece1\u6570\u52305\uff0c\u5f53\u6570\u52303\u65f6\u8df3\u8fc7\u3002 for i in range ( 6 ): if i == 3 : continue print ( i ) >>> 0 1 2 4 5","title":"04. continue \u8df3\u8fc7\u5f53\u524d\uff0c\u8fdb\u5165\u4e0b\u4e00\u6b21\u5faa\u73af"},{"location":"programming/python/cycle/#05-else","text":"\u5faa\u73af\u4e2d\u7684else\u5b57\u53e5\uff0c\u5728\u7a77\u5c3d\u5e8f\u5217\uff08for\u5faa\u73af\uff09\u6216\u6761\u4ef6\u53d8\u4e3afalse\uff08while\u5faa\u73af\uff09\u5bfc\u81f4\u5faa\u73af\u7ec8\u6b62\u65f6\u88ab\u6267\u884c\uff0c\u4f46\u5faa\u73af\u88abbreak\u7ec8\u6b62\u65f6\uff0c\u4e0d\u4f1a\u6267\u884c\u3002 for n in range ( 2 , 10 ): for x in range ( 2 , n ): if n % x == 0 : print ( n , '\u7b49\u4e8e' , x , '*' , n // x ) break else : # \u5faa\u73af\u4e2d\u6ca1\u6709\u627e\u5230\u5143\u7d20 print ( n , ' \u662f\u8d28\u6570' ) >>> 2 \u662f\u8d28\u6570 3 \u662f\u8d28\u6570 4 \u7b49\u4e8e 2 * 2 5 \u662f\u8d28\u6570 6 \u7b49\u4e8e 2 * 3 7 \u662f\u8d28\u6570 8 \u7b49\u4e8e 2 * 4 9 \u7b49\u4e8e 3 * 3","title":"05. \u5faa\u73af\u4e2d\u7684else\u8bed\u53e5"},{"location":"programming/python/cycle/#06","text":"","title":"06. \u6807\u5fd7\u4f5c\u4e3a\u5faa\u73af\u6761\u4ef6"},{"location":"programming/python/cycle/#61","text":"\u5c06\u53d8\u91cf\u76f4\u63a5\u4f5c\u4e3a\u5faa\u73af\u6761\u4ef6 \u5f53\u53d8\u91cf\u6761\u4ef6\u4e3aFalse\u65f6\u9000\u51fa\u5faa\u73af\u3002\u4ee5\u4fdd\u6301\u7a0b\u5e8f\u5faa\u73af\u6301\u7eed\u8fdb\u884c\u3002 a = True while a : ms_a = input ( \"\u8bf7\u8f93\u5165\u4fe1\u606f\uff0c\u8f93\u5165quit\u9000\u51fa\uff1a\" ) if ms_a == \"quit\" : break else : print ( ms_a ) print ( \"\u5faa\u73af\u7ed3\u675f\" ) >>> ms_a = \"hello boy\" hello boy ms_a = \"quit\" \u5faa\u73af\u7ed3\u675f","title":"6.1  \u6807\u5fd7"},{"location":"programming/python/cycle/#62-while-true","text":"\u4f7f\u7528 while True \u5c06\u4f7f\u7a0b\u5e8f\u6301\u7eed\u5faa\u73af\uff0c\u76f4\u5230\u9047\u5230 break \u624d\u4f1a\u7ec8\u6b62 while True : ms = input ( \"\u8bf7\u8f93\u5165\u4fe1\u606f\uff0c\u8f93\u51650\u9000\u51fa\uff1a\" ) if ms == \"0\" : break else : print ( ms ) print ( \"\u5faa\u73af\u7ed3\u675f\" ) >>> ms = \"hello\" hello ms = \"0\" \u5faa\u73af\u7ed3\u675f","title":"6.2 while True"},{"location":"programming/python/cycle/#07-range","text":"","title":"07. range\u51fd\u6570"},{"location":"programming/python/cycle/#71-range","text":"range\u51fd\u6570\u751f\u6210\u4e00\u7cfb\u5217\u6570\u5b57\u3002\u9ed8\u8ba4\u4ece0\u5f00\u59cb \u5982\u679c\u6307\u5b9a\u8303\u56f4\uff0c\u751f\u6210\u7684\u6570\u5b57\u662f\u5de6\u95ed\u53f3\u5f00\u7684\uff0c\u5982\u8981range(1,4)\u3002\u4e0d\u5305\u542b4 for i in range ( 3 ): print ( i , end = \",\" ) >>> 0 , 1 , 2 for i in range ( 1 , 4 ): print ( i , end = \",\" ) >>> 1 , 2 , 3","title":"7.1 range \u51fd\u6570\u8bed\u6cd5"},{"location":"programming/python/cycle/#72-range","text":"\u53ef\u4ee5\u6307\u5b9a\u6b65\u957f\uff0c\u8bbe\u7f6e\u6307\u5b9a\u6570\u5b57 for i in range ( 1 , 10 , 2 ): print ( i , end = \",\" ) >>> 1 , 3 , 5 , 7 , 9 ,","title":"7.2 range\u5207\u7247"},{"location":"programming/python/cycle/#73-range","text":"range\u51fd\u6570\u8fd4\u56de\u4e0d\u662f\u5217\u8868\u3002\u5982\u679c\u8981\u5c06\u53d6\u503c\u8f6c\u6362\u4e3a\u5217\u8868\uff0c\u53ef\u4ee5\u4f7f\u7528 list() \u51fd\u6570\uff1a list1 = list ( range ( 2 , 11 , 2 )) print ( list1 ) >>> [ 2 , 4 , 6 , 8 , 10 ]","title":"7.3 range\u5217\u8868"},{"location":"programming/python/cycle/#08","text":"\u5f53 2 \u4e2a\uff08\u751a\u81f3\u591a\u4e2a\uff09\u5faa\u73af\u7ed3\u6784\u76f8\u4e92\u5d4c\u5957\u65f6\uff0c\u4f4d\u4e8e\u5916\u5c42\u7684\u5faa\u73af\u7ed3\u6784\u5e38\u7b80\u79f0\u4e3a \u5916\u5c42\u5faa\u73af \u6216 \u5916\u5faa\u73af \uff0c\u4f4d\u4e8e\u5185\u5c42\u7684\u5faa\u73af\u7ed3\u6784\u5e38\u7b80\u79f0\u4e3a \u5185\u5c42\u5faa\u73af \u6216 \u5185\u5faa\u73af \u3002 \u5faa\u73af\u5d4c\u5957\u7ed3\u6784\u7684\u4ee3\u7801\uff0cPython \u89e3\u91ca\u5668\u6267\u884c\u7684\u6d41\u7a0b\u4e3a\uff1a \u5f53\u5916\u5c42\u5faa\u73af\u6761\u4ef6\u4e3a True \u65f6\uff0c\u5219\u6267\u884c\u5916\u5c42\u5faa\u73af\u7ed3\u6784\u4e2d\u7684\u5faa\u73af\u4f53\uff1b \u5916\u5c42\u5faa\u73af\u4f53\u4e2d\u5305\u542b\u4e86\u666e\u901a\u7a0b\u5e8f\u548c\u5185\u5faa\u73af\uff0c\u5f53\u5185\u5c42\u5faa\u73af\u7684\u5faa\u73af\u6761\u4ef6\u4e3a True \u65f6\u4f1a\u6267\u884c\u6b64\u5faa\u73af\u4e2d\u7684\u5faa\u73af\u4f53\uff0c\u76f4\u5230\u5185\u5c42\u5faa\u73af\u6761\u4ef6\u4e3a False\uff0c\u8df3\u51fa\u5185\u5faa\u73af\uff1b \u5982\u679c\u6b64\u65f6\u5916\u5c42\u5faa\u73af\u7684\u6761\u4ef6\u4ecd\u4e3a True\uff0c\u5219\u8fd4\u56de\u7b2c 2 \u6b65\uff0c\u7ee7\u7eed\u6267\u884c\u5916\u5c42\u5faa\u73af\u4f53\uff0c\u76f4\u5230\u5916\u5c42\u5faa\u73af\u7684\u5faa\u73af\u6761\u4ef6\u4e3a False\uff1b \u5f53\u5185\u5c42\u5faa\u73af\u7684\u5faa\u73af\u6761\u4ef6\u4e3a False\uff0c\u4e14\u5916\u5c42\u5faa\u73af\u7684\u5faa\u73af\u6761\u4ef6\u4e5f\u4e3a False\uff0c\u5219\u6574\u4e2a\u5d4c\u5957\u5faa\u73af\u624d\u7b97\u6267\u884c\u5b8c\u6bd5\u3002 adj = [ \"red\" , \"big\" , \"tasty\" ] fruits = [ \"apple\" , \"banana\" , \"cherry\" ] for x in adj : for y in fruits : print ( x , y ) # \u4ee5\u4e0a\u793a\u4f8b\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a red apple red banana red cherry big apple big banana big cherry tasty apple tasty banana tasty cherry","title":"08. \u5faa\u73af\u5d4c\u5957"},{"location":"programming/python/decorator/","text":"01. \u88c5\u9970\u5668\u7684\u5b9a\u4e49\u548c\u8bed\u6cd5 \u88c5\u9970\u5668\u672c\u8d28\u662f\u4e00\u4e2a\u51fd\u6570\u3002\u5b83\u53ef\u4ee5\u8ba9\u5176\u4ed6\u51fd\u6570\u5728\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u4ee3\u7801\u53d8\u52a8\u7684\u524d\u63d0\u4e0b\u589e\u52a0\u989d\u5916\u529f\u80fd\uff0c\u88c5\u9970\u5668\u7684\u8fd4\u56de\u503c\u4e5f\u662f\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u3002 \u5b83\u7ecf\u5e38\u7528\u4e8e\u6709\u5207\u9762\u9700\u6c42\u7684\u573a\u666f\uff0c\u6bd4\u5982\uff1a\u63d2\u5165\u65e5\u5fd7\u3001\u6027\u80fd\u6d4b\u8bd5\u3001\u4e8b\u52a1\u5904\u7406\u3001\u7f13\u5b58\u3001\u6743\u9650\u6821\u9a8c\u7b49\u573a\u666f\u3002 \u88c5\u9970\u5668\u7684\u8bed\u6cd5\u5f88\u56fa\u5b9a\uff0c\u5982\u4e0b\uff1a \u5148\u5b9a\u4e49\u4e00\u4e2a\u88c5\u9970\u5668\uff08\u5e3d\u5b50\uff09 \u518d\u5b9a\u4e49\u4e1a\u52a1\u51fd\u6570\u6216\u7c7b\uff08\u4eba\uff09 \u6700\u540e\u628a\u88c5\u9970\u5668\uff08\u5e3d\u5b50\uff09\u6263\u5728\u51fd\u6570\u6216\u7c7b\uff08\u4eba\uff09\u7684\u5934\u4e0a\u3002 # \u5b9a\u4e49\u88c5\u9970\u5668 def decorator ( func ): def wrapper ( * args , ** kwargs ): return func () return wrapper () # \u5b9a\u4e49\u4e1a\u52a1\u51fd\u6570\u5e76\u88c5\u9970 @decorator def function (): print ( \"hello decorator\" ) 02. \u666e\u901a\u88c5\u9970\u5668 \u4ee5\u4e0b\u5b9e\u4f8b\u6f14\u793a\u4e00\u4e2a\u666e\u901a\u7684\u88c5\u9970\u5668\uff0c\u6ee1\u8db3\u7684\u9700\u6c42\u662f\uff1a \u5728\u51fd\u6570\u6267\u884c\u524d\uff0c\u5148\u8bb0\u5f55\u4e00\u884c\u65e5\u5fd7 \u5728\u51fd\u6570\u6267\u884c\u540e\uff0c\u518d\u8bb0\u5f55\u4e00\u884c\u65e5\u5fd7 # \u5b9a\u4e49\u88c5\u9970\u5668\uff0c\u53c2\u6570func\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570 def decorator ( func ): def wrapper ( * args , ** kwargs ): print ( \" {} \u51fd\u6570\u8fd0\u884c\u524d\u7684\u65e5\u5fd7\uff0c\u6211\u8981\u5f00\u59cb\u6267\u884c\u4e86\" . format ( func . __name__ )) func ( * args , ** kwargs ) # func()\u8868\u793a\u51fd\u6570\u6267\u884c\uff0c\u771f\u6b63\u6267\u884c\u7684\u4e1a\u52a1\u51fd\u6570\u4e5f\u662f\u8fd9\u53e5\u4ee3\u7801 print ( \" {} \u51fd\u6570\u6267\u884c\u540e\u7684\u65e5\u5fd7\uff0c\u6211\u6267\u884c\u7ed3\u675f\u4e86\" . format ( func . __name__ )) return wrapper \u5047\u5982\u6211\u7684\u4e1a\u52a1\u51fd\u6570\u662f\uff0c\u8ba1\u7b97\u4e24\u4e2a\u6570\u5b57\u4e4b\u548c\u3002\u518d\u5b9a\u4e49\u51fd\u6570\u524d\u52a0\u4e0a\u88c5\u9970\u5668\u7684\u5e3d\u5b50 @decorator def add ( x , y ): print ( \" {} + {} = {} \" . format ( x , y , x + y )) \u5047\u8bbe\u9700\u8981\u8ba1\u7b97\u6570\u5b57 10 \u548c 5 \u7684\u6c42\u548c\uff0c\u6267\u884c\u4e00\u4e0b add \u51fd\u6570 add ( 10 , 5 ) >>> add\u51fd\u6570\u8fd0\u884c\u524d\u7684\u65e5\u5fd7 \uff0c \u6211\u8981\u5f00\u59cb\u6267\u884c\u4e86 10 + 5 = 15 add\u51fd\u6570\u6267\u884c\u540e\u7684\u65e5\u5fd7 \uff0c \u6211\u6267\u884c\u7ed3\u675f\u4e86 03. \u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668 \u666e\u901a\u88c5\u9970\u5668\uff0c\u51fd\u6570\u5185\u90e8\u53ea\u80fd\u5b9e\u73b0\u5355\u4e00\u529f\u80fd\uff0c\u5982\u679c\u9700\u8981\u5bf9\u4e0d\u540c\u7684\u503c\u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406\uff0c\u5c31\u9700\u8981\u8fd0\u7528\u5230\u5e26\u53c2\u6570\u88c5\u9970\u5668 \u4ee5\u4e0b\u5b9e\u4f8b\u6f14\u793a\uff0c\u6765\u81ea\u4e0d\u540c\u56fd\u5bb6\u7684\u4eba\uff0c\u7528\u4e0d\u540c\u8bed\u8a00\u6253\u62db\u547c \u9996\u5148\u5b9a\u4e49\u88c5\u9970\u5668\u51fd\u6570\uff0c\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668\uff0c\u9700\u8981\u4ee5\u53cc\u5c42\u51fd\u6570\u5d4c\u5957\uff0c\u5728\u6700\u5916\u5c42\u51fd\u6570\u7559\u5f62\u53c2\uff0c\u4f20\u53c2\u65b9\u5f0f\u548c\u51fd\u6570\u4f20\u53c2\u4e00\u6837\uff0c\u4f7f\u7528\u4f4d\u7f6e\u4f20\u53c2 # \u5b9a\u4e49\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668 def say_hello ( contry ): def wrapper ( func ): def deco ( * args , ** kwargs ): if contry == \"china\" : # \u5224\u65ad\u56fd\u5bb6\u5e76\u4ee5\u5bf9\u5e94\u7684\u8bed\u8a00\u95ee\u5019 print ( \"\u4f60\u597d\" ) elif contry == \"america\" : print ( \"hello\" ) return func ( * args , ** kwargs ) # \u6267\u884c\u88ab\u88c5\u9970\u51fd\u6570\u7684\u4ee3\u7801 return deco return wrapper \u88c5\u9970\u6765\u81ea\u4e0d\u540c\u56fd\u5bb6\u548c\u5176\u8bed\u8a00\u4ecb\u7ecd\u7684\u51fd\u6570\uff0c\u5e76\u5728\u88c5\u9970\u5668\u5185\u4f20\u9012 contry \u5b9e\u53c2 # \u5c0f\u660e\uff0c\u4e2d\u56fd\u4eba @say_hello ( \"china\" ) def xiaoming (): print ( \"\u6765\u81ea\u4e2d\u56fd\u7684\u95ee\u5019\" ) @say_hello ( \"america\" ) def jack (): print ( \"greetings from america\" ) \u8fd0\u884c\u5bf9\u5e94\u7684\u51fd\u6570\uff0c\u7a0b\u5e8f\u4f1a\u6267\u884c\u88c5\u9970\u5668\u5185\u7684\u5224\u65ad\uff0c\u4ee5\u5bf9\u5e94\u8bed\u8a00\u95ee\u5019\uff0c\u4e14\u4f1a\u6267\u884c\u88ab\u88c5\u9970\u7684\u51fd\u6570 xiaoming () print ( \"-----\" ) jack () >>> \u4f60\u597d \u6765\u81ea\u4e2d\u56fd\u7684\u95ee\u5019 ----- hello greetings from america 04. wraps\u88c5\u9970\u5668 \u4f7f\u7528\u88c5\u9970\u5668\u540e\uff0c\u7531\u4e8e\u88c5\u9970\u5668\u8fd4\u56de\u4e86 wrapper \u51fd\u6570\uff0c\u66ff\u6362\u4e86 say_hello \u51fd\u6570\uff0c\u5bfc\u81f4\u51fd\u6570\u5185 __name__ \uff08\u51fd\u6570\u540d\uff09\u548c __doc__ \uff08\u51fd\u6570\u8bf4\u660e\u6587\u6863\uff09\u7b49\u5c5e\u6027\u53d8\u6210\u4e86 wrapper \u51fd\u6570\u7684\u4e86\u3002 # \u5b9a\u4e49\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668 def say_hello ( contry ): def wrapper ( func ): def deco ( * args , ** kwargs ): \"\"\"doc of deco\"\"\" if contry == \"china\" : print ( \"\u4f60\u597d\" ) elif contry == \"america\" : print ( \"hello\" ) return func ( * args , ** kwargs ) return deco return wrapper # \u5c0f\u660e\uff0c\u4e2d\u56fd\u4eba @say_hello ( \"china\" ) def xiaoming (): \"\"\"doc of xiaoming\"\"\" print ( \"\u6765\u81ea\u4e2d\u56fd\u7684\u95ee\u5019\" ) @say_hello ( \"america\" ) def jack (): print ( \"greetings from america\" ) print ( xiaoming . __name__ ) print ( xiaoming . __doc__ ) >>> deco doc of deco \u5982\u679c\u60f3\u8981\u663e\u793a say_hello \u51fd\u6570\u7684 name \u5c5e\u6027\u548c doc \u5c5e\u6027\uff0c\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u7684\u529e\u6cd5\u662f\u901a\u8fc7 functools \u6a21\u5757\u4e0b\u7684 wraps \u88c5\u9970\u5668\u3002 from functools import wraps # \u5b9a\u4e49\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668 def say_hello ( contry ): def wrapper ( func ): @wraps ( func ) #\u4f7f\u7528wraps\u88c5\u9970\u5668 def deco ( * args , ** kwargs ): \"\"\"doc of deco\"\"\" if contry == \"china\" : print ( \"\u4f60\u597d\" ) elif contry == \"america\" : print ( \"hello\" ) return func ( * args , ** kwargs ) return deco return wrapper # \u5c0f\u660e\uff0c\u4e2d\u56fd\u4eba @say_hello ( \"china\" ) def xiaoming (): \"\"\"doc of xiaoming\"\"\" print ( \"\u6765\u81ea\u4e2d\u56fd\u7684\u95ee\u5019\" ) @say_hello ( \"america\" ) def jack (): print ( \"greetings from america\" ) print ( xiaoming . __name__ ) print ( xiaoming . __doc__ ) >>> xiaoming doc of xiaoming","title":"\u88c5\u9970\u5668"},{"location":"programming/python/decorator/#01","text":"\u88c5\u9970\u5668\u672c\u8d28\u662f\u4e00\u4e2a\u51fd\u6570\u3002\u5b83\u53ef\u4ee5\u8ba9\u5176\u4ed6\u51fd\u6570\u5728\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u4ee3\u7801\u53d8\u52a8\u7684\u524d\u63d0\u4e0b\u589e\u52a0\u989d\u5916\u529f\u80fd\uff0c\u88c5\u9970\u5668\u7684\u8fd4\u56de\u503c\u4e5f\u662f\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u3002 \u5b83\u7ecf\u5e38\u7528\u4e8e\u6709\u5207\u9762\u9700\u6c42\u7684\u573a\u666f\uff0c\u6bd4\u5982\uff1a\u63d2\u5165\u65e5\u5fd7\u3001\u6027\u80fd\u6d4b\u8bd5\u3001\u4e8b\u52a1\u5904\u7406\u3001\u7f13\u5b58\u3001\u6743\u9650\u6821\u9a8c\u7b49\u573a\u666f\u3002 \u88c5\u9970\u5668\u7684\u8bed\u6cd5\u5f88\u56fa\u5b9a\uff0c\u5982\u4e0b\uff1a \u5148\u5b9a\u4e49\u4e00\u4e2a\u88c5\u9970\u5668\uff08\u5e3d\u5b50\uff09 \u518d\u5b9a\u4e49\u4e1a\u52a1\u51fd\u6570\u6216\u7c7b\uff08\u4eba\uff09 \u6700\u540e\u628a\u88c5\u9970\u5668\uff08\u5e3d\u5b50\uff09\u6263\u5728\u51fd\u6570\u6216\u7c7b\uff08\u4eba\uff09\u7684\u5934\u4e0a\u3002 # \u5b9a\u4e49\u88c5\u9970\u5668 def decorator ( func ): def wrapper ( * args , ** kwargs ): return func () return wrapper () # \u5b9a\u4e49\u4e1a\u52a1\u51fd\u6570\u5e76\u88c5\u9970 @decorator def function (): print ( \"hello decorator\" )","title":"01.  \u88c5\u9970\u5668\u7684\u5b9a\u4e49\u548c\u8bed\u6cd5"},{"location":"programming/python/decorator/#02","text":"\u4ee5\u4e0b\u5b9e\u4f8b\u6f14\u793a\u4e00\u4e2a\u666e\u901a\u7684\u88c5\u9970\u5668\uff0c\u6ee1\u8db3\u7684\u9700\u6c42\u662f\uff1a \u5728\u51fd\u6570\u6267\u884c\u524d\uff0c\u5148\u8bb0\u5f55\u4e00\u884c\u65e5\u5fd7 \u5728\u51fd\u6570\u6267\u884c\u540e\uff0c\u518d\u8bb0\u5f55\u4e00\u884c\u65e5\u5fd7 # \u5b9a\u4e49\u88c5\u9970\u5668\uff0c\u53c2\u6570func\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570 def decorator ( func ): def wrapper ( * args , ** kwargs ): print ( \" {} \u51fd\u6570\u8fd0\u884c\u524d\u7684\u65e5\u5fd7\uff0c\u6211\u8981\u5f00\u59cb\u6267\u884c\u4e86\" . format ( func . __name__ )) func ( * args , ** kwargs ) # func()\u8868\u793a\u51fd\u6570\u6267\u884c\uff0c\u771f\u6b63\u6267\u884c\u7684\u4e1a\u52a1\u51fd\u6570\u4e5f\u662f\u8fd9\u53e5\u4ee3\u7801 print ( \" {} \u51fd\u6570\u6267\u884c\u540e\u7684\u65e5\u5fd7\uff0c\u6211\u6267\u884c\u7ed3\u675f\u4e86\" . format ( func . __name__ )) return wrapper \u5047\u5982\u6211\u7684\u4e1a\u52a1\u51fd\u6570\u662f\uff0c\u8ba1\u7b97\u4e24\u4e2a\u6570\u5b57\u4e4b\u548c\u3002\u518d\u5b9a\u4e49\u51fd\u6570\u524d\u52a0\u4e0a\u88c5\u9970\u5668\u7684\u5e3d\u5b50 @decorator def add ( x , y ): print ( \" {} + {} = {} \" . format ( x , y , x + y )) \u5047\u8bbe\u9700\u8981\u8ba1\u7b97\u6570\u5b57 10 \u548c 5 \u7684\u6c42\u548c\uff0c\u6267\u884c\u4e00\u4e0b add \u51fd\u6570 add ( 10 , 5 ) >>> add\u51fd\u6570\u8fd0\u884c\u524d\u7684\u65e5\u5fd7 \uff0c \u6211\u8981\u5f00\u59cb\u6267\u884c\u4e86 10 + 5 = 15 add\u51fd\u6570\u6267\u884c\u540e\u7684\u65e5\u5fd7 \uff0c \u6211\u6267\u884c\u7ed3\u675f\u4e86","title":"02. \u666e\u901a\u88c5\u9970\u5668"},{"location":"programming/python/decorator/#03","text":"\u666e\u901a\u88c5\u9970\u5668\uff0c\u51fd\u6570\u5185\u90e8\u53ea\u80fd\u5b9e\u73b0\u5355\u4e00\u529f\u80fd\uff0c\u5982\u679c\u9700\u8981\u5bf9\u4e0d\u540c\u7684\u503c\u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406\uff0c\u5c31\u9700\u8981\u8fd0\u7528\u5230\u5e26\u53c2\u6570\u88c5\u9970\u5668 \u4ee5\u4e0b\u5b9e\u4f8b\u6f14\u793a\uff0c\u6765\u81ea\u4e0d\u540c\u56fd\u5bb6\u7684\u4eba\uff0c\u7528\u4e0d\u540c\u8bed\u8a00\u6253\u62db\u547c \u9996\u5148\u5b9a\u4e49\u88c5\u9970\u5668\u51fd\u6570\uff0c\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668\uff0c\u9700\u8981\u4ee5\u53cc\u5c42\u51fd\u6570\u5d4c\u5957\uff0c\u5728\u6700\u5916\u5c42\u51fd\u6570\u7559\u5f62\u53c2\uff0c\u4f20\u53c2\u65b9\u5f0f\u548c\u51fd\u6570\u4f20\u53c2\u4e00\u6837\uff0c\u4f7f\u7528\u4f4d\u7f6e\u4f20\u53c2 # \u5b9a\u4e49\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668 def say_hello ( contry ): def wrapper ( func ): def deco ( * args , ** kwargs ): if contry == \"china\" : # \u5224\u65ad\u56fd\u5bb6\u5e76\u4ee5\u5bf9\u5e94\u7684\u8bed\u8a00\u95ee\u5019 print ( \"\u4f60\u597d\" ) elif contry == \"america\" : print ( \"hello\" ) return func ( * args , ** kwargs ) # \u6267\u884c\u88ab\u88c5\u9970\u51fd\u6570\u7684\u4ee3\u7801 return deco return wrapper \u88c5\u9970\u6765\u81ea\u4e0d\u540c\u56fd\u5bb6\u548c\u5176\u8bed\u8a00\u4ecb\u7ecd\u7684\u51fd\u6570\uff0c\u5e76\u5728\u88c5\u9970\u5668\u5185\u4f20\u9012 contry \u5b9e\u53c2 # \u5c0f\u660e\uff0c\u4e2d\u56fd\u4eba @say_hello ( \"china\" ) def xiaoming (): print ( \"\u6765\u81ea\u4e2d\u56fd\u7684\u95ee\u5019\" ) @say_hello ( \"america\" ) def jack (): print ( \"greetings from america\" ) \u8fd0\u884c\u5bf9\u5e94\u7684\u51fd\u6570\uff0c\u7a0b\u5e8f\u4f1a\u6267\u884c\u88c5\u9970\u5668\u5185\u7684\u5224\u65ad\uff0c\u4ee5\u5bf9\u5e94\u8bed\u8a00\u95ee\u5019\uff0c\u4e14\u4f1a\u6267\u884c\u88ab\u88c5\u9970\u7684\u51fd\u6570 xiaoming () print ( \"-----\" ) jack () >>> \u4f60\u597d \u6765\u81ea\u4e2d\u56fd\u7684\u95ee\u5019 ----- hello greetings from america","title":"03. \u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668"},{"location":"programming/python/decorator/#04-wraps","text":"\u4f7f\u7528\u88c5\u9970\u5668\u540e\uff0c\u7531\u4e8e\u88c5\u9970\u5668\u8fd4\u56de\u4e86 wrapper \u51fd\u6570\uff0c\u66ff\u6362\u4e86 say_hello \u51fd\u6570\uff0c\u5bfc\u81f4\u51fd\u6570\u5185 __name__ \uff08\u51fd\u6570\u540d\uff09\u548c __doc__ \uff08\u51fd\u6570\u8bf4\u660e\u6587\u6863\uff09\u7b49\u5c5e\u6027\u53d8\u6210\u4e86 wrapper \u51fd\u6570\u7684\u4e86\u3002 # \u5b9a\u4e49\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668 def say_hello ( contry ): def wrapper ( func ): def deco ( * args , ** kwargs ): \"\"\"doc of deco\"\"\" if contry == \"china\" : print ( \"\u4f60\u597d\" ) elif contry == \"america\" : print ( \"hello\" ) return func ( * args , ** kwargs ) return deco return wrapper # \u5c0f\u660e\uff0c\u4e2d\u56fd\u4eba @say_hello ( \"china\" ) def xiaoming (): \"\"\"doc of xiaoming\"\"\" print ( \"\u6765\u81ea\u4e2d\u56fd\u7684\u95ee\u5019\" ) @say_hello ( \"america\" ) def jack (): print ( \"greetings from america\" ) print ( xiaoming . __name__ ) print ( xiaoming . __doc__ ) >>> deco doc of deco \u5982\u679c\u60f3\u8981\u663e\u793a say_hello \u51fd\u6570\u7684 name \u5c5e\u6027\u548c doc \u5c5e\u6027\uff0c\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u7684\u529e\u6cd5\u662f\u901a\u8fc7 functools \u6a21\u5757\u4e0b\u7684 wraps \u88c5\u9970\u5668\u3002 from functools import wraps # \u5b9a\u4e49\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668 def say_hello ( contry ): def wrapper ( func ): @wraps ( func ) #\u4f7f\u7528wraps\u88c5\u9970\u5668 def deco ( * args , ** kwargs ): \"\"\"doc of deco\"\"\" if contry == \"china\" : print ( \"\u4f60\u597d\" ) elif contry == \"america\" : print ( \"hello\" ) return func ( * args , ** kwargs ) return deco return wrapper # \u5c0f\u660e\uff0c\u4e2d\u56fd\u4eba @say_hello ( \"china\" ) def xiaoming (): \"\"\"doc of xiaoming\"\"\" print ( \"\u6765\u81ea\u4e2d\u56fd\u7684\u95ee\u5019\" ) @say_hello ( \"america\" ) def jack (): print ( \"greetings from america\" ) print ( xiaoming . __name__ ) print ( xiaoming . __doc__ ) >>> xiaoming doc of xiaoming","title":"04. wraps\u88c5\u9970\u5668"},{"location":"programming/python/derivation/","text":"01. \u63a8\u5bfc\u5f0f\u7684\u5b9a\u4e49 \u63a8\u5bfc\u5f0f\u53c8\u79f0\u89e3\u6790\u5f0f\uff0c\u662fpython\u4e00\u79cd\u72ec\u6709\u7684\u7279\u6027\u3002\u63a8\u5bfc\u5f0f\u662f\u53ef\u4ee5\u4ece\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\u6784\u5efa\u53e6\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5e8f\u5217\u7684\u7ed3\u6784\u4f53\u3002\u5171\u6709\u56db\u79cd\u63a8\u5bfc\u5f0f\uff1a \u5217\u8868\u63a8\u5bfc\u5f0f \u5143\u7ec4\u63a8\u5bfc\u5f0f \u5b57\u5178\u63a8\u5bfc\u5f0f \u96c6\u5408\u63a8\u5bfc\u5f0f 02. \u5217\u8868\u63a8\u5bfc\u5f0f \u8bed\u6cd5\u683c\u5f0f\uff1a variable = [ out_exp_res for out_exp in input_list if out_exp == 2 ] out_exp_res:\u5217\u8868\u751f\u6210\u5143\u7d20\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u662f\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u3002 for out_exp in input_list : \u8fed\u4ee3input_list \u5c06out_exp\u4f20\u5165out_exp_res\u8868\u8fbe\u5f0f\u4e2d\u3002 if out_exp ==2 :\u6839\u636e\u6761\u4ef6\u8fc7\u6ee4\u54ea\u4e9b\u503c\u3002 \u5b9e\u4f8b\uff1a \u8fc7\u6ee4\u5217\u8868\u4e2d\uff0c\u5b57\u7b26\u957f\u5ea6\u5927\u4e8e3\u7684\u5143\u7d20\uff0c\u5e76\u5c06\u5269\u4e0b\u7684\u8f6c\u6362\u4e3a\u5927\u5199\uff1a names = [ 'Bob' , 'Tom' , 'alice' , 'Jerry' , 'Wendy' , 'Smith' ] a = [ name . upper () for name in names if len ( name ) < 3 ] print ( a ) >>> [ 'ALICE' , 'JERRY' , 'WENDY' , 'SMITH' ] \u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u5faa\u73af\u5d4c\u5957 a = [( x , y ) for x in range ( 5 ) for y in range ( 4 ) if x != 0 and y != 0 ] print ( a ) >>> [( 1 , 1 ), ( 1 , 2 ), ( 1 , 3 ), ( 2 , 1 ), ( 2 , 2 ), ( 2 , 3 ), ( 3 , 1 ), ( 3 , 2 ), ( 3 , 3 ), ( 4 , 1 ), ( 4 , 2 ), ( 4 , 3 )] 03. \u5143\u7ec4\u63a8\u5bfc\u5f0f \u5143\u7ec4\u63a8\u5bfc\u5f0f\u548c\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u8bed\u6cd5\u4e00\u6837\uff0c\u53ea\u662f\u5c06 [] \u6362\u4e3a () ( \u8868\u8fbe\u5f0f for \u8fed\u4ee3\u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61 [ if \u6761\u4ef6\u8868\u8fbe\u5f0f ] ) \u5176\u4e2d\uff0c\u7528 [] \u62ec\u8d77\u6765\u7684\u90e8\u5206\uff0c\u53ef\u4ee5\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u7701\u7565\u3002 \u4f7f\u7528\u5143\u7ec4\u63a8\u5bfc\u5f0f\u751f\u6210\u5305\u542b\u6570\u5b571-9\u7684\u5143\u7ec4 a = ( x for x in range ( 1 , 10 )) print ( a ) >>> < generator object < genexpr > at 0x7f8d8b39de60 > \u4ece\u4e0a\u9762\u7684\u6267\u884c\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\uff0c\u4f7f\u7528\u5143\u7ec4\u63a8\u5bfc\u5f0f\u751f\u6210\u7684\u7ed3\u679c\u5e76\u4e0d\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u800c\u662f\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u8fd9\u4e00\u70b9\u548c\u5217\u8868\u63a8\u5bfc\u5f0f\u662f\u4e0d\u540c\u7684\u3002 \u5982\u679c\u6211\u4eec\u60f3\u8981\u4f7f\u7528\u5143\u7ec4\u63a8\u5bfc\u5f0f\u83b7\u5f97\u65b0\u5143\u7ec4\u6216\u65b0\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u65b9\u5f0f: \u4f7f\u7528 tuple() \u51fd\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06\u751f\u6210\u5668\u5bf9\u8c61\u8f6c\u6362\u6210\u5143\u7ec4\uff0c\u4f8b\u5982\uff1a a = ( x for x in range ( 1 , 10 )) print ( tuple ( a )) >>> ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ) \u76f4\u63a5\u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u53ef\u4ee5\u83b7\u5f97\u5404\u4e2a\u5143\u7d20\uff0c\u4f8b\u5982\uff1a a = ( x for x in range ( 1 , 10 )) for i in a : print ( i , end = \"\" ) print ( tuple ( a )) >>> 123456789 () \u4f7f\u7528 __next__() \u65b9\u6cd5\u904d\u5386\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u83b7\u5f97\u5404\u4e2a\u5143\u7d20\uff0c\u4f8b\u5982\uff1a a = ( x for x in range ( 3 )) print ( a . __next__ ()) print ( a . __next__ ()) print ( a . __next__ ()) a = tuple ( a ) print ( \"\u8f6c\u6362\u540e\u7684\u5143\u7ec4\uff1a\" , a ) >>> 0 1 2 \u8f6c\u6362\u540e\u7684\u5143\u7ec4 \uff1a () \u6ce8\u610f\uff0c\u65e0\u8bba\u662f\u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u8fd8\u662f\u4f7f\u7528 __next__() \u65b9\u6cd5\u904d\u5386\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u904d\u5386\u540e\u539f\u751f\u6210\u5668\u5bf9\u8c61\u5c06\u4e0d\u590d\u5b58\u5728\uff0c\u8fd9\u5c31\u662f\u904d\u5386\u540e\u8f6c\u6362\u539f\u751f\u6210\u5668\u5bf9\u8c61\u5374\u5f97\u5230\u7a7a\u5143\u7ec4\u7684\u539f\u56e0\u3002 04. \u5b57\u5178\u63a8\u5bfc\u5f0f \u5b57\u5178\u63a8\u5bfc\u5f0f\u7531 {} \u5305\u88f9\uff0c\u8bed\u6cd5\u548c\u5217\u8868\u53ca\u5143\u7ec4\u4e00\u6837\uff1b \u8868\u8fbe\u5f0f\u4e2d\u9700\u8981\u5b9a\u4e49 key \u548c value \u4e24\u4e2a\u53d8\u91cf listdemo = [ '\u767e\u5ea6' , 'www.baidu.com' ] #\u5c06\u5217\u8868\u4e2d\u5404\u5b57\u7b26\u4e32\u503c\u4e3a\u952e\uff0c\u5404\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e3a\u503c\uff0c\u7ec4\u6210\u952e\u503c\u5bf9 newdict = { key : len ( key ) for key in listdemo } print ( newdict ) >>> { '\u767e\u5ea6' : 2 , 'www.baidu.com' : 13 } \u4ea4\u6362\u5b57\u5178\u4e2d\u5404\u952e\u503c\u5bf9\u7684\u952e\u548c\u503c\uff1a xiaoming_dict = { \"name\" : \"xiaoming\" , \"age\" : 18 , \"weight\" : 100 } a = { k : v for v , k in xiaoming_dict . items ()} print ( a ) >>> { 'xiaoming' : 'name' , 18 : 'age' , 100 : 'weight' } \u4f7f\u7528 if \u8868\u8fbe\u5f0f\u7b5b\u9009\u7b26\u5408\u6761\u4ef6\u7684\u952e\u503c\u5bf9: xiaoming_dict = { \"name\" : \"xiaoming\" , \"age\" : 18 , \"weight\" : 100 } a = { k : v for v , k in xiaoming_dict . items () if k == \"xiaoming\" } print ( a ) >>> { 'xiaoming' : 'name' } 05. \u96c6\u5408\u63a8\u5bfc\u5f0f \u96c6\u5408\u63a8\u5bfc\u5f0f\u548c\u5b57\u5178\u63a8\u5bfc\u5f0f\u90fd\u662f\u4ee5 {} \u5305\u88f9 \u5224\u65ad\u8be5\u63a8\u5bfc\u5f0f\u662f\u5b57\u5178\u8fd8\u662f\u96c6\u5408\u7684\u65b9\u5f0f\u662f\u770b\u8868\u8fbe\u5f0f\u5185\u662f\u5355\u4e2a\u53d8\u91cf\u8fd8\u662f\u952e\u503c\u5bf9\u3002\u5982\u679c\u662f\u952e\u503c\u5bf9\u5219\u662f\u5b57\u5178\u63a8\u5bfc\u5f0f\uff0c\u53cd\u4e4b\u4e3a\u96c6\u5408\u63a8\u5bfc\u5f0f # \u7531\u4e8e\u662f\u96c6\u5408\uff0c\u6240\u4ee5\u4fdd\u5b58\u7684\u6570\u636e\u662f\u552f\u4e00\u7684 a = { 0 , 1 , 2 , 1 , 2 , 3 , 4 } b = { s for s in a } print ( b ) >>> { 0 , 1 , 2 , 3 , 4 } \u4f7f\u7528if\u4f5c\u4e3a\u6761\u4ef6\u7684\u96c6\u5408\u63a8\u5bfc\u5f0f\uff1a tupledemo = ( 1 , 1 , 2 , 3 , 4 , 5 , 6 , 6 ) setnew = { x ** 2 for x in tupledemo if x % 2 == 0 } print ( setnew ) >>> { 16 , 4 , 36 } \u4f7f\u7528\u96c6\u5408\u63a8\u5bfc\u5f0f\u53d8\u91cf\u5b57\u5178\u7684key\uff0c\u4fdd\u5b58\u4e3a\u96c6\u5408 dictdemo = { '1' : 1 , '2' : 2 , '3' : 3 } setnew = { x for x in dictdemo . keys ()} print ( setnew ) >>> { \"2\" , \"1\" , \"3\" }","title":"\u63a8\u5bfc\u5f0f"},{"location":"programming/python/derivation/#01","text":"\u63a8\u5bfc\u5f0f\u53c8\u79f0\u89e3\u6790\u5f0f\uff0c\u662fpython\u4e00\u79cd\u72ec\u6709\u7684\u7279\u6027\u3002\u63a8\u5bfc\u5f0f\u662f\u53ef\u4ee5\u4ece\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\u6784\u5efa\u53e6\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5e8f\u5217\u7684\u7ed3\u6784\u4f53\u3002\u5171\u6709\u56db\u79cd\u63a8\u5bfc\u5f0f\uff1a \u5217\u8868\u63a8\u5bfc\u5f0f \u5143\u7ec4\u63a8\u5bfc\u5f0f \u5b57\u5178\u63a8\u5bfc\u5f0f \u96c6\u5408\u63a8\u5bfc\u5f0f","title":"01. \u63a8\u5bfc\u5f0f\u7684\u5b9a\u4e49"},{"location":"programming/python/derivation/#02","text":"\u8bed\u6cd5\u683c\u5f0f\uff1a variable = [ out_exp_res for out_exp in input_list if out_exp == 2 ] out_exp_res:\u5217\u8868\u751f\u6210\u5143\u7d20\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u662f\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u3002 for out_exp in input_list : \u8fed\u4ee3input_list \u5c06out_exp\u4f20\u5165out_exp_res\u8868\u8fbe\u5f0f\u4e2d\u3002 if out_exp ==2 :\u6839\u636e\u6761\u4ef6\u8fc7\u6ee4\u54ea\u4e9b\u503c\u3002 \u5b9e\u4f8b\uff1a \u8fc7\u6ee4\u5217\u8868\u4e2d\uff0c\u5b57\u7b26\u957f\u5ea6\u5927\u4e8e3\u7684\u5143\u7d20\uff0c\u5e76\u5c06\u5269\u4e0b\u7684\u8f6c\u6362\u4e3a\u5927\u5199\uff1a names = [ 'Bob' , 'Tom' , 'alice' , 'Jerry' , 'Wendy' , 'Smith' ] a = [ name . upper () for name in names if len ( name ) < 3 ] print ( a ) >>> [ 'ALICE' , 'JERRY' , 'WENDY' , 'SMITH' ] \u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u5faa\u73af\u5d4c\u5957 a = [( x , y ) for x in range ( 5 ) for y in range ( 4 ) if x != 0 and y != 0 ] print ( a ) >>> [( 1 , 1 ), ( 1 , 2 ), ( 1 , 3 ), ( 2 , 1 ), ( 2 , 2 ), ( 2 , 3 ), ( 3 , 1 ), ( 3 , 2 ), ( 3 , 3 ), ( 4 , 1 ), ( 4 , 2 ), ( 4 , 3 )]","title":"02. \u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"programming/python/derivation/#03","text":"\u5143\u7ec4\u63a8\u5bfc\u5f0f\u548c\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u8bed\u6cd5\u4e00\u6837\uff0c\u53ea\u662f\u5c06 [] \u6362\u4e3a () ( \u8868\u8fbe\u5f0f for \u8fed\u4ee3\u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61 [ if \u6761\u4ef6\u8868\u8fbe\u5f0f ] ) \u5176\u4e2d\uff0c\u7528 [] \u62ec\u8d77\u6765\u7684\u90e8\u5206\uff0c\u53ef\u4ee5\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u7701\u7565\u3002 \u4f7f\u7528\u5143\u7ec4\u63a8\u5bfc\u5f0f\u751f\u6210\u5305\u542b\u6570\u5b571-9\u7684\u5143\u7ec4 a = ( x for x in range ( 1 , 10 )) print ( a ) >>> < generator object < genexpr > at 0x7f8d8b39de60 > \u4ece\u4e0a\u9762\u7684\u6267\u884c\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\uff0c\u4f7f\u7528\u5143\u7ec4\u63a8\u5bfc\u5f0f\u751f\u6210\u7684\u7ed3\u679c\u5e76\u4e0d\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u800c\u662f\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u8fd9\u4e00\u70b9\u548c\u5217\u8868\u63a8\u5bfc\u5f0f\u662f\u4e0d\u540c\u7684\u3002 \u5982\u679c\u6211\u4eec\u60f3\u8981\u4f7f\u7528\u5143\u7ec4\u63a8\u5bfc\u5f0f\u83b7\u5f97\u65b0\u5143\u7ec4\u6216\u65b0\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u65b9\u5f0f: \u4f7f\u7528 tuple() \u51fd\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06\u751f\u6210\u5668\u5bf9\u8c61\u8f6c\u6362\u6210\u5143\u7ec4\uff0c\u4f8b\u5982\uff1a a = ( x for x in range ( 1 , 10 )) print ( tuple ( a )) >>> ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ) \u76f4\u63a5\u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u53ef\u4ee5\u83b7\u5f97\u5404\u4e2a\u5143\u7d20\uff0c\u4f8b\u5982\uff1a a = ( x for x in range ( 1 , 10 )) for i in a : print ( i , end = \"\" ) print ( tuple ( a )) >>> 123456789 () \u4f7f\u7528 __next__() \u65b9\u6cd5\u904d\u5386\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u83b7\u5f97\u5404\u4e2a\u5143\u7d20\uff0c\u4f8b\u5982\uff1a a = ( x for x in range ( 3 )) print ( a . __next__ ()) print ( a . __next__ ()) print ( a . __next__ ()) a = tuple ( a ) print ( \"\u8f6c\u6362\u540e\u7684\u5143\u7ec4\uff1a\" , a ) >>> 0 1 2 \u8f6c\u6362\u540e\u7684\u5143\u7ec4 \uff1a () \u6ce8\u610f\uff0c\u65e0\u8bba\u662f\u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u8fd8\u662f\u4f7f\u7528 __next__() \u65b9\u6cd5\u904d\u5386\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u904d\u5386\u540e\u539f\u751f\u6210\u5668\u5bf9\u8c61\u5c06\u4e0d\u590d\u5b58\u5728\uff0c\u8fd9\u5c31\u662f\u904d\u5386\u540e\u8f6c\u6362\u539f\u751f\u6210\u5668\u5bf9\u8c61\u5374\u5f97\u5230\u7a7a\u5143\u7ec4\u7684\u539f\u56e0\u3002","title":"03. \u5143\u7ec4\u63a8\u5bfc\u5f0f"},{"location":"programming/python/derivation/#04","text":"\u5b57\u5178\u63a8\u5bfc\u5f0f\u7531 {} \u5305\u88f9\uff0c\u8bed\u6cd5\u548c\u5217\u8868\u53ca\u5143\u7ec4\u4e00\u6837\uff1b \u8868\u8fbe\u5f0f\u4e2d\u9700\u8981\u5b9a\u4e49 key \u548c value \u4e24\u4e2a\u53d8\u91cf listdemo = [ '\u767e\u5ea6' , 'www.baidu.com' ] #\u5c06\u5217\u8868\u4e2d\u5404\u5b57\u7b26\u4e32\u503c\u4e3a\u952e\uff0c\u5404\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e3a\u503c\uff0c\u7ec4\u6210\u952e\u503c\u5bf9 newdict = { key : len ( key ) for key in listdemo } print ( newdict ) >>> { '\u767e\u5ea6' : 2 , 'www.baidu.com' : 13 } \u4ea4\u6362\u5b57\u5178\u4e2d\u5404\u952e\u503c\u5bf9\u7684\u952e\u548c\u503c\uff1a xiaoming_dict = { \"name\" : \"xiaoming\" , \"age\" : 18 , \"weight\" : 100 } a = { k : v for v , k in xiaoming_dict . items ()} print ( a ) >>> { 'xiaoming' : 'name' , 18 : 'age' , 100 : 'weight' } \u4f7f\u7528 if \u8868\u8fbe\u5f0f\u7b5b\u9009\u7b26\u5408\u6761\u4ef6\u7684\u952e\u503c\u5bf9: xiaoming_dict = { \"name\" : \"xiaoming\" , \"age\" : 18 , \"weight\" : 100 } a = { k : v for v , k in xiaoming_dict . items () if k == \"xiaoming\" } print ( a ) >>> { 'xiaoming' : 'name' }","title":"04. \u5b57\u5178\u63a8\u5bfc\u5f0f"},{"location":"programming/python/derivation/#05","text":"\u96c6\u5408\u63a8\u5bfc\u5f0f\u548c\u5b57\u5178\u63a8\u5bfc\u5f0f\u90fd\u662f\u4ee5 {} \u5305\u88f9 \u5224\u65ad\u8be5\u63a8\u5bfc\u5f0f\u662f\u5b57\u5178\u8fd8\u662f\u96c6\u5408\u7684\u65b9\u5f0f\u662f\u770b\u8868\u8fbe\u5f0f\u5185\u662f\u5355\u4e2a\u53d8\u91cf\u8fd8\u662f\u952e\u503c\u5bf9\u3002\u5982\u679c\u662f\u952e\u503c\u5bf9\u5219\u662f\u5b57\u5178\u63a8\u5bfc\u5f0f\uff0c\u53cd\u4e4b\u4e3a\u96c6\u5408\u63a8\u5bfc\u5f0f # \u7531\u4e8e\u662f\u96c6\u5408\uff0c\u6240\u4ee5\u4fdd\u5b58\u7684\u6570\u636e\u662f\u552f\u4e00\u7684 a = { 0 , 1 , 2 , 1 , 2 , 3 , 4 } b = { s for s in a } print ( b ) >>> { 0 , 1 , 2 , 3 , 4 } \u4f7f\u7528if\u4f5c\u4e3a\u6761\u4ef6\u7684\u96c6\u5408\u63a8\u5bfc\u5f0f\uff1a tupledemo = ( 1 , 1 , 2 , 3 , 4 , 5 , 6 , 6 ) setnew = { x ** 2 for x in tupledemo if x % 2 == 0 } print ( setnew ) >>> { 16 , 4 , 36 } \u4f7f\u7528\u96c6\u5408\u63a8\u5bfc\u5f0f\u53d8\u91cf\u5b57\u5178\u7684key\uff0c\u4fdd\u5b58\u4e3a\u96c6\u5408 dictdemo = { '1' : 1 , '2' : 2 , '3' : 3 } setnew = { x for x in dictdemo . keys ()} print ( setnew ) >>> { \"2\" , \"1\" , \"3\" }","title":"05. \u96c6\u5408\u63a8\u5bfc\u5f0f"},{"location":"programming/python/dict/","text":"01. \u5b57\u5178\u7684\u5b9a\u4e49 dictionary \uff08\u5b57\u5178\uff09 \u662f \u9664\u5217\u8868\u4ee5\u5916 Python \u4e4b\u4e2d \u6700\u7075\u6d3b \u7684\u6570\u636e\u7c7b\u578b \u5b57\u5178\u540c\u6837\u53ef\u4ee5\u7528\u6765 \u5b58\u50a8\u591a\u4e2a\u6570\u636e \u901a\u5e38\u7528\u4e8e\u5b58\u50a8 \u63cf\u8ff0\u4e00\u4e2a \u7269\u4f53 \u7684\u76f8\u5173\u4fe1\u606f \u548c\u5217\u8868\u7684\u533a\u522b \u5217\u8868 \u662f \u6709\u5e8f \u7684\u5bf9\u8c61\u96c6\u5408 \u5b57\u5178 \u662f \u65e0\u5e8f \u7684\u5bf9\u8c61\u96c6\u5408 \u5b57\u5178\u7528 {} \u5b9a\u4e49 \u5b57\u5178\u4f7f\u7528 \u952e\u503c\u5bf9 \u5b58\u50a8\u6570\u636e\uff0c\u952e\u503c\u5bf9\u4e4b\u95f4\u4f7f\u7528 , \u5206\u9694 \u952e key \u662f\u7d22\u5f15 \u503c value \u662f\u6570\u636e \u952e \u548c \u503c \u4e4b\u95f4\u4f7f\u7528 : \u5206\u9694 \u952e\u5fc5\u987b\u662f\u552f\u4e00\u7684 \u503c \u53ef\u4ee5\u53d6\u4efb\u4f55\u6570\u636e\u7c7b\u578b\uff0c\u4f46 \u952e \u53ea\u80fd\u4f7f\u7528 \u5b57\u7b26\u4e32 \u3001 \u6570\u5b57 \u6216 \u5143\u7ec4 1.1 \u521b\u5efa\u5b57\u5178 \u4f7f\u7528 {} \u521b\u5efa\u7b80\u5355\u7684\u5b57\u5178\uff1a scores = { \"\u8bed\u6587\" : 100 , \"\u6570\u5b66\" : 98 , \"\u82f1\u8bed\" : 30 } \u4f7f\u7528\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u3001\u5143\u7ec4\u4f5c\u4e3a\u5b57\u5178\u7684key\uff1a # \u5b57\u7b26\u4e32 str_dict = { \"name\" : \"\u5f20\u4e09\" , \"age\" : 18 } # \u6570\u5b57\u4f5c\u4e3akey\uff0c\u5217\u8868\u4f5c\u4e3a\u503c number_dict = { 18 : \"\u5c11\u5e74\" , 19 : 20 , 20 :[ 1 , 2 , 3 ]} # \u5143\u7ec4 tup_dict = {( 1 , 2 ): \"\u5c0f\u660e\" , ( \"\u897f\u74dc\" , \"\u9ec4\u74dc\" ): \"\u852c\u679c\" } \u4f7f\u7528 dict() \u521b\u5efa\u5b57\u5178 \u53ef\u4ee5\u4ee5\u591a\u4e2a\u5143\u7ec4\u6216\u8005\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u5411 dict() \u5185\u4f20\u9012 num_List = [( \"\u5c0f\u660e\" , \"18\" ), ( \"\u5c0f\u674e\" , 19 )] dict1 = dict ( num_List ) print ( dict1 ) >>> { '\u5c0f\u660e' : '18' , '\u5c0f\u674e' : 19 } \u5982\u679c\u4e0d\u5411 dict() \u5185\u4f20\u53c2\uff0c\u5219\u521b\u5efa\u4e86\u7a7a\u5b57\u5178\uff0c\u7136\u540e\u4f7f\u7528 dict() \u6307\u5b9a\u5173\u952e\u5b57\u521b\u5efa\u5b57\u5178\uff1a \u901a\u8fc7 dict \u901a\u8fc7\u5173\u952e\u5b57\u521b\u5efa\u5b57\u5178\u65f6\uff0c\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684key\u4e0d\u9700\u8981\u4ee5 \u201c\u201d \u5305\u88f9 name_dict = {} print ( name_dict ) >>> {} name_dict = dict ( \u59d3\u540d = \"\u5c0f\u660e\" , \u5e74\u9f84 = 19 ) print ( name_dict ) >>> { 'name' : '\u5c0f\u660e' , '\u5e74\u9f84' : 19 } 1.2 hash Python \u4e2d\u5185\u7f6e\u6709\u4e00\u4e2a\u540d\u5b57\u53eb\u505a hash(o) \u7684\u51fd\u6570 \u63a5\u6536\u4e00\u4e2a \u4e0d\u53ef\u53d8\u7c7b\u578b \u7684\u6570\u636e\u4f5c\u4e3a \u53c2\u6570 \u8fd4\u56de \u7ed3\u679c\u662f\u4e00\u4e2a \u6574\u6570 \u54c8\u5e0c \u662f\u4e00\u79cd \u7b97\u6cd5 \uff0c\u5176\u4f5c\u7528\u5c31\u662f\u63d0\u53d6\u6570\u636e\u7684 \u7279\u5f81\u7801\uff08\u6307\u7eb9\uff09 \u76f8\u540c\u7684\u5185\u5bb9 \u5f97\u5230 \u76f8\u540c\u7684\u7ed3\u679c \u4e0d\u540c\u7684\u5185\u5bb9 \u5f97\u5230 \u4e0d\u540c\u7684\u7ed3\u679c \u5728 Python \u4e2d\uff0c\u8bbe\u7f6e\u5b57\u5178\u7684 \u952e\u503c\u5bf9 \u65f6\uff0c\u4f1a\u9996\u5148\u5bf9 key \u8fdb\u884c hash \u5df2\u51b3\u5b9a\u5982\u4f55\u5728\u5185\u5b58\u4e2d\u4fdd\u5b58\u5b57\u5178\u7684\u6570\u636e\uff0c\u4ee5\u65b9\u4fbf \u540e\u7eed \u5bf9\u5b57\u5178\u7684\u64cd\u4f5c\uff1a \u589e\u3001\u5220\u3001\u6539\u3001\u67e5 \u952e\u503c\u5bf9\u7684 key \u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b\u6570\u636e \u5b57\u7b26\u4e32 \u6570\u5b57 \u5143\u7ec4 \u952e\u503c\u5bf9\u7684 value \u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e 02. \u5b57\u5178\u589e\u6539\u67e5 2.1 \u67e5\u770b\u5b57\u5178\u7684\u503c \u548c\u5217\u8868\u4e0d\u540c\uff0c\u5b57\u5178\u662f\u4ee5key\u4f5c\u4e3a\u7d22\u5f15 \u5b57\u5178[key] key\u4f7f\u7528\u4e2d\u62ec\u53f7\u5305\u88f9 name_dict = { 'name' : '\u5c0f\u660e' , '\u5e74\u9f84' : 19 , '\u8eab\u9ad8' : 1.75 } print ( name_dict [ \"\u5e74\u9f84\" ]) >>> 19 2.2 \u4fee\u6539\u5b57\u5178\u7684\u503c \u5b57\u5178\u4e2d\u4e0d\u5141\u8bb8key\u76f8\u540c\uff0c\u5982\u679c\u5b58\u5728\u76f8\u540c\u7684key\uff0c\u53ea\u6709\u540e\u4e00\u4e2a\u503c\u4f1a\u88ab\u8bb0\u4f4f name_dict = { 'name' : '\u5c0f\u660e' , '\u5e74\u9f84' : 19 , 'name' : '\u5c0f\u674e' } print ( name_dict [ \"name\" ]) >>> \u5c0f\u674e \u6307\u5b9a\u5b57\u5178\u7684key\u5373\u53ef\u4fee\u6539\u5bf9\u5e94\u7684\u503c name_dict = { 'name' : '\u5c0f\u660e' , '\u5e74\u9f84' : 19 , '\u8eab\u9ad8' : 1.75 } name_dict [ \"\u8eab\u9ad8\" ] = 1.85 print ( name_dict ) >>> { 'name' : '\u5c0f\u660e' , '\u5e74\u9f84' : 19 , '\u8eab\u9ad8' : 1.85 } 2.3 \u65b0\u589e\u5b57\u5178\u7684\u503c \u6307\u5b9a\u5b57\u5178\u7684key\uff0c\u5982\u679ckey\u4e0d\u5b58\u5728\uff0c\u5373\u65b0\u589e \u4e3a\u6307\u5b9a\u7684key\u8d4b\u503c name_dict = { 'name' : '\u5c0f\u660e' , '\u5e74\u9f84' : 19 , '\u8eab\u9ad8' : 1.75 } name_dict [ \"\u4f53\u91cd\" ] = 120 print ( name_dict ) >>> { 'name' : '\u5c0f\u660e' , '\u5e74\u9f84' : 19 , '\u8eab\u9ad8' : 1.75 , '\u4f53\u91cd' : 120 } 03. \u590d\u5236\u548c\u5d4c\u5957 3.1 \u5b57\u5178\u590d\u5236 \u5982\u679c\u60f3\u5f97\u5230\u5b57\u5178\u7684\u526f\u672c\uff0c\u4e0d\u80fd\u4f7f\u7528 dict2= dict1 \u7684\u65b9\u6cd5\u590d\u5236\uff0c\u56e0\u4e3a dict2 \u53ea\u662f\u5bf9 dict1 \u7684\u5f15\u7528\uff0c dict1 \u66f4\u6539\u4e5f\u5c06\u5728 dict2 \u66f4\u6539\u3002 \u590d\u5236\u5b57\u5178\u526f\u672c\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u662f copy \u7684\u65b9\u6cd5\uff1a \u8bed\u6cd5\u662f \u65b0\u5b57\u5178\u540d = \u88ab\u590d\u5236\u5b57\u5178\u540d.copy() thisdict = { \"brand\" : \"Porsche\" , \"model\" : \"911\" , \"year\" : 1963 } mydict = thisdict . copy () print ( mydict ) \u53e6\u4e00\u79cd\u662f\u4f7f\u7528\u5185\u5efa\u65b9\u6cd5 dict() \u8bed\u6cd5\uff1a \u65b0\u5b57\u5178\u540d = dict(\u539f\u5b57\u5178\uff09 thisdict = { \"brand\" : \"Porsche\" , \"model\" : \"911\" , \"year\" : 1963 } mydict = dict ( thisdict ) print ( mydict ) 3.2 \u5b57\u5178\u5d4c\u5957 \u5b57\u5178\u4e2d\u5305\u542b\u591a\u4e2a\u5b57\u5178\uff0c\u79f0\u4e3a\u5d4c\u5957\u5b57\u5178\uff1a myfamily = { \"child1\" : { \"name\" : \"Phoebe Adele\" , \"year\" : 2002 }, \"child2\" : { \"name\" : \"Jennifer Katharine\" , \"year\" : 1996 }, \"child3\" : { \"name\" : \"Rory John\" , \"year\" : 1999 } } \u5d4c\u5957\u5df2\u7ecf\u5b58\u5728\u7684\u5b57\u5178\uff1a child1 = { \"name\" : \"Phoebe Adele\" , \"year\" : 2002 } child2 = { \"name\" : \"Jennifer Katharine\" , \"year\" : 1996 } child3 = { \"name\" : \"Rory John\" , \"year\" : 1999 } myfamily = { \"child1\" : child1 , \"child2\" : child2 , \"child3\" : child3 } \u5d4c\u5957\u5b57\u5178\u7684\u53d6\u503c\uff1a dict1 [ \u5916\u5c42key ][ \u5185\u5c42key ] 04. \u5185\u7f6e\u51fd\u6570 \u5e8f\u53f7 \u51fd\u6570\u53ca\u63cf\u8ff0 \u5b9e\u4f8b 1 len(dict)\u8ba1\u7b97\u5b57\u5178\u5143\u7d20\u4e2a\u6570\uff0c\u5373\u952e\u7684\u603b\u6570\u3002 >>> tinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} >>> len(tinydict) 3 2 str(dict)\u8f93\u51fa\u5b57\u5178\uff0c\u53ef\u4ee5\u6253\u5370\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002 >>> tinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} >>> str(tinydict) \"{'Name': 'Runoob', 'Class': 'First', 'Age': 7}\" 3 type(variable)\u8fd4\u56de\u8f93\u5165\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u5982\u679c\u53d8\u91cf\u662f\u5b57\u5178\u5c31\u8fd4\u56de\u5b57\u5178\u7c7b\u578b\u3002 >>> tinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} >>> type(tinydict) 05. \u5185\u7f6e\u65b9\u6cd5 ipython3\u4e2d\u952e\u5165 dir(dict) ,\u53ef\u4ee5\u770b\u5230\u5b57\u5178\u6709\u4ee5\u4e0b\u65b9\u6cd5\uff1a >>> dir ( dict ) [ 'clear' , 'copy' , 'fromkeys' , 'get' , 'items' , 'keys' , 'pop' , 'popitem' , 'setdefault' , 'update' , 'values' ] >>> \u5206\u7c7b \u65b9\u6cd5 \u8bf4\u660e \u5220\u9664 clear() \u6e05\u7a7a\u5b57\u5178\u4e2d\u7684\u6240\u6709\u5143\u7d20 pop() \u5220\u9664\u62e5\u6709\u6307\u5b9a\u952e\u7684\u5143\u7d20 popitem() \u5220\u9664\u6700\u540e\u63d2\u5165\u7684\u952e\u503c\u5bf9 \u67e5\u627e get() \u8fd4\u56de\u6307\u5b9a\u952e\u7684\u503c items() \u8fd4\u56de\u5305\u542b\u6bcf\u4e2a\u952e\u503c\u5bf9\u7684\u5143\u7ec4\u7684\u5217\u8868 keys() \u8fd4\u56de\u5305\u542b\u5b57\u5178\u952e\u7684\u5217\u8868 values() \u8fd4\u56de\u5b57\u5178\u4e2d\u6240\u6709\u503c\u7684\u5217\u8868 \u590d\u5236 copy() \u590d\u5236\u5b57\u5178\u526f\u672c fromkeys() \u8fd4\u56de\u62e5\u6709\u6307\u5b9a\u952e\u548c\u503c\u7684\u5b57\u5178 \u66f4\u65b0 update() \u628a\u5b57\u5178dict2\u7684\u952e/\u503c\u5bf9\u66f4\u65b0\u5230dict\u91cc setdefault() \u8fd4\u56de\u6307\u5b9a\u952e\u7684\u503c\u3002\u5982\u679c\u8be5\u952e\u4e0d\u5b58\u5728\uff0c\u5219\u63d2\u5165\u5177\u6709\u6307\u5b9a\u503c\u7684\u952e\u3002 5.1 clear() \u5220\u9664\u5b57\u5178\u6240\u6709\u5143\u7d20 \u65e0\u8fd4\u56de\u503c\u548c\u53c2\u6570 tinydict = { 'Name' : 'Zara' , 'Age' : 7 } print ( \"\u5b57\u5178\u957f\u5ea6 : %d \" % len ( tinydict )) >>> 2 tinydict . clear () print ( \"\u5b57\u5178\u5220\u9664\u540e\u957f\u5ea6 : %d \" % len ( tinydict )) >>> 0 5.2 pop() \u5f39\u51fa\u5b57\u5178\u6307\u5b9a\u952e\u7684\u503c \u8fd4\u56de\u88ab\u5f39\u51fa\u952e\u5bf9\u5e94\u7684\u503c dict1 = { \"name\" : \"xiaoming\" , \"age\" : 18 } x = dict1 . pop ( \"name\" ) print ( x ) >>> xiaoming print ( dict1 ) >>> { 'age' : 18 } 5.3 popitem() \u4ece\u5b57\u5178\u4e2d\u5220\u9664\u6700\u540e\u4e00\u4e2a\u9879\u76ee\uff1a \u8fd4\u56de\u4e00\u4e2a\u88ab\u5220\u9664\u7684\u5143\u7ec4 dict1 = { \"name\" : \"xiaoming\" , \"age\" : 18 } x = dict1 . popitem () print ( x ) print ( dict1 ) >>> ( 'age' , 18 ) { 'name' : 'xiaoming' } \u7531\u4e8e\u5220\u9664\u7684\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u5e8f\u5217\u89e3\u5305\u7684\u65b9\u5f0f\u5206\u522b\u63a5\u53d7\u88ab\u5f39\u51fa\u7684 key \u548c value # \u5c06\u5f39\u51fa\u7684\u5143\u7ec4\u8d4b\u503c\u7ed9a\u548cb a , b = dict1 . popitem () print ( a , b ) >>> name xiaoming 5.4 get() get() \u65b9\u6cd5\u5176\u5b9e\u5c31\u662f\u6839\u636e key \u6765\u83b7\u53d6 value\uff0c\u5b83\u76f8\u5f53\u4e8e\u65b9\u62ec\u53f7\u8bed\u6cd5\u7684\u589e\u5f3a\u7248\uff0c\u5f53\u4f7f\u7528\u65b9\u62ec\u53f7\u8bed\u6cd5\u8bbf\u95ee\u5e76\u4e0d\u5b58\u5728\u7684 key \u65f6\uff0c\u5b57\u5178\u4f1a\u5f15\u53d1 KeyError \u9519\u8bef\uff1b\u4f46\u5982\u679c\u4f7f\u7528 get() \u65b9\u6cd5\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684 key\uff0c\u8be5\u65b9\u6cd5\u4f1a\u7b80\u5355\u5730\u8fd4\u56de None\uff0c\u4e0d\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002\u4f8b\u5982\u5982\u4e0b\u4ee3\u7801\uff1a cars = { 'BMW' : 8.5 , 'BENS' : 8.3 , 'AUDI' : 7.9 } # \u83b7\u53d6'BMW'\u5bf9\u5e94\u7684value print ( cars . get ( 'BMW' )) # 8.5 print ( cars . get ( 'PORSCHE' )) # None print ( cars [ 'PORSCHE' ]) # KeyError 5.5 items()\u3001keys()\u3001values() items() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u952e\u503c\u5bf9 keys() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684key values() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684\u503c \u4f7f\u7528\u8fd9\u4e09\u4e2a\u65b9\u6cd5\uff0c\u9700\u8981\u4f7f\u7528 list\uff08\uff09 \u65b9\u6cd5\u5c06\u8fd4\u56de\u503c\u8f6c\u6362\u4e3a\u5217\u8868\u518d\u8f93\u51fa price = { \"\u82f9\u679c\" : 2 , \"\u68a8\" : 2.5 , \"\u6854\u5b50\" : 1.9 } # items items = price . items () print ( list ( items )) >>> [( '\u82f9\u679c' , 2 ), ( '\u68a8' , 2.5 ), ( '\u6854\u5b50' , 1.9 )] # keys keys = price . keys () print ( list ( keys )) >>> [ '\u82f9\u679c' , '\u68a8' , '\u6854\u5b50' ] # values values = price . values () print ( list ( values )) >>> [ 2 , 2.5 , 1.9 ] 5.6 fromkeys() fromkeys() \u65b9\u6cd5\u4f7f\u7528\u7ed9\u5b9a\u7684\u591a\u4e2a key \u521b\u5efa\u5b57\u5178\uff0c\u8fd9\u4e9b key \u5bf9\u5e94\u7684 value \u9ed8\u8ba4\u90fd\u662f None\uff1b\u4e5f\u53ef\u4ee5\u989d\u5916\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\u4f5c\u4e3a\u9ed8\u8ba4\u7684 value\u3002\u8be5\u65b9\u6cd5\u4e00\u822c\u4e0d\u4f1a\u4f7f\u7528\u5b57\u5178\u5bf9\u8c61\u8c03\u7528\uff08\u6ca1\u4ec0\u4e48\u610f\u4e49\uff09\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528 dict \u7c7b\u76f4\u63a5\u8c03\u7528\u3002\u4f8b\u5982\u5982\u4e0b\u4ee3\u7801\uff1a # \u4f7f\u7528\u5217\u8868\u521b\u5efa\u5305\u542b2\u4e2akey\u7684\u5b57\u5178 a_dict = dict . fromkeys ([ 'a' , 'b' ]) print ( a_dict ) # {'a': None, 'b': None} # \u4f7f\u7528\u5143\u7ec4\u521b\u5efa\u5305\u542b2\u4e2akey\u7684\u5b57\u5178 b_dict = dict . fromkeys (( 13 , 17 )) print ( b_dict ) # {13: None, 17: None} # \u4f7f\u7528\u5143\u7ec4\u521b\u5efa\u5305\u542b2\u4e2akey\u7684\u5b57\u5178\uff0c\u6307\u5b9a\u9ed8\u8ba4\u7684value c_dict = dict . fromkeys (( 13 , 17 ), 'good' ) print ( c_dict ) # {13: 'good', 17: 'good'} 5.7 update() update\u65b9\u6cd5\u4ee5\u4e00\u4e2a\u65b0\u5b57\u5178\u66f4\u65b0\u539f\u5b57\u5178 \u5982\u679c\u539f\u5b57\u5178\u4e2d\u7684\u952e\u503c\u5bf9\u5df2\u5305\u542b\u9700\u8981\u8986\u76d6\u7684\u952e\u503c\u5bf9\uff0c\u5219\u4f1a\u8986\u76d6 \u5982\u679c\u539f\u5b57\u5178\u7684\u952e\u503c\u5bf9\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u65b0\u589e price = { \"\u82f9\u679c\" : 2 , \"\u68a8\" : 2.5 , \"\u6854\u5b50\" : 1.9 } price . update ({ \"\u82f9\u679c\" : 3 , \"\u897f\u74dc\" : 5.5 }) print ( price ) >>> { '\u82f9\u679c' : 3 , '\u68a8' : 2.5 , '\u6854\u5b50' : 1.9 , '\u897f\u74dc' : 5.5 } 5.8 setdefault() setdefault \u65b9\u6cd5\u6839\u636e\u6307\u5b9akey\uff0c\u67e5\u627e\u5bf9\u5e94\u7684\u503c\u3002 \u5982\u679c\u67e5\u627e\u7684key\u4e0d\u5b58\u5728\uff0c\u4f1a\u65b0\u5efa\u952e\u503c\u5bf9\uff0c\u9ed8\u8ba4\u503c\u4e3anone\u3002\u53ef\u4ee5\u6307\u5b9a\u503c \u67e5\u627e\u7684key\u5df2\u5b58\u5728\uff0c\u5373\u4f7f\u6307\u5b9a\u503c\u4e5f\u4e0d\u4f1a\u8986\u76d6 price = { \"\u82f9\u679c\" : 2 , \"\u68a8\" : 2.5 , \"\u6854\u5b50\" : 1.9 } # key\u4e0d\u5b58\u5728\u65f6\uff0c\u6dfb\u52a0\u952e\u503c\u5bf9\uff0c\u9ed8\u8ba4\u4e3anone\uff0c\u5982\u679c\u6307\u5b9a\u503c\uff0c\u5219\u6dfb\u52a0\u5bf9\u5e94\u952e\u503c\u5bf9 print ( price . setdefault ( \"\u5357\u74dc\" , 3.8 )) print ( price ) >>> 3.8 { '\u82f9\u679c' : 2 , '\u68a8' : 2.5 , '\u6854\u5b50' : 1.9 , '\u5357\u74dc' : 3.8 } # key\u5b58\u5728\uff0c\u4e0d\u4f1a\u8986\u76d6 print ( price . setdefault ( \"\u82f9\u679c\" )) print ( price . setdefault ( \"\u82f9\u679c\" , 10 )) print ( price ) >>> 2 2 { '\u82f9\u679c' : 2 , '\u68a8' : 2.5 , '\u6854\u5b50' : 1.9 , '\u5357\u74dc' : 3.8 }","title":"\u5b57\u5178"},{"location":"programming/python/dict/#01","text":"dictionary \uff08\u5b57\u5178\uff09 \u662f \u9664\u5217\u8868\u4ee5\u5916 Python \u4e4b\u4e2d \u6700\u7075\u6d3b \u7684\u6570\u636e\u7c7b\u578b \u5b57\u5178\u540c\u6837\u53ef\u4ee5\u7528\u6765 \u5b58\u50a8\u591a\u4e2a\u6570\u636e \u901a\u5e38\u7528\u4e8e\u5b58\u50a8 \u63cf\u8ff0\u4e00\u4e2a \u7269\u4f53 \u7684\u76f8\u5173\u4fe1\u606f \u548c\u5217\u8868\u7684\u533a\u522b \u5217\u8868 \u662f \u6709\u5e8f \u7684\u5bf9\u8c61\u96c6\u5408 \u5b57\u5178 \u662f \u65e0\u5e8f \u7684\u5bf9\u8c61\u96c6\u5408 \u5b57\u5178\u7528 {} \u5b9a\u4e49 \u5b57\u5178\u4f7f\u7528 \u952e\u503c\u5bf9 \u5b58\u50a8\u6570\u636e\uff0c\u952e\u503c\u5bf9\u4e4b\u95f4\u4f7f\u7528 , \u5206\u9694 \u952e key \u662f\u7d22\u5f15 \u503c value \u662f\u6570\u636e \u952e \u548c \u503c \u4e4b\u95f4\u4f7f\u7528 : \u5206\u9694 \u952e\u5fc5\u987b\u662f\u552f\u4e00\u7684 \u503c \u53ef\u4ee5\u53d6\u4efb\u4f55\u6570\u636e\u7c7b\u578b\uff0c\u4f46 \u952e \u53ea\u80fd\u4f7f\u7528 \u5b57\u7b26\u4e32 \u3001 \u6570\u5b57 \u6216 \u5143\u7ec4","title":"01. \u5b57\u5178\u7684\u5b9a\u4e49"},{"location":"programming/python/dict/#11","text":"\u4f7f\u7528 {} \u521b\u5efa\u7b80\u5355\u7684\u5b57\u5178\uff1a scores = { \"\u8bed\u6587\" : 100 , \"\u6570\u5b66\" : 98 , \"\u82f1\u8bed\" : 30 } \u4f7f\u7528\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u3001\u5143\u7ec4\u4f5c\u4e3a\u5b57\u5178\u7684key\uff1a # \u5b57\u7b26\u4e32 str_dict = { \"name\" : \"\u5f20\u4e09\" , \"age\" : 18 } # \u6570\u5b57\u4f5c\u4e3akey\uff0c\u5217\u8868\u4f5c\u4e3a\u503c number_dict = { 18 : \"\u5c11\u5e74\" , 19 : 20 , 20 :[ 1 , 2 , 3 ]} # \u5143\u7ec4 tup_dict = {( 1 , 2 ): \"\u5c0f\u660e\" , ( \"\u897f\u74dc\" , \"\u9ec4\u74dc\" ): \"\u852c\u679c\" } \u4f7f\u7528 dict() \u521b\u5efa\u5b57\u5178 \u53ef\u4ee5\u4ee5\u591a\u4e2a\u5143\u7ec4\u6216\u8005\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u5411 dict() \u5185\u4f20\u9012 num_List = [( \"\u5c0f\u660e\" , \"18\" ), ( \"\u5c0f\u674e\" , 19 )] dict1 = dict ( num_List ) print ( dict1 ) >>> { '\u5c0f\u660e' : '18' , '\u5c0f\u674e' : 19 } \u5982\u679c\u4e0d\u5411 dict() \u5185\u4f20\u53c2\uff0c\u5219\u521b\u5efa\u4e86\u7a7a\u5b57\u5178\uff0c\u7136\u540e\u4f7f\u7528 dict() \u6307\u5b9a\u5173\u952e\u5b57\u521b\u5efa\u5b57\u5178\uff1a \u901a\u8fc7 dict \u901a\u8fc7\u5173\u952e\u5b57\u521b\u5efa\u5b57\u5178\u65f6\uff0c\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684key\u4e0d\u9700\u8981\u4ee5 \u201c\u201d \u5305\u88f9 name_dict = {} print ( name_dict ) >>> {} name_dict = dict ( \u59d3\u540d = \"\u5c0f\u660e\" , \u5e74\u9f84 = 19 ) print ( name_dict ) >>> { 'name' : '\u5c0f\u660e' , '\u5e74\u9f84' : 19 }","title":"1.1 \u521b\u5efa\u5b57\u5178"},{"location":"programming/python/dict/#12-hash","text":"Python \u4e2d\u5185\u7f6e\u6709\u4e00\u4e2a\u540d\u5b57\u53eb\u505a hash(o) \u7684\u51fd\u6570 \u63a5\u6536\u4e00\u4e2a \u4e0d\u53ef\u53d8\u7c7b\u578b \u7684\u6570\u636e\u4f5c\u4e3a \u53c2\u6570 \u8fd4\u56de \u7ed3\u679c\u662f\u4e00\u4e2a \u6574\u6570 \u54c8\u5e0c \u662f\u4e00\u79cd \u7b97\u6cd5 \uff0c\u5176\u4f5c\u7528\u5c31\u662f\u63d0\u53d6\u6570\u636e\u7684 \u7279\u5f81\u7801\uff08\u6307\u7eb9\uff09 \u76f8\u540c\u7684\u5185\u5bb9 \u5f97\u5230 \u76f8\u540c\u7684\u7ed3\u679c \u4e0d\u540c\u7684\u5185\u5bb9 \u5f97\u5230 \u4e0d\u540c\u7684\u7ed3\u679c \u5728 Python \u4e2d\uff0c\u8bbe\u7f6e\u5b57\u5178\u7684 \u952e\u503c\u5bf9 \u65f6\uff0c\u4f1a\u9996\u5148\u5bf9 key \u8fdb\u884c hash \u5df2\u51b3\u5b9a\u5982\u4f55\u5728\u5185\u5b58\u4e2d\u4fdd\u5b58\u5b57\u5178\u7684\u6570\u636e\uff0c\u4ee5\u65b9\u4fbf \u540e\u7eed \u5bf9\u5b57\u5178\u7684\u64cd\u4f5c\uff1a \u589e\u3001\u5220\u3001\u6539\u3001\u67e5 \u952e\u503c\u5bf9\u7684 key \u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b\u6570\u636e \u5b57\u7b26\u4e32 \u6570\u5b57 \u5143\u7ec4 \u952e\u503c\u5bf9\u7684 value \u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e","title":"1.2 hash"},{"location":"programming/python/dict/#02","text":"","title":"02. \u5b57\u5178\u589e\u6539\u67e5"},{"location":"programming/python/dict/#21","text":"\u548c\u5217\u8868\u4e0d\u540c\uff0c\u5b57\u5178\u662f\u4ee5key\u4f5c\u4e3a\u7d22\u5f15 \u5b57\u5178[key] key\u4f7f\u7528\u4e2d\u62ec\u53f7\u5305\u88f9 name_dict = { 'name' : '\u5c0f\u660e' , '\u5e74\u9f84' : 19 , '\u8eab\u9ad8' : 1.75 } print ( name_dict [ \"\u5e74\u9f84\" ]) >>> 19","title":"2.1 \u67e5\u770b\u5b57\u5178\u7684\u503c"},{"location":"programming/python/dict/#22","text":"\u5b57\u5178\u4e2d\u4e0d\u5141\u8bb8key\u76f8\u540c\uff0c\u5982\u679c\u5b58\u5728\u76f8\u540c\u7684key\uff0c\u53ea\u6709\u540e\u4e00\u4e2a\u503c\u4f1a\u88ab\u8bb0\u4f4f name_dict = { 'name' : '\u5c0f\u660e' , '\u5e74\u9f84' : 19 , 'name' : '\u5c0f\u674e' } print ( name_dict [ \"name\" ]) >>> \u5c0f\u674e \u6307\u5b9a\u5b57\u5178\u7684key\u5373\u53ef\u4fee\u6539\u5bf9\u5e94\u7684\u503c name_dict = { 'name' : '\u5c0f\u660e' , '\u5e74\u9f84' : 19 , '\u8eab\u9ad8' : 1.75 } name_dict [ \"\u8eab\u9ad8\" ] = 1.85 print ( name_dict ) >>> { 'name' : '\u5c0f\u660e' , '\u5e74\u9f84' : 19 , '\u8eab\u9ad8' : 1.85 }","title":"2.2 \u4fee\u6539\u5b57\u5178\u7684\u503c"},{"location":"programming/python/dict/#23","text":"\u6307\u5b9a\u5b57\u5178\u7684key\uff0c\u5982\u679ckey\u4e0d\u5b58\u5728\uff0c\u5373\u65b0\u589e \u4e3a\u6307\u5b9a\u7684key\u8d4b\u503c name_dict = { 'name' : '\u5c0f\u660e' , '\u5e74\u9f84' : 19 , '\u8eab\u9ad8' : 1.75 } name_dict [ \"\u4f53\u91cd\" ] = 120 print ( name_dict ) >>> { 'name' : '\u5c0f\u660e' , '\u5e74\u9f84' : 19 , '\u8eab\u9ad8' : 1.75 , '\u4f53\u91cd' : 120 }","title":"2.3 \u65b0\u589e\u5b57\u5178\u7684\u503c"},{"location":"programming/python/dict/#03","text":"","title":"03. \u590d\u5236\u548c\u5d4c\u5957"},{"location":"programming/python/dict/#31","text":"\u5982\u679c\u60f3\u5f97\u5230\u5b57\u5178\u7684\u526f\u672c\uff0c\u4e0d\u80fd\u4f7f\u7528 dict2= dict1 \u7684\u65b9\u6cd5\u590d\u5236\uff0c\u56e0\u4e3a dict2 \u53ea\u662f\u5bf9 dict1 \u7684\u5f15\u7528\uff0c dict1 \u66f4\u6539\u4e5f\u5c06\u5728 dict2 \u66f4\u6539\u3002 \u590d\u5236\u5b57\u5178\u526f\u672c\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u662f copy \u7684\u65b9\u6cd5\uff1a \u8bed\u6cd5\u662f \u65b0\u5b57\u5178\u540d = \u88ab\u590d\u5236\u5b57\u5178\u540d.copy() thisdict = { \"brand\" : \"Porsche\" , \"model\" : \"911\" , \"year\" : 1963 } mydict = thisdict . copy () print ( mydict ) \u53e6\u4e00\u79cd\u662f\u4f7f\u7528\u5185\u5efa\u65b9\u6cd5 dict() \u8bed\u6cd5\uff1a \u65b0\u5b57\u5178\u540d = dict(\u539f\u5b57\u5178\uff09 thisdict = { \"brand\" : \"Porsche\" , \"model\" : \"911\" , \"year\" : 1963 } mydict = dict ( thisdict ) print ( mydict )","title":"3.1 \u5b57\u5178\u590d\u5236"},{"location":"programming/python/dict/#32","text":"\u5b57\u5178\u4e2d\u5305\u542b\u591a\u4e2a\u5b57\u5178\uff0c\u79f0\u4e3a\u5d4c\u5957\u5b57\u5178\uff1a myfamily = { \"child1\" : { \"name\" : \"Phoebe Adele\" , \"year\" : 2002 }, \"child2\" : { \"name\" : \"Jennifer Katharine\" , \"year\" : 1996 }, \"child3\" : { \"name\" : \"Rory John\" , \"year\" : 1999 } } \u5d4c\u5957\u5df2\u7ecf\u5b58\u5728\u7684\u5b57\u5178\uff1a child1 = { \"name\" : \"Phoebe Adele\" , \"year\" : 2002 } child2 = { \"name\" : \"Jennifer Katharine\" , \"year\" : 1996 } child3 = { \"name\" : \"Rory John\" , \"year\" : 1999 } myfamily = { \"child1\" : child1 , \"child2\" : child2 , \"child3\" : child3 } \u5d4c\u5957\u5b57\u5178\u7684\u53d6\u503c\uff1a dict1 [ \u5916\u5c42key ][ \u5185\u5c42key ]","title":"3.2 \u5b57\u5178\u5d4c\u5957"},{"location":"programming/python/dict/#04","text":"\u5e8f\u53f7 \u51fd\u6570\u53ca\u63cf\u8ff0 \u5b9e\u4f8b 1 len(dict)\u8ba1\u7b97\u5b57\u5178\u5143\u7d20\u4e2a\u6570\uff0c\u5373\u952e\u7684\u603b\u6570\u3002 >>> tinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} >>> len(tinydict) 3 2 str(dict)\u8f93\u51fa\u5b57\u5178\uff0c\u53ef\u4ee5\u6253\u5370\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002 >>> tinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} >>> str(tinydict) \"{'Name': 'Runoob', 'Class': 'First', 'Age': 7}\" 3 type(variable)\u8fd4\u56de\u8f93\u5165\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u5982\u679c\u53d8\u91cf\u662f\u5b57\u5178\u5c31\u8fd4\u56de\u5b57\u5178\u7c7b\u578b\u3002 >>> tinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} >>> type(tinydict)","title":"04. \u5185\u7f6e\u51fd\u6570"},{"location":"programming/python/dict/#05","text":"ipython3\u4e2d\u952e\u5165 dir(dict) ,\u53ef\u4ee5\u770b\u5230\u5b57\u5178\u6709\u4ee5\u4e0b\u65b9\u6cd5\uff1a >>> dir ( dict ) [ 'clear' , 'copy' , 'fromkeys' , 'get' , 'items' , 'keys' , 'pop' , 'popitem' , 'setdefault' , 'update' , 'values' ] >>> \u5206\u7c7b \u65b9\u6cd5 \u8bf4\u660e \u5220\u9664 clear() \u6e05\u7a7a\u5b57\u5178\u4e2d\u7684\u6240\u6709\u5143\u7d20 pop() \u5220\u9664\u62e5\u6709\u6307\u5b9a\u952e\u7684\u5143\u7d20 popitem() \u5220\u9664\u6700\u540e\u63d2\u5165\u7684\u952e\u503c\u5bf9 \u67e5\u627e get() \u8fd4\u56de\u6307\u5b9a\u952e\u7684\u503c items() \u8fd4\u56de\u5305\u542b\u6bcf\u4e2a\u952e\u503c\u5bf9\u7684\u5143\u7ec4\u7684\u5217\u8868 keys() \u8fd4\u56de\u5305\u542b\u5b57\u5178\u952e\u7684\u5217\u8868 values() \u8fd4\u56de\u5b57\u5178\u4e2d\u6240\u6709\u503c\u7684\u5217\u8868 \u590d\u5236 copy() \u590d\u5236\u5b57\u5178\u526f\u672c fromkeys() \u8fd4\u56de\u62e5\u6709\u6307\u5b9a\u952e\u548c\u503c\u7684\u5b57\u5178 \u66f4\u65b0 update() \u628a\u5b57\u5178dict2\u7684\u952e/\u503c\u5bf9\u66f4\u65b0\u5230dict\u91cc setdefault() \u8fd4\u56de\u6307\u5b9a\u952e\u7684\u503c\u3002\u5982\u679c\u8be5\u952e\u4e0d\u5b58\u5728\uff0c\u5219\u63d2\u5165\u5177\u6709\u6307\u5b9a\u503c\u7684\u952e\u3002","title":"05. \u5185\u7f6e\u65b9\u6cd5"},{"location":"programming/python/dict/#51-clear","text":"\u5220\u9664\u5b57\u5178\u6240\u6709\u5143\u7d20 \u65e0\u8fd4\u56de\u503c\u548c\u53c2\u6570 tinydict = { 'Name' : 'Zara' , 'Age' : 7 } print ( \"\u5b57\u5178\u957f\u5ea6 : %d \" % len ( tinydict )) >>> 2 tinydict . clear () print ( \"\u5b57\u5178\u5220\u9664\u540e\u957f\u5ea6 : %d \" % len ( tinydict )) >>> 0","title":"5.1 clear()"},{"location":"programming/python/dict/#52-pop","text":"\u5f39\u51fa\u5b57\u5178\u6307\u5b9a\u952e\u7684\u503c \u8fd4\u56de\u88ab\u5f39\u51fa\u952e\u5bf9\u5e94\u7684\u503c dict1 = { \"name\" : \"xiaoming\" , \"age\" : 18 } x = dict1 . pop ( \"name\" ) print ( x ) >>> xiaoming print ( dict1 ) >>> { 'age' : 18 }","title":"5.2 pop()"},{"location":"programming/python/dict/#53-popitem","text":"\u4ece\u5b57\u5178\u4e2d\u5220\u9664\u6700\u540e\u4e00\u4e2a\u9879\u76ee\uff1a \u8fd4\u56de\u4e00\u4e2a\u88ab\u5220\u9664\u7684\u5143\u7ec4 dict1 = { \"name\" : \"xiaoming\" , \"age\" : 18 } x = dict1 . popitem () print ( x ) print ( dict1 ) >>> ( 'age' , 18 ) { 'name' : 'xiaoming' } \u7531\u4e8e\u5220\u9664\u7684\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u5e8f\u5217\u89e3\u5305\u7684\u65b9\u5f0f\u5206\u522b\u63a5\u53d7\u88ab\u5f39\u51fa\u7684 key \u548c value # \u5c06\u5f39\u51fa\u7684\u5143\u7ec4\u8d4b\u503c\u7ed9a\u548cb a , b = dict1 . popitem () print ( a , b ) >>> name xiaoming","title":"5.3 popitem()"},{"location":"programming/python/dict/#54-get","text":"get() \u65b9\u6cd5\u5176\u5b9e\u5c31\u662f\u6839\u636e key \u6765\u83b7\u53d6 value\uff0c\u5b83\u76f8\u5f53\u4e8e\u65b9\u62ec\u53f7\u8bed\u6cd5\u7684\u589e\u5f3a\u7248\uff0c\u5f53\u4f7f\u7528\u65b9\u62ec\u53f7\u8bed\u6cd5\u8bbf\u95ee\u5e76\u4e0d\u5b58\u5728\u7684 key \u65f6\uff0c\u5b57\u5178\u4f1a\u5f15\u53d1 KeyError \u9519\u8bef\uff1b\u4f46\u5982\u679c\u4f7f\u7528 get() \u65b9\u6cd5\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684 key\uff0c\u8be5\u65b9\u6cd5\u4f1a\u7b80\u5355\u5730\u8fd4\u56de None\uff0c\u4e0d\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002\u4f8b\u5982\u5982\u4e0b\u4ee3\u7801\uff1a cars = { 'BMW' : 8.5 , 'BENS' : 8.3 , 'AUDI' : 7.9 } # \u83b7\u53d6'BMW'\u5bf9\u5e94\u7684value print ( cars . get ( 'BMW' )) # 8.5 print ( cars . get ( 'PORSCHE' )) # None print ( cars [ 'PORSCHE' ]) # KeyError","title":"5.4 get()"},{"location":"programming/python/dict/#55-itemskeysvalues","text":"items() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u952e\u503c\u5bf9 keys() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684key values() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684\u503c \u4f7f\u7528\u8fd9\u4e09\u4e2a\u65b9\u6cd5\uff0c\u9700\u8981\u4f7f\u7528 list\uff08\uff09 \u65b9\u6cd5\u5c06\u8fd4\u56de\u503c\u8f6c\u6362\u4e3a\u5217\u8868\u518d\u8f93\u51fa price = { \"\u82f9\u679c\" : 2 , \"\u68a8\" : 2.5 , \"\u6854\u5b50\" : 1.9 } # items items = price . items () print ( list ( items )) >>> [( '\u82f9\u679c' , 2 ), ( '\u68a8' , 2.5 ), ( '\u6854\u5b50' , 1.9 )] # keys keys = price . keys () print ( list ( keys )) >>> [ '\u82f9\u679c' , '\u68a8' , '\u6854\u5b50' ] # values values = price . values () print ( list ( values )) >>> [ 2 , 2.5 , 1.9 ]","title":"5.5 items()\u3001keys()\u3001values()"},{"location":"programming/python/dict/#56-fromkeys","text":"fromkeys() \u65b9\u6cd5\u4f7f\u7528\u7ed9\u5b9a\u7684\u591a\u4e2a key \u521b\u5efa\u5b57\u5178\uff0c\u8fd9\u4e9b key \u5bf9\u5e94\u7684 value \u9ed8\u8ba4\u90fd\u662f None\uff1b\u4e5f\u53ef\u4ee5\u989d\u5916\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\u4f5c\u4e3a\u9ed8\u8ba4\u7684 value\u3002\u8be5\u65b9\u6cd5\u4e00\u822c\u4e0d\u4f1a\u4f7f\u7528\u5b57\u5178\u5bf9\u8c61\u8c03\u7528\uff08\u6ca1\u4ec0\u4e48\u610f\u4e49\uff09\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528 dict \u7c7b\u76f4\u63a5\u8c03\u7528\u3002\u4f8b\u5982\u5982\u4e0b\u4ee3\u7801\uff1a # \u4f7f\u7528\u5217\u8868\u521b\u5efa\u5305\u542b2\u4e2akey\u7684\u5b57\u5178 a_dict = dict . fromkeys ([ 'a' , 'b' ]) print ( a_dict ) # {'a': None, 'b': None} # \u4f7f\u7528\u5143\u7ec4\u521b\u5efa\u5305\u542b2\u4e2akey\u7684\u5b57\u5178 b_dict = dict . fromkeys (( 13 , 17 )) print ( b_dict ) # {13: None, 17: None} # \u4f7f\u7528\u5143\u7ec4\u521b\u5efa\u5305\u542b2\u4e2akey\u7684\u5b57\u5178\uff0c\u6307\u5b9a\u9ed8\u8ba4\u7684value c_dict = dict . fromkeys (( 13 , 17 ), 'good' ) print ( c_dict ) # {13: 'good', 17: 'good'}","title":"5.6 fromkeys()"},{"location":"programming/python/dict/#57-update","text":"update\u65b9\u6cd5\u4ee5\u4e00\u4e2a\u65b0\u5b57\u5178\u66f4\u65b0\u539f\u5b57\u5178 \u5982\u679c\u539f\u5b57\u5178\u4e2d\u7684\u952e\u503c\u5bf9\u5df2\u5305\u542b\u9700\u8981\u8986\u76d6\u7684\u952e\u503c\u5bf9\uff0c\u5219\u4f1a\u8986\u76d6 \u5982\u679c\u539f\u5b57\u5178\u7684\u952e\u503c\u5bf9\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u65b0\u589e price = { \"\u82f9\u679c\" : 2 , \"\u68a8\" : 2.5 , \"\u6854\u5b50\" : 1.9 } price . update ({ \"\u82f9\u679c\" : 3 , \"\u897f\u74dc\" : 5.5 }) print ( price ) >>> { '\u82f9\u679c' : 3 , '\u68a8' : 2.5 , '\u6854\u5b50' : 1.9 , '\u897f\u74dc' : 5.5 }","title":"5.7 update()"},{"location":"programming/python/dict/#58-setdefault","text":"setdefault \u65b9\u6cd5\u6839\u636e\u6307\u5b9akey\uff0c\u67e5\u627e\u5bf9\u5e94\u7684\u503c\u3002 \u5982\u679c\u67e5\u627e\u7684key\u4e0d\u5b58\u5728\uff0c\u4f1a\u65b0\u5efa\u952e\u503c\u5bf9\uff0c\u9ed8\u8ba4\u503c\u4e3anone\u3002\u53ef\u4ee5\u6307\u5b9a\u503c \u67e5\u627e\u7684key\u5df2\u5b58\u5728\uff0c\u5373\u4f7f\u6307\u5b9a\u503c\u4e5f\u4e0d\u4f1a\u8986\u76d6 price = { \"\u82f9\u679c\" : 2 , \"\u68a8\" : 2.5 , \"\u6854\u5b50\" : 1.9 } # key\u4e0d\u5b58\u5728\u65f6\uff0c\u6dfb\u52a0\u952e\u503c\u5bf9\uff0c\u9ed8\u8ba4\u4e3anone\uff0c\u5982\u679c\u6307\u5b9a\u503c\uff0c\u5219\u6dfb\u52a0\u5bf9\u5e94\u952e\u503c\u5bf9 print ( price . setdefault ( \"\u5357\u74dc\" , 3.8 )) print ( price ) >>> 3.8 { '\u82f9\u679c' : 2 , '\u68a8' : 2.5 , '\u6854\u5b50' : 1.9 , '\u5357\u74dc' : 3.8 } # key\u5b58\u5728\uff0c\u4e0d\u4f1a\u8986\u76d6 print ( price . setdefault ( \"\u82f9\u679c\" )) print ( price . setdefault ( \"\u82f9\u679c\" , 10 )) print ( price ) >>> 2 2 { '\u82f9\u679c' : 2 , '\u68a8' : 2.5 , '\u6854\u5b50' : 1.9 , '\u5357\u74dc' : 3.8 }","title":"5.8 setdefault()"},{"location":"programming/python/function/","text":"01. \u51fd\u6570\u662f\u4ec0\u4e48\uff1f \u51fd\u6570\u7684\u672c\u8d28\u5c31\u662f\u4e00\u6bb5\u6709\u7279\u5b9a\u529f\u80fd\u3001\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u7684\u4ee3\u7801\uff0c\u8fd9\u6bb5\u4ee3\u7801\u5df2\u7ecf\u88ab\u63d0\u524d\u7f16\u5199\u597d\u4e86\uff0c\u5e76\u4e14\u4e3a\u5176\u8d77\u4e00\u4e2a\u201c\u597d\u542c\u201d\u7684\u540d\u5b57\u3002\u5728\u540e\u7eed\u7f16\u5199\u7a0b\u5e8f\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u9700\u8981\u540c\u6837\u7684\u529f\u80fd\uff0c\u76f4\u63a5\u901a\u8fc7\u8d77\u597d\u7684\u540d\u5b57\u5c31\u53ef\u4ee5\u8c03\u7528\u8fd9\u6bb5\u4ee3\u7801\u3002 \u51fd\u6570\u4ee3\u7801\u5757\u4ee5 def \u5173\u952e\u8bcd\u5f00\u5934\uff0c\u540e\u63a5\u51fd\u6570\u6807\u8bc6\u7b26\u540d\u79f0\u548c\u5706\u62ec\u53f7 () \u3002 \u4efb\u4f55\u4f20\u5165\u53c2\u6570\u548c\u81ea\u53d8\u91cf\u5fc5\u987b\u653e\u5728\u5706\u62ec\u53f7\u4e2d\u95f4\uff0c\u5706\u62ec\u53f7\u4e4b\u95f4\u53ef\u4ee5\u7528\u4e8e\u5b9a\u4e49\u53c2\u6570\u3002 \u51fd\u6570\u7684\u7b2c\u4e00\u884c\u8bed\u53e5\u53ef\u4ee5\u9009\u62e9\u6027\u5730\u4f7f\u7528\u6587\u6863\u5b57\u7b26\u4e32\u2014\u7528\u4e8e\u5b58\u653e\u51fd\u6570\u8bf4\u660e\u3002 \u51fd\u6570\u5185\u5bb9\u4ee5\u5192\u53f7 : \u8d77\u59cb\uff0c\u5e76\u4e14\u7f29\u8fdb\u3002 return [\u8868\u8fbe\u5f0f] \u7ed3\u675f\u51fd\u6570\uff0c\u9009\u62e9\u6027\u5730\u8fd4\u56de\u4e00\u4e2a\u503c\u7ed9\u8c03\u7528\u65b9\uff0c\u4e0d\u5e26\u8868\u8fbe\u5f0f\u7684 return \u76f8\u5f53\u4e8e\u8fd4\u56de None\u3002 02. \u51fd\u6570\u7684\u5b9a\u4e49 2.1 \u8bed\u6cd5 def \u51fd\u6570\u540d ( \u53c2\u6570\u5217\u8868 ): // \u5b9e\u73b0\u7279\u5b9a\u529f\u80fd\u7684\u591a\u884c\u4ee3\u7801 [ return [ \u8fd4\u56de\u503c ]] \u51fd\u6570\u540d\uff1a\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u7b26\u5408 Python \u8bed\u6cd5\u7684\u6807\u8bc6\u7b26\uff0c\u4f46\u4e0d\u5efa\u8bae\u8bfb\u8005\u4f7f\u7528 a\u3001b\u3001c \u8fd9\u7c7b\u7b80\u5355\u7684\u6807\u8bc6\u7b26\u4f5c\u4e3a\u51fd\u6570\u540d\uff0c\u51fd\u6570\u540d\u6700\u597d\u80fd\u591f\u4f53\u73b0\u51fa\u8be5\u51fd\u6570\u7684\u529f\u80fd \u5f62\u53c2\u5217\u8868\uff1a\u8bbe\u7f6e\u8be5\u51fd\u6570\u53ef\u4ee5\u63a5\u6536\u591a\u5c11\u4e2a\u53c2\u6570\uff0c\u591a\u4e2a\u53c2\u6570\u4e4b\u95f4\u7528\u9017\u53f7\uff08 , \uff09\u5206\u9694\u3002 [return [\u8fd4\u56de\u503c] ]\uff1a\u6574\u4f53\u4f5c\u4e3a\u51fd\u6570\u7684\u53ef\u9009\u53c2\u53c2\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u7528\u8fd4\u56de\u503c\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u662f\u5426\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u800c\u5b9a\u3002 2.2 \u81ea\u5b9a\u4e49len\u51fd\u6570 #\u81ea\u5b9a\u4e49 len() \u51fd\u6570 def my_len ( str ): length = 0 for c in str : length = length + 1 return length 03. \u51fd\u6570\u7684\u8c03\u7528 3.1 \u51fd\u6570\u8c03\u7528\u8bed\u6cd5 [ \u8fd4\u56de\u503c ] = \u51fd\u6570\u540d ([ \u5f62\u53c2\u503c ]) \u51fd\u6570\u540d\uff1a\u6307\u7684\u662f\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u540d\u79f0 \u5f62\u53c2\u503c\uff1a\u5f53\u521d\u521b\u5efa\u51fd\u6570\u65f6\u8981\u6c42\u4f20\u5165\u7684\u5404\u4e2a\u5f62\u53c2\u7684\u503c\u3002\u5982\u679c\u51fd\u6570\u6709\u591a\u4e2a\u5f62\u53c2\uff0c\u9700\u8981\u6309\u987a\u5e8f\u4f20\u5b9e\u53c2 \u8fd4\u56de\u503c\uff1a\u51fd\u6570\u7684return\u90e8\u5206\uff0c\u5982\u679c\u8be5\u51fd\u6570\u6709\u8fd4\u56de\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u53d8\u91cf\u6765\u63a5\u6536\u8be5\u503c 3.2 \u8c03\u75282.2\u4e2d\u521b\u5efa\u7684my_len\u51fd\u6570 baidu = my_len ( \"www.baidu.com\" ) print ( baidu ) >>> 13 hello = my_len ( \"helloworld\" ) print ( hello ) >>> 10 04. \u51fd\u6570\u7684\u8bf4\u660e\u6587\u6863 4.1 \u521b\u5efa\u51fd\u6570\u8bf4\u660e\u6587\u6863 \u5728\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u5728\u51fd\u6570\u4ee3\u7801\u5757\u9876\u90e8\uff0c\u591a\u884c\u6ce8\u91ca\u751f\u6210\u8bf4\u660e\u6587\u6863\uff0c\u8bf4\u660e\u6587\u6863\u5305\u542b\u5bf9\u51fd\u6570\u7684\u8bf4\u660e\uff0c\u53c2\u6570\u7684\u8bf4\u660e\uff0c\u548c\u8fd4\u56de\u503c\u7684\u8bf4\u660e def people ( name , age ): \"\"\" \u8bb0\u5f55\u4eba\u5458\u4fe1\u606f\u7684\u51fd\u6570 :param name: \u59d3\u540d :param age: \u5e74\u9f84 :return: \"\"\" return \"\u59d3\u540d\uff1a {} \\n \u5e74\u9f84: {} \" . format ( name , age ) 4.2 \u67e5\u770b\u6587\u6863\u8bf4\u660e help \u65b9\u5f0f\u67e5\u770b\u51fd\u6570\u6587\u6863 help ( people ) >>> people ( name , age ) \u8bb0\u5f55\u4eba\u5458\u4fe1\u606f\u7684\u51fd\u6570 : param name : \u59d3\u540d : param age : \u5e74\u9f84 : return : __doc__ \u65b9\u5f0f\u67e5\u770b\u51fd\u6570\u8bf4\u660e\u6587\u6863 print ( people . __doc__ ) >>> \u8bb0\u5f55\u4eba\u5458\u4fe1\u606f\u7684\u51fd\u6570 : param name : \u59d3\u540d : param age : \u5e74\u9f84 : return :","title":"\u5b9a\u4e49\u51fd\u6570"},{"location":"programming/python/function/#01","text":"\u51fd\u6570\u7684\u672c\u8d28\u5c31\u662f\u4e00\u6bb5\u6709\u7279\u5b9a\u529f\u80fd\u3001\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u7684\u4ee3\u7801\uff0c\u8fd9\u6bb5\u4ee3\u7801\u5df2\u7ecf\u88ab\u63d0\u524d\u7f16\u5199\u597d\u4e86\uff0c\u5e76\u4e14\u4e3a\u5176\u8d77\u4e00\u4e2a\u201c\u597d\u542c\u201d\u7684\u540d\u5b57\u3002\u5728\u540e\u7eed\u7f16\u5199\u7a0b\u5e8f\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u9700\u8981\u540c\u6837\u7684\u529f\u80fd\uff0c\u76f4\u63a5\u901a\u8fc7\u8d77\u597d\u7684\u540d\u5b57\u5c31\u53ef\u4ee5\u8c03\u7528\u8fd9\u6bb5\u4ee3\u7801\u3002 \u51fd\u6570\u4ee3\u7801\u5757\u4ee5 def \u5173\u952e\u8bcd\u5f00\u5934\uff0c\u540e\u63a5\u51fd\u6570\u6807\u8bc6\u7b26\u540d\u79f0\u548c\u5706\u62ec\u53f7 () \u3002 \u4efb\u4f55\u4f20\u5165\u53c2\u6570\u548c\u81ea\u53d8\u91cf\u5fc5\u987b\u653e\u5728\u5706\u62ec\u53f7\u4e2d\u95f4\uff0c\u5706\u62ec\u53f7\u4e4b\u95f4\u53ef\u4ee5\u7528\u4e8e\u5b9a\u4e49\u53c2\u6570\u3002 \u51fd\u6570\u7684\u7b2c\u4e00\u884c\u8bed\u53e5\u53ef\u4ee5\u9009\u62e9\u6027\u5730\u4f7f\u7528\u6587\u6863\u5b57\u7b26\u4e32\u2014\u7528\u4e8e\u5b58\u653e\u51fd\u6570\u8bf4\u660e\u3002 \u51fd\u6570\u5185\u5bb9\u4ee5\u5192\u53f7 : \u8d77\u59cb\uff0c\u5e76\u4e14\u7f29\u8fdb\u3002 return [\u8868\u8fbe\u5f0f] \u7ed3\u675f\u51fd\u6570\uff0c\u9009\u62e9\u6027\u5730\u8fd4\u56de\u4e00\u4e2a\u503c\u7ed9\u8c03\u7528\u65b9\uff0c\u4e0d\u5e26\u8868\u8fbe\u5f0f\u7684 return \u76f8\u5f53\u4e8e\u8fd4\u56de None\u3002","title":"01. \u51fd\u6570\u662f\u4ec0\u4e48\uff1f"},{"location":"programming/python/function/#02","text":"","title":"02. \u51fd\u6570\u7684\u5b9a\u4e49"},{"location":"programming/python/function/#21","text":"def \u51fd\u6570\u540d ( \u53c2\u6570\u5217\u8868 ): // \u5b9e\u73b0\u7279\u5b9a\u529f\u80fd\u7684\u591a\u884c\u4ee3\u7801 [ return [ \u8fd4\u56de\u503c ]] \u51fd\u6570\u540d\uff1a\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u7b26\u5408 Python \u8bed\u6cd5\u7684\u6807\u8bc6\u7b26\uff0c\u4f46\u4e0d\u5efa\u8bae\u8bfb\u8005\u4f7f\u7528 a\u3001b\u3001c \u8fd9\u7c7b\u7b80\u5355\u7684\u6807\u8bc6\u7b26\u4f5c\u4e3a\u51fd\u6570\u540d\uff0c\u51fd\u6570\u540d\u6700\u597d\u80fd\u591f\u4f53\u73b0\u51fa\u8be5\u51fd\u6570\u7684\u529f\u80fd \u5f62\u53c2\u5217\u8868\uff1a\u8bbe\u7f6e\u8be5\u51fd\u6570\u53ef\u4ee5\u63a5\u6536\u591a\u5c11\u4e2a\u53c2\u6570\uff0c\u591a\u4e2a\u53c2\u6570\u4e4b\u95f4\u7528\u9017\u53f7\uff08 , \uff09\u5206\u9694\u3002 [return [\u8fd4\u56de\u503c] ]\uff1a\u6574\u4f53\u4f5c\u4e3a\u51fd\u6570\u7684\u53ef\u9009\u53c2\u53c2\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u7528\u8fd4\u56de\u503c\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u662f\u5426\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u800c\u5b9a\u3002","title":"2.1 \u8bed\u6cd5"},{"location":"programming/python/function/#22-len","text":"#\u81ea\u5b9a\u4e49 len() \u51fd\u6570 def my_len ( str ): length = 0 for c in str : length = length + 1 return length","title":"2.2 \u81ea\u5b9a\u4e49len\u51fd\u6570"},{"location":"programming/python/function/#03","text":"","title":"03. \u51fd\u6570\u7684\u8c03\u7528"},{"location":"programming/python/function/#31","text":"[ \u8fd4\u56de\u503c ] = \u51fd\u6570\u540d ([ \u5f62\u53c2\u503c ]) \u51fd\u6570\u540d\uff1a\u6307\u7684\u662f\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u540d\u79f0 \u5f62\u53c2\u503c\uff1a\u5f53\u521d\u521b\u5efa\u51fd\u6570\u65f6\u8981\u6c42\u4f20\u5165\u7684\u5404\u4e2a\u5f62\u53c2\u7684\u503c\u3002\u5982\u679c\u51fd\u6570\u6709\u591a\u4e2a\u5f62\u53c2\uff0c\u9700\u8981\u6309\u987a\u5e8f\u4f20\u5b9e\u53c2 \u8fd4\u56de\u503c\uff1a\u51fd\u6570\u7684return\u90e8\u5206\uff0c\u5982\u679c\u8be5\u51fd\u6570\u6709\u8fd4\u56de\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u53d8\u91cf\u6765\u63a5\u6536\u8be5\u503c","title":"3.1 \u51fd\u6570\u8c03\u7528\u8bed\u6cd5"},{"location":"programming/python/function/#32-22my_len","text":"baidu = my_len ( \"www.baidu.com\" ) print ( baidu ) >>> 13 hello = my_len ( \"helloworld\" ) print ( hello ) >>> 10","title":"3.2 \u8c03\u75282.2\u4e2d\u521b\u5efa\u7684my_len\u51fd\u6570"},{"location":"programming/python/function/#04","text":"","title":"04. \u51fd\u6570\u7684\u8bf4\u660e\u6587\u6863"},{"location":"programming/python/function/#41","text":"\u5728\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u5728\u51fd\u6570\u4ee3\u7801\u5757\u9876\u90e8\uff0c\u591a\u884c\u6ce8\u91ca\u751f\u6210\u8bf4\u660e\u6587\u6863\uff0c\u8bf4\u660e\u6587\u6863\u5305\u542b\u5bf9\u51fd\u6570\u7684\u8bf4\u660e\uff0c\u53c2\u6570\u7684\u8bf4\u660e\uff0c\u548c\u8fd4\u56de\u503c\u7684\u8bf4\u660e def people ( name , age ): \"\"\" \u8bb0\u5f55\u4eba\u5458\u4fe1\u606f\u7684\u51fd\u6570 :param name: \u59d3\u540d :param age: \u5e74\u9f84 :return: \"\"\" return \"\u59d3\u540d\uff1a {} \\n \u5e74\u9f84: {} \" . format ( name , age )","title":"4.1 \u521b\u5efa\u51fd\u6570\u8bf4\u660e\u6587\u6863"},{"location":"programming/python/function/#42","text":"help \u65b9\u5f0f\u67e5\u770b\u51fd\u6570\u6587\u6863 help ( people ) >>> people ( name , age ) \u8bb0\u5f55\u4eba\u5458\u4fe1\u606f\u7684\u51fd\u6570 : param name : \u59d3\u540d : param age : \u5e74\u9f84 : return : __doc__ \u65b9\u5f0f\u67e5\u770b\u51fd\u6570\u8bf4\u660e\u6587\u6863 print ( people . __doc__ ) >>> \u8bb0\u5f55\u4eba\u5458\u4fe1\u606f\u7684\u51fd\u6570 : param name : \u59d3\u540d : param age : \u5e74\u9f84 : return :","title":"4.2 \u67e5\u770b\u6587\u6863\u8bf4\u660e"},{"location":"programming/python/global/","text":"01. \u5c40\u90e8\u53d8\u91cf \u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u4f5c\u7528\u57df\u4e5f\u4ec5\u662f\u51fd\u6570\u5185\uff0c\u51fd\u6570\u6267\u884c\u65f6\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\uff0c\u81ea\u52a8\u56de\u6536\u3002 def test (): text = \"www.baidu.com\" print ( \"\u51fd\u6570\u5185\u90e8\" , text ) test () print ( \"\u51fd\u6570\u5916\u90e8\" , text ) >>> \u51fd\u6570\u5185\u90e8 www . baidu . com NameError : name 'text' is not defined \u51fd\u6570\u7684\u53c2\u6570\u4e5f\u662f\u5c40\u90e8\u53d8\u91cf def people ( name , age ): print ( \"\u5185\u90e8name\" , name ) print ( \"\u5185\u90e8age\" , age ) people ( \"\u5c0f\u660e\" , 18 ) print ( \"\u5916\u90e8\" , name ) >>> \u5185\u90e8name \u5c0f\u660e \u5185\u90e8age 18 NameError : name 'name' is not defined 02.\u5168\u5c40\u53d8\u91cf \u5168\u5c40\u53d8\u91cf- Global Variable \u548c\u5c40\u90e8\u53d8\u91cf\u4e0d\u540c\uff0c\u5168\u5c40\u53d8\u91cf\u7684\u9ed8\u8ba4\u4f5c\u7528\u57df\u662f\u6574\u4e2a\u7a0b\u5e8f\uff0c\u5373\u5168\u5c40\u53d8\u91cf\u65e2\u53ef\u4ee5\u5728\u5404\u4e2a\u51fd\u6570\u7684\u5916\u90e8\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u5728\u5404\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u3002 \u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u7684\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a 1.\u5728\u51fd\u6570\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u4e00\u5b9a\u662f\u5168\u5c40\u53d8\u91cf add = \"www.baidu.com\" def text (): print ( \"\u51fd\u6570\u4f53\u5185\u8bbf\u95ee\uff1a\" , add ) text () print ( '\u51fd\u6570\u4f53\u5916\u8bbf\u95ee\uff1a' , add ) >>> \u51fd\u6570\u4f53\u5185\u8bbf\u95ee \uff1a www . baidu . com \u51fd\u6570\u4f53\u5916\u8bbf\u95ee \uff1a www . baidu . com \u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 global \u5173\u952e\u5b57\u5b9a\u4e49\u53d8\u91cf\uff0c\u4e5f\u662f\u5168\u5c40\u53d8\u91cf\uff1a def text (): global url url = \"www.baidu.com\" print ( \"\u51fd\u6570\u5185\u90e8\" , url ) text () print ( \"\u51fd\u6570\u5916\u90e8\" , url ) >>> \u51fd\u6570\u5185\u90e8 www . baidu . com \u51fd\u6570\u5916\u90e8 www . baidu . com 03. \u83b7\u53d6\u6307\u5b9a\u4f5c\u7528\u57df\u4e2d\u7684\u53d8\u91cf 3.1 globals()\u51fd\u6570 globals() \u51fd\u6570\u4e3a Python \u7684\u5185\u7f6e\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5168\u5c40\u8303\u56f4\u5185\u6240\u6709\u53d8\u91cf\u7684\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u4e2d\u7684\u6bcf\u4e2a\u952e\u503c\u5bf9\uff0c\u952e\u4e3a\u53d8\u91cf\u540d\uff0c\u503c\u4e3a\u8be5\u53d8\u91cf\u7684\u503c\u3002 #\u5168\u5c40\u53d8\u91cf Pyname = \"\u767e\u5ea6\" Pyadd = \"www.baidu.com\" def text (): #\u5c40\u90e8\u53d8\u91cf Shename = \"\u817e\u8baf\" Sheadd = \"www.qq.com\" print ( globals ()) >>> 'Pyname' : '\u767e\u5ea6' , 'Pyadd' : 'www.baidu.com' \u901a\u8fc7\u8c03\u7528 globals() \u51fd\u6570\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5305\u542b\u6240\u6709\u5168\u5c40\u53d8\u91cf\u7684\u5b57\u5178\u3002\u5e76\u4e14\uff0c\u901a\u8fc7\u8be5\u5b57\u5178\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8bbf\u95ee\u6307\u5b9a\u53d8\u91cf\uff0c\u751a\u81f3\u5982\u679c\u9700\u8981\uff0c\u8fd8\u53ef\u4ee5\u4fee\u6539\u5b83\u7684\u503c\u3002\u4f8b\u5982: print ( globals ()[ 'Pyname' ]) print ( globals ()[ \"Pyadd\" ]) globals ()[ \"Pyname\" ] = \"baidu\" print ( Pyname ) >>> \u767e\u5ea6 www . baidu . com baidu 3.2 locals()\u51fd\u6570 locals() \u51fd\u6570\u4e5f\u662f Python \u5185\u7f6e\u51fd\u6570\u4e4b\u4e00\uff0c\u901a\u8fc7\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5305\u542b\u5f53\u524d\u4f5c\u7528\u57df\u5185\u6240\u6709\u53d8\u91cf\u7684\u5b57\u5178\u3002\u8fd9\u91cc\u6240\u8c13\u7684\u201c\u5f53\u524d\u4f5c\u7528\u57df\u201d\u6307\u7684\u662f\uff0c\u5728\u51fd\u6570\u5185\u90e8\u8c03\u7528 locals() \u51fd\u6570\uff0c\u4f1a\u83b7\u5f97\u5305\u542b\u6240\u6709\u5c40\u90e8\u53d8\u91cf\u7684\u5b57\u5178\uff1b\u800c\u5728\u5168\u5c40\u8303\u6587\u5185\u8c03\u7528 locals() \u51fd\u6570\uff0c\u5176\u529f\u80fd\u548c globals() \u51fd\u6570\u76f8\u540c #\u5168\u5c40\u53d8\u91cf Pyname = \"\u767e\u5ea6\" Pyadd = \"www.baidu.com\" def text (): #\u5c40\u90e8\u53d8\u91cf Shename = \"\u817e\u8baf\" Sheadd = \"www.qq.com\" print ( \"\u51fd\u6570\u5185\u90e8\u7684 locals:\" ) print ( locals ()) text () print ( \"\u51fd\u6570\u5916\u90e8\u7684 locals:\" ) print ( locals ()) >>> \u51fd\u6570\u5185\u90e8\u7684 locals : { 'Sheadd' : 'www.qq.com' , 'Shename' : '\u817e\u8baf' } \u51fd\u6570\u5916\u90e8\u7684 locals : 'Pyname' : '\u767e\u5ea6' , 'Pyadd' : 'www.baidu.com' \u5f53\u4f7f\u7528 locals() \u51fd\u6570\u83b7\u5f97\u6240\u6709\u5c40\u90e8\u53d8\u91cf\u7ec4\u6210\u7684\u5b57\u5178\u65f6\uff0c\u53ef\u4ee5\u5411 globals() \u51fd\u6570\u90a3\u6837\uff0c\u901a\u8fc7\u6307\u5b9a\u952e\u8bbf\u95ee\u5bf9\u5e94\u7684\u53d8\u91cf\u503c 3.3 vars(object) \u5176\u529f\u80fd\u662f\u8fd4\u56de\u4e00\u4e2a\u6307\u5b9a object \u5bf9\u8c61\u8303\u56f4\u5185\u6240\u6709\u53d8\u91cf\u7ec4\u6210\u7684\u5b57\u5178\u3002\u5982\u679c\u4e0d\u4f20\u5165object \u53c2\u6570\uff0cvars() \u548c locals() \u7684\u4f5c\u7528\u5b8c\u5168\u76f8\u540c\u3002 Pyname = \"\u767e\u5ea6\" Pyadd = \"www.baidu.com\" class Demo : name = \"\u817e\u8baf\" add = \"www.qq.com\" print ( \"\u6709 object\uff1a\" ) print ( vars ( Demo )) print ( \"\u65e0 object\uff1a\" ) print ( vars ()) >>> \u6709 object \uff1a { 'name' : '\u817e\u8baf' , 'add' : 'www.qq.com' } \u65e0 object \uff1a { 'Pyname' : '\u767e\u5ea6' , 'Pyadd' : 'www.baidu.com' }","title":"\u53d8\u91cf\u4f5c\u7528\u57df"},{"location":"programming/python/global/#01","text":"\u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u4f5c\u7528\u57df\u4e5f\u4ec5\u662f\u51fd\u6570\u5185\uff0c\u51fd\u6570\u6267\u884c\u65f6\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\uff0c\u81ea\u52a8\u56de\u6536\u3002 def test (): text = \"www.baidu.com\" print ( \"\u51fd\u6570\u5185\u90e8\" , text ) test () print ( \"\u51fd\u6570\u5916\u90e8\" , text ) >>> \u51fd\u6570\u5185\u90e8 www . baidu . com NameError : name 'text' is not defined \u51fd\u6570\u7684\u53c2\u6570\u4e5f\u662f\u5c40\u90e8\u53d8\u91cf def people ( name , age ): print ( \"\u5185\u90e8name\" , name ) print ( \"\u5185\u90e8age\" , age ) people ( \"\u5c0f\u660e\" , 18 ) print ( \"\u5916\u90e8\" , name ) >>> \u5185\u90e8name \u5c0f\u660e \u5185\u90e8age 18 NameError : name 'name' is not defined","title":"01. \u5c40\u90e8\u53d8\u91cf"},{"location":"programming/python/global/#02","text":"\u5168\u5c40\u53d8\u91cf- Global Variable \u548c\u5c40\u90e8\u53d8\u91cf\u4e0d\u540c\uff0c\u5168\u5c40\u53d8\u91cf\u7684\u9ed8\u8ba4\u4f5c\u7528\u57df\u662f\u6574\u4e2a\u7a0b\u5e8f\uff0c\u5373\u5168\u5c40\u53d8\u91cf\u65e2\u53ef\u4ee5\u5728\u5404\u4e2a\u51fd\u6570\u7684\u5916\u90e8\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u5728\u5404\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u3002 \u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u7684\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a 1.\u5728\u51fd\u6570\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u4e00\u5b9a\u662f\u5168\u5c40\u53d8\u91cf add = \"www.baidu.com\" def text (): print ( \"\u51fd\u6570\u4f53\u5185\u8bbf\u95ee\uff1a\" , add ) text () print ( '\u51fd\u6570\u4f53\u5916\u8bbf\u95ee\uff1a' , add ) >>> \u51fd\u6570\u4f53\u5185\u8bbf\u95ee \uff1a www . baidu . com \u51fd\u6570\u4f53\u5916\u8bbf\u95ee \uff1a www . baidu . com \u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 global \u5173\u952e\u5b57\u5b9a\u4e49\u53d8\u91cf\uff0c\u4e5f\u662f\u5168\u5c40\u53d8\u91cf\uff1a def text (): global url url = \"www.baidu.com\" print ( \"\u51fd\u6570\u5185\u90e8\" , url ) text () print ( \"\u51fd\u6570\u5916\u90e8\" , url ) >>> \u51fd\u6570\u5185\u90e8 www . baidu . com \u51fd\u6570\u5916\u90e8 www . baidu . com","title":"02.\u5168\u5c40\u53d8\u91cf"},{"location":"programming/python/global/#03","text":"","title":"03. \u83b7\u53d6\u6307\u5b9a\u4f5c\u7528\u57df\u4e2d\u7684\u53d8\u91cf"},{"location":"programming/python/global/#31-globals","text":"globals() \u51fd\u6570\u4e3a Python \u7684\u5185\u7f6e\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5168\u5c40\u8303\u56f4\u5185\u6240\u6709\u53d8\u91cf\u7684\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u4e2d\u7684\u6bcf\u4e2a\u952e\u503c\u5bf9\uff0c\u952e\u4e3a\u53d8\u91cf\u540d\uff0c\u503c\u4e3a\u8be5\u53d8\u91cf\u7684\u503c\u3002 #\u5168\u5c40\u53d8\u91cf Pyname = \"\u767e\u5ea6\" Pyadd = \"www.baidu.com\" def text (): #\u5c40\u90e8\u53d8\u91cf Shename = \"\u817e\u8baf\" Sheadd = \"www.qq.com\" print ( globals ()) >>> 'Pyname' : '\u767e\u5ea6' , 'Pyadd' : 'www.baidu.com' \u901a\u8fc7\u8c03\u7528 globals() \u51fd\u6570\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5305\u542b\u6240\u6709\u5168\u5c40\u53d8\u91cf\u7684\u5b57\u5178\u3002\u5e76\u4e14\uff0c\u901a\u8fc7\u8be5\u5b57\u5178\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8bbf\u95ee\u6307\u5b9a\u53d8\u91cf\uff0c\u751a\u81f3\u5982\u679c\u9700\u8981\uff0c\u8fd8\u53ef\u4ee5\u4fee\u6539\u5b83\u7684\u503c\u3002\u4f8b\u5982: print ( globals ()[ 'Pyname' ]) print ( globals ()[ \"Pyadd\" ]) globals ()[ \"Pyname\" ] = \"baidu\" print ( Pyname ) >>> \u767e\u5ea6 www . baidu . com baidu","title":"3.1 globals()\u51fd\u6570"},{"location":"programming/python/global/#32-locals","text":"locals() \u51fd\u6570\u4e5f\u662f Python \u5185\u7f6e\u51fd\u6570\u4e4b\u4e00\uff0c\u901a\u8fc7\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5305\u542b\u5f53\u524d\u4f5c\u7528\u57df\u5185\u6240\u6709\u53d8\u91cf\u7684\u5b57\u5178\u3002\u8fd9\u91cc\u6240\u8c13\u7684\u201c\u5f53\u524d\u4f5c\u7528\u57df\u201d\u6307\u7684\u662f\uff0c\u5728\u51fd\u6570\u5185\u90e8\u8c03\u7528 locals() \u51fd\u6570\uff0c\u4f1a\u83b7\u5f97\u5305\u542b\u6240\u6709\u5c40\u90e8\u53d8\u91cf\u7684\u5b57\u5178\uff1b\u800c\u5728\u5168\u5c40\u8303\u6587\u5185\u8c03\u7528 locals() \u51fd\u6570\uff0c\u5176\u529f\u80fd\u548c globals() \u51fd\u6570\u76f8\u540c #\u5168\u5c40\u53d8\u91cf Pyname = \"\u767e\u5ea6\" Pyadd = \"www.baidu.com\" def text (): #\u5c40\u90e8\u53d8\u91cf Shename = \"\u817e\u8baf\" Sheadd = \"www.qq.com\" print ( \"\u51fd\u6570\u5185\u90e8\u7684 locals:\" ) print ( locals ()) text () print ( \"\u51fd\u6570\u5916\u90e8\u7684 locals:\" ) print ( locals ()) >>> \u51fd\u6570\u5185\u90e8\u7684 locals : { 'Sheadd' : 'www.qq.com' , 'Shename' : '\u817e\u8baf' } \u51fd\u6570\u5916\u90e8\u7684 locals : 'Pyname' : '\u767e\u5ea6' , 'Pyadd' : 'www.baidu.com' \u5f53\u4f7f\u7528 locals() \u51fd\u6570\u83b7\u5f97\u6240\u6709\u5c40\u90e8\u53d8\u91cf\u7ec4\u6210\u7684\u5b57\u5178\u65f6\uff0c\u53ef\u4ee5\u5411 globals() \u51fd\u6570\u90a3\u6837\uff0c\u901a\u8fc7\u6307\u5b9a\u952e\u8bbf\u95ee\u5bf9\u5e94\u7684\u53d8\u91cf\u503c","title":"3.2 locals()\u51fd\u6570"},{"location":"programming/python/global/#33-varsobject","text":"\u5176\u529f\u80fd\u662f\u8fd4\u56de\u4e00\u4e2a\u6307\u5b9a object \u5bf9\u8c61\u8303\u56f4\u5185\u6240\u6709\u53d8\u91cf\u7ec4\u6210\u7684\u5b57\u5178\u3002\u5982\u679c\u4e0d\u4f20\u5165object \u53c2\u6570\uff0cvars() \u548c locals() \u7684\u4f5c\u7528\u5b8c\u5168\u76f8\u540c\u3002 Pyname = \"\u767e\u5ea6\" Pyadd = \"www.baidu.com\" class Demo : name = \"\u817e\u8baf\" add = \"www.qq.com\" print ( \"\u6709 object\uff1a\" ) print ( vars ( Demo )) print ( \"\u65e0 object\uff1a\" ) print ( vars ()) >>> \u6709 object \uff1a { 'name' : '\u817e\u8baf' , 'add' : 'www.qq.com' } \u65e0 object \uff1a { 'Pyname' : '\u767e\u5ea6' , 'Pyadd' : 'www.baidu.com' }","title":"3.3 vars(object)"},{"location":"programming/python/if-else/","text":"01. \u8bed\u6cd5 Python \u6761\u4ef6\u8bed\u53e5\u662f\u901a\u8fc7\u4e00\u6761\u6216\u591a\u6761\u8bed\u53e5\u7684\u6267\u884c\u7ed3\u679c\uff08True \u6216\u8005 False\uff09\u6765\u51b3\u5b9a\u6267\u884c\u7684\u4ee3\u7801\u5757\u3002 if\u5224\u65ad\u6761\u4ef6\u7ed3\u675f\u4ee5 \uff1a \u7ed3\u675f; \u5185\u90e8\u8bed\u53e5 4\u4e2a\u7a7a\u683c \u7f29\u8fdb age = 18 if age >= 18 : print ( \"\u53ef\u4ee5\u53bb\u7f51\u5427\u4e86\" ) elif age >= 12 : print ( \"\u53ef\u4ee5\u559d\u9152\u4e86\" ) else : print ( \"\u8fd8\u662f\u4e56\u4e56\u7684\u542c\u5988\u5988\u7684\u8bdd\u5427\" ) 02. if\u4e2d\u5e38\u7528\u7684\u64cd\u4f5c\u7b26 \u64cd\u4f5c\u7b26 \u63cf\u8ff0 < \u5c0f\u4e8e <= \u5c0f\u4e8e\u6216\u7b49\u4e8e > \u5927\u4e8e >= \u5927\u4e8e\u6216\u7b49\u4e8e == \u7b49\u4e8e\uff0c\u6bd4\u8f83\u4e24\u4e2a\u503c\u662f\u5426\u76f8\u7b49 != \u4e0d\u7b49\u4e8e 03. if\u63a5\u53d8\u91cf\u540d\uff1a if \u8bed\u53e5\u63a5\u53d8\u91cf\u540d\uff0c\u5982\u679c \u53d8\u91cf \u975e\u7a7a\u3002\u5219\u8fd0\u884c\u6761\u4ef6\u4ee3\u7801\u3002 \u9664\u4e86\u201d\u3001\u201d\u201c\u30010\u3001()\u3001[]\u3001{}\u3001None\u4e3aFalse\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u90fd\u662fTrue age = 18 a = None if age : print ( \"\u6211\u4eca\u5e74 {} \u5c81\u4e86\u54e6\" . format ( age )) if a : print ( \"\u8fd9\u884c\u4e0d\u4f1a\u663e\u793a\" ) 04. if\u5d4c\u5957 \u5728\u5d4c\u5957 if \u8bed\u53e5\u4e2d\uff0c\u53ef\u4ee5\u628a if...elif...else \u7ed3\u6784\u653e\u5728\u53e6\u5916\u4e00\u4e2a if...elif...else \u7ed3\u6784\u4e2d\u3002 num = int ( input ( \"\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\uff1a\" )) if num % 2 == 0 : if num % 3 == 0 : print ( \"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u53ef\u4ee5\u6574\u9664 2 \u548c 3\" ) else : print ( \"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u53ef\u4ee5\u6574\u9664 2\uff0c\u4f46\u4e0d\u80fd\u6574\u9664 3\" ) else : if num % 3 == 0 : print ( \"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u53ef\u4ee5\u6574\u9664 3\uff0c\u4f46\u4e0d\u80fd\u6574\u9664 2\" ) else : print ( \"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u4e0d\u80fd\u6574\u9664 2 \u548c 3\" ) >>> \u8f93\u5165\u4e00\u4e2a\u6570\u5b57 \uff1a 6 \u4f60\u8f93\u5165\u7684\u6570\u5b57\u53ef\u4ee5\u6574\u9664 2 \u548c 3 05 . pass\u8bed\u53e5 if \u8bed\u53e5\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4f46\u662f\u5982\u679c\u60a8\u5904\u4e8e\u67d0\u79cd\u539f\u56e0\u5199\u4e86\u65e0\u5185\u5bb9\u7684 if \u8bed\u53e5\uff0c\u53ef\u4ee5\u4f7f\u7528 pass \u8bed\u53e5\u6765\u5360\u4f4d\uff0c\u907f\u514d\u9519\u8bef\u3002 a = 66 b = 200 if b > a: pass","title":"\u903b\u8f91\u5224\u65ad"},{"location":"programming/python/if-else/#01","text":"Python \u6761\u4ef6\u8bed\u53e5\u662f\u901a\u8fc7\u4e00\u6761\u6216\u591a\u6761\u8bed\u53e5\u7684\u6267\u884c\u7ed3\u679c\uff08True \u6216\u8005 False\uff09\u6765\u51b3\u5b9a\u6267\u884c\u7684\u4ee3\u7801\u5757\u3002 if\u5224\u65ad\u6761\u4ef6\u7ed3\u675f\u4ee5 \uff1a \u7ed3\u675f; \u5185\u90e8\u8bed\u53e5 4\u4e2a\u7a7a\u683c \u7f29\u8fdb age = 18 if age >= 18 : print ( \"\u53ef\u4ee5\u53bb\u7f51\u5427\u4e86\" ) elif age >= 12 : print ( \"\u53ef\u4ee5\u559d\u9152\u4e86\" ) else : print ( \"\u8fd8\u662f\u4e56\u4e56\u7684\u542c\u5988\u5988\u7684\u8bdd\u5427\" )","title":"01. \u8bed\u6cd5"},{"location":"programming/python/if-else/#02-if","text":"\u64cd\u4f5c\u7b26 \u63cf\u8ff0 < \u5c0f\u4e8e <= \u5c0f\u4e8e\u6216\u7b49\u4e8e > \u5927\u4e8e >= \u5927\u4e8e\u6216\u7b49\u4e8e == \u7b49\u4e8e\uff0c\u6bd4\u8f83\u4e24\u4e2a\u503c\u662f\u5426\u76f8\u7b49 != \u4e0d\u7b49\u4e8e","title":"02. if\u4e2d\u5e38\u7528\u7684\u64cd\u4f5c\u7b26"},{"location":"programming/python/if-else/#03-if","text":"if \u8bed\u53e5\u63a5\u53d8\u91cf\u540d\uff0c\u5982\u679c \u53d8\u91cf \u975e\u7a7a\u3002\u5219\u8fd0\u884c\u6761\u4ef6\u4ee3\u7801\u3002 \u9664\u4e86\u201d\u3001\u201d\u201c\u30010\u3001()\u3001[]\u3001{}\u3001None\u4e3aFalse\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u90fd\u662fTrue age = 18 a = None if age : print ( \"\u6211\u4eca\u5e74 {} \u5c81\u4e86\u54e6\" . format ( age )) if a : print ( \"\u8fd9\u884c\u4e0d\u4f1a\u663e\u793a\" )","title":"03. if\u63a5\u53d8\u91cf\u540d\uff1a"},{"location":"programming/python/if-else/#04-if","text":"\u5728\u5d4c\u5957 if \u8bed\u53e5\u4e2d\uff0c\u53ef\u4ee5\u628a if...elif...else \u7ed3\u6784\u653e\u5728\u53e6\u5916\u4e00\u4e2a if...elif...else \u7ed3\u6784\u4e2d\u3002 num = int ( input ( \"\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\uff1a\" )) if num % 2 == 0 : if num % 3 == 0 : print ( \"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u53ef\u4ee5\u6574\u9664 2 \u548c 3\" ) else : print ( \"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u53ef\u4ee5\u6574\u9664 2\uff0c\u4f46\u4e0d\u80fd\u6574\u9664 3\" ) else : if num % 3 == 0 : print ( \"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u53ef\u4ee5\u6574\u9664 3\uff0c\u4f46\u4e0d\u80fd\u6574\u9664 2\" ) else : print ( \"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u4e0d\u80fd\u6574\u9664 2 \u548c 3\" ) >>> \u8f93\u5165\u4e00\u4e2a\u6570\u5b57 \uff1a 6 \u4f60\u8f93\u5165\u7684\u6570\u5b57\u53ef\u4ee5\u6574\u9664 2 \u548c 3","title":"04. if\u5d4c\u5957"},{"location":"programming/python/if-else/#05-pass","text":"if \u8bed\u53e5\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4f46\u662f\u5982\u679c\u60a8\u5904\u4e8e\u67d0\u79cd\u539f\u56e0\u5199\u4e86\u65e0\u5185\u5bb9\u7684 if \u8bed\u53e5\uff0c\u53ef\u4ee5\u4f7f\u7528 pass \u8bed\u53e5\u6765\u5360\u4f4d\uff0c\u907f\u514d\u9519\u8bef\u3002 a = 66 b = 200 if b > a: pass","title":"05 . pass\u8bed\u53e5"},{"location":"programming/python/inherit/","text":"01. \u7ee7\u627f\u7684\u5b9a\u4e49\u548c\u672f\u8bed \u7ee7\u627f\u662f\u4e3a\u4e86\u521b\u5efa\u548c\u73b0\u6709\u7c7b\u529f\u80fd\u7c7b\u4f3c\u7684\u65b0\u7c7b\u3002\u65b0\u7c7b\u53ef\u5728\u73b0\u6709\u7c7b\u7684\u57fa\u7840\u4e0a\uff0c\u6dfb\u52a0\u7279\u6709\u7684\u5c5e\u6027\u6216\u65b9\u6cd5\u3002 \u5b50\u7c7b\u53ef\u4ee5\u76f4\u63a5\u4eab\u53d7\u7236\u7c7b\u5df2\u7ecf\u5c01\u88c5\u597d\u7684\u65b9\u6cd5\uff0c\u65e0\u9700\u518d\u6b21\u5f00\u53d1\uff1b \u5b50\u7c7b\u62e5\u6709\u7236\u7c7b\u7684\u5168\u90e8\u5c5e\u6027\u548c\u65b9\u6cd5 1.1 \u76f8\u5173\u672f\u8bed class A : pass class B ( A ): pass B\u7c7b\u662fA\u7c7b\u7684 \u5b50\u7c7b \uff0cA\u7c7b\u662fB\u7c7b\u7684 \u7236\u7c7b \uff0cB\u7c7b\u4eceA\u7c7b \u7ee7\u627f \u6216 \u6d3e\u751f \uff1b A\u7c7b\u662f \u57fa\u7c7b \u6216 \u8d85\u7c7b \uff0cB\u7c7b\u662f \u6d3e\u751f\u7c7b 1.2 \u7ee7\u627f\u7684\u4f20\u9012\u6027 C \u7c7b\u4ece B \u7c7b\u7ee7\u627f\uff0c B \u7c7b\u53c8\u4ece A \u7c7b\u7ee7\u627f \u90a3\u4e48 C \u7c7b\u5c31\u5177\u6709 B \u7c7b\u548c A \u7c7b\u7684\u6240\u6709\u5c5e\u6027\u548c\u65b9\u6cd5 \u5b50\u7c7b \u62e5\u6709 \u7236\u7c7b \u4ee5\u53ca \u7236\u7c7b\u7684\u7236\u7c7b \u4e2d\u5c01\u88c5\u7684\u6240\u6709 \u5c5e\u6027 \u548c \u65b9\u6cd5 02. \u5355\u7ee7\u627f \u5b50\u7c7b\u7ee7\u627f\u7236\u7c7b\uff0c\u6216\u7236\u7c7b\u7684\u7236\u7c7b\uff0c\u4e14\u6bcf\u4e2a\u5b50\u7c7b\u53ea\u7ee7\u627f\u4e00\u4e2a\u7236\u7c7b\u7684\u7ee7\u627f\u5f62\u5f0f\u662f\u5355\u7ee7\u627f\u3002 class Animals : def say ( self ): print ( \"\u52a8\u7269\u7c7b\" ) class FlyAnimals ( Animals ): def fly ( self ): print ( \"\u4f1a\u98de\" ) class Bird ( FlyAnimals ): def eat ( self ): print ( \"\u5544\u866b\" ) ying = Bird () ying . eat () ying . fly () ying . say () >>> \u5544\u866b \u4f1a\u98de \u52a8\u7269\u7c7b \u4ee5\u4e0a\u4ee3\u7801\u6f14\u793a\uff0c Bird \u7ee7\u627f FlyAnimals \uff0c\u8fd8\u7ee7\u627f Animals \u3002 \u6240\u4ee5 Bird \u62e5\u6709\u4e24\u4e2a\u7236\u7c7b\u7684\u6240\u6709\u65b9\u6cd5\u3002 03. \u591a\u7ee7\u627f \u5b50\u7c7b\u540c\u65f6\u7ee7\u627f\u591a\u4e2a\u7236\u7c7b\uff0c\u4ee5 , \u9694\u5f00\u7684\u65b9\u5f0f\u662f\u591a\u7ee7\u627f class A : pass class B : pass class C ( A , B ) pass \u4f7f\u7528\u591a\u7ee7\u627f\u7ecf\u5e38\u9700\u8981\u9762\u4e34\u7684\u95ee\u9898\u662f\uff0c\u591a\u4e2a\u7236\u7c7b\u5305\u542b\u540c\u540d\u7684\u65b9\u6cd5\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0cpython\u7684\u5904\u7406\u903b\u8f91\u662f\u6309\u7167\u7ee7\u627f\u7c7b\u4ece\u5de6\u5230\u53f3\u7684\u65b9\u5f0f\u6b21\u5e8f\u51b3\u5b9a\uff0c\u5373\u6392\u5728\u524d\u9762\u7236\u7c7b\u4e2d\u7684\u7c7b\u65b9\u6cd5\u4f1a\u8986\u76d6\u6392\u5728\u540e\u9762\u7236\u7c7b\u4e2d\u7684\u540c\u540d\u7c7b\u65b9\u6cd5\u3002 class Animals : def fly ( self ): print ( \"\u52a8\u7269\u7c7b\" ) class FlyAnimals : def fly ( self ): print ( \"\u4f1a\u98de\" ) class Bird ( Animals , FlyAnimals ): def eat ( self ): print ( \"\u5544\u866b\" ) ying = Bird () ying . fly () >>> \u52a8\u7269\u7c7b 04. \u7236\u7c7b\u65b9\u6cd5\u91cd\u5199 4.1 \u7236\u7c7b\u65b9\u6cd5\u91cd\u5199 \u5982\u679c\u7ee7\u627f\u540e\u5b50\u7c7b\u65b9\u6cd5\u7684\u5b9e\u73b0\u548c\u7236\u7c7b\u65b9\u6cd5\u5b9e\u73b0\u5b8c\u5168\u4e0d\u540c\uff0c\u9700\u8981\u5728\u5b50\u7c7b\u5185\u90e8\u5bf9\u7236\u7c7b\u65b9\u6cd5\u8fdb\u884c\u91cd\u5199 \u91cd\u5199\u7684\u65b9\u6cd5\u662f\u91cd\u65b0\u5b9a\u4e49\u7236\u7c7b\u540c\u540d\u7684\u65b9\u6cd5 \u5728\u540c\u540d\u65b9\u6cd5\u5185\u7f16\u5199\u65b9\u6cd5\u5b9e\u73b0 class Dog : def bark ( self ): print ( \"\u6c6a\u6c6a\" ) class XiaoTianQuan ( Dog ): def bark ( self ): print ( \"\u55f7\u545c~\" ) xiaotianquan = XiaoTianQuan () xiaotianquan . bark () >>> \u55f7\u545c ~ \u5982\u679c\u6709\u7279\u6b8a\u9700\u6c42\uff0c\u6bd4\u5982\u5728\u91cd\u5199\u7236\u7c7b\u65b9\u6cd5\u540e\uff0c\u8fd8\u662f\u9700\u8981\u8c03\u7528\u7236\u7c7b\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u7528 \u7236\u7c7b\u540d.\u7236\u7c7b\u65b9\u6cd5\uff08\u5b50\u7c7b\u5bf9\u8c61\uff09 \u7684\u65b9\u5f0f class Dog : def bark ( self ): print ( \"\u6c6a\u6c6a\" ) class XiaoTianQuan ( Dog ): def bark ( self ): print ( \"\u55f7\u545c~\" ) xiaotianquan = XiaoTianQuan () Dog . bark ( xiaotianquan ) >>> \u6c6a\u6c6a 4.2 \u7236\u7c7b\u65b9\u6cd5\u6269\u5c55-super\u7c7b \u5728\u4f7f\u7528\u7c7b\u7684\u7ee7\u627f\u540e\uff0c\u5b50\u7c7b\u5728\u7236\u7c7b\u7684\u57fa\u7840\u4e0a\uff0c\u6709\u5176\u4ed6\u7684\u6269\u5c55\u5b9e\u73b0\uff08\u5373\u7236\u7c7b\u7684\u5b9e\u73b0\u6bd4\u8f83\u5c11\uff0c\u5b50\u7c7b\u6709\u7279\u6b8a\u9700\u6c42\uff09\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u9700\u8981\u91cd\u5199\u7236\u7c7b\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u7528 super \u7c7b\u5b9e\u73b0\u7236\u7c7b\u65b9\u6cd5\u6269\u5c55 class Dog : def bark ( self ): print ( \"\u6c6a\u6c6a\" ) class XiaoTianQuan ( Dog ): \"\"\"\u54ee\u5929\u72ac\u4e0d\u4ec5\u4f1a\u6c6a\u6c6a\u53eb\uff0c\u8fd8\u4f1a\u55f7\u545c\u53eb\"\"\" def bark ( self ): super () . bark () print ( \"\u55f7\u545c~\" ) xiaotianquan = XiaoTianQuan () xiaotianquan . bark () >>> \u6c6a\u6c6a \u55f7\u545c ~ 05. MRO\u7b97\u6cd5 python\u5185\u63d0\u4f9b\u4e86\u5185\u7f6e\u5c5e\u6027 __mro__ \u53ef\u4ee5\u67e5\u770b\u65b9\u6cd5\u7684\u641c\u7d22\u987a\u5e8f MRO \u662f method resolution order \uff0c\u4e3b\u8981\u7528\u4e8e \u5728\u591a\u7ee7\u627f\u65f6\u5224\u65ad \u65b9\u6cd5\u3001\u5c5e\u6027 \u7684\u8c03\u7528 \u8def\u5f84 class A : def say ( self ): print ( \"A\" ) class B ( A ): def say ( self ): print ( \"B\" ) class C ( A ): def say ( self ): print ( \"C\" ) class D ( B , C ): def say ( self ): print ( \"D\" ) demo = D () demo . say () for i in D . __mro__ : print ( i , end = \" \\n \" ) >>> D < class ' __main__ . D '> < class ' __main__ . B '> < class ' __main__ . C '> < class ' __main__ . A '> < class ' object '>","title":"\u7ee7\u627f"},{"location":"programming/python/inherit/#01","text":"\u7ee7\u627f\u662f\u4e3a\u4e86\u521b\u5efa\u548c\u73b0\u6709\u7c7b\u529f\u80fd\u7c7b\u4f3c\u7684\u65b0\u7c7b\u3002\u65b0\u7c7b\u53ef\u5728\u73b0\u6709\u7c7b\u7684\u57fa\u7840\u4e0a\uff0c\u6dfb\u52a0\u7279\u6709\u7684\u5c5e\u6027\u6216\u65b9\u6cd5\u3002 \u5b50\u7c7b\u53ef\u4ee5\u76f4\u63a5\u4eab\u53d7\u7236\u7c7b\u5df2\u7ecf\u5c01\u88c5\u597d\u7684\u65b9\u6cd5\uff0c\u65e0\u9700\u518d\u6b21\u5f00\u53d1\uff1b \u5b50\u7c7b\u62e5\u6709\u7236\u7c7b\u7684\u5168\u90e8\u5c5e\u6027\u548c\u65b9\u6cd5","title":"01. \u7ee7\u627f\u7684\u5b9a\u4e49\u548c\u672f\u8bed"},{"location":"programming/python/inherit/#11","text":"class A : pass class B ( A ): pass B\u7c7b\u662fA\u7c7b\u7684 \u5b50\u7c7b \uff0cA\u7c7b\u662fB\u7c7b\u7684 \u7236\u7c7b \uff0cB\u7c7b\u4eceA\u7c7b \u7ee7\u627f \u6216 \u6d3e\u751f \uff1b A\u7c7b\u662f \u57fa\u7c7b \u6216 \u8d85\u7c7b \uff0cB\u7c7b\u662f \u6d3e\u751f\u7c7b","title":"1.1 \u76f8\u5173\u672f\u8bed"},{"location":"programming/python/inherit/#12","text":"C \u7c7b\u4ece B \u7c7b\u7ee7\u627f\uff0c B \u7c7b\u53c8\u4ece A \u7c7b\u7ee7\u627f \u90a3\u4e48 C \u7c7b\u5c31\u5177\u6709 B \u7c7b\u548c A \u7c7b\u7684\u6240\u6709\u5c5e\u6027\u548c\u65b9\u6cd5 \u5b50\u7c7b \u62e5\u6709 \u7236\u7c7b \u4ee5\u53ca \u7236\u7c7b\u7684\u7236\u7c7b \u4e2d\u5c01\u88c5\u7684\u6240\u6709 \u5c5e\u6027 \u548c \u65b9\u6cd5","title":"1.2 \u7ee7\u627f\u7684\u4f20\u9012\u6027"},{"location":"programming/python/inherit/#02","text":"\u5b50\u7c7b\u7ee7\u627f\u7236\u7c7b\uff0c\u6216\u7236\u7c7b\u7684\u7236\u7c7b\uff0c\u4e14\u6bcf\u4e2a\u5b50\u7c7b\u53ea\u7ee7\u627f\u4e00\u4e2a\u7236\u7c7b\u7684\u7ee7\u627f\u5f62\u5f0f\u662f\u5355\u7ee7\u627f\u3002 class Animals : def say ( self ): print ( \"\u52a8\u7269\u7c7b\" ) class FlyAnimals ( Animals ): def fly ( self ): print ( \"\u4f1a\u98de\" ) class Bird ( FlyAnimals ): def eat ( self ): print ( \"\u5544\u866b\" ) ying = Bird () ying . eat () ying . fly () ying . say () >>> \u5544\u866b \u4f1a\u98de \u52a8\u7269\u7c7b \u4ee5\u4e0a\u4ee3\u7801\u6f14\u793a\uff0c Bird \u7ee7\u627f FlyAnimals \uff0c\u8fd8\u7ee7\u627f Animals \u3002 \u6240\u4ee5 Bird \u62e5\u6709\u4e24\u4e2a\u7236\u7c7b\u7684\u6240\u6709\u65b9\u6cd5\u3002","title":"02. \u5355\u7ee7\u627f"},{"location":"programming/python/inherit/#03","text":"\u5b50\u7c7b\u540c\u65f6\u7ee7\u627f\u591a\u4e2a\u7236\u7c7b\uff0c\u4ee5 , \u9694\u5f00\u7684\u65b9\u5f0f\u662f\u591a\u7ee7\u627f class A : pass class B : pass class C ( A , B ) pass \u4f7f\u7528\u591a\u7ee7\u627f\u7ecf\u5e38\u9700\u8981\u9762\u4e34\u7684\u95ee\u9898\u662f\uff0c\u591a\u4e2a\u7236\u7c7b\u5305\u542b\u540c\u540d\u7684\u65b9\u6cd5\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0cpython\u7684\u5904\u7406\u903b\u8f91\u662f\u6309\u7167\u7ee7\u627f\u7c7b\u4ece\u5de6\u5230\u53f3\u7684\u65b9\u5f0f\u6b21\u5e8f\u51b3\u5b9a\uff0c\u5373\u6392\u5728\u524d\u9762\u7236\u7c7b\u4e2d\u7684\u7c7b\u65b9\u6cd5\u4f1a\u8986\u76d6\u6392\u5728\u540e\u9762\u7236\u7c7b\u4e2d\u7684\u540c\u540d\u7c7b\u65b9\u6cd5\u3002 class Animals : def fly ( self ): print ( \"\u52a8\u7269\u7c7b\" ) class FlyAnimals : def fly ( self ): print ( \"\u4f1a\u98de\" ) class Bird ( Animals , FlyAnimals ): def eat ( self ): print ( \"\u5544\u866b\" ) ying = Bird () ying . fly () >>> \u52a8\u7269\u7c7b","title":"03. \u591a\u7ee7\u627f"},{"location":"programming/python/inherit/#04","text":"","title":"04. \u7236\u7c7b\u65b9\u6cd5\u91cd\u5199"},{"location":"programming/python/inherit/#41","text":"\u5982\u679c\u7ee7\u627f\u540e\u5b50\u7c7b\u65b9\u6cd5\u7684\u5b9e\u73b0\u548c\u7236\u7c7b\u65b9\u6cd5\u5b9e\u73b0\u5b8c\u5168\u4e0d\u540c\uff0c\u9700\u8981\u5728\u5b50\u7c7b\u5185\u90e8\u5bf9\u7236\u7c7b\u65b9\u6cd5\u8fdb\u884c\u91cd\u5199 \u91cd\u5199\u7684\u65b9\u6cd5\u662f\u91cd\u65b0\u5b9a\u4e49\u7236\u7c7b\u540c\u540d\u7684\u65b9\u6cd5 \u5728\u540c\u540d\u65b9\u6cd5\u5185\u7f16\u5199\u65b9\u6cd5\u5b9e\u73b0 class Dog : def bark ( self ): print ( \"\u6c6a\u6c6a\" ) class XiaoTianQuan ( Dog ): def bark ( self ): print ( \"\u55f7\u545c~\" ) xiaotianquan = XiaoTianQuan () xiaotianquan . bark () >>> \u55f7\u545c ~ \u5982\u679c\u6709\u7279\u6b8a\u9700\u6c42\uff0c\u6bd4\u5982\u5728\u91cd\u5199\u7236\u7c7b\u65b9\u6cd5\u540e\uff0c\u8fd8\u662f\u9700\u8981\u8c03\u7528\u7236\u7c7b\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u7528 \u7236\u7c7b\u540d.\u7236\u7c7b\u65b9\u6cd5\uff08\u5b50\u7c7b\u5bf9\u8c61\uff09 \u7684\u65b9\u5f0f class Dog : def bark ( self ): print ( \"\u6c6a\u6c6a\" ) class XiaoTianQuan ( Dog ): def bark ( self ): print ( \"\u55f7\u545c~\" ) xiaotianquan = XiaoTianQuan () Dog . bark ( xiaotianquan ) >>> \u6c6a\u6c6a","title":"4.1 \u7236\u7c7b\u65b9\u6cd5\u91cd\u5199"},{"location":"programming/python/inherit/#42-super","text":"\u5728\u4f7f\u7528\u7c7b\u7684\u7ee7\u627f\u540e\uff0c\u5b50\u7c7b\u5728\u7236\u7c7b\u7684\u57fa\u7840\u4e0a\uff0c\u6709\u5176\u4ed6\u7684\u6269\u5c55\u5b9e\u73b0\uff08\u5373\u7236\u7c7b\u7684\u5b9e\u73b0\u6bd4\u8f83\u5c11\uff0c\u5b50\u7c7b\u6709\u7279\u6b8a\u9700\u6c42\uff09\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u9700\u8981\u91cd\u5199\u7236\u7c7b\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u7528 super \u7c7b\u5b9e\u73b0\u7236\u7c7b\u65b9\u6cd5\u6269\u5c55 class Dog : def bark ( self ): print ( \"\u6c6a\u6c6a\" ) class XiaoTianQuan ( Dog ): \"\"\"\u54ee\u5929\u72ac\u4e0d\u4ec5\u4f1a\u6c6a\u6c6a\u53eb\uff0c\u8fd8\u4f1a\u55f7\u545c\u53eb\"\"\" def bark ( self ): super () . bark () print ( \"\u55f7\u545c~\" ) xiaotianquan = XiaoTianQuan () xiaotianquan . bark () >>> \u6c6a\u6c6a \u55f7\u545c ~","title":"4.2 \u7236\u7c7b\u65b9\u6cd5\u6269\u5c55-super\u7c7b"},{"location":"programming/python/inherit/#05-mro","text":"python\u5185\u63d0\u4f9b\u4e86\u5185\u7f6e\u5c5e\u6027 __mro__ \u53ef\u4ee5\u67e5\u770b\u65b9\u6cd5\u7684\u641c\u7d22\u987a\u5e8f MRO \u662f method resolution order \uff0c\u4e3b\u8981\u7528\u4e8e \u5728\u591a\u7ee7\u627f\u65f6\u5224\u65ad \u65b9\u6cd5\u3001\u5c5e\u6027 \u7684\u8c03\u7528 \u8def\u5f84 class A : def say ( self ): print ( \"A\" ) class B ( A ): def say ( self ): print ( \"B\" ) class C ( A ): def say ( self ): print ( \"C\" ) class D ( B , C ): def say ( self ): print ( \"D\" ) demo = D () demo . say () for i in D . __mro__ : print ( i , end = \" \\n \" ) >>> D < class ' __main__ . D '> < class ' __main__ . B '> < class ' __main__ . C '> < class ' __main__ . A '> < class ' object '>","title":"05. MRO\u7b97\u6cd5"},{"location":"programming/python/iterator/","text":"01. \u8fed\u4ee3\u5668 1.1 \u4ec0\u4e48\u662f\u8fed\u4ee3\u5668 \u5f53\u5bf9\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f7f\u7528 iter \u51fd\u6570\u540e\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 \u5bf9\u4e8e\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u53ef\u4f7f\u7528 next \u51fd\u6570\uff0c\u53bb\u83b7\u53d6\u5143\u7d20\uff0c\u6ca1\u6267\u884c\u4e00\u6b21\uff0c\u83b7\u53d6\u4e00\u4e2a\u3002\u76f4\u5230\u5168\u90e8\u83b7\u53d6\u5b8c\u6bd5\uff0c\u4f1a\u629b\u51fa StopIteration \u63d0\u793a\u3002\u8868\u793a\u65e0\u5143\u7d20\u53ef\u83b7\u53d6 a = [ 1 , 2 , 3 ] gen = iter ( a ) print ( gen ) print ( next ( gen )) print ( next ( gen )) print ( next ( gen )) print ( next ( gen )) >>> < list_iterator object at 0x7fd4a68597f0 > 1 2 3 StopIteration 1.2 \u8fed\u4ee3\u5668\u904d\u5386 \u8fed\u4ee3\u5668\u53ef\u4ee5\u4f7f\u7528for\u5faa\u73af\u53d6\u503c\u548c\u64cd\u4f5c a = [ 1 , 2 , 3 ] gen = iter ( a ) print ( gen ) for i in gen : print ( i , end = \" \" ) >>> < list_iterator object at 0x7fa898f59748 > 1 2 3 1.3 \u8fed\u4ee3\u5668\u534f\u8bae \u5bf9\u6bd4\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c \u8fed\u4ee3\u5668 \u7684\u5185\u90e8\u53ea\u662f\u591a\u4e86\u4e00\u4e2a __next__() \u51fd\u6570\u3002\u6b63\u56e0\u4e3a\u6709\u5b83\uff0c\u624d\u53ef\u4ee5\u4f7f\u7528 next \u6765\u83b7\u53d6\u5143\u7d20 class Array : index = 0 mylist = [ 1 , 2 , 3 ] # \u8fd4\u56de\u8be5\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668\u7c7b\u7684\u5b9e\u4f8b # \u56e0\u4e3a\u81ea\u5df1\u5c31\u662f\u8fed\u4ee3\u5668\uff0c\u6240\u4ee5\u8fd4\u56deself def __iter__ ( self ): return self # \u5f53\u65e0\u5143\u7d20\u65f6\uff0c\u5fc5\u987b\u629b\u51faStopIteration def __next__ ( self ): if self . index <= len ( self . mylist ) - 1 : value = self . mylist [ self . index ] self . index += 1 return value raise StopIteration my_iterator = iter ( Array ()) print ( next ( my_iterator )) # 1 print ( next ( my_iterator )) # 2 print ( next ( my_iterator )) # 3 print ( next ( my_iterator )) # StopIteration 0.2 \u751f\u6210\u5668 2.1 \u751f\u6210\u5668\u7684\u5b9a\u4e49\u548c\u8bed\u6cd5 \u751f\u6210\u5668\uff08\u82f1\u6587\u540d Generator \uff09\uff0c\u751f\u6210\u5668\u7684\u672c\u8d28\u4e5f\u662f\u8fed\u4ee3\u5668\u7684\u4e00\u79cd\u3002\u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u548c next \u65b9\u6cd5\u6765\u83b7\u53d6\u5143\u7d20\u3002 \u751f\u6210\u5668\u7684\u51fa\u73b0\uff0c\u5b9e\u73b0\u4e86\u5ef6\u65f6\u8ba1\u7b97\uff0c\u53ef\u4ee5\u907f\u514d\u5927\u91cf\u6570\u636e\u76f4\u63a5\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u6d88\u8017\u3002 2.2 \u751f\u6210\u5668\u7684\u521b\u5efa \u5217\u8868\u63a8\u5bfc\u5f0f m = [ x for x in range ( 4 )] print ( m ) >>> [ 0 , 1 , 2 , 3 ] \u5f53\u5217\u8868\u751f\u6210\u5f0f\u7684 [] \u6539\u4e3a () \u3002\u8fd4\u56de\u7684\u5c31\u4e0d\u662f\u5217\u8868\uff0c\u800c\u662f\u751f\u6210\u5668\u4e86 m = ( x for x in range ( 4 )) print ( m ) >>> < generator object < genexpr > at 0x7fb42978ae60 > 2.3 \u4f7f\u7528 yield yield \u76f8\u5f53\u4e8e\u51fd\u6570\u5185\u7684 return \uff0c\u4f46\u4e0e return \u6709\u4ee5\u4e0b\u533a\u522b\uff1a \u5f53\u51fd\u6570\u8fd0\u884c\u5230 yield \u65f6\uff0c\u51fd\u6570\u8fd0\u884c\u4f1a\u6682\u505c\u6302\u8d77\uff0c\u5e76\u628a yield \u63a5\u6536\u7684\u503c\u8fd4\u56de\u3002 \u82e5 yield \u6ca1\u6709\u63a5\u6536\u4efb\u4f55\u503c\uff0c\u5219\u8fd4\u56de None yield \u867d\u7136\u8fd4\u56de\u4e86\uff0c\u4f46\u662f\u51fd\u6570\u8fd0\u884c\u5e76\u6ca1\u6709\u7ed3\u675f\uff0c\u5f53\u4f7f\u7528 next \u65b9\u6cd5\u65f6\uff0c\u4f1a\u5148\u6267\u884c yield \u4e4b\u540e\u7684\u4ee3\u7801\u3002 def generator ( n ): index = 0 while index < 5 : index += 1 yield index print ( \"\u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801\uff0c\u6b64\u65f6yield\u503c\u4e3a\uff1a\" , index ) m = generator ( 6 ) print ( m ) >>> < generator object generator at 0x7fabc1292e60 > \u4ee5\u4e0a\u5b9e\u4f8b\u4e2d\uff0c m=genertor(6) \u6267\u884c\u65f6\uff0c\u51fd\u6570\u5e76\u6ca1\u6709\u6fc0\u6d3b\uff0c\u4e14\u6b64\u65f6 m \u662f\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\u3002\u5f53\u4f7f\u7528 next \u6216\u8005 for \u5faa\u73af\u65f6\uff0c\u751f\u6210\u5668\u51fd\u6570\u624d\u5f00\u59cb\u6fc0\u6d3b\u8fd0\u884c\u3002 2.4 \u751f\u6210\u5668\u7684\u4f7f\u7528 \u751f\u6210\u5668\u7684\u53d6\u503c\u548c\u5217\u8868\u5207\u7247\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u8981\u83b7\u53d6\u751f\u6210\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u53ea\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u4f7f\u7528 next \u65b9\u6cd5\uff0c\u4f9d\u6b21\u83b7\u53d6\u751f\u6210\u5668\u5185\u7684\u5143\u7d20\uff0c\u5f53\u751f\u6210\u5668\u5185\u6ca1\u6709\u5143\u7d20\u65f6\uff0c\u4f1a\u629b\u51fa StopIteration \u9519\u8bef def generator ( n ): index = 0 while index < 3 : index += 1 yield index print ( \"\u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801\uff0c\u6b64\u65f6yield\u503c\u4e3a\uff1a\" , index ) m = generator ( 3 ) print ( next ( m )) print ( next ( m )) print ( next ( m )) print ( next ( m )) >>> 1 \u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801 \uff0c \u6b64\u65f6yield\u503c\u4e3a \uff1a 1 2 \u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801 \uff0c \u6b64\u65f6yield\u503c\u4e3a \uff1a 2 3 \u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801 \uff0c \u6b64\u65f6yield\u503c\u4e3a \uff1a 3 StopIteration \u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u751f\u6210\u5668 def generator ( n ): index = 0 while index < 3 : index += 1 yield index print ( \"\u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801\uff0c\u6b64\u65f6yield\u503c\u4e3a\uff1a\" , index ) m = generator ( 3 ) for i in m : print ( i ) >>> 1 \u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801 \uff0c \u6b64\u65f6yield\u503c\u4e3a \uff1a 1 2 \u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801 \uff0c \u6b64\u65f6yield\u503c\u4e3a \uff1a 2 3 \u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801 \uff0c \u6b64\u65f6yield\u503c\u4e3a \uff1a 3 2.5 \u751f\u6210\u5668\u7684\u72b6\u6001 \u751f\u6210\u5668\u5728\u5176\u751f\u547d\u5468\u671f\u4e2d\uff0c\u4f1a\u6709\u5982\u4e0b\u56db\u4e2a\u72b6\u6001\uff1a GEN_CREATED \uff1a\u751f\u6210\u5668\u5df2\u88ab\u521b\u5efa\uff0c\u8fd8\u672a\u6fc0\u6d3b GEN_RUNING \uff1a \u89e3\u91ca\u5668\u6b63\u5728\u6267\u884c\uff08\u53ea\u6709\u5728\u591a\u7ebf\u7a0b\u5e94\u7528\u4e2d\u624d\u80fd\u770b\u5230\u8fd9\u4e2a\u72b6\u6001\uff09 GEN_SUSPENDED : \u5728 yield \u8868\u8fbe\u5f0f\u5904\u6682\u505c GEN_CLOSED : \u751f\u6210\u5668\u6267\u884c\u7ed3\u675f from inspect import getgeneratorstate def generator ( n ): index = 0 while index < 3 : index += 1 yield index # print(\"\u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801\uff0c\u6b64\u65f6yield\u503c\u4e3a\uff1a\", index) m = generator ( 4 ) print ( getgeneratorstate ( m )) print ( next ( m )) print ( getgeneratorstate ( m )) print ( next ( m )) print ( getgeneratorstate ( m )) print ( next ( m )) print ( getgeneratorstate ( m )) print ( next ( m )) print ( getgeneratorstate ( m )) >>> GEN_CREATED 1 GEN_SUSPENDED 2 GEN_SUSPENDED 3 GEN_SUSPENDED StopIteration GEN_CLOSED","title":"\u8fed\u4ee3\u5668/\u751f\u6210\u5668"},{"location":"programming/python/iterator/#01","text":"","title":"01. \u8fed\u4ee3\u5668"},{"location":"programming/python/iterator/#11","text":"\u5f53\u5bf9\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f7f\u7528 iter \u51fd\u6570\u540e\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 \u5bf9\u4e8e\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u53ef\u4f7f\u7528 next \u51fd\u6570\uff0c\u53bb\u83b7\u53d6\u5143\u7d20\uff0c\u6ca1\u6267\u884c\u4e00\u6b21\uff0c\u83b7\u53d6\u4e00\u4e2a\u3002\u76f4\u5230\u5168\u90e8\u83b7\u53d6\u5b8c\u6bd5\uff0c\u4f1a\u629b\u51fa StopIteration \u63d0\u793a\u3002\u8868\u793a\u65e0\u5143\u7d20\u53ef\u83b7\u53d6 a = [ 1 , 2 , 3 ] gen = iter ( a ) print ( gen ) print ( next ( gen )) print ( next ( gen )) print ( next ( gen )) print ( next ( gen )) >>> < list_iterator object at 0x7fd4a68597f0 > 1 2 3 StopIteration","title":"1.1 \u4ec0\u4e48\u662f\u8fed\u4ee3\u5668"},{"location":"programming/python/iterator/#12","text":"\u8fed\u4ee3\u5668\u53ef\u4ee5\u4f7f\u7528for\u5faa\u73af\u53d6\u503c\u548c\u64cd\u4f5c a = [ 1 , 2 , 3 ] gen = iter ( a ) print ( gen ) for i in gen : print ( i , end = \" \" ) >>> < list_iterator object at 0x7fa898f59748 > 1 2 3","title":"1.2 \u8fed\u4ee3\u5668\u904d\u5386"},{"location":"programming/python/iterator/#13","text":"\u5bf9\u6bd4\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c \u8fed\u4ee3\u5668 \u7684\u5185\u90e8\u53ea\u662f\u591a\u4e86\u4e00\u4e2a __next__() \u51fd\u6570\u3002\u6b63\u56e0\u4e3a\u6709\u5b83\uff0c\u624d\u53ef\u4ee5\u4f7f\u7528 next \u6765\u83b7\u53d6\u5143\u7d20 class Array : index = 0 mylist = [ 1 , 2 , 3 ] # \u8fd4\u56de\u8be5\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668\u7c7b\u7684\u5b9e\u4f8b # \u56e0\u4e3a\u81ea\u5df1\u5c31\u662f\u8fed\u4ee3\u5668\uff0c\u6240\u4ee5\u8fd4\u56deself def __iter__ ( self ): return self # \u5f53\u65e0\u5143\u7d20\u65f6\uff0c\u5fc5\u987b\u629b\u51faStopIteration def __next__ ( self ): if self . index <= len ( self . mylist ) - 1 : value = self . mylist [ self . index ] self . index += 1 return value raise StopIteration my_iterator = iter ( Array ()) print ( next ( my_iterator )) # 1 print ( next ( my_iterator )) # 2 print ( next ( my_iterator )) # 3 print ( next ( my_iterator )) # StopIteration","title":"1.3 \u8fed\u4ee3\u5668\u534f\u8bae"},{"location":"programming/python/iterator/#02","text":"","title":"0.2 \u751f\u6210\u5668"},{"location":"programming/python/iterator/#21","text":"\u751f\u6210\u5668\uff08\u82f1\u6587\u540d Generator \uff09\uff0c\u751f\u6210\u5668\u7684\u672c\u8d28\u4e5f\u662f\u8fed\u4ee3\u5668\u7684\u4e00\u79cd\u3002\u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u548c next \u65b9\u6cd5\u6765\u83b7\u53d6\u5143\u7d20\u3002 \u751f\u6210\u5668\u7684\u51fa\u73b0\uff0c\u5b9e\u73b0\u4e86\u5ef6\u65f6\u8ba1\u7b97\uff0c\u53ef\u4ee5\u907f\u514d\u5927\u91cf\u6570\u636e\u76f4\u63a5\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u6d88\u8017\u3002","title":"2.1 \u751f\u6210\u5668\u7684\u5b9a\u4e49\u548c\u8bed\u6cd5"},{"location":"programming/python/iterator/#22","text":"\u5217\u8868\u63a8\u5bfc\u5f0f m = [ x for x in range ( 4 )] print ( m ) >>> [ 0 , 1 , 2 , 3 ] \u5f53\u5217\u8868\u751f\u6210\u5f0f\u7684 [] \u6539\u4e3a () \u3002\u8fd4\u56de\u7684\u5c31\u4e0d\u662f\u5217\u8868\uff0c\u800c\u662f\u751f\u6210\u5668\u4e86 m = ( x for x in range ( 4 )) print ( m ) >>> < generator object < genexpr > at 0x7fb42978ae60 >","title":"2.2 \u751f\u6210\u5668\u7684\u521b\u5efa"},{"location":"programming/python/iterator/#23-yield","text":"yield \u76f8\u5f53\u4e8e\u51fd\u6570\u5185\u7684 return \uff0c\u4f46\u4e0e return \u6709\u4ee5\u4e0b\u533a\u522b\uff1a \u5f53\u51fd\u6570\u8fd0\u884c\u5230 yield \u65f6\uff0c\u51fd\u6570\u8fd0\u884c\u4f1a\u6682\u505c\u6302\u8d77\uff0c\u5e76\u628a yield \u63a5\u6536\u7684\u503c\u8fd4\u56de\u3002 \u82e5 yield \u6ca1\u6709\u63a5\u6536\u4efb\u4f55\u503c\uff0c\u5219\u8fd4\u56de None yield \u867d\u7136\u8fd4\u56de\u4e86\uff0c\u4f46\u662f\u51fd\u6570\u8fd0\u884c\u5e76\u6ca1\u6709\u7ed3\u675f\uff0c\u5f53\u4f7f\u7528 next \u65b9\u6cd5\u65f6\uff0c\u4f1a\u5148\u6267\u884c yield \u4e4b\u540e\u7684\u4ee3\u7801\u3002 def generator ( n ): index = 0 while index < 5 : index += 1 yield index print ( \"\u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801\uff0c\u6b64\u65f6yield\u503c\u4e3a\uff1a\" , index ) m = generator ( 6 ) print ( m ) >>> < generator object generator at 0x7fabc1292e60 > \u4ee5\u4e0a\u5b9e\u4f8b\u4e2d\uff0c m=genertor(6) \u6267\u884c\u65f6\uff0c\u51fd\u6570\u5e76\u6ca1\u6709\u6fc0\u6d3b\uff0c\u4e14\u6b64\u65f6 m \u662f\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\u3002\u5f53\u4f7f\u7528 next \u6216\u8005 for \u5faa\u73af\u65f6\uff0c\u751f\u6210\u5668\u51fd\u6570\u624d\u5f00\u59cb\u6fc0\u6d3b\u8fd0\u884c\u3002","title":"2.3 \u4f7f\u7528yield"},{"location":"programming/python/iterator/#24","text":"\u751f\u6210\u5668\u7684\u53d6\u503c\u548c\u5217\u8868\u5207\u7247\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u8981\u83b7\u53d6\u751f\u6210\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u53ea\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u4f7f\u7528 next \u65b9\u6cd5\uff0c\u4f9d\u6b21\u83b7\u53d6\u751f\u6210\u5668\u5185\u7684\u5143\u7d20\uff0c\u5f53\u751f\u6210\u5668\u5185\u6ca1\u6709\u5143\u7d20\u65f6\uff0c\u4f1a\u629b\u51fa StopIteration \u9519\u8bef def generator ( n ): index = 0 while index < 3 : index += 1 yield index print ( \"\u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801\uff0c\u6b64\u65f6yield\u503c\u4e3a\uff1a\" , index ) m = generator ( 3 ) print ( next ( m )) print ( next ( m )) print ( next ( m )) print ( next ( m )) >>> 1 \u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801 \uff0c \u6b64\u65f6yield\u503c\u4e3a \uff1a 1 2 \u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801 \uff0c \u6b64\u65f6yield\u503c\u4e3a \uff1a 2 3 \u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801 \uff0c \u6b64\u65f6yield\u503c\u4e3a \uff1a 3 StopIteration \u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u751f\u6210\u5668 def generator ( n ): index = 0 while index < 3 : index += 1 yield index print ( \"\u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801\uff0c\u6b64\u65f6yield\u503c\u4e3a\uff1a\" , index ) m = generator ( 3 ) for i in m : print ( i ) >>> 1 \u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801 \uff0c \u6b64\u65f6yield\u503c\u4e3a \uff1a 1 2 \u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801 \uff0c \u6b64\u65f6yield\u503c\u4e3a \uff1a 2 3 \u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801 \uff0c \u6b64\u65f6yield\u503c\u4e3a \uff1a 3","title":"2.4 \u751f\u6210\u5668\u7684\u4f7f\u7528"},{"location":"programming/python/iterator/#25","text":"\u751f\u6210\u5668\u5728\u5176\u751f\u547d\u5468\u671f\u4e2d\uff0c\u4f1a\u6709\u5982\u4e0b\u56db\u4e2a\u72b6\u6001\uff1a GEN_CREATED \uff1a\u751f\u6210\u5668\u5df2\u88ab\u521b\u5efa\uff0c\u8fd8\u672a\u6fc0\u6d3b GEN_RUNING \uff1a \u89e3\u91ca\u5668\u6b63\u5728\u6267\u884c\uff08\u53ea\u6709\u5728\u591a\u7ebf\u7a0b\u5e94\u7528\u4e2d\u624d\u80fd\u770b\u5230\u8fd9\u4e2a\u72b6\u6001\uff09 GEN_SUSPENDED : \u5728 yield \u8868\u8fbe\u5f0f\u5904\u6682\u505c GEN_CLOSED : \u751f\u6210\u5668\u6267\u884c\u7ed3\u675f from inspect import getgeneratorstate def generator ( n ): index = 0 while index < 3 : index += 1 yield index # print(\"\u8fd9\u662fyield\u4ee5\u540e\u7684\u4ee3\u7801\uff0c\u6b64\u65f6yield\u503c\u4e3a\uff1a\", index) m = generator ( 4 ) print ( getgeneratorstate ( m )) print ( next ( m )) print ( getgeneratorstate ( m )) print ( next ( m )) print ( getgeneratorstate ( m )) print ( next ( m )) print ( getgeneratorstate ( m )) print ( next ( m )) print ( getgeneratorstate ( m )) >>> GEN_CREATED 1 GEN_SUSPENDED 2 GEN_SUSPENDED 3 GEN_SUSPENDED StopIteration GEN_CLOSED","title":"2.5 \u751f\u6210\u5668\u7684\u72b6\u6001"},{"location":"programming/python/lambda/","text":"01. \u95ed\u5305\u51fd\u6570\u7684\u5b9a\u4e49 \u95ed\u5305\u51fd\u6570\uff1a\u5185\u90e8\u51fd\u6570\u5bf9\u5916\u90e8\u51fd\u6570 \u4f5c\u7528\u57df \u91cc\u7684 \u53d8\u91cf \u7684 \u5f15\u7528 \u95ed\u5305\u51fd\u6570\u7684\u5916\u90e8\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u5185\u90e8\u51fd\u6570\u3002 \u95ed\u5305\u5185\u7684\u5185\u90e8\u51fd\u6570\u79c1\u6709\u5316\u4e86\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5b8c\u6210\u4e86\u6570\u636e\u7684\u5c01\u88c5\u3002 \u4ee5\u4e0b\u6f14\u793a\uff0c\u4f7f\u7528\u95ed\u5305\u51fd\u6570\u67d0\u4e2a\u6570\u503c\u7684\u5e73\u65b9\u548c\u7acb\u65b9\uff1a def func ( n ): def func1 ( m ): return m ** n return func1 pingfang = func ( 2 ) # \u8ba1\u7b97\u4e00\u4e2a\u6570\u7684\u5e73\u65b9 lifang = func ( 3 ) # \u8ba1\u7b97\u4e00\u4e2a\u6570\u7684\u7acb\u65b9 # \u8ba1\u7b972\u7684\u5e73\u65b9\u548c\u7acb\u65b9 print ( pingfang ( 2 )) print ( lifang ( 2 )) >>> 4 8 \u4ee5\u4e0a\u51fd\u6570\u4e2d\uff0c\u5728\u6267\u884c\u5b8c func(2) \u548c func(3) \u540e\uff0c\u5916\u90e8\u51fd\u6570\u7684\u53c2\u6570 n \u4f1a\u548c return \u90e8\u5206\u7684\u5185\u90e8\u53c2\u6570 func1 \u4e00\u8d77\u8d4b\u503c\u7ed9\u53d8\u91cf pingfang \u548c lifang \u3002\u8fd9\u6837\u4e4b\u540e\u518d\u8c03\u7528 pingfang \u548c lifang \u65f6\uff0c\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\uff0c\u4e0d\u4f1a\u62a5\u9519 n \u672a\u88ab\u5b9a\u4e49\u3002 \u5916\u90e8\u51fd\u6570\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u7531\u53d8\u91cf\u63a5\u6536\u4e86\u5916\u90e8\u51fd\u6570\u5185\u7684\u53c2\u6570\u4ee5\u53ca\u5185\u90e8\u51fd\u6570\u3002\u6240\u4ee5\u5916\u90e8\u51fd\u6570\u7684\u5185\u5b58\u91ca\u653e\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u53c2\u6570\u7684\u91ca\u653e\u3002 02. \u95ed\u5305\u7684__closure__\u5c5e\u6027 \u95ed\u5305\u6bd4\u666e\u901a\u7684\u51fd\u6570\u591a\u4e86\u4e00\u4e2a closure \u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u8bb0\u5f55\u7740\u81ea\u7531\u53d8\u91cf\u7684\u5730\u5740\u3002\u5f53\u95ed\u5305\u88ab\u8c03\u7528\u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u6839\u636e\u8be5\u5730\u5740\u627e\u5230\u5bf9\u5e94\u7684\u81ea\u7531\u53d8\u91cf\uff0c\u5b8c\u6210\u6574\u4f53\u7684\u51fd\u6570\u8c03\u7528\u3002 \u4ee5 func() \u4e3a\u4f8b\uff0c\u5f53\u5176\u88ab\u8c03\u7528\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 __**closure__** \u5c5e\u6027\u83b7\u53d6\u81ea\u7531\u53d8\u91cf\uff08\u4e5f\u5c31\u662f\u7a0b\u5e8f\u4e2d\u7684 n \u53c2\u6570\uff09\u5b58\u50a8\u7684\u5730\u5740\uff0c\u4f8b\u5982\uff1a def func ( n ): def func1 ( m ): return m ** n return func1 pingfang = func ( 2 ) # \u8ba1\u7b97\u4e00\u4e2a\u6570\u7684\u5e73\u65b9 lifang = func ( 3 ) # \u8ba1\u7b97\u4e00\u4e2a\u6570\u7684\u7acb\u65b9 print ( pingfang . __closure__ ) >>> ( < cell at 0x000001C9613BAA38 : int object at 0x00007FFC87168130 > ,) \u53ef\u4ee5\u770b\u5230\uff0c\u663e\u793a\u7684\u5185\u5bb9\u662f\u4e00\u4e2a int \u6574\u6570\u7c7b\u578b\uff0c\u8fd9\u5c31\u662f func() \u4e2d\u81ea\u7531\u53d8\u91cf n \u7684\u521d\u59cb\u503c\u3002\u8fd8\u53ef\u4ee5\u770b\u5230\uff0c __**closure__** \u5c5e\u6027\u7684\u7c7b\u578b\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u8fd9\u8868\u660e\u95ed\u5305\u53ef\u4ee5\u652f\u6301\u591a\u4e2a\u81ea\u7531\u53d8\u91cf\u7684\u5f62\u5f0f\u3002 03. lambda\u8868\u8fbe\u5f0f-\u533f\u540d\u51fd\u6570 3.1 \u5b9a\u4e49\u548c\u8bed\u6cd5 lambda \u8868\u8fbe\u5f0f\u662f\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u3002 \u7528\u6765\u8868\u793a\u51fd\u6570\u5185\u90e8\u53ea\u6709\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 lambda\u51fd\u6570 \u62e5\u6709\u81ea\u5df1\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4e14\u4e0d\u80fd\u8bbf\u95ee\u81ea\u6709\u53c2\u6570\u5217\u8868\u4e4b\u5916\u6216\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u53c2\u6570\u3002 \u53d8\u91cf\u540d = lambda \u53c2\u65701 ... \u53c2\u6570n : \u8868\u8fbe\u5f0f 3.2 lambda\u8868\u8fbe\u5f0f\u548c\u666e\u901a\u51fd\u6570 \u5982\u679c\u8981\u8ba1\u7b97\u4e24\u4e2a\u6570\u76f8\u4e58\uff0c\u666e\u901a\u51fd\u6570\u7684\u5199\u6cd5\u662f def func ( a , b ): return a * b print ( func ( 2 , 3 )) >>> 6 \u4f7f\u7528lambda\u8868\u8fbe\u5f0f\uff0c\u8bd5\u51fd\u6570\u66f4\u7b80\u5355 num1 = ( lambda a , b : a * b ) print ( num1 ( 2 , 3 )) >>> 6 3.3 \u533f\u540d\u51fd\u6570\u4e0b\u7684if\u8868\u8fbe\u5f0f isadulthood = lambda age : \"\u5df2\u6210\u5e74\" if ( age > 18 ) else \"\u672a\u6210\u5e74\" print ( \"\u5c0f\u660e\u7684\u5e74\u9f84\u662f19\u5c81\uff0c\u5c0f\u660e:\" + isadulthood ( 19 )) >>> \u5c0f\u660e\u7684\u5e74\u9f84\u662f19\u5c81 \uff0c \u5c0f\u660e : \u5df2\u6210\u5e74 3.4 \u65e0\u53c2\u6570\u7684\u533f\u540d\u51fd\u6570 a = lambda : \"hello\" print ( a ()) >>> hello \u7b49\u4ef7\u51fd\u6570\u662f\uff1a def a (): return \"hello\" print ( a ()) >>> hello 3.5 \u533f\u540d\u51fd\u6570\u7684\u4f18\u70b9 \u5bf9\u4e8e\u5355\u884c\u51fd\u6570\uff0c\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u7701\u53bb\u5b9a\u4e49\u51fd\u6570\u7684\u8fc7\u7a0b\uff0c\u8ba9\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\uff1b \u5bf9\u4e8e\u4e0d\u9700\u8981\u591a\u6b21\u590d\u7528\u7684\u51fd\u6570\uff0c\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u5728\u7528\u5b8c\u4e4b\u540e\u7acb\u5373\u91ca\u653e\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u6267\u884c\u7684\u6027\u80fd\u3002","title":"\u95ed\u5305\u548c\u533f\u540d"},{"location":"programming/python/lambda/#01","text":"\u95ed\u5305\u51fd\u6570\uff1a\u5185\u90e8\u51fd\u6570\u5bf9\u5916\u90e8\u51fd\u6570 \u4f5c\u7528\u57df \u91cc\u7684 \u53d8\u91cf \u7684 \u5f15\u7528 \u95ed\u5305\u51fd\u6570\u7684\u5916\u90e8\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u5185\u90e8\u51fd\u6570\u3002 \u95ed\u5305\u5185\u7684\u5185\u90e8\u51fd\u6570\u79c1\u6709\u5316\u4e86\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5b8c\u6210\u4e86\u6570\u636e\u7684\u5c01\u88c5\u3002 \u4ee5\u4e0b\u6f14\u793a\uff0c\u4f7f\u7528\u95ed\u5305\u51fd\u6570\u67d0\u4e2a\u6570\u503c\u7684\u5e73\u65b9\u548c\u7acb\u65b9\uff1a def func ( n ): def func1 ( m ): return m ** n return func1 pingfang = func ( 2 ) # \u8ba1\u7b97\u4e00\u4e2a\u6570\u7684\u5e73\u65b9 lifang = func ( 3 ) # \u8ba1\u7b97\u4e00\u4e2a\u6570\u7684\u7acb\u65b9 # \u8ba1\u7b972\u7684\u5e73\u65b9\u548c\u7acb\u65b9 print ( pingfang ( 2 )) print ( lifang ( 2 )) >>> 4 8 \u4ee5\u4e0a\u51fd\u6570\u4e2d\uff0c\u5728\u6267\u884c\u5b8c func(2) \u548c func(3) \u540e\uff0c\u5916\u90e8\u51fd\u6570\u7684\u53c2\u6570 n \u4f1a\u548c return \u90e8\u5206\u7684\u5185\u90e8\u53c2\u6570 func1 \u4e00\u8d77\u8d4b\u503c\u7ed9\u53d8\u91cf pingfang \u548c lifang \u3002\u8fd9\u6837\u4e4b\u540e\u518d\u8c03\u7528 pingfang \u548c lifang \u65f6\uff0c\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\uff0c\u4e0d\u4f1a\u62a5\u9519 n \u672a\u88ab\u5b9a\u4e49\u3002 \u5916\u90e8\u51fd\u6570\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u7531\u53d8\u91cf\u63a5\u6536\u4e86\u5916\u90e8\u51fd\u6570\u5185\u7684\u53c2\u6570\u4ee5\u53ca\u5185\u90e8\u51fd\u6570\u3002\u6240\u4ee5\u5916\u90e8\u51fd\u6570\u7684\u5185\u5b58\u91ca\u653e\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u53c2\u6570\u7684\u91ca\u653e\u3002","title":"01. \u95ed\u5305\u51fd\u6570\u7684\u5b9a\u4e49"},{"location":"programming/python/lambda/#02-__closure__","text":"\u95ed\u5305\u6bd4\u666e\u901a\u7684\u51fd\u6570\u591a\u4e86\u4e00\u4e2a closure \u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u8bb0\u5f55\u7740\u81ea\u7531\u53d8\u91cf\u7684\u5730\u5740\u3002\u5f53\u95ed\u5305\u88ab\u8c03\u7528\u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u6839\u636e\u8be5\u5730\u5740\u627e\u5230\u5bf9\u5e94\u7684\u81ea\u7531\u53d8\u91cf\uff0c\u5b8c\u6210\u6574\u4f53\u7684\u51fd\u6570\u8c03\u7528\u3002 \u4ee5 func() \u4e3a\u4f8b\uff0c\u5f53\u5176\u88ab\u8c03\u7528\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 __**closure__** \u5c5e\u6027\u83b7\u53d6\u81ea\u7531\u53d8\u91cf\uff08\u4e5f\u5c31\u662f\u7a0b\u5e8f\u4e2d\u7684 n \u53c2\u6570\uff09\u5b58\u50a8\u7684\u5730\u5740\uff0c\u4f8b\u5982\uff1a def func ( n ): def func1 ( m ): return m ** n return func1 pingfang = func ( 2 ) # \u8ba1\u7b97\u4e00\u4e2a\u6570\u7684\u5e73\u65b9 lifang = func ( 3 ) # \u8ba1\u7b97\u4e00\u4e2a\u6570\u7684\u7acb\u65b9 print ( pingfang . __closure__ ) >>> ( < cell at 0x000001C9613BAA38 : int object at 0x00007FFC87168130 > ,) \u53ef\u4ee5\u770b\u5230\uff0c\u663e\u793a\u7684\u5185\u5bb9\u662f\u4e00\u4e2a int \u6574\u6570\u7c7b\u578b\uff0c\u8fd9\u5c31\u662f func() \u4e2d\u81ea\u7531\u53d8\u91cf n \u7684\u521d\u59cb\u503c\u3002\u8fd8\u53ef\u4ee5\u770b\u5230\uff0c __**closure__** \u5c5e\u6027\u7684\u7c7b\u578b\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u8fd9\u8868\u660e\u95ed\u5305\u53ef\u4ee5\u652f\u6301\u591a\u4e2a\u81ea\u7531\u53d8\u91cf\u7684\u5f62\u5f0f\u3002","title":"02. \u95ed\u5305\u7684__closure__\u5c5e\u6027"},{"location":"programming/python/lambda/#03-lambda-","text":"","title":"03. lambda\u8868\u8fbe\u5f0f-\u533f\u540d\u51fd\u6570"},{"location":"programming/python/lambda/#31","text":"lambda \u8868\u8fbe\u5f0f\u662f\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u3002 \u7528\u6765\u8868\u793a\u51fd\u6570\u5185\u90e8\u53ea\u6709\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 lambda\u51fd\u6570 \u62e5\u6709\u81ea\u5df1\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4e14\u4e0d\u80fd\u8bbf\u95ee\u81ea\u6709\u53c2\u6570\u5217\u8868\u4e4b\u5916\u6216\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u53c2\u6570\u3002 \u53d8\u91cf\u540d = lambda \u53c2\u65701 ... \u53c2\u6570n : \u8868\u8fbe\u5f0f","title":"3.1 \u5b9a\u4e49\u548c\u8bed\u6cd5"},{"location":"programming/python/lambda/#32-lambda","text":"\u5982\u679c\u8981\u8ba1\u7b97\u4e24\u4e2a\u6570\u76f8\u4e58\uff0c\u666e\u901a\u51fd\u6570\u7684\u5199\u6cd5\u662f def func ( a , b ): return a * b print ( func ( 2 , 3 )) >>> 6 \u4f7f\u7528lambda\u8868\u8fbe\u5f0f\uff0c\u8bd5\u51fd\u6570\u66f4\u7b80\u5355 num1 = ( lambda a , b : a * b ) print ( num1 ( 2 , 3 )) >>> 6","title":"3.2 lambda\u8868\u8fbe\u5f0f\u548c\u666e\u901a\u51fd\u6570"},{"location":"programming/python/lambda/#33-if","text":"isadulthood = lambda age : \"\u5df2\u6210\u5e74\" if ( age > 18 ) else \"\u672a\u6210\u5e74\" print ( \"\u5c0f\u660e\u7684\u5e74\u9f84\u662f19\u5c81\uff0c\u5c0f\u660e:\" + isadulthood ( 19 )) >>> \u5c0f\u660e\u7684\u5e74\u9f84\u662f19\u5c81 \uff0c \u5c0f\u660e : \u5df2\u6210\u5e74","title":"3.3 \u533f\u540d\u51fd\u6570\u4e0b\u7684if\u8868\u8fbe\u5f0f"},{"location":"programming/python/lambda/#34","text":"a = lambda : \"hello\" print ( a ()) >>> hello \u7b49\u4ef7\u51fd\u6570\u662f\uff1a def a (): return \"hello\" print ( a ()) >>> hello","title":"3.4 \u65e0\u53c2\u6570\u7684\u533f\u540d\u51fd\u6570"},{"location":"programming/python/lambda/#35","text":"\u5bf9\u4e8e\u5355\u884c\u51fd\u6570\uff0c\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u7701\u53bb\u5b9a\u4e49\u51fd\u6570\u7684\u8fc7\u7a0b\uff0c\u8ba9\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\uff1b \u5bf9\u4e8e\u4e0d\u9700\u8981\u591a\u6b21\u590d\u7528\u7684\u51fd\u6570\uff0c\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u5728\u7528\u5b8c\u4e4b\u540e\u7acb\u5373\u91ca\u653e\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u6267\u884c\u7684\u6027\u80fd\u3002","title":"3.5 \u533f\u540d\u51fd\u6570\u7684\u4f18\u70b9"},{"location":"programming/python/list/","text":"01. \u5217\u8868\u7684\u5b9a\u4e49 List \uff08\u5217\u8868\uff09 \u662f Python \u4e2d\u4f7f\u7528 \u6700\u9891\u7e41 \u7684\u6570\u636e\u7c7b\u578b\uff1b \u4e13\u95e8\u7528\u4e8e\u5b58\u50a8 \u4e00\u4e32 \u4fe1\u606f \u5217\u8868\u7528 [] \u5b9a\u4e49\uff0c \u6570\u636e \u4e4b\u95f4\u4f7f\u7528 , \u5206\u9694 \u5217\u8868\u7684 \u7d22\u5f15 \u4ece 0 \u5f00\u59cb\u3002 \u6ce8\u610f\uff1a\u4ece\u5217\u8868\u4e2d\u53d6\u503c\u65f6\uff0c\u5982\u679c \u8d85\u51fa\u7d22\u5f15\u8303\u56f4\uff0c\u7a0b\u5e8f\u4f1a\u62a5\u9519 list1 = [ 1 , 2 , 3 , 4 , 5 ] list2 = [ \"xian\" , \"hangzhou\" , \"beijing\" , \"shanghai\" , \"tianjing\" ] list3 = [ \"\u5c0f\u660e\" , 18 \uff0c 187.5 ] 02. \u5217\u8868\u7684\u53d6\u503c\u548c\u5d4c\u5957 2.1 \u5217\u8868\u53d6\u503c \u5217\u8868\u7684\u7d22\u5f15\u4ece\u5de6\u5230\u53f3\u4ece 0 \u5f00\u59cb\uff0c\u4ece\u53f3\u5230\u5de6\u4ece -1 \u5f00\u59cb \u901a\u8fc7 \u5217\u8868[\u7d22\u5f15] \u7684\u65b9\u5f0f\u53ef\u4ee5\u53d6\u503c\u3001\u622a\u53d6\u7684\u64cd\u4f5c \u4ee5\u4e0b\u6f14\u793a\u5217\u8868\u53d6\u503c\u548c\u622a\u53d6\u7684\u5b9e\u4f8b\uff1a name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] # \u6b63\u5411\u7d22\u5f15\u53d6\u503c print ( name_list [ 0 ]) >>> \u5c0f\u660e # \u53cd\u5411\u7d22\u5f15\u53d6\u503c print ( name_list [ - 1 ]) >>> \u5c0f\u5f20 # \u622a\u53d6 -\u5207\u7247\u8303\u56f4\u4e3a\u5de6\u95ed\u53f3\u5f00\uff0c\u622a\u53d6\u8fd4\u56de\u4e00\u4e2a\u5217\u8868 print ( name_list [: 2 ]) [ '\u5c0f\u660e' , '\u5c0f\u674e' ] 2.2 \u5217\u8868\u5d4c\u5957 \u4f7f\u7528\u5d4c\u5957\u5217\u8868\u5728\u5217\u8868\u4e2d\u521b\u5efa\u5176\u4ed6\u5217\u8868\uff0c\u4ee5\u4e0b\u5b9e\u4f8b\uff1a a = [ 1 , 2 , 3 ] b = [ \"a\" , \"b\" , \"c\" ] c = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] x = [ a , b , c ] print ( x ) >>> [[ 1 , 2 , 3 ], [ 'a' , 'b' , 'c' ], [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' ]] # \u5d4c\u5957\u5217\u8868\u7684\u7d22\u5f15\u662f\u5b50\u5217\u8868 print ( x [ 2 ]) >>> [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' ] # \u53d6\u5b50\u5217\u8868\u5185\u7684\u503c print ( x [ 2 ][ 0 ]) >>> \u5c0f\u660e # \u5d4c\u5957\u5217\u8868\u7684\u5207\u7247 print ( x [ 0 : - 1 ]) >>> [[ 1 , 2 , 3 ], [ 'a' , 'b' , 'c' ]] print ( x [ 2 ][: - 1 ]) >>> [ '\u5c0f\u660e' , '\u5c0f\u674e' ] 2.3 \u5217\u8868\u590d\u5236 \u5982\u679c\u9700\u8981\u5bf9\u5217\u8868\u8fdb\u884c\u590d\u5236\uff0c\u590d\u5236\u540e\u7684\u5217\u8868\u548c\u539f\u5217\u8868\u76f8\u4e92\u72ec\u7acb\uff0c\u53ef\u4f7f\u7528\u5207\u7247\u7684\u65b9\u5f0f\uff1b \u5982\u679c\u60f3\u8fbe\u5230\u590d\u5236\u7684\u76ee\u7684\uff0c\u4e0d\u80fd\u4f7f\u7528\u5f15\u7528\u76f4\u63a5\u8d4b\u503c\uff0c\u5f15\u7528\u65b9\u6cd5\u4f1a\u5c06\u4e24\u4e2a\u53d8\u91cf\u6307\u5411\u540c\u4e00\u4e2a\u5217\u8868\u5185\u5b58\u5730\u5740\uff0c\u672c\u8d28\u4e0a\u8fd8\u662f\u540c\u4e00\u4e2a\u5217\u8868\uff0c\u4e0d\u80fd\u76f8\u4e92\u72ec\u7acb my_fruits = [ \"banner\" , \"apple\" , \"orange\" ] # \u4f7f\u7528\u5207\u7247\u590d\u5236\u5217\u8868 friend_fruits = my_fruits [:] print ( my_fruits ) print ( friend_fruits ) >>> [ 'banner' , 'apple' , 'orange' ] [ 'banner' , 'apple' , 'orange' ] # \u9a8c\u8bc1\u5217\u8868\u526f\u672c\u548c\u539f\u5217\u8868\u76f8\u4e92\u72ec\u7acb my_fruits . append ( \"pears\" ) friend_fruits . append ( \"Pineapple\" ) print ( \"\u589e\u52a0\u540emy_fruits\u662f\" , my_fruits ) print ( \"\u589e\u52a0\u540efriend_fruits\u662f\" , friend_fruits ) >>> \u589e\u52a0\u540emy_fruits\u662f [ 'banner' , 'apple' , 'orange' , 'pears' ] \u589e\u52a0\u540efriend_fruits\u662f [ 'banner' , 'apple' , 'orange' , 'Pineapple' ] # \u5f15\u7528\u65b9\u6cd5\u8d4b\u503c\uff0c\u8fd9\u6837\u662f\u4e0d\u53ef\u884c\u7684 my_foods = [ \"cake\" , \"rice\" , \"Cucumber\" ] friend_foods = my_foods print ( my_foods ) print ( friend_foods ) >>> [ 'cake' , 'rice' , 'Cucumber' ] [ 'cake' , 'rice' , 'Cucumber' ] # \u9a8c\u8bc1\u5217\u8868\u526f\u672c\u548c\u539f\u5217\u8868\u662f\u5426\u76f8\u4e92\u72ec\u7acb my_foods . append ( \"Vegetables\" ) friend_foods . append ( \"Noodles\" ) print ( \"append\u540emy_foods:\" , my_foods ) print ( \"append\u540efriend_foods:\" , friend_foods ) >>> append\u540emy_foods : [ 'cake' , 'rice' , 'Cucumber' , 'Vegetables' , 'Noodles' ] append\u540efriend_foods : [ 'cake' , 'rice' , 'Cucumber' , 'Vegetables' , 'Noodles' ] 03. \u5217\u8868\u5185\u7f6e\u65b9\u6cd5 \u5728ipython3\u5b9a\u4e49\u4e00\u4e2a\u5217\u8868\uff0c\u4f8b\u5982 name_list =['\u5c0f\u660e', '\u5c0f\u674e', '\u5c0f\u5f20'] \u952e\u5165 name_list. \u4f1a\u63d0\u793a\u5217\u8868\u80fd\u591f\u4f7f\u7528\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a In [ 1 ]: name_list . name_list . append name_list . count name_list . insert name_list . reverse name_list . clear name_list . extend name_list . pop name_list . sort name_list . copy name_list . index name_list . remove 3.1 \u589e\u52a0 -3 \u65b9\u6cd5 \u8bf4\u660e \u5217\u8868.insert(\u7d22\u5f15, \u6570\u636e) \u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u6570\u636e \u5217\u8868.append(\u6570\u636e) \u5728\u672b\u5c3e\u8ffd\u52a0\u6570\u636e \u5217\u8868.extend(\u5217\u88682) \u5c06\u5217\u88682 \u7684\u6570\u636e\u8ffd\u52a0\u5230\u5217\u8868 # list.insert() -\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u4f46\u4f1a\u5728\u5217\u8868\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5bf9\u8c61 name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] name_list . insert ( 1 , \"\u5c0f\u82b1\" ) print ( name_list ) >>> [ '\u5c0f\u660e' , '\u5c0f\u82b1' , '\u5c0f\u674e' , '\u5c0f\u5f20' ] # list.append() name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] name_list . append ( \"\u5c0f\u82b1\" ) print ( name_list ) >>> [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , '\u5c0f\u82b1' ] list.extend\u65b9\u6cd5\u5728\u5217\u8868\u672b\u5c3e\u4e00\u6b21\u6027\u8ffd\u52a0\u53e6\u4e00\u4e2a\u5e8f\u5217\u4e2d\u7684\u591a\u4e2a\u503c\uff1b \u53c2\u6570seq - -\u5143\u7d20\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u5217\u8868\u3001\u5143\u7ec4\u3001\u96c6\u5408\u3001\u5b57\u5178\uff0c\u82e5\u4e3a\u5b57\u5178,\u5219\u4ec5\u4f1a\u5c06\u952e(key)\u4f5c\u4e3a\u5143\u7d20\u4f9d\u6b21\u6dfb\u52a0\u81f3\u539f\u5217\u8868\u7684\u672b\u5c3e\u3002 name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] a_list = [ 1 , 2 , 3 ] name_list . extend ( a_list ) print ( name_list ) >>> [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , 1 , 2 , 3 ] \u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u8ffd\u52a0\u5b9e\u4f8b\uff1a name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] tup_list = ( 1 , 2 , 3 ) dict_list = { \"name\" : \"\u5c0f\u660e\" , \"age\" : 18 , \"weight\" : 65 } set_list = { \"chinese\" , \"Japanese\" } # \u5143\u7ec4\u8ffd\u52a0 name_list . extend ( tup_list ) print ( name_list ) >>> [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , 1 , 2 , 3 ] # \u5b57\u5178\u8ffd\u52a0 name_list . extend ( dict_list ) print ( name_list ) >>> [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , 'name' , 'age' , 'weight' ] # \u96c6\u5408\u8ffd\u52a0 name_list . extend ( set_list ) print ( name_list ) >>> [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , 'chinese' , 'Japanese' ] 3.2 \u4fee\u6539 list[\u7d22\u5f15]=\u201cnew\u201d name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] print ( \"\u7b2c\u4e8c\u4e2a\u59d3\u540d\u662f {} \" . format ( name_list [ 1 ])) name_list [ 1 ] = \"\u5f20\u5927\u70ae\" print ( \"\u4fee\u6539\u540e\u7b2c\u4e8c\u4e2a\u59d3\u540d\u662f {} \" . format ( name_list [ 1 ])) >>> \u7b2c\u4e8c\u4e2a\u59d3\u540d\u662f\u5c0f\u674e \u4fee\u6539\u540e\u7b2c\u4e8c\u4e2a\u59d3\u540d\u662f\u5f20\u5927\u70ae 3.3 \u5220\u9664 -5 \u65b9\u6cd5 \u8bf4\u660e del \u5217\u8868[\u7d22\u5f15] \u5220\u9664\u6307\u5b9a\u7d22\u5f15\u7684\u6570\u636e \u5217\u8868.remove[\u6570\u636e] \u5220\u9664\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u6307\u5b9a\u6570\u636e \u5217\u8868.pop \u5220\u9664\u672b\u5c3e\u6570\u636e \u5217\u8868.pop(\u7d22\u5f15) \u5220\u9664\u6307\u5b9a\u7d22\u5f15\u6570\u636e \u5217\u8868.clear \u6e05\u7a7a\u5217\u8868 1. del \u5217\u8868[\u7d22\u5f15] - del\u5220\u9664\u662f\u5728\u5185\u5b58\u4e2d\u5220\u9664\uff0c\u540e\u7eed\u65e0\u6cd5\u518d\u4f7f\u7528 name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] del name_list [ 0 ] print ( name_list ) >>> [ '\u5c0f\u674e' , '\u5c0f\u5f20' ] 2. list.remove[\u6570\u636e] - \u53c2\u6570-obj\uff1a\u5217\u8868\u4e2d\u9700\u8981\u79fb\u9664\u7684\u5bf9\u8c61\u6570\u636e\uff0c\u975e\u4e0b\u6807 name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" , \"\u5c0f\u660e\" ] name_list . remove ( \"\u5c0f\u660e\" ) print ( name_list ) >>> [ '\u5c0f\u674e' , '\u5c0f\u5f20' , '\u5c0f\u660e' ] 3. list.pop(index=-1) name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" , \"\u5c0f\u660e\" ] print ( \"\u73b0\u5728\u5217\u8868\u662f\" , name_list ) name_list . pop () print ( \"\u4f7f\u7528pop\u540e\uff0c\u5217\u8868\u4e3a\" , name_list ) >>> \u73b0\u5728\u5217\u8868\u662f [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , '\u5c0f\u660e' ] \u4f7f\u7528pop\u540e \uff0c \u5217\u8868\u4e3a [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' ] 4. list.pop(index) - \u4f7f\u7528pop\u5220\u9664\u540e\uff0c\u540e\u7eed\u8fd8\u80fd\u4f7f\u7528\u5220\u9664\u7684\u6570\u636e name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" , \"\u5c0f\u660e\" ] print ( \"\u73b0\u5728\u5217\u8868\u662f\" , name_list ) name_list . pop ( - 1 ) print ( \"\u4f7f\u7528pop\u540e\uff0c\u5217\u8868\u4e3a\" , name_list ) >>> \u73b0\u5728\u5217\u8868\u662f [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , '\u5c0f\u660e' ] \u4f7f\u7528pop\u540e \uff0c \u5217\u8868\u4e3a [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' ] pop_list = name_list . pop ( - 1 ) print ( \"\u521a\u4f7f\u7528pop\u5220\u9664\u7684\u6570\u636e\u662f {} \" . format ( pop_list )) print ( \"\u73b0\u5728\u5217\u8868\u6570\u636e\u662f\" , name_list ) >>> \u521a\u4f7f\u7528pop\u5220\u9664\u7684\u6570\u636e\u662f\u5c0f\u660e \u73b0\u5728\u5217\u8868\u6570\u636e\u662f [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' ] 5. list.clear() name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" , \"\u5c0f\u660e\" ] print ( \"\u73b0\u5728\u5217\u8868\u662f\" , name_list ) name_list . clear () print ( \"\u4f7f\u7528clear\u540e\uff0c\u5217\u8868\u4e3a\" , name_list ) >>> \u73b0\u5728\u5217\u8868\u662f [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , '\u5c0f\u660e' ] \u4f7f\u7528clear\u540e \uff0c \u5217\u8868\u4e3a [] 3.4 \u7edf\u8ba1 -2 \u65b9\u6cd5 \u8bf4\u660e \u5b9e\u4f8b len(\u5217\u8868) \u5217\u8868\u957f\u5ea6 a = [1, 2, 3] print(len(a)) >>> 3 \u5217\u8868.count(\u6570\u636e) \u6570\u636e\u5728\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 a = [1, 2, 3, 1] print(a.count(1)) >>> 2 3.5 \u6392\u5e8f \u65b9\u6cd5 \u8bf4\u660e \u5217\u8868.sort() \u5347\u5e8f\u6392\u5e8f \u5217\u8868.sort(reverse=True) \u964d\u5e8f\u6392\u5e8f \u5217\u8868.sorted(reverse) \u4e34\u65f6\u6392\u5e8f \u5217\u8868.reverse() \u9006\u5e8f\u3001\u53cd\u8f6c 1. list.sort() sort\u65b9\u6cd5\u5bf9\u4e8e\u5217\u8868\u6c38\u4e45\u6027\u6392\u5e8f\uff0c\u65e0\u6cd5\u6062\u590d\u539f\u6837 a = [ 5 , 3 , 6 , 1 ] a . sort () print ( a ) >>> [ 1 , 3 , 5 , 6 ] a = [ 5 , 3 , 6 , 1 ] a . sort ( reverse = True ) print ( a ) >>> [ 6 , 5 , 3 , 1 ] 2. sorted(\u53ef\u8fed\u4ee3\u5bf9\u8c61, reverse) sort\u4ec5\u53ef\u4ee5\u7528\u5728\u5217\u8868\u4e0a\uff0csorted\u53ef\u4ee5\u4f7f\u7528\u5728\u6240\u6709\u53ef\u8fed\u4ee3\u6570\u636e\u7c7b\u578b\u4e0a\uff1b sorted\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u65b0\u7684list\uff0c\u4e0d\u5f71\u54cd\u539f\u6765list\u7684\u6392\u5e8f # reverse\u9ed8\u8ba4\u4e3aFalse\uff0c\u5347\u5e8f a = [ 5 , 3 , 6 , 1 new_a = sorted ( a ) print ( new_a ) print ( a ) >>> [ 1 , 3 , 5 , 6 ] [ 5 , 3 , 6 , 1 ] # \u964d\u5e8f a = [ 5 , 3 , 6 , 1 ] new_a = sorted ( a , reverse = True ) print ( new_a ) print ( a ) >>> [ 6 , 5 , 3 , 1 ] [ 5 , 3 , 6 , 1 ] 3. list.reverse() city = [ \"hangzhou\" , \"beijing\" , \"shenzhen\" ] city . sort () print ( \"\u5347\u5e8f\u6392\u5217\u540e\" , city ) city . reverse () print ( \"\u9006\u5e8f\u4e3a\" , city ) >>> \u5347\u5e8f\u6392\u5217\u540e [ 'beijing' , 'hangzhou' , 'shenzhen' ] \u9006\u5e8f\u4e3a [ 'shenzhen' , 'hangzhou' , 'beijing' ] \u5217\u8868\u5185\u7f6e\u51fd\u6570 \u5e8f\u53f7 \u51fd\u6570 1 len(list)\u5217\u8868\u5143\u7d20\u4e2a\u6570 2 max(list)\u8fd4\u56de\u5217\u8868\u5143\u7d20\u6700\u5927\u503c 3 min(list)\u8fd4\u56de\u5217\u8868\u5143\u7d20\u6700\u5c0f\u503c 4 list(seq)\u5c06\u5143\u7ec4\u8f6c\u6362\u4e3a\u5217\u8868 \u5217\u8868\u811a\u672c\u64cd\u4f5c\u7b26 \u5217\u8868\u5bf9 + \u548c * \u7684\u64cd\u4f5c\u7b26\u4e0e\u5b57\u7b26\u4e32\u76f8\u4f3c\u3002+ \u53f7\u7528\u4e8e\u7ec4\u5408\u5217\u8868\uff0c* \u53f7\u7528\u4e8e\u91cd\u590d\u5217\u8868\u3002 Python \u8868\u8fbe\u5f0f \u7ed3\u679c \u63cf\u8ff0 len([1, 2, 3]) 3 \u957f\u5ea6 [1, 2, 3] + [4, 5, 6] [1, 2, 3, 4, 5, 6] \u7ec4\u5408 ['Hi!'] * 4 ['Hi!', 'Hi!', 'Hi!', 'Hi!'] \u91cd\u590d 3 in [1, 2, 3] True \u5143\u7d20\u662f\u5426\u5b58\u5728\u4e8e\u5217\u8868\u4e2d for x in [1, 2, 3]: print(x, end=\" \") 1 2 3 \u8fed\u4ee3","title":"\u5217\u8868"},{"location":"programming/python/list/#01","text":"List \uff08\u5217\u8868\uff09 \u662f Python \u4e2d\u4f7f\u7528 \u6700\u9891\u7e41 \u7684\u6570\u636e\u7c7b\u578b\uff1b \u4e13\u95e8\u7528\u4e8e\u5b58\u50a8 \u4e00\u4e32 \u4fe1\u606f \u5217\u8868\u7528 [] \u5b9a\u4e49\uff0c \u6570\u636e \u4e4b\u95f4\u4f7f\u7528 , \u5206\u9694 \u5217\u8868\u7684 \u7d22\u5f15 \u4ece 0 \u5f00\u59cb\u3002 \u6ce8\u610f\uff1a\u4ece\u5217\u8868\u4e2d\u53d6\u503c\u65f6\uff0c\u5982\u679c \u8d85\u51fa\u7d22\u5f15\u8303\u56f4\uff0c\u7a0b\u5e8f\u4f1a\u62a5\u9519 list1 = [ 1 , 2 , 3 , 4 , 5 ] list2 = [ \"xian\" , \"hangzhou\" , \"beijing\" , \"shanghai\" , \"tianjing\" ] list3 = [ \"\u5c0f\u660e\" , 18 \uff0c 187.5 ]","title":"01. \u5217\u8868\u7684\u5b9a\u4e49"},{"location":"programming/python/list/#02","text":"","title":"02. \u5217\u8868\u7684\u53d6\u503c\u548c\u5d4c\u5957"},{"location":"programming/python/list/#21","text":"\u5217\u8868\u7684\u7d22\u5f15\u4ece\u5de6\u5230\u53f3\u4ece 0 \u5f00\u59cb\uff0c\u4ece\u53f3\u5230\u5de6\u4ece -1 \u5f00\u59cb \u901a\u8fc7 \u5217\u8868[\u7d22\u5f15] \u7684\u65b9\u5f0f\u53ef\u4ee5\u53d6\u503c\u3001\u622a\u53d6\u7684\u64cd\u4f5c \u4ee5\u4e0b\u6f14\u793a\u5217\u8868\u53d6\u503c\u548c\u622a\u53d6\u7684\u5b9e\u4f8b\uff1a name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] # \u6b63\u5411\u7d22\u5f15\u53d6\u503c print ( name_list [ 0 ]) >>> \u5c0f\u660e # \u53cd\u5411\u7d22\u5f15\u53d6\u503c print ( name_list [ - 1 ]) >>> \u5c0f\u5f20 # \u622a\u53d6 -\u5207\u7247\u8303\u56f4\u4e3a\u5de6\u95ed\u53f3\u5f00\uff0c\u622a\u53d6\u8fd4\u56de\u4e00\u4e2a\u5217\u8868 print ( name_list [: 2 ]) [ '\u5c0f\u660e' , '\u5c0f\u674e' ]","title":"2.1 \u5217\u8868\u53d6\u503c"},{"location":"programming/python/list/#22","text":"\u4f7f\u7528\u5d4c\u5957\u5217\u8868\u5728\u5217\u8868\u4e2d\u521b\u5efa\u5176\u4ed6\u5217\u8868\uff0c\u4ee5\u4e0b\u5b9e\u4f8b\uff1a a = [ 1 , 2 , 3 ] b = [ \"a\" , \"b\" , \"c\" ] c = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] x = [ a , b , c ] print ( x ) >>> [[ 1 , 2 , 3 ], [ 'a' , 'b' , 'c' ], [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' ]] # \u5d4c\u5957\u5217\u8868\u7684\u7d22\u5f15\u662f\u5b50\u5217\u8868 print ( x [ 2 ]) >>> [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' ] # \u53d6\u5b50\u5217\u8868\u5185\u7684\u503c print ( x [ 2 ][ 0 ]) >>> \u5c0f\u660e # \u5d4c\u5957\u5217\u8868\u7684\u5207\u7247 print ( x [ 0 : - 1 ]) >>> [[ 1 , 2 , 3 ], [ 'a' , 'b' , 'c' ]] print ( x [ 2 ][: - 1 ]) >>> [ '\u5c0f\u660e' , '\u5c0f\u674e' ]","title":"2.2 \u5217\u8868\u5d4c\u5957"},{"location":"programming/python/list/#23","text":"\u5982\u679c\u9700\u8981\u5bf9\u5217\u8868\u8fdb\u884c\u590d\u5236\uff0c\u590d\u5236\u540e\u7684\u5217\u8868\u548c\u539f\u5217\u8868\u76f8\u4e92\u72ec\u7acb\uff0c\u53ef\u4f7f\u7528\u5207\u7247\u7684\u65b9\u5f0f\uff1b \u5982\u679c\u60f3\u8fbe\u5230\u590d\u5236\u7684\u76ee\u7684\uff0c\u4e0d\u80fd\u4f7f\u7528\u5f15\u7528\u76f4\u63a5\u8d4b\u503c\uff0c\u5f15\u7528\u65b9\u6cd5\u4f1a\u5c06\u4e24\u4e2a\u53d8\u91cf\u6307\u5411\u540c\u4e00\u4e2a\u5217\u8868\u5185\u5b58\u5730\u5740\uff0c\u672c\u8d28\u4e0a\u8fd8\u662f\u540c\u4e00\u4e2a\u5217\u8868\uff0c\u4e0d\u80fd\u76f8\u4e92\u72ec\u7acb my_fruits = [ \"banner\" , \"apple\" , \"orange\" ] # \u4f7f\u7528\u5207\u7247\u590d\u5236\u5217\u8868 friend_fruits = my_fruits [:] print ( my_fruits ) print ( friend_fruits ) >>> [ 'banner' , 'apple' , 'orange' ] [ 'banner' , 'apple' , 'orange' ] # \u9a8c\u8bc1\u5217\u8868\u526f\u672c\u548c\u539f\u5217\u8868\u76f8\u4e92\u72ec\u7acb my_fruits . append ( \"pears\" ) friend_fruits . append ( \"Pineapple\" ) print ( \"\u589e\u52a0\u540emy_fruits\u662f\" , my_fruits ) print ( \"\u589e\u52a0\u540efriend_fruits\u662f\" , friend_fruits ) >>> \u589e\u52a0\u540emy_fruits\u662f [ 'banner' , 'apple' , 'orange' , 'pears' ] \u589e\u52a0\u540efriend_fruits\u662f [ 'banner' , 'apple' , 'orange' , 'Pineapple' ] # \u5f15\u7528\u65b9\u6cd5\u8d4b\u503c\uff0c\u8fd9\u6837\u662f\u4e0d\u53ef\u884c\u7684 my_foods = [ \"cake\" , \"rice\" , \"Cucumber\" ] friend_foods = my_foods print ( my_foods ) print ( friend_foods ) >>> [ 'cake' , 'rice' , 'Cucumber' ] [ 'cake' , 'rice' , 'Cucumber' ] # \u9a8c\u8bc1\u5217\u8868\u526f\u672c\u548c\u539f\u5217\u8868\u662f\u5426\u76f8\u4e92\u72ec\u7acb my_foods . append ( \"Vegetables\" ) friend_foods . append ( \"Noodles\" ) print ( \"append\u540emy_foods:\" , my_foods ) print ( \"append\u540efriend_foods:\" , friend_foods ) >>> append\u540emy_foods : [ 'cake' , 'rice' , 'Cucumber' , 'Vegetables' , 'Noodles' ] append\u540efriend_foods : [ 'cake' , 'rice' , 'Cucumber' , 'Vegetables' , 'Noodles' ]","title":"2.3 \u5217\u8868\u590d\u5236"},{"location":"programming/python/list/#03","text":"\u5728ipython3\u5b9a\u4e49\u4e00\u4e2a\u5217\u8868\uff0c\u4f8b\u5982 name_list =['\u5c0f\u660e', '\u5c0f\u674e', '\u5c0f\u5f20'] \u952e\u5165 name_list. \u4f1a\u63d0\u793a\u5217\u8868\u80fd\u591f\u4f7f\u7528\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a In [ 1 ]: name_list . name_list . append name_list . count name_list . insert name_list . reverse name_list . clear name_list . extend name_list . pop name_list . sort name_list . copy name_list . index name_list . remove","title":"03. \u5217\u8868\u5185\u7f6e\u65b9\u6cd5"},{"location":"programming/python/list/#31-3","text":"\u65b9\u6cd5 \u8bf4\u660e \u5217\u8868.insert(\u7d22\u5f15, \u6570\u636e) \u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u6570\u636e \u5217\u8868.append(\u6570\u636e) \u5728\u672b\u5c3e\u8ffd\u52a0\u6570\u636e \u5217\u8868.extend(\u5217\u88682) \u5c06\u5217\u88682 \u7684\u6570\u636e\u8ffd\u52a0\u5230\u5217\u8868 # list.insert() -\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u4f46\u4f1a\u5728\u5217\u8868\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5bf9\u8c61 name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] name_list . insert ( 1 , \"\u5c0f\u82b1\" ) print ( name_list ) >>> [ '\u5c0f\u660e' , '\u5c0f\u82b1' , '\u5c0f\u674e' , '\u5c0f\u5f20' ] # list.append() name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] name_list . append ( \"\u5c0f\u82b1\" ) print ( name_list ) >>> [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , '\u5c0f\u82b1' ] list.extend\u65b9\u6cd5\u5728\u5217\u8868\u672b\u5c3e\u4e00\u6b21\u6027\u8ffd\u52a0\u53e6\u4e00\u4e2a\u5e8f\u5217\u4e2d\u7684\u591a\u4e2a\u503c\uff1b \u53c2\u6570seq - -\u5143\u7d20\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u5217\u8868\u3001\u5143\u7ec4\u3001\u96c6\u5408\u3001\u5b57\u5178\uff0c\u82e5\u4e3a\u5b57\u5178,\u5219\u4ec5\u4f1a\u5c06\u952e(key)\u4f5c\u4e3a\u5143\u7d20\u4f9d\u6b21\u6dfb\u52a0\u81f3\u539f\u5217\u8868\u7684\u672b\u5c3e\u3002 name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] a_list = [ 1 , 2 , 3 ] name_list . extend ( a_list ) print ( name_list ) >>> [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , 1 , 2 , 3 ] \u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u8ffd\u52a0\u5b9e\u4f8b\uff1a name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] tup_list = ( 1 , 2 , 3 ) dict_list = { \"name\" : \"\u5c0f\u660e\" , \"age\" : 18 , \"weight\" : 65 } set_list = { \"chinese\" , \"Japanese\" } # \u5143\u7ec4\u8ffd\u52a0 name_list . extend ( tup_list ) print ( name_list ) >>> [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , 1 , 2 , 3 ] # \u5b57\u5178\u8ffd\u52a0 name_list . extend ( dict_list ) print ( name_list ) >>> [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , 'name' , 'age' , 'weight' ] # \u96c6\u5408\u8ffd\u52a0 name_list . extend ( set_list ) print ( name_list ) >>> [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , 'chinese' , 'Japanese' ]","title":"3.1 \u589e\u52a0 -3"},{"location":"programming/python/list/#32","text":"list[\u7d22\u5f15]=\u201cnew\u201d name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] print ( \"\u7b2c\u4e8c\u4e2a\u59d3\u540d\u662f {} \" . format ( name_list [ 1 ])) name_list [ 1 ] = \"\u5f20\u5927\u70ae\" print ( \"\u4fee\u6539\u540e\u7b2c\u4e8c\u4e2a\u59d3\u540d\u662f {} \" . format ( name_list [ 1 ])) >>> \u7b2c\u4e8c\u4e2a\u59d3\u540d\u662f\u5c0f\u674e \u4fee\u6539\u540e\u7b2c\u4e8c\u4e2a\u59d3\u540d\u662f\u5f20\u5927\u70ae","title":"3.2 \u4fee\u6539"},{"location":"programming/python/list/#33-5","text":"\u65b9\u6cd5 \u8bf4\u660e del \u5217\u8868[\u7d22\u5f15] \u5220\u9664\u6307\u5b9a\u7d22\u5f15\u7684\u6570\u636e \u5217\u8868.remove[\u6570\u636e] \u5220\u9664\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u6307\u5b9a\u6570\u636e \u5217\u8868.pop \u5220\u9664\u672b\u5c3e\u6570\u636e \u5217\u8868.pop(\u7d22\u5f15) \u5220\u9664\u6307\u5b9a\u7d22\u5f15\u6570\u636e \u5217\u8868.clear \u6e05\u7a7a\u5217\u8868 1. del \u5217\u8868[\u7d22\u5f15] - del\u5220\u9664\u662f\u5728\u5185\u5b58\u4e2d\u5220\u9664\uff0c\u540e\u7eed\u65e0\u6cd5\u518d\u4f7f\u7528 name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" ] del name_list [ 0 ] print ( name_list ) >>> [ '\u5c0f\u674e' , '\u5c0f\u5f20' ] 2. list.remove[\u6570\u636e] - \u53c2\u6570-obj\uff1a\u5217\u8868\u4e2d\u9700\u8981\u79fb\u9664\u7684\u5bf9\u8c61\u6570\u636e\uff0c\u975e\u4e0b\u6807 name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" , \"\u5c0f\u660e\" ] name_list . remove ( \"\u5c0f\u660e\" ) print ( name_list ) >>> [ '\u5c0f\u674e' , '\u5c0f\u5f20' , '\u5c0f\u660e' ] 3. list.pop(index=-1) name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" , \"\u5c0f\u660e\" ] print ( \"\u73b0\u5728\u5217\u8868\u662f\" , name_list ) name_list . pop () print ( \"\u4f7f\u7528pop\u540e\uff0c\u5217\u8868\u4e3a\" , name_list ) >>> \u73b0\u5728\u5217\u8868\u662f [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , '\u5c0f\u660e' ] \u4f7f\u7528pop\u540e \uff0c \u5217\u8868\u4e3a [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' ] 4. list.pop(index) - \u4f7f\u7528pop\u5220\u9664\u540e\uff0c\u540e\u7eed\u8fd8\u80fd\u4f7f\u7528\u5220\u9664\u7684\u6570\u636e name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" , \"\u5c0f\u660e\" ] print ( \"\u73b0\u5728\u5217\u8868\u662f\" , name_list ) name_list . pop ( - 1 ) print ( \"\u4f7f\u7528pop\u540e\uff0c\u5217\u8868\u4e3a\" , name_list ) >>> \u73b0\u5728\u5217\u8868\u662f [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , '\u5c0f\u660e' ] \u4f7f\u7528pop\u540e \uff0c \u5217\u8868\u4e3a [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' ] pop_list = name_list . pop ( - 1 ) print ( \"\u521a\u4f7f\u7528pop\u5220\u9664\u7684\u6570\u636e\u662f {} \" . format ( pop_list )) print ( \"\u73b0\u5728\u5217\u8868\u6570\u636e\u662f\" , name_list ) >>> \u521a\u4f7f\u7528pop\u5220\u9664\u7684\u6570\u636e\u662f\u5c0f\u660e \u73b0\u5728\u5217\u8868\u6570\u636e\u662f [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' ] 5. list.clear() name_list = [ \"\u5c0f\u660e\" , \"\u5c0f\u674e\" , \"\u5c0f\u5f20\" , \"\u5c0f\u660e\" ] print ( \"\u73b0\u5728\u5217\u8868\u662f\" , name_list ) name_list . clear () print ( \"\u4f7f\u7528clear\u540e\uff0c\u5217\u8868\u4e3a\" , name_list ) >>> \u73b0\u5728\u5217\u8868\u662f [ '\u5c0f\u660e' , '\u5c0f\u674e' , '\u5c0f\u5f20' , '\u5c0f\u660e' ] \u4f7f\u7528clear\u540e \uff0c \u5217\u8868\u4e3a []","title":"3.3 \u5220\u9664 -5"},{"location":"programming/python/list/#34-2","text":"\u65b9\u6cd5 \u8bf4\u660e \u5b9e\u4f8b len(\u5217\u8868) \u5217\u8868\u957f\u5ea6 a = [1, 2, 3] print(len(a)) >>> 3 \u5217\u8868.count(\u6570\u636e) \u6570\u636e\u5728\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 a = [1, 2, 3, 1] print(a.count(1)) >>> 2","title":"3.4 \u7edf\u8ba1 -2"},{"location":"programming/python/list/#35","text":"\u65b9\u6cd5 \u8bf4\u660e \u5217\u8868.sort() \u5347\u5e8f\u6392\u5e8f \u5217\u8868.sort(reverse=True) \u964d\u5e8f\u6392\u5e8f \u5217\u8868.sorted(reverse) \u4e34\u65f6\u6392\u5e8f \u5217\u8868.reverse() \u9006\u5e8f\u3001\u53cd\u8f6c 1. list.sort() sort\u65b9\u6cd5\u5bf9\u4e8e\u5217\u8868\u6c38\u4e45\u6027\u6392\u5e8f\uff0c\u65e0\u6cd5\u6062\u590d\u539f\u6837 a = [ 5 , 3 , 6 , 1 ] a . sort () print ( a ) >>> [ 1 , 3 , 5 , 6 ] a = [ 5 , 3 , 6 , 1 ] a . sort ( reverse = True ) print ( a ) >>> [ 6 , 5 , 3 , 1 ] 2. sorted(\u53ef\u8fed\u4ee3\u5bf9\u8c61, reverse) sort\u4ec5\u53ef\u4ee5\u7528\u5728\u5217\u8868\u4e0a\uff0csorted\u53ef\u4ee5\u4f7f\u7528\u5728\u6240\u6709\u53ef\u8fed\u4ee3\u6570\u636e\u7c7b\u578b\u4e0a\uff1b sorted\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u65b0\u7684list\uff0c\u4e0d\u5f71\u54cd\u539f\u6765list\u7684\u6392\u5e8f # reverse\u9ed8\u8ba4\u4e3aFalse\uff0c\u5347\u5e8f a = [ 5 , 3 , 6 , 1 new_a = sorted ( a ) print ( new_a ) print ( a ) >>> [ 1 , 3 , 5 , 6 ] [ 5 , 3 , 6 , 1 ] # \u964d\u5e8f a = [ 5 , 3 , 6 , 1 ] new_a = sorted ( a , reverse = True ) print ( new_a ) print ( a ) >>> [ 6 , 5 , 3 , 1 ] [ 5 , 3 , 6 , 1 ] 3. list.reverse() city = [ \"hangzhou\" , \"beijing\" , \"shenzhen\" ] city . sort () print ( \"\u5347\u5e8f\u6392\u5217\u540e\" , city ) city . reverse () print ( \"\u9006\u5e8f\u4e3a\" , city ) >>> \u5347\u5e8f\u6392\u5217\u540e [ 'beijing' , 'hangzhou' , 'shenzhen' ] \u9006\u5e8f\u4e3a [ 'shenzhen' , 'hangzhou' , 'beijing' ]","title":"3.5 \u6392\u5e8f"},{"location":"programming/python/list/#_1","text":"\u5e8f\u53f7 \u51fd\u6570 1 len(list)\u5217\u8868\u5143\u7d20\u4e2a\u6570 2 max(list)\u8fd4\u56de\u5217\u8868\u5143\u7d20\u6700\u5927\u503c 3 min(list)\u8fd4\u56de\u5217\u8868\u5143\u7d20\u6700\u5c0f\u503c 4 list(seq)\u5c06\u5143\u7ec4\u8f6c\u6362\u4e3a\u5217\u8868","title":"\u5217\u8868\u5185\u7f6e\u51fd\u6570"},{"location":"programming/python/list/#_2","text":"\u5217\u8868\u5bf9 + \u548c * \u7684\u64cd\u4f5c\u7b26\u4e0e\u5b57\u7b26\u4e32\u76f8\u4f3c\u3002+ \u53f7\u7528\u4e8e\u7ec4\u5408\u5217\u8868\uff0c* \u53f7\u7528\u4e8e\u91cd\u590d\u5217\u8868\u3002 Python \u8868\u8fbe\u5f0f \u7ed3\u679c \u63cf\u8ff0 len([1, 2, 3]) 3 \u957f\u5ea6 [1, 2, 3] + [4, 5, 6] [1, 2, 3, 4, 5, 6] \u7ec4\u5408 ['Hi!'] * 4 ['Hi!', 'Hi!', 'Hi!', 'Hi!'] \u91cd\u590d 3 in [1, 2, 3] True \u5143\u7d20\u662f\u5426\u5b58\u5728\u4e8e\u5217\u8868\u4e2d for x in [1, 2, 3]: print(x, end=\" \") 1 2 3 \u8fed\u4ee3","title":"\u5217\u8868\u811a\u672c\u64cd\u4f5c\u7b26"},{"location":"programming/python/method/","text":"01. \u5199\u6cd5\u7684\u5dee\u5f02 \u7c7b\u7684\u65b9\u6cd5\u6709\u4ee5\u4e0b\u4e09\u79cd\uff1a \u9759\u6001\u65b9\u6cd5\uff1a\u5728\u7c7b\u4e2d\uff0c\u4ee5 @staticmethod \u88c5\u9970\u7684\u51fd\u6570\uff1b \u7c7b\u65b9\u6cd5\uff1a\u5728\u7c7b\u4e2d\uff0c\u4ee5 @classmethod \u88c5\u9970\u7684\u51fd\u6570\uff1b \u5b9e\u4f8b\u65b9\u6cd5\uff1a\u6ca1\u6709\u4efb\u4f55\u88c5\u9970\u5668\u7684\u51fd\u6570\u3002 @staticmethod \u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c run \u662f\u5b9e\u4f8b\u65b9\u6cd5\uff0c eat \u662f\u9759\u6001\u65b9\u6cd5\uff0c jump \u662f\u7c7b\u65b9\u6cd5\u3002 class Animal : def __init__ ( self , name ): self . name = name def run ( self ): print ( f \" { self . name } \u8dd1\u8d77\u6765\u5566\" ) @staticmethod def eat (): print ( \"\u6b63\u5728\u5403\u996d...\" ) @classmethod def jump ( cls , name ): print ( f \" { name } \u8df3\u8d77\u6765\u5566\" ) 02. \u5b9e\u4f8b\u65b9\u6cd5 \u5b9e\u4f8b\u65b9\u6cd5\u6700\u5927\u7684\u7279\u70b9\u5c31\u662f\uff0c\u5b83\u6700\u5c11\u4e5f\u8981\u5305\u542b\u4e00\u4e2a self \u53c2\u6570\uff0c\u7528\u4e8e\u7ed1\u5b9a\u8c03\u7528\u6b64\u65b9\u6cd5\u7684\u5b9e\u4f8b\u5bf9\u8c61\uff08Python \u4f1a\u81ea\u52a8\u5b8c\u6210\u7ed1\u5b9a\uff09\u3002 \u5b9e\u4f8b\u65b9\u6cd5\u6709\u4e24\u79cd\u8c03\u7528\u65b9\u5f0f\uff0c\u4ee5\u5b9e\u4f8b\u5bf9\u8c61\u8c03\u7528\u548c\u7c7b\u76f4\u63a5\u8c03\u7528\u3002 2.1 \u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8c03\u7528-\u7ed1\u5b9a\u65b9\u6cd5 dog = Animal ( name = \"\u65fa\u8d22\" ) dog . run () >>> \u65fa\u8d22\u8dd1\u8d77\u6765\u5566 2.2 \u901a\u8fc7\u7c7b\u76f4\u63a5\u8c03\u7528-\u975e\u7ed1\u5b9a\u65b9\u6cd5 \u4f7f\u7528\u7c7b\u540d\u76f4\u63a5\u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5\uff0c \u9700\u8981\u7ed9self\u624b\u52a8\u4f20\u53c2\uff0c\u5426\u5219\u4f1a\u62a5\u9519 dog = Animal ( name = \"\u65fa\u8d22\" ) Animal . run () >>> TypeError : run () missing 1 required positional argument : 'self' dog = Animal ( name = \"\u65fa\u8d22\" ) Animal . run ( dog ) >>> \u65fa\u8d22\u8dd1\u8d77\u6765\u5566 03. \u7c7b\u65b9\u6cd5 \u7c7b\u65b9\u6cd5\u662f\u5728\u7c7b\u4e2d\uff0c\u7531 @classmethod \u88c5\u9970\u7684\u65b9\u6cd5\u3002\u9700\u8981\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u53c2\u6570\uff0c\u901a\u8fc7\u4ee5 cls \u547d\u540d\uff0c\u4e3a class \u7684\u7b80\u5199\uff0c\u4ee3\u8868\u7c7b\u672c\u8eab\u3002 \u7c7b\u65b9\u6cd5\u7684\u53ef\u4ee5\u4ee5\u5b9e\u4f8b\u5316\u5bf9\u8c61\u548c\u7c7b\u8c03\u7528\uff0c\u4e24\u79cd\u8c03\u7528\u65b9\u5f0f\u90fd\u4e0d\u9700\u8981\u4e3a cls \u4f20\u53c2\u3002\u4e00\u822c\u4e0d\u63a8\u8350\u4f7f\u7528\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u65b9\u5f0f\u8c03\u7528\u7c7b\u65b9\u6cd5 dog = Animal ( name = \"\u65fa\u8d22\" ) dog . jump ( \"\u5c0f\u9ed1\" ) Animal . jump ( \"\u5c0f\u9ed1\" ) >>> \u5c0f\u9ed1\u8df3\u8d77\u6765\u5566 \u5c0f\u9ed1\u8df3\u8d77\u6765\u5566 04. \u9759\u6001\u65b9\u6cd5 \u9759\u6001\u65b9\u6cd5\u662f\u5728\u7c7b\u4e2d\uff0c\u7531 @staticmethod \u88c5\u9970\u7684\u65b9\u6cd5\u3002\u9759\u6001\u65b9\u6cd5\u672c\u8d28\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u6ca1\u6709\u56fa\u5b9a\u53c2\u6570\u3002 \u9759\u6001\u65b9\u6cd5\u7684\u53ef\u4ee5\u4f7f\u7528\u5b9e\u4f8b\u5316\u5bf9\u8c61\u548c\u7c7b\u76f4\u63a5\u8c03\u7528\u4e24\u79cd\u65b9\u5f0f\u3002 dog = Animal ( name = \"\u65fa\u8d22\" ) dog . eat () Animal . eat () >>> \u6b63\u5728\u5403\u996d ... \u6b63\u5728\u5403\u996d ... 05. \u65b9\u6cd5\u4e0e\u51fd\u6570\u7684\u533a\u522b \u666e\u901a\u51fd\u6570\u548c\u9759\u6001\u65b9\u6cd5\uff08 @staticmethod \uff09\u90fd\u662f\u51fd\u6570\uff08 function \uff09\u3002 \u5b9e\u4f8b\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\uff08 @classmethod \uff09\u90fd\u662f\u65b9\u6cd5\uff08 method \uff09\u3002 \u8fd9\u4e9b\u7ed3\u8bba\uff0c\u53ef\u4ee5\u4f7f\u7528 type \u51fd\u6570\u5f97\u5230\u9a8c\u8bc1\uff1a class Animal : def __init__ ( self , name ): self . name = name def run ( self ): print ( f \" { self . name } \u8dd1\u8d77\u6765\u5566\" ) @staticmethod def eat (): print ( \"\u6b63\u5728\u5403\u996d...\" ) @classmethod def jump ( cls , name ): print ( f \" { name } \u8df3\u8d77\u6765\u5566\" ) def demo_func (): pass dog = Animal ( name = \"\u65fa\u8d22\" ) print ( type ( demo_func )) print ( type ( dog . eat )) print ( \"----\" ) print ( type ( dog . run )) print ( type ( dog . jump )) >>> < class ' function '> < class ' function '> ---- < class ' method '> < class ' method '>","title":"\u7c7b\u65b9\u6cd5"},{"location":"programming/python/method/#01","text":"\u7c7b\u7684\u65b9\u6cd5\u6709\u4ee5\u4e0b\u4e09\u79cd\uff1a \u9759\u6001\u65b9\u6cd5\uff1a\u5728\u7c7b\u4e2d\uff0c\u4ee5 @staticmethod \u88c5\u9970\u7684\u51fd\u6570\uff1b \u7c7b\u65b9\u6cd5\uff1a\u5728\u7c7b\u4e2d\uff0c\u4ee5 @classmethod \u88c5\u9970\u7684\u51fd\u6570\uff1b \u5b9e\u4f8b\u65b9\u6cd5\uff1a\u6ca1\u6709\u4efb\u4f55\u88c5\u9970\u5668\u7684\u51fd\u6570\u3002 @staticmethod \u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c run \u662f\u5b9e\u4f8b\u65b9\u6cd5\uff0c eat \u662f\u9759\u6001\u65b9\u6cd5\uff0c jump \u662f\u7c7b\u65b9\u6cd5\u3002 class Animal : def __init__ ( self , name ): self . name = name def run ( self ): print ( f \" { self . name } \u8dd1\u8d77\u6765\u5566\" ) @staticmethod def eat (): print ( \"\u6b63\u5728\u5403\u996d...\" ) @classmethod def jump ( cls , name ): print ( f \" { name } \u8df3\u8d77\u6765\u5566\" )","title":"01. \u5199\u6cd5\u7684\u5dee\u5f02"},{"location":"programming/python/method/#02","text":"\u5b9e\u4f8b\u65b9\u6cd5\u6700\u5927\u7684\u7279\u70b9\u5c31\u662f\uff0c\u5b83\u6700\u5c11\u4e5f\u8981\u5305\u542b\u4e00\u4e2a self \u53c2\u6570\uff0c\u7528\u4e8e\u7ed1\u5b9a\u8c03\u7528\u6b64\u65b9\u6cd5\u7684\u5b9e\u4f8b\u5bf9\u8c61\uff08Python \u4f1a\u81ea\u52a8\u5b8c\u6210\u7ed1\u5b9a\uff09\u3002 \u5b9e\u4f8b\u65b9\u6cd5\u6709\u4e24\u79cd\u8c03\u7528\u65b9\u5f0f\uff0c\u4ee5\u5b9e\u4f8b\u5bf9\u8c61\u8c03\u7528\u548c\u7c7b\u76f4\u63a5\u8c03\u7528\u3002","title":"02. \u5b9e\u4f8b\u65b9\u6cd5"},{"location":"programming/python/method/#21-","text":"dog = Animal ( name = \"\u65fa\u8d22\" ) dog . run () >>> \u65fa\u8d22\u8dd1\u8d77\u6765\u5566","title":"2.1 \u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8c03\u7528-\u7ed1\u5b9a\u65b9\u6cd5"},{"location":"programming/python/method/#22-","text":"\u4f7f\u7528\u7c7b\u540d\u76f4\u63a5\u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5\uff0c \u9700\u8981\u7ed9self\u624b\u52a8\u4f20\u53c2\uff0c\u5426\u5219\u4f1a\u62a5\u9519 dog = Animal ( name = \"\u65fa\u8d22\" ) Animal . run () >>> TypeError : run () missing 1 required positional argument : 'self' dog = Animal ( name = \"\u65fa\u8d22\" ) Animal . run ( dog ) >>> \u65fa\u8d22\u8dd1\u8d77\u6765\u5566","title":"2.2 \u901a\u8fc7\u7c7b\u76f4\u63a5\u8c03\u7528-\u975e\u7ed1\u5b9a\u65b9\u6cd5"},{"location":"programming/python/method/#03","text":"\u7c7b\u65b9\u6cd5\u662f\u5728\u7c7b\u4e2d\uff0c\u7531 @classmethod \u88c5\u9970\u7684\u65b9\u6cd5\u3002\u9700\u8981\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u53c2\u6570\uff0c\u901a\u8fc7\u4ee5 cls \u547d\u540d\uff0c\u4e3a class \u7684\u7b80\u5199\uff0c\u4ee3\u8868\u7c7b\u672c\u8eab\u3002 \u7c7b\u65b9\u6cd5\u7684\u53ef\u4ee5\u4ee5\u5b9e\u4f8b\u5316\u5bf9\u8c61\u548c\u7c7b\u8c03\u7528\uff0c\u4e24\u79cd\u8c03\u7528\u65b9\u5f0f\u90fd\u4e0d\u9700\u8981\u4e3a cls \u4f20\u53c2\u3002\u4e00\u822c\u4e0d\u63a8\u8350\u4f7f\u7528\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u65b9\u5f0f\u8c03\u7528\u7c7b\u65b9\u6cd5 dog = Animal ( name = \"\u65fa\u8d22\" ) dog . jump ( \"\u5c0f\u9ed1\" ) Animal . jump ( \"\u5c0f\u9ed1\" ) >>> \u5c0f\u9ed1\u8df3\u8d77\u6765\u5566 \u5c0f\u9ed1\u8df3\u8d77\u6765\u5566","title":"03. \u7c7b\u65b9\u6cd5"},{"location":"programming/python/method/#04","text":"\u9759\u6001\u65b9\u6cd5\u662f\u5728\u7c7b\u4e2d\uff0c\u7531 @staticmethod \u88c5\u9970\u7684\u65b9\u6cd5\u3002\u9759\u6001\u65b9\u6cd5\u672c\u8d28\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u6ca1\u6709\u56fa\u5b9a\u53c2\u6570\u3002 \u9759\u6001\u65b9\u6cd5\u7684\u53ef\u4ee5\u4f7f\u7528\u5b9e\u4f8b\u5316\u5bf9\u8c61\u548c\u7c7b\u76f4\u63a5\u8c03\u7528\u4e24\u79cd\u65b9\u5f0f\u3002 dog = Animal ( name = \"\u65fa\u8d22\" ) dog . eat () Animal . eat () >>> \u6b63\u5728\u5403\u996d ... \u6b63\u5728\u5403\u996d ...","title":"04. \u9759\u6001\u65b9\u6cd5"},{"location":"programming/python/method/#05","text":"\u666e\u901a\u51fd\u6570\u548c\u9759\u6001\u65b9\u6cd5\uff08 @staticmethod \uff09\u90fd\u662f\u51fd\u6570\uff08 function \uff09\u3002 \u5b9e\u4f8b\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\uff08 @classmethod \uff09\u90fd\u662f\u65b9\u6cd5\uff08 method \uff09\u3002 \u8fd9\u4e9b\u7ed3\u8bba\uff0c\u53ef\u4ee5\u4f7f\u7528 type \u51fd\u6570\u5f97\u5230\u9a8c\u8bc1\uff1a class Animal : def __init__ ( self , name ): self . name = name def run ( self ): print ( f \" { self . name } \u8dd1\u8d77\u6765\u5566\" ) @staticmethod def eat (): print ( \"\u6b63\u5728\u5403\u996d...\" ) @classmethod def jump ( cls , name ): print ( f \" { name } \u8df3\u8d77\u6765\u5566\" ) def demo_func (): pass dog = Animal ( name = \"\u65fa\u8d22\" ) print ( type ( demo_func )) print ( type ( dog . eat )) print ( \"----\" ) print ( type ( dog . run )) print ( type ( dog . jump )) >>> < class ' function '> < class ' function '> ---- < class ' method '> < class ' method '>","title":"05. \u65b9\u6cd5\u4e0e\u51fd\u6570\u7684\u533a\u522b"},{"location":"programming/python/module/","text":"01. \u5bfc\u5165\u6a21\u5757\u7684\u57fa\u672c\u8bed\u6cd5 \u4f7f\u7528 import \u53ef\u4ee5\u5bfc\u5165\u6a21\u5757\uff0c\u57fa\u672c\u4f7f\u7528\u8bed\u6cd5\u6709\u4ee5\u4e0b\u4e24\u79cd\uff1a import \u6a21\u5757\u540d[as \u522b\u540d],\u6a21\u57572[as \u522b\u540d]... \uff1a\u4f7f\u7528\u8fd9\u79cd\u8bed\u6cd5\uff0c\u4f1a\u5bfc\u5165\u6a21\u5757\u4e2d\u7684\u6240\u6709\u6210\u5458\uff0c\u5305\u62ec(\u53d8\u91cf\u3001\u51fd\u6570\u3001\u7c7b\u7b49\uff09\u3002\u4ee5\u8fd9\u79cd\u8bed\u6cd5\u5bfc\u5165\u7684\u6a21\u5757\uff0c\u9700\u8981\u4f7f\u7528\u6a21\u5757\u4e2d\u7684\u6210\u5458\u65f6\uff0c\u9700\u4ee5\u6a21\u5757\u540d\uff08\u6216\u522b\u540d\uff09\u4e3a\u524d\u7f00\u3002 from \u6a21\u5757\u540d import \u6210\u5458\u540d1 [as \u522b\u540d1]\uff0c\u6210\u5458\u540d2 [as \u522b\u540d2]\uff0c\u2026 \uff1a \u4f7f\u7528\u8fd9\u79cd\u8bed\u6cd5\u683c\u5f0f\u7684 import \u8bed\u53e5\uff0c\u53ea\u4f1a\u5bfc\u5165\u6a21\u5757\u4e2d\u6307\u5b9a\u7684\u6210\u5458\uff0c\u800c\u4e0d\u662f\u5168\u90e8\u6210\u5458\u3002\u540c\u65f6\uff0c\u5f53\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u8be5\u6210\u5458\u65f6\uff0c\u65e0\u9700\u9644\u52a0\u4efb\u4f55\u524d\u7f00\uff0c\u76f4\u63a5\u4f7f\u7528\u6210\u5458\u540d\uff08\u6216\u522b\u540d\uff09\u5373\u53ef \u8bed\u6cd5\u4e2d [] \u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u7701\u7565\u3002 \u6309\u7167PEP8\u7684\u8bed\u6cd5\u89c4\u8303\uff0c\u5bfc\u5165\u591a\u4e2a\u6a21\u5757\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528\u9017\u53f7\u9694\u5f00\u7684\u65b9\u5f0f\uff0c\u5e94\u8be5\u5bfc\u5165\u6bcf\u4e2a\u6a21\u5757\u90fd\u72ec\u5360\u4e00\u884c 02.import\u5bfc\u5165\u6574\u4e2a\u6a21\u5757 import \u8bed\u53e5\u4f1a\u5bfc\u5165\u6574\u4e2a\u6a21\u5757\uff0c\u53ef\u4ee5\u901a\u8fc7 as \u6307\u5b9a\u522b\u540d\u3002 \u4f7f\u7528\u6210\u5458\u65f6\u9700\u4ee5\u6a21\u5757\u540d\u6216\u522b\u540d\u4f5c\u4e3a\u524d\u7f00 \u3002\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a import sys print ( sys . argv [ 0 ]) >>> / Users / kaka / Documents / python / python_study / 00 _study / \u7c7b\u7684\u7ec3\u4e60 . py \u4f7f\u7528 as \u8bbe\u7f6e\u522b\u540d\uff1a import sys as s print ( s . argv [ 0 ]) >>> / Users / kaka / Documents / python / python_study / 00 _study / \u7c7b\u7684\u7ec3\u4e60 . py \u4e00\u6b21\u6027\u5bfc\u5165\u591a\u4e2a\u6a21\u5757\uff0c\u6a21\u5757\u4e4b\u95f4\u4ee5 , \u5206\u5272\uff1a import sys as s , os as o print ( s . argv [ 0 ]) print ( o . sep ) >>> / Users / kaka / Documents / python / python_study / 00 _study / \u7c7b\u7684\u7ec3\u4e60 . py / 03. from...import \u4f7f\u7528 from \u6a21\u5757\u540d import \u6210\u5458 \u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5bfc\u5165\u6a21\u5757\u4e2d\u7684\u6307\u5b9a\u6210\u5458\uff0c\u4f7f\u7528\u65f6\uff0c\u65e0\u9700\u4ee5\u6a21\u5757\u540d\u4f5c\u4e3a\u524d\u7f00\uff1a from sys import argv print ( argv [ 0 ]) >>> / Users / kaka / Documents / python / python_study / 00 _study / \u7c7b\u7684\u7ec3\u4e60 . py \u4e3a\u5bfc\u5165\u7684\u6307\u5b9a\u6210\u5458\u8bbe\u7f6e\u522b\u540d from sys import argv as a print ( a [ 0 ]) >>> / Users / kaka / Documents / python / python_study / 00 _study / \u7c7b\u7684\u7ec3\u4e60 . py \u5bfc\u5165\u591a\u4e2a\u6210\u5458 from sys import argv as a , winver as mv print ( a [ 0 ]) print ( mv ) >>> / Users / kaka / Documents / python / python_study / 00 _study / \u7c7b\u7684\u7ec3\u4e60 . py 3.6.8 04. import * import * \u6216 from \u6a21\u5757\u540d import * \u7684\u65b9\u5f0f\u53ef\u4ee5\u5bfc\u5165\u6a21\u5757\u4e0b\u7684\u6240\u6709\u6210\u5458\uff0c\u4f46\u4e0d\u63a8\u8350\u4f7f\u7528\uff0c\u56e0\u4e3a\u5982\u679c\u591a\u4e2a\u6a21\u5757\u4e2d\u6709\u540c\u540d\u7684\u6210\u5458\uff0c\u4f1a\u62a5\u9519 05. \u5bfc\u5165\u81ea\u5b9a\u4e49\u6a21\u5757 \u6bcf\u4e00\u4e2a\u4ee5 .py \u4e3a\u540e\u7f00\u540d\u7684\u6587\u4ef6\u90fd\u662f\u4e00\u4e2a\u6a21\u5757\uff0c\u90fd\u53ef\u4ee5\u88ab\u5bfc\u5165\u5230\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528: \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a demo.py \u7684\u6587\u4ef6\uff0c\u5e76\u7f16\u5199\u4ee5\u4e0b\u4ee3\u7801\uff1a # \u521b\u5efa\u4e00\u4e2a\u6a21\u5757\u6587\u4ef6 # \u5168\u5c40\u53d8\u91cf name = \"\u5c0f\u660e\" age = 19 # \u51fd\u6570 def say_hello (): print ( name , age ) # \u7c7b class XiaoMing ( object ): def __init__ ( self , name , age ): self . name = name self . age = age def say ( self ): print ( \"\u6211\u7684\u540d\u5b57\u53eb {} ,\u6211\u7684\u5e74\u9f84\u662f {} \u5c81\" . format ( self . name , self . age )) \u518d\u65b0\u5efa\u4e00\u4e2a test.py \u7684\u6587\u4ef6\uff0c\u5e76\u5bfc\u5165 demo.py \uff1a import demo demo . say_hello () a = demo . XiaoMing ( \"\u5c0f\u82b1\" , 20 ) a . say () >>> \u5c0f\u660e 19 \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u82b1 , \u6211\u7684\u5e74\u9f84\u662f20\u5c81 06. \u6a21\u5757\u7684\u641c\u7d22\u987a\u5e8f python\u89e3\u91ca\u5668\uff0c\u5728\u5bfc\u5165\u6a21\u5757\u65f6\uff0c\u641c\u7d22\u987a\u5e8f\u5982\u4e0b\uff1a \u4f18\u5148\u641c\u7d22 \u5f53\u524d\u76ee\u5f55 \u4e0b\u7684\u540c\u540d\u6a21\u5757\uff0c\u5982\u679c\u6709\u5c31\u76f4\u63a5\u5bfc\u5165\uff1b \u5982\u679c\u6ca1\u6709\uff0c\u518d\u641c\u7d22 \u7cfb\u7edf\u76ee\u5f55 \u5728\u7ed9\u6587\u4ef6\u53d6\u540d\u65f6\uff0c\u4e0d\u80fd\u548c\u7cfb\u7edf\u7684\u6a21\u5757\u6587\u4ef6\u91cd\u540d\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u4e0d\u5fc5\u8981\u7684\u9519\u8bef import random as rd rand = rd . randint ( 0 , 10 ) print ( rand ) >>> 2 \u4ee5\u4e0a\u4ee3\u7801\u6f14\u793a\u4e86\uff0c\u5bfc\u5165\u7cfb\u7edf\u6a21\u5757 random \uff0c\u5e76\u4f7f\u7528random\u7684\u5185\u7f6e\u51fd\u6570 randint \u57280-10\u4e4b\u95f4\u751f\u6210\u968f\u673a\u6570\u3002 random \u662f\u7cfb\u7edf\u6a21\u5757\uff0c\u6240\u4ee5\u7a0b\u5e8f\u6267\u884c\u6b63\u5e38; \u5982\u679c\u5728\u8fd9\u4e2a\u6587\u4ef6\u5185\u6709\u4e00\u4e2a\u6587\u4ef6\uff0c\u6587\u4ef6\u540d\u662f random.py \u3002\u8fd0\u884c\u4ee5\u4e0a\u4ee3\u7801\u5219\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3apython\u89e3\u91ca\u5668\u5bfc\u5165\u6a21\u5757\u4f1a\u4f18\u5148\u641c\u7d22\u5f53\u524d\u76ee\u5f55\u540c\u540d\u6a21\u5757 6.1 __file__ \u67e5\u770b\u6a21\u5757\u7684\u5b8c\u6574\u8def\u5f84 __file__ \u5185\u7f6e\u5c5e\u6027\uff0c\u53ef\u4ee5\u67e5\u770b\u5bfc\u5165\u6a21\u5757\u7684\u5b8c\u6574\u8def\u5f84\uff0c\u5bf9\u4e8e\u4e0a\u9762\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u5c5e\u6027\u9a8c\u8bc1 import random print ( random . __file__ ) >>> / Users / kaka / Documents / python / study / random . py \u5982\u679c\u5220\u9664\u6389\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 random.py \u6587\u4ef6\uff0c\u518d\u8fd0\u884c\u4ee5\u4e0a\u4ee3\u7801\uff1a import random print ( random . __file__ ) >>> / Library / Frameworks / Python . framework / Versions / 3.6 / lib / python3 .6 / random . py 07. __doc__ \u6a21\u5757\u6587\u6863 \u548c\u51fd\u6570\u6216\u7c7b\u4e00\u6837\uff0c\u4e5f\u652f\u6301\u4e3a\u6a21\u5757\u81ea\u5b9a\u4e49\u6587\u6863\u3002 \u5728\u6a21\u5757\u5f00\u5934\u4f4d\u7f6e\uff0c\u4ee5\u6587\u6863\u6ce8\u91ca\u7684\u65b9\u5f0f\u6dfb\u52a0\u5b57\u7b26\u4e32\u8bf4\u660e\u5373\u53ef\uff1a \"\"\" name:\u5b57\u7b26\u4e32\u683c\u5f0f age:int\u683c\u5f0f say_hello:\u51fd\u6570 XiaoMing\uff1a\u7c7b \"\"\" # \u5168\u5c40\u53d8\u91cf name = \"\u5c0f\u660e\" age = 19 # \u51fd\u6570 def say_hello (): print ( name , age ) # \u7c7b class XiaoMing ( object ): def __init__ ( self , name , age ): self . name = name self . age = age def say ( self ): print ( \"\u6211\u7684\u540d\u5b57\u53eb {} ,\u6211\u7684\u5e74\u9f84\u662f {} \u5c81\" . format ( self . name , self . age )) 7.1 \u67e5\u770b\u6587\u6863 \u5728\u5bfc\u5165\u6a21\u5757\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u5c5e\u6027 __doc__ \u67e5\u770b\u6a21\u5757\u7684\u8bf4\u660e\u6587\u6863 import demo print ( demo . __doc__ ) >>> name : \u5b57\u7b26\u4e32\u683c\u5f0f age : int\u683c\u5f0f say_hello : \u51fd\u6570 XiaoMing \uff1a \u7c7b 08. __name__ \u5bfc\u5165\u6a21\u5757\u65f6\u89e3\u91ca\u5668\u4f1a\u628a\u6a21\u5757\u6587\u4ef6\u6267\u884c\u4e00\u6b21\uff0c\u5982\u679c\u6a21\u5757\u6587\u4ef6\u5b58\u5728\u6d4b\u8bd5\u4ee3\u7801\uff0c\u5728\u5bfc\u5165\u6a21\u5757\u540e\uff0c\u76f4\u63a5\u6267\u884c\uff0c\u4e5f\u4f1a\u51fa\u73b0\u539f\u6a21\u5757\u7684\u6d4b\u8bd5\u4ee3\u7801\uff1a \"\"\" name:\u5b57\u7b26\u4e32\u683c\u5f0f age:int\u683c\u5f0f say_hello:\u51fd\u6570 XiaoMing\uff1a\u7c7b \"\"\" # \u5168\u5c40\u53d8\u91cf name = \"\u5c0f\u660e\" age = 19 # \u51fd\u6570 def say_hello (): print ( name , age ) # \u7c7b class XiaoMing ( object ): def __init__ ( self , name , age ): self . name = name self . age = age def say ( self ): print ( \"\u6211\u7684\u540d\u5b57\u53eb {} ,\u6211\u7684\u5e74\u9f84\u662f {} \u5c81\" . format ( self . name , self . age )) say_hello () a = XiaoMing ( \"\u5c0f\u82b1\" , 20 ) a . say () >>> \u5c0f\u660e 19 \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u82b1 , \u6211\u7684\u5e74\u9f84\u662f20\u5c81 \u5728\u65b0\u7684\u6587\u4ef6\u5185\u5bfc\u5165\u4ee5\u4e0a\u6a21\u5757\u540e\u8fd0\u884c\u6587\u4ef6\uff1a import demo >>> \u5c0f\u660e 19 \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u82b1 , \u6211\u7684\u5e74\u9f84\u662f20\u5c81 \u7531\u4e8e\u5bfc\u5165\u6a21\u5757\u540e\uff0c\u5e76\u4e0d\u9700\u8981\u6267\u884c\u6a21\u5757\u4e2d\u7684\u6d4b\u8bd5\u4ee3\u7801\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528python\u7684\u5185\u7f6e\u5c5e\u6027 __name__ \u89e3\u51b3\uff1a \u5f53 __name__ \u5728\u6a21\u5757\u6587\u4ef6\u4e2d\uff0c\u9ed8\u8ba4\u8fd4\u56de\u662f\u5b57\u7b26\u4e32 \"__main__\" \u5f53\u6a21\u5757\u5bfc\u5165\u5230\u65b0\u6587\u4ef6\u540e\uff0c __name__ \u5c5e\u6027\u4f1a\u53d8\u4e3a\u6a21\u5757\u7684\u6587\u4ef6\u540d def say_hello (): print ( \"\u8fd9\u662f\u6a21\u5757\u6587\u4ef6\" ) say_hello () print ( __name__ ) >>> \u8fd9\u662f\u6a21\u5757\u6587\u4ef6 __main__ \u6a21\u5757\u5bfc\u5165\u5230 test.py \u540e\uff1a import demo print ( \"\u8fd9\u662f\u5bfc\u5165\u540e\u7684\u6587\u4ef6\" ) >>> demo \u8fd9\u662f\u5bfc\u5165\u540e\u7684\u6587\u4ef6 8.1 if __name__ == __main__ \u4e3a\u4e86\u89e3\u51b3\u6a21\u5757\u7684\u6d4b\u8bd5\u4ee3\u7801\u4e0d\u5728\u5bfc\u5165\u540e\u7684\u6587\u4ef6\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u5728\u6a21\u5757\u6587\u4ef6\u5185\u52a0\u5165 if __name__ == __main__ \u7684\u5224\u65ad\uff0c\u5e76\u5c06\u6d4b\u8bd5\u4ee3\u7801\uff0c\u653e\u5728\u5224\u65ad\u5185\u90e8 def say_hello (): print ( \"\u8fd9\u662f\u6d4b\u8bd5\u4ee3\u7801\u7684\u663e\u793a\" ) if __name__ == \"__main__\" : print ( __name__ ) say_hello () >>> __main__ \u8fd9\u662f\u6d4b\u8bd5\u4ee3\u7801\u7684\u663e\u793a \u8fd9\u6837\u4e4b\u540e\uff0c\u518d\u8bb2\u4ee5\u4e0a\u6a21\u5757\u5bfc\u5165\u5230\u65b0\u6587\u4ef6\u540e\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0\u6d4b\u8bd5\u4ee3\u7801 import demo print ( \"\u8fd9\u662f\u5bfc\u5165\u540e\u7684\u6587\u4ef6\" ) >>> \u8fd9\u662f\u5bfc\u5165\u540e\u7684\u6587\u4ef6 8.2 \u81ea\u5b9a\u4e49main\u51fd\u6570 \u5236\u4f5c\u6a21\u5757\u662f\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49main\u51fd\u6570\uff0c\u5c06\u6240\u6709\u7684\u6d4b\u8bd5\u4ee3\u7801\u90fd\u653e\u5728\u51fd\u6570\u5185\u90e8\uff0c\u5e76\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a def say_hello (): print ( \"\u8fd9\u662f\u6d4b\u8bd5\u4ee3\u7801\u7684\u663e\u793a\" ) def main (): print ( __name__ ) print ( \"\u8fd9\u662f\u6a21\u5757\u6587\u4ef6\u7684\u6d4b\u8bd5\u51fd\u6570\u5185\u90e8\" ) say_hello () if __name__ == \"__main__\" : main () 09 .\u5305\u7684\u6982\u5ff5 \u5305\u662f\u4e00\u4e2a\u5305\u542b \u591a\u4e2a\u6a21\u5757 \u7684 \u7279\u6b8a\u76ee\u5f55 \u76ee\u5f55\u4e0b\u6709\u4e00\u4e2a \u7279\u6b8a\u7684\u6587\u4ef6 __init__.py \u5305\u7684\u547d\u540d\u65b9\u5f0f\u548c\u53d8\u91cf\u540d\u4e00\u6837\uff0c\u4f7f\u7528 \u5c0f\u5199\u5b57\u6bcd+_ \u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u6570\u5b57\uff0c\u4f46\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u6bd4\u5982 ka_01 , ka_package 10. pycharm \u521b\u5efa\u5305\u7684\u4e24\u79cd\u65b9\u5f0f \u65b0\u5efa\u6587\u4ef6\u5939\uff0c\u5728\u6587\u4ef6\u5939\u5185\u521b\u5efa __init__.py \u6587\u4ef6\uff0c\u6587\u4ef6\u5185\u53ef\u4ee5\u4e0d\u5199\u4efb\u4f55\u4ee3\u7801 \u65b0\u5efa python_Package ,pycharm\u4f1a\u81ea\u52a8\u521b\u5efa\u5305\u548c __init__.py \u6587\u4ef6 11. \u5305\u7684\u5bfc\u5165 \u5305\u7684\u672c\u8d28\u8fd8\u662f\u6a21\u5757\uff0c\u6240\u4ee5\u5bfc\u5165\u5305\u7684\u8bed\u6cd5\u548c\u5bfc\u5165\u6a21\u5757\u7684\u8bed\u6cd5\u7c7b\u4f3c\uff1a 1. import \u5305\u540d [ . \u6a21\u5757\u540d ][ as \u522b\u540d ] 2. from \u5305\u540d import \u6a21\u5757\u540d [ as \u522b\u540d ] 3. from \u5305\u540d.\u6a21\u5757\u540d import \u6210\u5458\u540d [ as \u522b\u540d ] \u5b9a\u4e49\u4e00\u4e2a\u5305\uff0c\u5982\u4e0b | ka_message |-- __init__ . py |-- send_message . py |-- receive . py 11.1 import \u5305\u540d [.\u6a21\u5757\u540d][as \u522b\u540d] # 1.\u5bfc\u5165\u6574\u4e2a\u5305 import ka_message # 2. \u5bfc\u5165\u5305\u5185\u67d0\u4e2a\u6a21\u5757 import ka_message.send_message # 3.\u8bbe\u7f6e\u522b\u540d import ka_message.send_message as module 11.2 from \u5305\u540d import \u6a21\u5757\u540d [as \u522b\u540d] # 1.\u5bfc\u5165\u67d0\u4e2a\u6a21\u5757 from ka_message import send_message # 2.\u8bbe\u7f6e\u522b\u540d from ka_message import send_message as module 11.3 from \u5305\u540d.\u6a21\u5757\u540d import \u6210\u5458\u540d [as \u522b\u540d] # \u5bfc\u5165\u5305\u5185\u67d0\u4e2a\u6a21\u5757\u7684\u67d0\u4e2a\u6210\u5458 from ka_message.send_message import send # \u5bfc\u5165\u5305\u5185\u67d0\u4e2a\u6a21\u5757\u7684\u67d0\u4e2a\u6210\u5458,\u5e76\u8bbe\u7f6e\u522b\u540d from ka_message.send_message import send as send_foo 12. \u5236\u4f5c\u6a21\u5757 \u5982\u679c\u5e0c\u671b\u5c06\u81ea\u5df1\u5236\u4f5c\u7684\u6a21\u5757\u5206\u4eab\u7ed9\u4ed6\u4eba\uff0c\u53ef\u4ee5\u4f7f\u7528\u6a21\u5757\u5236\u4f5c\u7684\u65b9\u5f0f\uff0c\u5171\u6709\u4e09\u6b65 1. \u5728\u5305\u5185\u521b\u5efasetup.py\u6587\u4ef6 from distutils.core import setup setup ( name = \"ka_message\" , # \u5305\u540d version = \"1.0\" , # \u7248\u672c description = \"kaka's \u53d1\u9001\u548c\u63a5\u6536\u6d88\u606f\u6a21\u5757\" , # \u63cf\u8ff0\u4fe1\u606f long_description = \"\u5b8c\u6574\u7684\u53d1\u9001\u548c\u63a5\u6536\u6d88\u606f\u6a21\u5757\" , # \u5b8c\u6574\u63cf\u8ff0\u4fe1\u606f author = \"kaka\" , # \u4f5c\u8005 author_email = \"hmz270@163.com\" , # \u4f5c\u8005\u90ae\u7bb1 url = \"\u65e0\" , # \u4e3b\u9875 py_modules = [ \"ka_message.send_message\" , \"ka_message.receive\" ]) 2. \u7ec8\u7aef\u4e2d\u6784\u9020\u6587\u4ef6 $ python3 setup . py build 3. \u7ec8\u7aef\u4e2d\u751f\u6210\u53d1\u5e03\u538b\u7f29\u5305 $ python3 setup . py sdist 12.1 \u5b89\u88c5\u6a21\u5757 $ tar - zxvf ka_message - 1.0 tar . gz $ sudo python3 setup . py install 12.2 \u5378\u8f7d\u6a21\u5757 $ cd \u5230\u5b89\u88c5\u76ee\u5f55 $ sudo rm - r ka_message * 13. pip\u5b89\u88c5\u7b2c\u4e09\u65b9\u6a21\u5757 pip \u662fpython\u7684\u5305\u7ba1\u7406\u5de5\u5177\uff0c\u7528\u4e8e\u5b89\u88c5\u7b2c\u4e09\u65b9\u6a21\u5757 \u5b89\u88c5python3\u7684\u547d\u4ee4\u662f pip3 \u3002\u57fa\u7840\u8bed\u6cd5\u5982\u4e0b\uff1a # \u5b89\u88c5\u7b2c\u4e09\u65b9\u6a21\u5757 $ pip3 install \u6a21\u5757\u540d # \u5378\u8f7d\u4e09\u65b9\u6a21\u5757 $ pip3 uninstall \u6a21\u5757\u540d # \u67e5\u770b\u7b2c\u4e09\u65b9\u6a21\u5757\u5217\u8868 $ pip list # \u67e5\u770b\u6807\u51c6\u5e93\u548c\u7b2c\u4e09\u65b9\u6a21\u5757,\u5728python\u547d\u4ee4\u884c\u5185\uff1a $ help ( \"modules\" )","title":"\u6a21\u5757"},{"location":"programming/python/module/#01","text":"\u4f7f\u7528 import \u53ef\u4ee5\u5bfc\u5165\u6a21\u5757\uff0c\u57fa\u672c\u4f7f\u7528\u8bed\u6cd5\u6709\u4ee5\u4e0b\u4e24\u79cd\uff1a import \u6a21\u5757\u540d[as \u522b\u540d],\u6a21\u57572[as \u522b\u540d]... \uff1a\u4f7f\u7528\u8fd9\u79cd\u8bed\u6cd5\uff0c\u4f1a\u5bfc\u5165\u6a21\u5757\u4e2d\u7684\u6240\u6709\u6210\u5458\uff0c\u5305\u62ec(\u53d8\u91cf\u3001\u51fd\u6570\u3001\u7c7b\u7b49\uff09\u3002\u4ee5\u8fd9\u79cd\u8bed\u6cd5\u5bfc\u5165\u7684\u6a21\u5757\uff0c\u9700\u8981\u4f7f\u7528\u6a21\u5757\u4e2d\u7684\u6210\u5458\u65f6\uff0c\u9700\u4ee5\u6a21\u5757\u540d\uff08\u6216\u522b\u540d\uff09\u4e3a\u524d\u7f00\u3002 from \u6a21\u5757\u540d import \u6210\u5458\u540d1 [as \u522b\u540d1]\uff0c\u6210\u5458\u540d2 [as \u522b\u540d2]\uff0c\u2026 \uff1a \u4f7f\u7528\u8fd9\u79cd\u8bed\u6cd5\u683c\u5f0f\u7684 import \u8bed\u53e5\uff0c\u53ea\u4f1a\u5bfc\u5165\u6a21\u5757\u4e2d\u6307\u5b9a\u7684\u6210\u5458\uff0c\u800c\u4e0d\u662f\u5168\u90e8\u6210\u5458\u3002\u540c\u65f6\uff0c\u5f53\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u8be5\u6210\u5458\u65f6\uff0c\u65e0\u9700\u9644\u52a0\u4efb\u4f55\u524d\u7f00\uff0c\u76f4\u63a5\u4f7f\u7528\u6210\u5458\u540d\uff08\u6216\u522b\u540d\uff09\u5373\u53ef \u8bed\u6cd5\u4e2d [] \u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u7701\u7565\u3002 \u6309\u7167PEP8\u7684\u8bed\u6cd5\u89c4\u8303\uff0c\u5bfc\u5165\u591a\u4e2a\u6a21\u5757\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528\u9017\u53f7\u9694\u5f00\u7684\u65b9\u5f0f\uff0c\u5e94\u8be5\u5bfc\u5165\u6bcf\u4e2a\u6a21\u5757\u90fd\u72ec\u5360\u4e00\u884c","title":"01. \u5bfc\u5165\u6a21\u5757\u7684\u57fa\u672c\u8bed\u6cd5"},{"location":"programming/python/module/#02import","text":"import \u8bed\u53e5\u4f1a\u5bfc\u5165\u6574\u4e2a\u6a21\u5757\uff0c\u53ef\u4ee5\u901a\u8fc7 as \u6307\u5b9a\u522b\u540d\u3002 \u4f7f\u7528\u6210\u5458\u65f6\u9700\u4ee5\u6a21\u5757\u540d\u6216\u522b\u540d\u4f5c\u4e3a\u524d\u7f00 \u3002\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a import sys print ( sys . argv [ 0 ]) >>> / Users / kaka / Documents / python / python_study / 00 _study / \u7c7b\u7684\u7ec3\u4e60 . py \u4f7f\u7528 as \u8bbe\u7f6e\u522b\u540d\uff1a import sys as s print ( s . argv [ 0 ]) >>> / Users / kaka / Documents / python / python_study / 00 _study / \u7c7b\u7684\u7ec3\u4e60 . py \u4e00\u6b21\u6027\u5bfc\u5165\u591a\u4e2a\u6a21\u5757\uff0c\u6a21\u5757\u4e4b\u95f4\u4ee5 , \u5206\u5272\uff1a import sys as s , os as o print ( s . argv [ 0 ]) print ( o . sep ) >>> / Users / kaka / Documents / python / python_study / 00 _study / \u7c7b\u7684\u7ec3\u4e60 . py /","title":"02.import\u5bfc\u5165\u6574\u4e2a\u6a21\u5757"},{"location":"programming/python/module/#03-fromimport","text":"\u4f7f\u7528 from \u6a21\u5757\u540d import \u6210\u5458 \u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5bfc\u5165\u6a21\u5757\u4e2d\u7684\u6307\u5b9a\u6210\u5458\uff0c\u4f7f\u7528\u65f6\uff0c\u65e0\u9700\u4ee5\u6a21\u5757\u540d\u4f5c\u4e3a\u524d\u7f00\uff1a from sys import argv print ( argv [ 0 ]) >>> / Users / kaka / Documents / python / python_study / 00 _study / \u7c7b\u7684\u7ec3\u4e60 . py \u4e3a\u5bfc\u5165\u7684\u6307\u5b9a\u6210\u5458\u8bbe\u7f6e\u522b\u540d from sys import argv as a print ( a [ 0 ]) >>> / Users / kaka / Documents / python / python_study / 00 _study / \u7c7b\u7684\u7ec3\u4e60 . py \u5bfc\u5165\u591a\u4e2a\u6210\u5458 from sys import argv as a , winver as mv print ( a [ 0 ]) print ( mv ) >>> / Users / kaka / Documents / python / python_study / 00 _study / \u7c7b\u7684\u7ec3\u4e60 . py 3.6.8","title":"03. from...import"},{"location":"programming/python/module/#04-import","text":"import * \u6216 from \u6a21\u5757\u540d import * \u7684\u65b9\u5f0f\u53ef\u4ee5\u5bfc\u5165\u6a21\u5757\u4e0b\u7684\u6240\u6709\u6210\u5458\uff0c\u4f46\u4e0d\u63a8\u8350\u4f7f\u7528\uff0c\u56e0\u4e3a\u5982\u679c\u591a\u4e2a\u6a21\u5757\u4e2d\u6709\u540c\u540d\u7684\u6210\u5458\uff0c\u4f1a\u62a5\u9519","title":"04. import *"},{"location":"programming/python/module/#05","text":"\u6bcf\u4e00\u4e2a\u4ee5 .py \u4e3a\u540e\u7f00\u540d\u7684\u6587\u4ef6\u90fd\u662f\u4e00\u4e2a\u6a21\u5757\uff0c\u90fd\u53ef\u4ee5\u88ab\u5bfc\u5165\u5230\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528: \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a demo.py \u7684\u6587\u4ef6\uff0c\u5e76\u7f16\u5199\u4ee5\u4e0b\u4ee3\u7801\uff1a # \u521b\u5efa\u4e00\u4e2a\u6a21\u5757\u6587\u4ef6 # \u5168\u5c40\u53d8\u91cf name = \"\u5c0f\u660e\" age = 19 # \u51fd\u6570 def say_hello (): print ( name , age ) # \u7c7b class XiaoMing ( object ): def __init__ ( self , name , age ): self . name = name self . age = age def say ( self ): print ( \"\u6211\u7684\u540d\u5b57\u53eb {} ,\u6211\u7684\u5e74\u9f84\u662f {} \u5c81\" . format ( self . name , self . age )) \u518d\u65b0\u5efa\u4e00\u4e2a test.py \u7684\u6587\u4ef6\uff0c\u5e76\u5bfc\u5165 demo.py \uff1a import demo demo . say_hello () a = demo . XiaoMing ( \"\u5c0f\u82b1\" , 20 ) a . say () >>> \u5c0f\u660e 19 \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u82b1 , \u6211\u7684\u5e74\u9f84\u662f20\u5c81","title":"05. \u5bfc\u5165\u81ea\u5b9a\u4e49\u6a21\u5757"},{"location":"programming/python/module/#06","text":"python\u89e3\u91ca\u5668\uff0c\u5728\u5bfc\u5165\u6a21\u5757\u65f6\uff0c\u641c\u7d22\u987a\u5e8f\u5982\u4e0b\uff1a \u4f18\u5148\u641c\u7d22 \u5f53\u524d\u76ee\u5f55 \u4e0b\u7684\u540c\u540d\u6a21\u5757\uff0c\u5982\u679c\u6709\u5c31\u76f4\u63a5\u5bfc\u5165\uff1b \u5982\u679c\u6ca1\u6709\uff0c\u518d\u641c\u7d22 \u7cfb\u7edf\u76ee\u5f55 \u5728\u7ed9\u6587\u4ef6\u53d6\u540d\u65f6\uff0c\u4e0d\u80fd\u548c\u7cfb\u7edf\u7684\u6a21\u5757\u6587\u4ef6\u91cd\u540d\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u4e0d\u5fc5\u8981\u7684\u9519\u8bef import random as rd rand = rd . randint ( 0 , 10 ) print ( rand ) >>> 2 \u4ee5\u4e0a\u4ee3\u7801\u6f14\u793a\u4e86\uff0c\u5bfc\u5165\u7cfb\u7edf\u6a21\u5757 random \uff0c\u5e76\u4f7f\u7528random\u7684\u5185\u7f6e\u51fd\u6570 randint \u57280-10\u4e4b\u95f4\u751f\u6210\u968f\u673a\u6570\u3002 random \u662f\u7cfb\u7edf\u6a21\u5757\uff0c\u6240\u4ee5\u7a0b\u5e8f\u6267\u884c\u6b63\u5e38; \u5982\u679c\u5728\u8fd9\u4e2a\u6587\u4ef6\u5185\u6709\u4e00\u4e2a\u6587\u4ef6\uff0c\u6587\u4ef6\u540d\u662f random.py \u3002\u8fd0\u884c\u4ee5\u4e0a\u4ee3\u7801\u5219\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3apython\u89e3\u91ca\u5668\u5bfc\u5165\u6a21\u5757\u4f1a\u4f18\u5148\u641c\u7d22\u5f53\u524d\u76ee\u5f55\u540c\u540d\u6a21\u5757","title":"06. \u6a21\u5757\u7684\u641c\u7d22\u987a\u5e8f"},{"location":"programming/python/module/#61-__file__","text":"__file__ \u5185\u7f6e\u5c5e\u6027\uff0c\u53ef\u4ee5\u67e5\u770b\u5bfc\u5165\u6a21\u5757\u7684\u5b8c\u6574\u8def\u5f84\uff0c\u5bf9\u4e8e\u4e0a\u9762\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u5c5e\u6027\u9a8c\u8bc1 import random print ( random . __file__ ) >>> / Users / kaka / Documents / python / study / random . py \u5982\u679c\u5220\u9664\u6389\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 random.py \u6587\u4ef6\uff0c\u518d\u8fd0\u884c\u4ee5\u4e0a\u4ee3\u7801\uff1a import random print ( random . __file__ ) >>> / Library / Frameworks / Python . framework / Versions / 3.6 / lib / python3 .6 / random . py","title":"6.1 __file__ \u67e5\u770b\u6a21\u5757\u7684\u5b8c\u6574\u8def\u5f84"},{"location":"programming/python/module/#07__doc__","text":"\u548c\u51fd\u6570\u6216\u7c7b\u4e00\u6837\uff0c\u4e5f\u652f\u6301\u4e3a\u6a21\u5757\u81ea\u5b9a\u4e49\u6587\u6863\u3002 \u5728\u6a21\u5757\u5f00\u5934\u4f4d\u7f6e\uff0c\u4ee5\u6587\u6863\u6ce8\u91ca\u7684\u65b9\u5f0f\u6dfb\u52a0\u5b57\u7b26\u4e32\u8bf4\u660e\u5373\u53ef\uff1a \"\"\" name:\u5b57\u7b26\u4e32\u683c\u5f0f age:int\u683c\u5f0f say_hello:\u51fd\u6570 XiaoMing\uff1a\u7c7b \"\"\" # \u5168\u5c40\u53d8\u91cf name = \"\u5c0f\u660e\" age = 19 # \u51fd\u6570 def say_hello (): print ( name , age ) # \u7c7b class XiaoMing ( object ): def __init__ ( self , name , age ): self . name = name self . age = age def say ( self ): print ( \"\u6211\u7684\u540d\u5b57\u53eb {} ,\u6211\u7684\u5e74\u9f84\u662f {} \u5c81\" . format ( self . name , self . age ))","title":"07.__doc__ \u6a21\u5757\u6587\u6863"},{"location":"programming/python/module/#71","text":"\u5728\u5bfc\u5165\u6a21\u5757\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u5c5e\u6027 __doc__ \u67e5\u770b\u6a21\u5757\u7684\u8bf4\u660e\u6587\u6863 import demo print ( demo . __doc__ ) >>> name : \u5b57\u7b26\u4e32\u683c\u5f0f age : int\u683c\u5f0f say_hello : \u51fd\u6570 XiaoMing \uff1a \u7c7b","title":"7.1 \u67e5\u770b\u6587\u6863"},{"location":"programming/python/module/#08-__name__","text":"\u5bfc\u5165\u6a21\u5757\u65f6\u89e3\u91ca\u5668\u4f1a\u628a\u6a21\u5757\u6587\u4ef6\u6267\u884c\u4e00\u6b21\uff0c\u5982\u679c\u6a21\u5757\u6587\u4ef6\u5b58\u5728\u6d4b\u8bd5\u4ee3\u7801\uff0c\u5728\u5bfc\u5165\u6a21\u5757\u540e\uff0c\u76f4\u63a5\u6267\u884c\uff0c\u4e5f\u4f1a\u51fa\u73b0\u539f\u6a21\u5757\u7684\u6d4b\u8bd5\u4ee3\u7801\uff1a \"\"\" name:\u5b57\u7b26\u4e32\u683c\u5f0f age:int\u683c\u5f0f say_hello:\u51fd\u6570 XiaoMing\uff1a\u7c7b \"\"\" # \u5168\u5c40\u53d8\u91cf name = \"\u5c0f\u660e\" age = 19 # \u51fd\u6570 def say_hello (): print ( name , age ) # \u7c7b class XiaoMing ( object ): def __init__ ( self , name , age ): self . name = name self . age = age def say ( self ): print ( \"\u6211\u7684\u540d\u5b57\u53eb {} ,\u6211\u7684\u5e74\u9f84\u662f {} \u5c81\" . format ( self . name , self . age )) say_hello () a = XiaoMing ( \"\u5c0f\u82b1\" , 20 ) a . say () >>> \u5c0f\u660e 19 \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u82b1 , \u6211\u7684\u5e74\u9f84\u662f20\u5c81 \u5728\u65b0\u7684\u6587\u4ef6\u5185\u5bfc\u5165\u4ee5\u4e0a\u6a21\u5757\u540e\u8fd0\u884c\u6587\u4ef6\uff1a import demo >>> \u5c0f\u660e 19 \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u82b1 , \u6211\u7684\u5e74\u9f84\u662f20\u5c81 \u7531\u4e8e\u5bfc\u5165\u6a21\u5757\u540e\uff0c\u5e76\u4e0d\u9700\u8981\u6267\u884c\u6a21\u5757\u4e2d\u7684\u6d4b\u8bd5\u4ee3\u7801\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528python\u7684\u5185\u7f6e\u5c5e\u6027 __name__ \u89e3\u51b3\uff1a \u5f53 __name__ \u5728\u6a21\u5757\u6587\u4ef6\u4e2d\uff0c\u9ed8\u8ba4\u8fd4\u56de\u662f\u5b57\u7b26\u4e32 \"__main__\" \u5f53\u6a21\u5757\u5bfc\u5165\u5230\u65b0\u6587\u4ef6\u540e\uff0c __name__ \u5c5e\u6027\u4f1a\u53d8\u4e3a\u6a21\u5757\u7684\u6587\u4ef6\u540d def say_hello (): print ( \"\u8fd9\u662f\u6a21\u5757\u6587\u4ef6\" ) say_hello () print ( __name__ ) >>> \u8fd9\u662f\u6a21\u5757\u6587\u4ef6 __main__ \u6a21\u5757\u5bfc\u5165\u5230 test.py \u540e\uff1a import demo print ( \"\u8fd9\u662f\u5bfc\u5165\u540e\u7684\u6587\u4ef6\" ) >>> demo \u8fd9\u662f\u5bfc\u5165\u540e\u7684\u6587\u4ef6","title":"08. __name__"},{"location":"programming/python/module/#81-if-__name__-__main__","text":"\u4e3a\u4e86\u89e3\u51b3\u6a21\u5757\u7684\u6d4b\u8bd5\u4ee3\u7801\u4e0d\u5728\u5bfc\u5165\u540e\u7684\u6587\u4ef6\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u5728\u6a21\u5757\u6587\u4ef6\u5185\u52a0\u5165 if __name__ == __main__ \u7684\u5224\u65ad\uff0c\u5e76\u5c06\u6d4b\u8bd5\u4ee3\u7801\uff0c\u653e\u5728\u5224\u65ad\u5185\u90e8 def say_hello (): print ( \"\u8fd9\u662f\u6d4b\u8bd5\u4ee3\u7801\u7684\u663e\u793a\" ) if __name__ == \"__main__\" : print ( __name__ ) say_hello () >>> __main__ \u8fd9\u662f\u6d4b\u8bd5\u4ee3\u7801\u7684\u663e\u793a \u8fd9\u6837\u4e4b\u540e\uff0c\u518d\u8bb2\u4ee5\u4e0a\u6a21\u5757\u5bfc\u5165\u5230\u65b0\u6587\u4ef6\u540e\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0\u6d4b\u8bd5\u4ee3\u7801 import demo print ( \"\u8fd9\u662f\u5bfc\u5165\u540e\u7684\u6587\u4ef6\" ) >>> \u8fd9\u662f\u5bfc\u5165\u540e\u7684\u6587\u4ef6","title":"8.1 if __name__ == __main__"},{"location":"programming/python/module/#82-main","text":"\u5236\u4f5c\u6a21\u5757\u662f\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49main\u51fd\u6570\uff0c\u5c06\u6240\u6709\u7684\u6d4b\u8bd5\u4ee3\u7801\u90fd\u653e\u5728\u51fd\u6570\u5185\u90e8\uff0c\u5e76\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a def say_hello (): print ( \"\u8fd9\u662f\u6d4b\u8bd5\u4ee3\u7801\u7684\u663e\u793a\" ) def main (): print ( __name__ ) print ( \"\u8fd9\u662f\u6a21\u5757\u6587\u4ef6\u7684\u6d4b\u8bd5\u51fd\u6570\u5185\u90e8\" ) say_hello () if __name__ == \"__main__\" : main ()","title":"8.2 \u81ea\u5b9a\u4e49main\u51fd\u6570"},{"location":"programming/python/module/#09","text":"\u5305\u662f\u4e00\u4e2a\u5305\u542b \u591a\u4e2a\u6a21\u5757 \u7684 \u7279\u6b8a\u76ee\u5f55 \u76ee\u5f55\u4e0b\u6709\u4e00\u4e2a \u7279\u6b8a\u7684\u6587\u4ef6 __init__.py \u5305\u7684\u547d\u540d\u65b9\u5f0f\u548c\u53d8\u91cf\u540d\u4e00\u6837\uff0c\u4f7f\u7528 \u5c0f\u5199\u5b57\u6bcd+_ \u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u6570\u5b57\uff0c\u4f46\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u6bd4\u5982 ka_01 , ka_package","title":"09 .\u5305\u7684\u6982\u5ff5"},{"location":"programming/python/module/#10-pycharm","text":"\u65b0\u5efa\u6587\u4ef6\u5939\uff0c\u5728\u6587\u4ef6\u5939\u5185\u521b\u5efa __init__.py \u6587\u4ef6\uff0c\u6587\u4ef6\u5185\u53ef\u4ee5\u4e0d\u5199\u4efb\u4f55\u4ee3\u7801 \u65b0\u5efa python_Package ,pycharm\u4f1a\u81ea\u52a8\u521b\u5efa\u5305\u548c __init__.py \u6587\u4ef6","title":"10. pycharm \u521b\u5efa\u5305\u7684\u4e24\u79cd\u65b9\u5f0f"},{"location":"programming/python/module/#11","text":"\u5305\u7684\u672c\u8d28\u8fd8\u662f\u6a21\u5757\uff0c\u6240\u4ee5\u5bfc\u5165\u5305\u7684\u8bed\u6cd5\u548c\u5bfc\u5165\u6a21\u5757\u7684\u8bed\u6cd5\u7c7b\u4f3c\uff1a 1. import \u5305\u540d [ . \u6a21\u5757\u540d ][ as \u522b\u540d ] 2. from \u5305\u540d import \u6a21\u5757\u540d [ as \u522b\u540d ] 3. from \u5305\u540d.\u6a21\u5757\u540d import \u6210\u5458\u540d [ as \u522b\u540d ] \u5b9a\u4e49\u4e00\u4e2a\u5305\uff0c\u5982\u4e0b | ka_message |-- __init__ . py |-- send_message . py |-- receive . py","title":"11. \u5305\u7684\u5bfc\u5165"},{"location":"programming/python/module/#111-import-as","text":"# 1.\u5bfc\u5165\u6574\u4e2a\u5305 import ka_message # 2. \u5bfc\u5165\u5305\u5185\u67d0\u4e2a\u6a21\u5757 import ka_message.send_message # 3.\u8bbe\u7f6e\u522b\u540d import ka_message.send_message as module","title":"11.1 import \u5305\u540d [.\u6a21\u5757\u540d][as \u522b\u540d]"},{"location":"programming/python/module/#112-from-import-as","text":"# 1.\u5bfc\u5165\u67d0\u4e2a\u6a21\u5757 from ka_message import send_message # 2.\u8bbe\u7f6e\u522b\u540d from ka_message import send_message as module","title":"11.2 from \u5305\u540d import \u6a21\u5757\u540d [as \u522b\u540d]"},{"location":"programming/python/module/#113-from-import-as","text":"# \u5bfc\u5165\u5305\u5185\u67d0\u4e2a\u6a21\u5757\u7684\u67d0\u4e2a\u6210\u5458 from ka_message.send_message import send # \u5bfc\u5165\u5305\u5185\u67d0\u4e2a\u6a21\u5757\u7684\u67d0\u4e2a\u6210\u5458,\u5e76\u8bbe\u7f6e\u522b\u540d from ka_message.send_message import send as send_foo","title":"11.3 from \u5305\u540d.\u6a21\u5757\u540d import \u6210\u5458\u540d [as \u522b\u540d]"},{"location":"programming/python/module/#12","text":"\u5982\u679c\u5e0c\u671b\u5c06\u81ea\u5df1\u5236\u4f5c\u7684\u6a21\u5757\u5206\u4eab\u7ed9\u4ed6\u4eba\uff0c\u53ef\u4ee5\u4f7f\u7528\u6a21\u5757\u5236\u4f5c\u7684\u65b9\u5f0f\uff0c\u5171\u6709\u4e09\u6b65","title":"12. \u5236\u4f5c\u6a21\u5757"},{"location":"programming/python/module/#1-setuppy","text":"from distutils.core import setup setup ( name = \"ka_message\" , # \u5305\u540d version = \"1.0\" , # \u7248\u672c description = \"kaka's \u53d1\u9001\u548c\u63a5\u6536\u6d88\u606f\u6a21\u5757\" , # \u63cf\u8ff0\u4fe1\u606f long_description = \"\u5b8c\u6574\u7684\u53d1\u9001\u548c\u63a5\u6536\u6d88\u606f\u6a21\u5757\" , # \u5b8c\u6574\u63cf\u8ff0\u4fe1\u606f author = \"kaka\" , # \u4f5c\u8005 author_email = \"hmz270@163.com\" , # \u4f5c\u8005\u90ae\u7bb1 url = \"\u65e0\" , # \u4e3b\u9875 py_modules = [ \"ka_message.send_message\" , \"ka_message.receive\" ])","title":"1. \u5728\u5305\u5185\u521b\u5efasetup.py\u6587\u4ef6"},{"location":"programming/python/module/#2","text":"$ python3 setup . py build","title":"2. \u7ec8\u7aef\u4e2d\u6784\u9020\u6587\u4ef6"},{"location":"programming/python/module/#3","text":"$ python3 setup . py sdist","title":"3. \u7ec8\u7aef\u4e2d\u751f\u6210\u53d1\u5e03\u538b\u7f29\u5305"},{"location":"programming/python/module/#121","text":"$ tar - zxvf ka_message - 1.0 tar . gz $ sudo python3 setup . py install","title":"12.1 \u5b89\u88c5\u6a21\u5757"},{"location":"programming/python/module/#122","text":"$ cd \u5230\u5b89\u88c5\u76ee\u5f55 $ sudo rm - r ka_message *","title":"12.2 \u5378\u8f7d\u6a21\u5757"},{"location":"programming/python/module/#13-pip","text":"pip \u662fpython\u7684\u5305\u7ba1\u7406\u5de5\u5177\uff0c\u7528\u4e8e\u5b89\u88c5\u7b2c\u4e09\u65b9\u6a21\u5757 \u5b89\u88c5python3\u7684\u547d\u4ee4\u662f pip3 \u3002\u57fa\u7840\u8bed\u6cd5\u5982\u4e0b\uff1a # \u5b89\u88c5\u7b2c\u4e09\u65b9\u6a21\u5757 $ pip3 install \u6a21\u5757\u540d # \u5378\u8f7d\u4e09\u65b9\u6a21\u5757 $ pip3 uninstall \u6a21\u5757\u540d # \u67e5\u770b\u7b2c\u4e09\u65b9\u6a21\u5757\u5217\u8868 $ pip list # \u67e5\u770b\u6807\u51c6\u5e93\u548c\u7b2c\u4e09\u65b9\u6a21\u5757,\u5728python\u547d\u4ee4\u884c\u5185\uff1a $ help ( \"modules\" )","title":"13. pip\u5b89\u88c5\u7b2c\u4e09\u65b9\u6a21\u5757"},{"location":"programming/python/operator/","text":"\u4ec0\u4e48\u662f\u8fd0\u7b97\u7b26\uff1f \u8fd0\u7b97\u7b26\u5bf9\u4e8e\u53d8\u91cf\u548c\u503c\u8fdb\u884c\u64cd\u4f5c\u3002 4 + 5 = 9 \u4ee5\u4e0a\uff0c4\u30015\u3001 9\u662f\u64cd\u4f5c\u6570\u3002 + \u662f\u8fd0\u7b97\u7b26 01. \u7b97\u6570\u8fd0\u7b97\u7b26 \u5047\u8bbe\u4e00\u4e0b\u53d8\u91cf a=10 , b=21 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b + \u52a0 - \u4e24\u4e2a\u5bf9\u8c61\u76f8\u52a0 a + b \u8f93\u51fa\u7ed3\u679c 31 - \u51cf - \u5f97\u5230\u8d1f\u6570\u6216\u662f\u4e00\u4e2a\u6570\u51cf\u53bb\u53e6\u4e00\u4e2a\u6570 a - b \u8f93\u51fa\u7ed3\u679c -11 * \u4e58 - \u4e24\u4e2a\u6570\u76f8\u4e58\u6216\u662f\u8fd4\u56de\u4e00\u4e2a\u88ab\u91cd\u590d\u82e5\u5e72\u6b21\u7684\u5b57\u7b26\u4e32 a * b \u8f93\u51fa\u7ed3\u679c 210 / \u9664 - x \u9664\u4ee5 y b / a \u8f93\u51fa\u7ed3\u679c 2.1 % \u53d6\u6a21 - \u8fd4\u56de\u9664\u6cd5\u7684\u4f59\u6570 b % a \u8f93\u51fa\u7ed3\u679c 1 ** \u5e42 - \u8fd4\u56dex\u7684y\u6b21\u5e42 a**b \u4e3a10\u768421\u6b21\u65b9 // \u53d6\u6574\u9664 - \u5411\u4e0b\u53d6\u63a5\u8fd1\u5546\u7684\u6574\u6570 >>> 9//2 4 >>> -9//2 -5 02. \u6bd4\u8f83(\u5173\u7cfb)\u8fd0\u7b97\u7b26 \u4ee5\u4e0b\u5047\u8bbe\u53d8\u91cf a=10 \uff0c\u53d8\u91cf b=20 \uff1a \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b == \u7b49\u4e8e - \u6bd4\u8f83\u5bf9\u8c61\u662f\u5426\u76f8\u7b49 (a == b) \u8fd4\u56de False\u3002 != \u4e0d\u7b49\u4e8e - \u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61\u662f\u5426\u4e0d\u76f8\u7b49 (a != b) \u8fd4\u56de True\u3002 > \u5927\u4e8e - \u8fd4\u56dex\u662f\u5426\u5927\u4e8ey (a > b) \u8fd4\u56de False\u3002 < \u5c0f\u4e8e - \u8fd4\u56dex\u662f\u5426\u5c0f\u4e8ey\u3002\u6240\u6709\u6bd4\u8f83\u8fd0\u7b97\u7b26\u8fd4\u56de1\u8868\u793a\u771f\uff0c\u8fd4\u56de0\u8868\u793a\u5047\u3002\u8fd9\u5206\u522b\u4e0e\u7279\u6b8a\u7684\u53d8\u91cfTrue\u548cFalse\u7b49\u4ef7\u3002\u6ce8\u610f\uff0c\u8fd9\u4e9b\u53d8\u91cf\u540d\u7684\u5927\u5199\u3002 (a < b) \u8fd4\u56de True\u3002 >= \u5927\u4e8e\u7b49\u4e8e - \u8fd4\u56dex\u662f\u5426\u5927\u4e8e\u7b49\u4e8ey\u3002 (a >= b) \u8fd4\u56de False\u3002 <= \u5c0f\u4e8e\u7b49\u4e8e - \u8fd4\u56dex\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8ey\u3002 (a <= b) \u8fd4\u56de True\u3002 03. \u8d4b\u503c\u8fd0\u7b97\u7b26 \u4ee5\u4e0b\u5047\u8bbe\u53d8\u91cf a=10 \uff0c\u53d8\u91cf b=20 \uff1a \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b = \u7b80\u5355\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26 c = a + b \u5c06 a + b \u7684\u8fd0\u7b97\u7ed3\u679c\u8d4b\u503c\u4e3a c += \u52a0\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c += a \u7b49\u6548\u4e8e c = c + a -= \u51cf\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c -= a \u7b49\u6548\u4e8e c = c - a *= \u4e58\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c *= a \u7b49\u6548\u4e8e c = c * a /= \u9664\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c /= a \u7b49\u6548\u4e8e c = c / a %= \u53d6\u6a21\u8d4b\u503c\u8fd0\u7b97\u7b26 c %= a \u7b49\u6548\u4e8e c = c % a **= \u5e42\u8d4b\u503c\u8fd0\u7b97\u7b26 c = a \u7b49\u6548\u4e8e c = c a //= \u53d6\u6574\u9664\u8d4b\u503c\u8fd0\u7b97\u7b26 c //= a \u7b49\u6548\u4e8e c = c // a := \u6d77\u8c61\u8fd0\u7b97\u7b26\uff0c\u53ef\u5728\u8868\u8fbe\u5f0f\u5185\u90e8\u4e3a\u53d8\u91cf\u8d4b\u503c\u3002Python3.8 \u7248\u672c\u65b0\u589e\u8fd0\u7b97\u7b26\u3002 \u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u8d4b\u503c\u8868\u8fbe\u5f0f\u53ef\u4ee5\u907f\u514d\u8c03\u7528 len() \u4e24\u6b21: if (n := len(a)) > 10: print(f\"List is too long ({n} elements, expected <= 10)\") 04. \u903b\u8f91\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u903b\u8f91\u8868\u8fbe\u5f0f \u63cf\u8ff0 and x and y \u5e03\u5c14\"\u4e0e\" - \u5982\u679c x \u4e3a False\uff0cx and y \u8fd4\u56de x \u7684\u503c\uff0c\u5426\u5219\u8fd4\u56de y \u7684\u8ba1\u7b97\u503c\u3002 or x or y \u5e03\u5c14\"\u6216\" - \u5982\u679c x \u662f True\uff0c\u5b83\u8fd4\u56de x \u7684\u503c\uff0c\u5426\u5219\u5b83\u8fd4\u56de y \u7684\u8ba1\u7b97\u503c\u3002 not not x \u5e03\u5c14\"\u975e\" - \u5982\u679c x \u4e3a True\uff0c\u8fd4\u56de False \u3002\u5982\u679c x \u4e3a False\uff0c\u5b83\u8fd4\u56de True\u3002 05. \u4f4d\u8fd0\u7b97\u7b26 \u6309\u4f4d\u8fd0\u7b97\u7b26\u662f\u628a\u6570\u5b57\u770b\u4f5c\u4e8c\u8fdb\u5236\u6765\u8fdb\u884c\u8ba1\u7b97\u3002\u4ee5\u4e0b\u53d8\u91cf a=60 , b=13 \u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\u5982\u4e0b\uff1a a = 0011 1100 b = 0000 1101 ----------------- a & b = 0000 1100 a | b = 0011 1101 a ^ b = 0011 0001 ~ a = 1100 0011 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b & \u6309\u4f4d\u4e0e\u8fd0\u7b97\u7b26\uff1a\u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u503c,\u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u4f4d\u90fd\u4e3a1,\u5219\u8be5\u4f4d\u7684\u7ed3\u679c\u4e3a1,\u5426\u5219\u4e3a0 (a & b) \u8f93\u51fa\u7ed3\u679c 12 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 0000 1100 \u6309\u4f4d\u6216\u8fd0\u7b97\u7b26\uff1a\u53ea\u8981\u5bf9\u5e94\u7684\u4e8c\u4e2a\u4e8c\u8fdb\u4f4d\u6709\u4e00\u4e2a\u4e3a1\u65f6\uff0c\u7ed3\u679c\u4f4d\u5c31\u4e3a1\u3002 ^ \u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\u7b26\uff1a\u5f53\u4e24\u5bf9\u5e94\u7684\u4e8c\u8fdb\u4f4d\u76f8\u5f02\u65f6\uff0c\u7ed3\u679c\u4e3a1 (a ^ b) \u8f93\u51fa\u7ed3\u679c 49 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 0011 0001 ~ \u6309\u4f4d\u53d6\u53cd\u8fd0\u7b97\u7b26\uff1a\u5bf9\u6570\u636e\u7684\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd,\u5373\u628a1\u53d8\u4e3a0,\u628a0\u53d8\u4e3a1\u3002~x \u7c7b\u4f3c\u4e8e -x-1 (~a ) \u8f93\u51fa\u7ed3\u679c -61 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 1100 0011\uff0c \u5728\u4e00\u4e2a\u6709\u7b26\u53f7\u4e8c\u8fdb\u5236\u6570\u7684\u8865\u7801\u5f62\u5f0f\u3002 << \u5de6\u79fb\u52a8\u8fd0\u7b97\u7b26\uff1a\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff0c\u7531\"<<\"\u53f3\u8fb9\u7684\u6570\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570\uff0c\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650\u3002 a << 2 \u8f93\u51fa\u7ed3\u679c 240 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 1111 0000 >> \u53f3\u79fb\u52a8\u8fd0\u7b97\u7b26\uff1a\u628a\">>\"\u5de6\u8fb9\u7684\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c\">>\"\u53f3\u8fb9\u7684\u6570\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570 a >> 2 \u8f93\u51fa\u7ed3\u679c 15 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 0000 1111 06. \u6210\u5458\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002 not in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u6ca1\u6709\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002 07. \u8eab\u4efd\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b is is \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e00\u4e2a\u5bf9\u8c61 x is y, \u7c7b\u4f3c id(x) == id(y) , \u5982\u679c\u5f15\u7528\u7684\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False is not is not \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e0d\u540c\u5bf9\u8c61 x is not y \uff0c \u7c7b\u4f3c id(a) != id(b)\u3002\u5982\u679c\u5f15\u7528\u7684\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u5219\u8fd4\u56de\u7ed3\u679c True\uff0c\u5426\u5219\u8fd4\u56de False\u3002 08. \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7 \u4ee5\u4e0b\u8868\u683c\u5217\u51fa\u4e86\u4ece\u6700\u9ad8\u5230\u6700\u4f4e\u4f18\u5148\u7ea7\u7684\u6240\u6709\u8fd0\u7b97\u7b26\uff1a \u8fd0\u7b97\u7b26 \u63cf\u8ff0 ** \u6307\u6570 (\u6700\u9ad8\u4f18\u5148\u7ea7) ~ + - \u6309\u4f4d\u7ffb\u8f6c, \u4e00\u5143\u52a0\u53f7\u548c\u51cf\u53f7 (\u6700\u540e\u4e24\u4e2a\u7684\u65b9\u6cd5\u540d\u4e3a +@ \u548c -@) * / % // \u4e58\uff0c\u9664\uff0c\u6c42\u4f59\u6570\u548c\u53d6\u6574\u9664 + - \u52a0\u6cd5\u51cf\u6cd5 >> << \u53f3\u79fb\uff0c\u5de6\u79fb\u8fd0\u7b97\u7b26 & \u4f4d 'AND' ^ \u4f4d\u8fd0\u7b97\u7b26 <= < > >= \u6bd4\u8f83\u8fd0\u7b97\u7b26 == != \u7b49\u4e8e\u8fd0\u7b97\u7b26 = %= /= //= -= += = *= \u8d4b\u503c\u8fd0\u7b97\u7b26 is is not \u8eab\u4efd\u8fd0\u7b97\u7b26 in not in \u6210\u5458\u8fd0\u7b97\u7b26 not and or \u903b\u8f91\u8fd0\u7b97\u7b26","title":"\u8fd0\u7b97\u7b26"},{"location":"programming/python/operator/#_1","text":"\u8fd0\u7b97\u7b26\u5bf9\u4e8e\u53d8\u91cf\u548c\u503c\u8fdb\u884c\u64cd\u4f5c\u3002 4 + 5 = 9 \u4ee5\u4e0a\uff0c4\u30015\u3001 9\u662f\u64cd\u4f5c\u6570\u3002 + \u662f\u8fd0\u7b97\u7b26","title":"\u4ec0\u4e48\u662f\u8fd0\u7b97\u7b26\uff1f"},{"location":"programming/python/operator/#01","text":"\u5047\u8bbe\u4e00\u4e0b\u53d8\u91cf a=10 , b=21 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b + \u52a0 - \u4e24\u4e2a\u5bf9\u8c61\u76f8\u52a0 a + b \u8f93\u51fa\u7ed3\u679c 31 - \u51cf - \u5f97\u5230\u8d1f\u6570\u6216\u662f\u4e00\u4e2a\u6570\u51cf\u53bb\u53e6\u4e00\u4e2a\u6570 a - b \u8f93\u51fa\u7ed3\u679c -11 * \u4e58 - \u4e24\u4e2a\u6570\u76f8\u4e58\u6216\u662f\u8fd4\u56de\u4e00\u4e2a\u88ab\u91cd\u590d\u82e5\u5e72\u6b21\u7684\u5b57\u7b26\u4e32 a * b \u8f93\u51fa\u7ed3\u679c 210 / \u9664 - x \u9664\u4ee5 y b / a \u8f93\u51fa\u7ed3\u679c 2.1 % \u53d6\u6a21 - \u8fd4\u56de\u9664\u6cd5\u7684\u4f59\u6570 b % a \u8f93\u51fa\u7ed3\u679c 1 ** \u5e42 - \u8fd4\u56dex\u7684y\u6b21\u5e42 a**b \u4e3a10\u768421\u6b21\u65b9 // \u53d6\u6574\u9664 - \u5411\u4e0b\u53d6\u63a5\u8fd1\u5546\u7684\u6574\u6570 >>> 9//2 4 >>> -9//2 -5","title":"01. \u7b97\u6570\u8fd0\u7b97\u7b26"},{"location":"programming/python/operator/#02","text":"\u4ee5\u4e0b\u5047\u8bbe\u53d8\u91cf a=10 \uff0c\u53d8\u91cf b=20 \uff1a \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b == \u7b49\u4e8e - \u6bd4\u8f83\u5bf9\u8c61\u662f\u5426\u76f8\u7b49 (a == b) \u8fd4\u56de False\u3002 != \u4e0d\u7b49\u4e8e - \u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61\u662f\u5426\u4e0d\u76f8\u7b49 (a != b) \u8fd4\u56de True\u3002 > \u5927\u4e8e - \u8fd4\u56dex\u662f\u5426\u5927\u4e8ey (a > b) \u8fd4\u56de False\u3002 < \u5c0f\u4e8e - \u8fd4\u56dex\u662f\u5426\u5c0f\u4e8ey\u3002\u6240\u6709\u6bd4\u8f83\u8fd0\u7b97\u7b26\u8fd4\u56de1\u8868\u793a\u771f\uff0c\u8fd4\u56de0\u8868\u793a\u5047\u3002\u8fd9\u5206\u522b\u4e0e\u7279\u6b8a\u7684\u53d8\u91cfTrue\u548cFalse\u7b49\u4ef7\u3002\u6ce8\u610f\uff0c\u8fd9\u4e9b\u53d8\u91cf\u540d\u7684\u5927\u5199\u3002 (a < b) \u8fd4\u56de True\u3002 >= \u5927\u4e8e\u7b49\u4e8e - \u8fd4\u56dex\u662f\u5426\u5927\u4e8e\u7b49\u4e8ey\u3002 (a >= b) \u8fd4\u56de False\u3002 <= \u5c0f\u4e8e\u7b49\u4e8e - \u8fd4\u56dex\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8ey\u3002 (a <= b) \u8fd4\u56de True\u3002","title":"02. \u6bd4\u8f83(\u5173\u7cfb)\u8fd0\u7b97\u7b26"},{"location":"programming/python/operator/#03","text":"\u4ee5\u4e0b\u5047\u8bbe\u53d8\u91cf a=10 \uff0c\u53d8\u91cf b=20 \uff1a \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b = \u7b80\u5355\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26 c = a + b \u5c06 a + b \u7684\u8fd0\u7b97\u7ed3\u679c\u8d4b\u503c\u4e3a c += \u52a0\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c += a \u7b49\u6548\u4e8e c = c + a -= \u51cf\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c -= a \u7b49\u6548\u4e8e c = c - a *= \u4e58\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c *= a \u7b49\u6548\u4e8e c = c * a /= \u9664\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c /= a \u7b49\u6548\u4e8e c = c / a %= \u53d6\u6a21\u8d4b\u503c\u8fd0\u7b97\u7b26 c %= a \u7b49\u6548\u4e8e c = c % a **= \u5e42\u8d4b\u503c\u8fd0\u7b97\u7b26 c = a \u7b49\u6548\u4e8e c = c a //= \u53d6\u6574\u9664\u8d4b\u503c\u8fd0\u7b97\u7b26 c //= a \u7b49\u6548\u4e8e c = c // a := \u6d77\u8c61\u8fd0\u7b97\u7b26\uff0c\u53ef\u5728\u8868\u8fbe\u5f0f\u5185\u90e8\u4e3a\u53d8\u91cf\u8d4b\u503c\u3002Python3.8 \u7248\u672c\u65b0\u589e\u8fd0\u7b97\u7b26\u3002 \u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u8d4b\u503c\u8868\u8fbe\u5f0f\u53ef\u4ee5\u907f\u514d\u8c03\u7528 len() \u4e24\u6b21: if (n := len(a)) > 10: print(f\"List is too long ({n} elements, expected <= 10)\")","title":"03. \u8d4b\u503c\u8fd0\u7b97\u7b26"},{"location":"programming/python/operator/#04","text":"\u8fd0\u7b97\u7b26 \u903b\u8f91\u8868\u8fbe\u5f0f \u63cf\u8ff0 and x and y \u5e03\u5c14\"\u4e0e\" - \u5982\u679c x \u4e3a False\uff0cx and y \u8fd4\u56de x \u7684\u503c\uff0c\u5426\u5219\u8fd4\u56de y \u7684\u8ba1\u7b97\u503c\u3002 or x or y \u5e03\u5c14\"\u6216\" - \u5982\u679c x \u662f True\uff0c\u5b83\u8fd4\u56de x \u7684\u503c\uff0c\u5426\u5219\u5b83\u8fd4\u56de y \u7684\u8ba1\u7b97\u503c\u3002 not not x \u5e03\u5c14\"\u975e\" - \u5982\u679c x \u4e3a True\uff0c\u8fd4\u56de False \u3002\u5982\u679c x \u4e3a False\uff0c\u5b83\u8fd4\u56de True\u3002","title":"04. \u903b\u8f91\u8fd0\u7b97\u7b26"},{"location":"programming/python/operator/#05","text":"\u6309\u4f4d\u8fd0\u7b97\u7b26\u662f\u628a\u6570\u5b57\u770b\u4f5c\u4e8c\u8fdb\u5236\u6765\u8fdb\u884c\u8ba1\u7b97\u3002\u4ee5\u4e0b\u53d8\u91cf a=60 , b=13 \u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\u5982\u4e0b\uff1a a = 0011 1100 b = 0000 1101 ----------------- a & b = 0000 1100 a | b = 0011 1101 a ^ b = 0011 0001 ~ a = 1100 0011 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b & \u6309\u4f4d\u4e0e\u8fd0\u7b97\u7b26\uff1a\u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u503c,\u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u4f4d\u90fd\u4e3a1,\u5219\u8be5\u4f4d\u7684\u7ed3\u679c\u4e3a1,\u5426\u5219\u4e3a0 (a & b) \u8f93\u51fa\u7ed3\u679c 12 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 0000 1100 \u6309\u4f4d\u6216\u8fd0\u7b97\u7b26\uff1a\u53ea\u8981\u5bf9\u5e94\u7684\u4e8c\u4e2a\u4e8c\u8fdb\u4f4d\u6709\u4e00\u4e2a\u4e3a1\u65f6\uff0c\u7ed3\u679c\u4f4d\u5c31\u4e3a1\u3002 ^ \u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\u7b26\uff1a\u5f53\u4e24\u5bf9\u5e94\u7684\u4e8c\u8fdb\u4f4d\u76f8\u5f02\u65f6\uff0c\u7ed3\u679c\u4e3a1 (a ^ b) \u8f93\u51fa\u7ed3\u679c 49 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 0011 0001 ~ \u6309\u4f4d\u53d6\u53cd\u8fd0\u7b97\u7b26\uff1a\u5bf9\u6570\u636e\u7684\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd,\u5373\u628a1\u53d8\u4e3a0,\u628a0\u53d8\u4e3a1\u3002~x \u7c7b\u4f3c\u4e8e -x-1 (~a ) \u8f93\u51fa\u7ed3\u679c -61 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 1100 0011\uff0c \u5728\u4e00\u4e2a\u6709\u7b26\u53f7\u4e8c\u8fdb\u5236\u6570\u7684\u8865\u7801\u5f62\u5f0f\u3002 << \u5de6\u79fb\u52a8\u8fd0\u7b97\u7b26\uff1a\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff0c\u7531\"<<\"\u53f3\u8fb9\u7684\u6570\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570\uff0c\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650\u3002 a << 2 \u8f93\u51fa\u7ed3\u679c 240 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 1111 0000 >> \u53f3\u79fb\u52a8\u8fd0\u7b97\u7b26\uff1a\u628a\">>\"\u5de6\u8fb9\u7684\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c\">>\"\u53f3\u8fb9\u7684\u6570\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570 a >> 2 \u8f93\u51fa\u7ed3\u679c 15 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 0000 1111","title":"05. \u4f4d\u8fd0\u7b97\u7b26"},{"location":"programming/python/operator/#06","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002 not in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u6ca1\u6709\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002","title":"06. \u6210\u5458\u8fd0\u7b97\u7b26"},{"location":"programming/python/operator/#07","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b is is \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e00\u4e2a\u5bf9\u8c61 x is y, \u7c7b\u4f3c id(x) == id(y) , \u5982\u679c\u5f15\u7528\u7684\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False is not is not \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e0d\u540c\u5bf9\u8c61 x is not y \uff0c \u7c7b\u4f3c id(a) != id(b)\u3002\u5982\u679c\u5f15\u7528\u7684\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u5219\u8fd4\u56de\u7ed3\u679c True\uff0c\u5426\u5219\u8fd4\u56de False\u3002","title":"07. \u8eab\u4efd\u8fd0\u7b97\u7b26"},{"location":"programming/python/operator/#08","text":"\u4ee5\u4e0b\u8868\u683c\u5217\u51fa\u4e86\u4ece\u6700\u9ad8\u5230\u6700\u4f4e\u4f18\u5148\u7ea7\u7684\u6240\u6709\u8fd0\u7b97\u7b26\uff1a \u8fd0\u7b97\u7b26 \u63cf\u8ff0 ** \u6307\u6570 (\u6700\u9ad8\u4f18\u5148\u7ea7) ~ + - \u6309\u4f4d\u7ffb\u8f6c, \u4e00\u5143\u52a0\u53f7\u548c\u51cf\u53f7 (\u6700\u540e\u4e24\u4e2a\u7684\u65b9\u6cd5\u540d\u4e3a +@ \u548c -@) * / % // \u4e58\uff0c\u9664\uff0c\u6c42\u4f59\u6570\u548c\u53d6\u6574\u9664 + - \u52a0\u6cd5\u51cf\u6cd5 >> << \u53f3\u79fb\uff0c\u5de6\u79fb\u8fd0\u7b97\u7b26 & \u4f4d 'AND' ^ \u4f4d\u8fd0\u7b97\u7b26 <= < > >= \u6bd4\u8f83\u8fd0\u7b97\u7b26 == != \u7b49\u4e8e\u8fd0\u7b97\u7b26 = %= /= //= -= += = *= \u8d4b\u503c\u8fd0\u7b97\u7b26 is is not \u8eab\u4efd\u8fd0\u7b97\u7b26 in not in \u6210\u5458\u8fd0\u7b97\u7b26 not and or \u903b\u8f91\u8fd0\u7b97\u7b26","title":"08. \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7"},{"location":"programming/python/package/","text":"01. \u79c1\u6709\u5c5e\u6027\u548c\u79c1\u6709\u65b9\u6cd5 1.1 \u5e94\u7528\u573a\u666f\u53ca\u5b9a\u4e49\u65b9\u5f0f \u5e94\u7528\u573a\u666f \u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c \u5bf9\u8c61 \u7684 \u67d0\u4e9b\u5c5e\u6027\u6216\u65b9\u6cd5 \u53ef\u80fd\u53ea\u5e0c\u671b \u5728\u5bf9\u8c61\u7684\u5185\u90e8\u88ab\u4f7f\u7528 \uff0c\u800c \u4e0d\u5e0c\u671b\u5728\u5916\u90e8\u88ab\u8bbf\u95ee\u5230 \u79c1\u6709\u5c5e\u6027 \u5c31\u662f \u5bf9\u8c61 \u4e0d\u5e0c\u671b\u516c\u5f00\u7684 \u5c5e\u6027 \u79c1\u6709\u65b9\u6cd5 \u5c31\u662f \u5bf9\u8c61 \u4e0d\u5e0c\u671b\u516c\u5f00\u7684 \u65b9\u6cd5 \u5b9a\u4e49\u65b9\u5f0f \u5728 \u5b9a\u4e49\u5c5e\u6027\u6216\u65b9\u6cd5\u65f6 \uff0c\u5728 \u5c5e\u6027\u540d\u6216\u8005\u65b9\u6cd5\u540d\u524d \u589e\u52a0 \u4e24\u4e2a\u4e0b\u5212\u7ebf \uff0c\u5b9a\u4e49\u7684\u5c31\u662f \u79c1\u6709 \u5c5e\u6027\u6216\u65b9\u6cd5 010_\u79c1\u6709\u5c5e\u6027\u548c\u65b9\u6cd5-w265 class Women : def __init__ ( self , name ): self . name = name # \u4e0d\u8981\u95ee\u5973\u751f\u7684\u5e74\u9f84 self . __age = 18 def __secret ( self ): print ( \"\u6211\u7684\u5e74\u9f84\u662f %d \" % self . __age ) xiaofang = Women ( \"\u5c0f\u82b3\" ) # \u79c1\u6709\u5c5e\u6027\uff0c\u5916\u90e8\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee# print ( xiaofang . __age ) # \u79c1\u6709\u65b9\u6cd5\uff0c\u5916\u90e8\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528# xiaofang . __secret () 1.2 \u4f2a\u79c1\u6709\u5c5e\u6027\u548c\u79c1\u6709\u65b9\u6cd5\uff08\u79d1\u666e\uff09 \u63d0\u793a\uff1a\u5728\u65e5\u5e38\u5f00\u53d1\u4e2d\uff0c\u4e0d\u8981\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8bbf\u95ee\u5bf9\u8c61\u7684 \u79c1\u6709\u5c5e\u6027 \u6216 \u79c1\u6709\u65b9\u6cd5 Python \u4e2d\uff0c\u5e76\u6ca1\u6709 \u771f\u6b63\u610f\u4e49 \u7684 \u79c1\u6709 \u5728\u7ed9 \u5c5e\u6027 \u3001 \u65b9\u6cd5 \u547d\u540d\u65f6\uff0c\u5b9e\u9645\u662f\u5bf9 \u540d\u79f0 \u505a\u4e86\u4e00\u4e9b\u7279\u6b8a\u5904\u7406\uff0c\u4f7f\u5f97\u5916\u754c\u65e0\u6cd5\u8bbf\u95ee\u5230 \u5904\u7406\u65b9\u5f0f \uff1a\u5728 \u540d\u79f0 \u524d\u9762\u52a0\u4e0a _\u7c7b\u540d => _\u7c7b\u540d__\u540d\u79f0 # \u79c1\u6709\u5c5e\u6027\uff0c\u5916\u90e8\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u5230 print ( xiaofang . _Women__age ) # \u79c1\u6709\u65b9\u6cd5\uff0c\u5916\u90e8\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528 xiaofang . _Women__secret () 02. \u7c7b\u7684\u5c01\u88c5\u6848\u4f8b class Person : def __init__ ( self , name , age ): self . name = name self . age = age xh = Person ( name = \"\u5c0f\u7ea2\" , age = 27 ) if xh . age >= 18 : print ( f \" { xh . name } \u5df2\u7ecf\u662f\u6210\u5e74\u4eba\u4e86\" ) else : print ( f \" { xh . name } \u8fd8\u662f\u672a\u5e74\u4eba\" ) \u5b9a\u4e49 Person \u7c7b\uff0c\u6709 name \u548c age \u5c5e\u6027\uff1b \u5982\u679c\u60f3\u5224\u65ad\u5c0f\u7ea2\u662f\u4e0d\u662f\u6210\u5e74\u4eba\uff0c\u9700\u8981\u4f7f\u7528 xh.age \u548c 18 \u8fdb\u884c\u6bd4\u8f83\uff1b \u5bf9\u4e8e\u5f88\u591a\u5973\u751f\u6765\u8bf4\uff0c\u5e74\u9f84\u662f\u6bd4\u8f83\u9690\u79c1\u7684\uff0c\u5982\u679c\u4e0d\u5e0c\u671b\u5e74\u9f84\u88ab\u5916\u754c\u83b7\u53d6\uff0c\u53ef\u4ee5\u5728 age \u524d\u52a0\u4e24\u4e2a\u4e0b\u5212\u7ebf\uff0c\u5c06\u5176\u53d8\u6210\u79c1\u6709\u53d8\u91cf\uff1b \u8fd9\u65f6\u5019\u5982\u679c\u9700\u8981\u77e5\u9053\u5c0f\u7ea2\u662f\u5426\u6210\u5e74\uff0c\u53ef\u4ee5\u5728\u7c7b\u4e2d \u5c01\u88c5 \u4e00\u4e2a\u79c1\u6709\u65b9\u6cd5\uff0c\u5bf9 __age \u8fd9\u4e2a\u5c5e\u6027\u8fdb\u884c\u5224\u65ad class Person : def __init__ ( self , name , age ): self . name = name self . __age = age def is_adult ( self ): if self . __age >= 18 : return \" {} \u5df2\u7ecf\u6210\u5e74\u4e86\" . format ( self . name ) else : return \" {} \u8fd8\u672a\u6210\u5e74\" . format ( self . name ) xh = Person ( name = \"\u5c0f\u7ea2\" , age = 15 ) print ( xh . is_adult ()) >>> \u5c0f\u7ea2\u5df2\u7ecf\u6210\u5e74\u4e86","title":"\u5c01\u88c5"},{"location":"programming/python/package/#01","text":"","title":"01. \u79c1\u6709\u5c5e\u6027\u548c\u79c1\u6709\u65b9\u6cd5"},{"location":"programming/python/package/#11","text":"\u5e94\u7528\u573a\u666f \u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c \u5bf9\u8c61 \u7684 \u67d0\u4e9b\u5c5e\u6027\u6216\u65b9\u6cd5 \u53ef\u80fd\u53ea\u5e0c\u671b \u5728\u5bf9\u8c61\u7684\u5185\u90e8\u88ab\u4f7f\u7528 \uff0c\u800c \u4e0d\u5e0c\u671b\u5728\u5916\u90e8\u88ab\u8bbf\u95ee\u5230 \u79c1\u6709\u5c5e\u6027 \u5c31\u662f \u5bf9\u8c61 \u4e0d\u5e0c\u671b\u516c\u5f00\u7684 \u5c5e\u6027 \u79c1\u6709\u65b9\u6cd5 \u5c31\u662f \u5bf9\u8c61 \u4e0d\u5e0c\u671b\u516c\u5f00\u7684 \u65b9\u6cd5 \u5b9a\u4e49\u65b9\u5f0f \u5728 \u5b9a\u4e49\u5c5e\u6027\u6216\u65b9\u6cd5\u65f6 \uff0c\u5728 \u5c5e\u6027\u540d\u6216\u8005\u65b9\u6cd5\u540d\u524d \u589e\u52a0 \u4e24\u4e2a\u4e0b\u5212\u7ebf \uff0c\u5b9a\u4e49\u7684\u5c31\u662f \u79c1\u6709 \u5c5e\u6027\u6216\u65b9\u6cd5 010_\u79c1\u6709\u5c5e\u6027\u548c\u65b9\u6cd5-w265 class Women : def __init__ ( self , name ): self . name = name # \u4e0d\u8981\u95ee\u5973\u751f\u7684\u5e74\u9f84 self . __age = 18 def __secret ( self ): print ( \"\u6211\u7684\u5e74\u9f84\u662f %d \" % self . __age ) xiaofang = Women ( \"\u5c0f\u82b3\" ) # \u79c1\u6709\u5c5e\u6027\uff0c\u5916\u90e8\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee# print ( xiaofang . __age ) # \u79c1\u6709\u65b9\u6cd5\uff0c\u5916\u90e8\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528# xiaofang . __secret ()","title":"1.1 \u5e94\u7528\u573a\u666f\u53ca\u5b9a\u4e49\u65b9\u5f0f"},{"location":"programming/python/package/#12","text":"\u63d0\u793a\uff1a\u5728\u65e5\u5e38\u5f00\u53d1\u4e2d\uff0c\u4e0d\u8981\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8bbf\u95ee\u5bf9\u8c61\u7684 \u79c1\u6709\u5c5e\u6027 \u6216 \u79c1\u6709\u65b9\u6cd5 Python \u4e2d\uff0c\u5e76\u6ca1\u6709 \u771f\u6b63\u610f\u4e49 \u7684 \u79c1\u6709 \u5728\u7ed9 \u5c5e\u6027 \u3001 \u65b9\u6cd5 \u547d\u540d\u65f6\uff0c\u5b9e\u9645\u662f\u5bf9 \u540d\u79f0 \u505a\u4e86\u4e00\u4e9b\u7279\u6b8a\u5904\u7406\uff0c\u4f7f\u5f97\u5916\u754c\u65e0\u6cd5\u8bbf\u95ee\u5230 \u5904\u7406\u65b9\u5f0f \uff1a\u5728 \u540d\u79f0 \u524d\u9762\u52a0\u4e0a _\u7c7b\u540d => _\u7c7b\u540d__\u540d\u79f0 # \u79c1\u6709\u5c5e\u6027\uff0c\u5916\u90e8\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u5230 print ( xiaofang . _Women__age ) # \u79c1\u6709\u65b9\u6cd5\uff0c\u5916\u90e8\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528 xiaofang . _Women__secret ()","title":"1.2 \u4f2a\u79c1\u6709\u5c5e\u6027\u548c\u79c1\u6709\u65b9\u6cd5\uff08\u79d1\u666e\uff09"},{"location":"programming/python/package/#02","text":"class Person : def __init__ ( self , name , age ): self . name = name self . age = age xh = Person ( name = \"\u5c0f\u7ea2\" , age = 27 ) if xh . age >= 18 : print ( f \" { xh . name } \u5df2\u7ecf\u662f\u6210\u5e74\u4eba\u4e86\" ) else : print ( f \" { xh . name } \u8fd8\u662f\u672a\u5e74\u4eba\" ) \u5b9a\u4e49 Person \u7c7b\uff0c\u6709 name \u548c age \u5c5e\u6027\uff1b \u5982\u679c\u60f3\u5224\u65ad\u5c0f\u7ea2\u662f\u4e0d\u662f\u6210\u5e74\u4eba\uff0c\u9700\u8981\u4f7f\u7528 xh.age \u548c 18 \u8fdb\u884c\u6bd4\u8f83\uff1b \u5bf9\u4e8e\u5f88\u591a\u5973\u751f\u6765\u8bf4\uff0c\u5e74\u9f84\u662f\u6bd4\u8f83\u9690\u79c1\u7684\uff0c\u5982\u679c\u4e0d\u5e0c\u671b\u5e74\u9f84\u88ab\u5916\u754c\u83b7\u53d6\uff0c\u53ef\u4ee5\u5728 age \u524d\u52a0\u4e24\u4e2a\u4e0b\u5212\u7ebf\uff0c\u5c06\u5176\u53d8\u6210\u79c1\u6709\u53d8\u91cf\uff1b \u8fd9\u65f6\u5019\u5982\u679c\u9700\u8981\u77e5\u9053\u5c0f\u7ea2\u662f\u5426\u6210\u5e74\uff0c\u53ef\u4ee5\u5728\u7c7b\u4e2d \u5c01\u88c5 \u4e00\u4e2a\u79c1\u6709\u65b9\u6cd5\uff0c\u5bf9 __age \u8fd9\u4e2a\u5c5e\u6027\u8fdb\u884c\u5224\u65ad class Person : def __init__ ( self , name , age ): self . name = name self . __age = age def is_adult ( self ): if self . __age >= 18 : return \" {} \u5df2\u7ecf\u6210\u5e74\u4e86\" . format ( self . name ) else : return \" {} \u8fd8\u672a\u6210\u5e74\" . format ( self . name ) xh = Person ( name = \"\u5c0f\u7ea2\" , age = 15 ) print ( xh . is_adult ()) >>> \u5c0f\u7ea2\u5df2\u7ecf\u6210\u5e74\u4e86","title":"02. \u7c7b\u7684\u5c01\u88c5\u6848\u4f8b"},{"location":"programming/python/parameter/","text":"01. \u5f62\u53c2\u548c\u5b9e\u53c2 1.1 \u57fa\u672c\u5b9a\u4e49 \u5f62\u53c2\uff1a\u5728\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u51fd\u6570\u540d\u540e\u9762\u62ec\u53f7\u4e2d\u7684\u53c2\u6570\u5c31\u662f\u5f62\u5f0f\u53c2\u6570\uff0c\u4f8b\u5982: # \u5728\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u8fd9\u91cc\u7684object\u5c31\u662f\u5f62\u53c2 def demo ( object ): print ( object ) \u5b9e\u53c2\uff1a\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u51fd\u6570\u540d\u540e\u9762\u62ec\u53f7\u4e2d\u7684\u53c2\u6570\u4e3a\u5b9e\u53c2\uff0c\u4f8b\u5982\uff1a # \u6b64\u65f6\uff0ca\u8868\u793a\u5b9e\u53c2 a = \"hello python\" demo ( a ) \u5b9e\u53c2\u548c\u5f62\u53c2\u7684\u533a\u522b\uff0c\u5c31\u5982\u540c\u5267\u672c\u9009\u4e3b\u89d2\uff0c\u5267\u672c\u4e2d\u7684\u89d2\u8272\u76f8\u5f53\u4e8e\u5f62\u53c2\uff0c\u800c\u6f14\u89d2\u8272\u7684\u6f14\u5458\u5c31\u76f8\u5f53\u4e8e\u5b9e\u53c2\u3002 1.2 \u503c\u4f20\u9012\u548c\u5f15\u7528\u4f20\u9012 \u503c\u4f20\u9012\uff1a \u9002\u7528\u4e8e\u5b9e\u53c2\u7c7b\u578b\u4e3a\u4e0d\u53ef\u53d8\u7c7b\u578b\uff08\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u3001\u5143\u7ec4\uff09\uff1b \u5f15\u7528\uff08\u5730\u5740\uff09\u4f20\u9012\uff1a\u9002\u7528\u4e8e\u5b9e\u53c2\u7c7b\u578b\u4e3a\u53ef\u53d8\u7c7b\u578b\uff08\u5217\u8868\uff0c\u5b57\u5178\uff09\uff1b \u503c\u4f20\u9012\u548c\u5f15\u7528\u4f20\u9012\u7684\u533a\u522b\u662f\uff0c\u51fd\u6570\u53c2\u6570\u8fdb\u884c\u503c\u4f20\u9012\u540e\uff0c\u82e5\u5f62\u53c2\u7684\u503c\u53d1\u751f\u6539\u53d8\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5b9e\u53c2\u7684\u503c\uff1b\u800c\u51fd\u6570\u53c2\u6570\u7ee7\u7eed\u5f15\u7528\u4f20\u9012\u540e\uff0c\u6539\u53d8\u5f62\u53c2\u7684\u503c\uff0c\u5b9e\u53c2\u7684\u503c\u4e5f\u4f1a\u4e00\u540c\u6539\u53d8\u3002 def demo ( obj ) : obj += obj print ( \"\u5f62\u53c2\u503c\u4e3a\uff1a\" , obj ) print ( \"-------\u503c\u4f20\u9012-----\" ) a = \"C\u8bed\u8a00\u4e2d\u6587\u7f51\" print ( \"a\u7684\u503c\u4e3a\uff1a\" , a ) demo ( a ) print ( \"\u5b9e\u53c2\u503c\u4e3a\uff1a\" , a ) >>> ------- \u503c\u4f20\u9012 ----- a\u7684\u503c\u4e3a \uff1a C\u8bed\u8a00\u4e2d\u6587\u7f51 \u5f62\u53c2\u503c\u4e3a \uff1a C\u8bed\u8a00\u4e2d\u6587\u7f51C\u8bed\u8a00\u4e2d\u6587\u7f51 \u5b9e\u53c2\u503c\u4e3a \uff1a C\u8bed\u8a00\u4e2d\u6587\u7f51 print ( \"-----\u5f15\u7528\u4f20\u9012-----\" ) a = [ 1 , 2 , 3 ] print ( \"a\u7684\u503c\u4e3a\uff1a\" , a ) demo ( a ) print ( \"\u5b9e\u53c2\u503c\u4e3a\uff1a\" , a ) >>> ----- \u5f15\u7528\u4f20\u9012 ----- a\u7684\u503c\u4e3a \uff1a [ 1 , 2 , 3 ] \u5f62\u53c2\u503c\u4e3a \uff1a [ 1 , 2 , 3 , 1 , 2 , 3 ] \u5b9e\u53c2\u503c\u4e3a \uff1a [ 1 , 2 , 3 , 1 , 2 , 3 ] \u503c\u4f20\u9012\u5b9e\u8d28\u4e0a \u662f\u5c06\u5b9e\u53c2\u7684\u526f\u672c\u4f20\u9012\u7ed9\u53c2\u6570\uff0c\u5728\u5185\u5b58\u4e2d\uff0c\u65b0\u5efa\u4e86\u4e00\u4e2a\u5730\u5740\uff0c\u56e0\u6b64\u4e0d\u4f1a\u6539\u53d8\u539f\u6709\u5bf9\u8c61\u7684\u503c\uff1b \u5f15\u7528\u4f20\u9012\u672c\u8d28\u4e0a\u4e5f\u662f\u901a\u8fc7\u503c\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u53ea\u662f\u5728\u51fd\u6570\u5185\u90e8\u4fee\u6539\u4e86\u5b9e\u53c2\u7684\u53d8\u91cf\u540d\u7684\u5730\u5740\u5f15\u7528\u3002 02. \u4f20\u9012\u53c2\u6570 2.1 \u4f4d\u7f6e\u4f20\u53c2 \u4f4d\u7f6e\u4f20\u53c2\uff0c\u5373\u6309\u7167\u5b9a\u4e49\u51fd\u6570\u65f6\u8bbe\u7f6e\u7684\u5f62\u53c2\uff0c\u6309\u987a\u5e8f\u548c\u6570\u91cf\u4e00\u4e00\u5bf9\u5e94\u3002 \u4f4d\u7f6e\u4f20\u53c2\u8981\u6309\u7167\u51fd\u6570\u5f62\u53c2\u987a\u5e8f\u4f20\u9012\uff0c\u5426\u5219\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u4f1a\u51fa\u4e4e\u610f\u6599\uff0c\u4f46\u4e0d\u4f1a\u62a5\u9519\uff1b \u540c\u65f6\u9700\u8981\u4f20\u9012\u7684\u5b9e\u53c2\u548c\u5f62\u53c2\u6570\u91cf\u9700\u8981\u4fdd\u6301\u4e00\u81f4\uff0c\u5426\u5219\u89e3\u91ca\u5668\u4f1a\u62a5\u9519\u3002 def people ( name , age , weight ): return \"\u59d3\u540d\uff1a {} \\n \u5e74\u9f84\uff1a {} \\n \u4f53\u91cd\uff1a {} \" . format ( name , age , weight ) xiaoming = people ( \"xiaoming\" , 19 , 120 ) print ( xiaoming ) >>> \u59d3\u540d \uff1a xiaoming \u5e74\u9f84 \uff1a 19 \u4f53\u91cd \uff1a 120 \u53c2\u6570\u987a\u5e8f\u4e0d\u540c\u5bfc\u81f4\u7684\u9519\u8bef\uff1a def people ( name , age , weight ): return \"\u59d3\u540d\uff1a {} \\n \u5e74\u9f84\uff1a {} \\n \u4f53\u91cd\uff1a {} \" . format ( name , age , weight ) xiaoming = people ( 19 , \"\u5c0f\u660e\" , 120 ) print ( xiaoming ) >>> \u59d3\u540d \uff1a 19 \u5e74\u9f84 \uff1a \u5c0f\u660e \u4f53\u91cd \uff1a 120 \u6570\u91cf\u4e0d\u540c\u5bfc\u81f4\u7684\u9519\u8bef\uff1a def people ( name , age , weight ): return \"\u59d3\u540d\uff1a {} \\n \u5e74\u9f84\uff1a {} \\n \u4f53\u91cd\uff1a {} \" . format ( name , age , weight ) xiaoming = people ( \"\u5c0f\u660e\" , 120 ) print ( xiaoming ) >>> TypeError : people () missing 1 required positional argument : 'weight' 2.2 \u5173\u952e\u5b57\u4f20\u53c2 \u5173\u952e\u5b57\u4f20\u53c2\u662f\u6307\u5728\u8c03\u7528\u51fd\u6570\u5f0f\uff0c\u6309\u7167\u51fd\u6570\u5185\u7684\u5f62\u53c2\u540d\u6765\u786e\u5b9a\u8f93\u5165\u5b9e\u53c2\u503c\u3002 \u5173\u952e\u5b57\u4f20\u53c2\u53ef\u4ee5\u4e0d\u8003\u8651\u4f4d\u7f6e\u7684\u987a\u5e8f\uff0c\u53ea\u8981\u6307\u5b9a\u5f62\u53c2-\u5b9e\u53c2\u5bf9 \u5bf9\u5e94\u5c31\u53ef\u4ee5 \u5173\u952e\u5b57\u4f20\u53c2\u548c\u4f4d\u7f6e\u4f20\u53c2\u53ef\u4ee5\u6df7\u7528\uff0c\u4f46\u9700\u8981\u6ce8\u610f\uff0c\u6df7\u7528\u7684\u60c5\u51b5\uff0c\u5173\u952e\u5b57\u4f20\u53c2\u5fc5\u987b\u5728\u6240\u6709\u4f4d\u7f6e\u4f20\u53c2\u7ed3\u675f\u540e def people ( name , age , weight ): return \"\u59d3\u540d\uff1a {} \\n \u5e74\u9f84\uff1a {} \\n \u4f53\u91cd\uff1a {} \" . format ( name , age , weight ) xiaoming = people ( \"\u5c0f\u660e\" , age = 18 , weight = 120 ) print ( xiaoming ) print ( \"----\u5206\u5272\u7ebf----\" ) xiaomei = people ( name = \"\u5c0f\u7f8e\" , age = 20 , weight = 90 ) print ( xiaomei ) \u4e0a\u8ff0\u5b9e\u4f8b\u7684\u8fd0\u884c\u7ed3\u679c\u662f\uff1a \u59d3\u540d \uff1a \u5c0f\u660e \u5e74\u9f84 \uff1a 18 \u4f53\u91cd \uff1a 120 ---- \u5206\u5272\u7ebf ---- \u59d3\u540d \uff1a \u5c0f\u7f8e \u5e74\u9f84 \uff1a 20 \u4f53\u91cd \uff1a 90 \u4ee5\u4e0a\u5b9e\u4f8b\u4e2d\uff0c\u5c0f\u660e\u7684\u5b9e\u53c2\u4f20\u9012\u6df7\u7528\u4e86\u4f4d\u7f6e\u4f20\u53c2\u548c\u5173\u952e\u5b57\u4f20\u53c2\u3002\u683c\u5f0f\u9700\u8981\u4fdd\u6301\u5173\u952e\u5b57\u4f20\u53c2\u9700\u8981\u5728\u4f4d\u7f6e\u4f20\u53c2\u4e4b\u540e 2.3 \u9ed8\u8ba4\u503c \u5728\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u5982\u679c\u67d0\u4e2a\u5f62\u53c2\u4e3a\u5e38\u7528\u503c\uff0c\u4e0d\u9700\u8981\u6bcf\u6b21\u8c03\u7528\u51fd\u6570\u90fd\u4f20\u9012\uff0c\u5219\u53ef\u4ee5\u5b9a\u4e49\u9ed8\u8ba4\u503c\u3002\u8bed\u6cd5\u5982\u4e0b\uff1a def \u51fd\u6570\u540d ( ... \uff0c \u5f62\u53c2\u540d \uff0c \u5f62\u53c2\u540d = \u9ed8\u8ba4\u503c ) \uff1a \u4ee3\u7801\u5757 \u5728\u5b9a\u4e49\u9ed8\u8ba4\u503c\u65f6\u9700\u6ce8\u610f\uff0c\u5c06\u9ed8\u8ba4\u503c\u653e\u5728\u6700\u540e\u3002 \u9ed8\u8ba4\u503c\u7684\u5b9a\u4e49\u548c\u8c03\u7528\u6f14\u793a\uff1a def people ( name , age , weight = 100 ): return \"\u59d3\u540d\uff1a {} \\n \u5e74\u9f84\uff1a {} \\n \u4f53\u91cd\uff1a {} \" . format ( name , age , weight ) xiaoming = people ( \"\u5c0f\u660e\" , age = 18 ) print ( xiaoming ) >>> \u59d3\u540d \uff1a \u5c0f\u660e \u5e74\u9f84 \uff1a 18 \u4f53\u91cd \uff1a 100 \u9ed8\u8ba4\u503c\u7684\u4fee\u6539\uff1a\u5982\u679c\u51fd\u6570\u5185\u7684\u9ed8\u8ba4\u503c\u65e0\u6cd5\u6ee1\u8db3\u8c03\u7528\u9700\u6c42\uff0c\u53ef\u4ee5\u4ee5\u5173\u952e\u5b57\u4f20\u53c2\u7684\u65b9\u5f0f\u66f4\u6539\u9ed8\u8ba4\u503c\uff1a xiaomei = people ( \"\u5c0f\u7f8e\" , 18 , weight = 120 ) print ( xiaomei ) >>> \u59d3\u540d \uff1a \u5c0f\u7f8e \u5e74\u9f84 \uff1a 18 \u4f53\u91cd \uff1a 120 \u67e5\u770b\u51fd\u6570\u9ed8\u8ba4\u503c\uff1a\u4f7f\u7528 __defaults__ \u53ef\u4ee5\u67e5\u770b\u51fd\u6570\u5185\u7684\u9ed8\u8ba4\u503c\uff0c\u8fd4\u56de\u662f\u4e00\u4e2a\u5143\u7ec4\uff1a print ( people . __defaults__ ) >>> ( 100 ,) 2.4 \u4f20\u9012\u4efb\u610f\u6570\u91cf\u7684\u5b9e\u53c2 \u6709\u65f6\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u51fd\u6570\uff0c\u80fd\u591f\u5904\u7406\u7684\u53c2\u6570\u7684\u4e2a\u6570\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u503c\u53c2\u6570\u3002\u591a\u503c\u53c2\u6570\u6709\u4e24\u79cd\uff1a *args \uff1a\u5b9a\u4e49\u53c2\u6570\u65f6\uff0c\u53d8\u91cf\u540d\u524d\u52a0 \u4e00\u4e2a* \u6216\u76f4\u63a5\u4ee5 *args \u547d\u540d\uff0c\u6b64\u53c2\u6570\u7528\u6765\u63a5\u6536\u5143\u7ec4\uff1b **kwargs : \u5b9a\u4e49\u53c2\u6570\u65f6\uff0c\u53d8\u91cf\u540d\u524d\u52a0 \u4e24\u4e2a* \u6216\u76f4\u63a5\u4ee5 *kwargs \u547d\u540d\uff0c\u6b64\u53c2\u6570\u7528\u6765\u63a5\u6536\u5b57\u5178\uff1b def demo ( num , * args , ** numbers ): print ( num ) print ( args ) print ( numbers ) demo ( 1 , 2 , 3 , 4 , 5 , name = \"xiaoming\" , age = 18 ) >>> 1 ( 2 , 3 , 4 , 5 ) { 'name' : 'xiaoming' , 'age' : 18 } \u5728\u8c03\u7528\u5e26\u6709\u591a\u503c\u51fd\u6570\u65f6\uff0c\u5982\u679c\u9700\u8981\u5c06\u5143\u7ec4\u6216\u5b57\u5178\u76f4\u63a5\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u503c\u53c2\u6570\u7684\u62c6\u5305\uff1a \u5728\u5143\u7ec4\u53d8\u91cf\u524d\u52a0 \u4e00\u4e2a* \u5728\u5b57\u5178\u53d8\u91cf\u524d\u52a0 \u4e24\u4e2a* def demo ( num , * args , ** numbers ): print ( num ) print ( args ) print ( numbers ) num1 = 10 tup1 = ( \"\u5b9d\u9a6c\" , \"\u5954\u9a70\" , \"\u5965\u8fea\" ) dict1 = { \"name\" : \"\u5c0f\u660e\" , \"age\" : 18 } demo ( num1 , * tup1 , ** dict1 ) >>> 10 ( '\u5b9d\u9a6c' , '\u5954\u9a70' , '\u5965\u8fea' ) { 'name' : '\u5c0f\u660e' , 'age' : 18 }","title":"\u51fd\u6570\u4f20\u53c2"},{"location":"programming/python/parameter/#01","text":"","title":"01. \u5f62\u53c2\u548c\u5b9e\u53c2"},{"location":"programming/python/parameter/#11","text":"\u5f62\u53c2\uff1a\u5728\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u51fd\u6570\u540d\u540e\u9762\u62ec\u53f7\u4e2d\u7684\u53c2\u6570\u5c31\u662f\u5f62\u5f0f\u53c2\u6570\uff0c\u4f8b\u5982: # \u5728\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u8fd9\u91cc\u7684object\u5c31\u662f\u5f62\u53c2 def demo ( object ): print ( object ) \u5b9e\u53c2\uff1a\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u51fd\u6570\u540d\u540e\u9762\u62ec\u53f7\u4e2d\u7684\u53c2\u6570\u4e3a\u5b9e\u53c2\uff0c\u4f8b\u5982\uff1a # \u6b64\u65f6\uff0ca\u8868\u793a\u5b9e\u53c2 a = \"hello python\" demo ( a ) \u5b9e\u53c2\u548c\u5f62\u53c2\u7684\u533a\u522b\uff0c\u5c31\u5982\u540c\u5267\u672c\u9009\u4e3b\u89d2\uff0c\u5267\u672c\u4e2d\u7684\u89d2\u8272\u76f8\u5f53\u4e8e\u5f62\u53c2\uff0c\u800c\u6f14\u89d2\u8272\u7684\u6f14\u5458\u5c31\u76f8\u5f53\u4e8e\u5b9e\u53c2\u3002","title":"1.1 \u57fa\u672c\u5b9a\u4e49"},{"location":"programming/python/parameter/#12","text":"\u503c\u4f20\u9012\uff1a \u9002\u7528\u4e8e\u5b9e\u53c2\u7c7b\u578b\u4e3a\u4e0d\u53ef\u53d8\u7c7b\u578b\uff08\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u3001\u5143\u7ec4\uff09\uff1b \u5f15\u7528\uff08\u5730\u5740\uff09\u4f20\u9012\uff1a\u9002\u7528\u4e8e\u5b9e\u53c2\u7c7b\u578b\u4e3a\u53ef\u53d8\u7c7b\u578b\uff08\u5217\u8868\uff0c\u5b57\u5178\uff09\uff1b \u503c\u4f20\u9012\u548c\u5f15\u7528\u4f20\u9012\u7684\u533a\u522b\u662f\uff0c\u51fd\u6570\u53c2\u6570\u8fdb\u884c\u503c\u4f20\u9012\u540e\uff0c\u82e5\u5f62\u53c2\u7684\u503c\u53d1\u751f\u6539\u53d8\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5b9e\u53c2\u7684\u503c\uff1b\u800c\u51fd\u6570\u53c2\u6570\u7ee7\u7eed\u5f15\u7528\u4f20\u9012\u540e\uff0c\u6539\u53d8\u5f62\u53c2\u7684\u503c\uff0c\u5b9e\u53c2\u7684\u503c\u4e5f\u4f1a\u4e00\u540c\u6539\u53d8\u3002 def demo ( obj ) : obj += obj print ( \"\u5f62\u53c2\u503c\u4e3a\uff1a\" , obj ) print ( \"-------\u503c\u4f20\u9012-----\" ) a = \"C\u8bed\u8a00\u4e2d\u6587\u7f51\" print ( \"a\u7684\u503c\u4e3a\uff1a\" , a ) demo ( a ) print ( \"\u5b9e\u53c2\u503c\u4e3a\uff1a\" , a ) >>> ------- \u503c\u4f20\u9012 ----- a\u7684\u503c\u4e3a \uff1a C\u8bed\u8a00\u4e2d\u6587\u7f51 \u5f62\u53c2\u503c\u4e3a \uff1a C\u8bed\u8a00\u4e2d\u6587\u7f51C\u8bed\u8a00\u4e2d\u6587\u7f51 \u5b9e\u53c2\u503c\u4e3a \uff1a C\u8bed\u8a00\u4e2d\u6587\u7f51 print ( \"-----\u5f15\u7528\u4f20\u9012-----\" ) a = [ 1 , 2 , 3 ] print ( \"a\u7684\u503c\u4e3a\uff1a\" , a ) demo ( a ) print ( \"\u5b9e\u53c2\u503c\u4e3a\uff1a\" , a ) >>> ----- \u5f15\u7528\u4f20\u9012 ----- a\u7684\u503c\u4e3a \uff1a [ 1 , 2 , 3 ] \u5f62\u53c2\u503c\u4e3a \uff1a [ 1 , 2 , 3 , 1 , 2 , 3 ] \u5b9e\u53c2\u503c\u4e3a \uff1a [ 1 , 2 , 3 , 1 , 2 , 3 ] \u503c\u4f20\u9012\u5b9e\u8d28\u4e0a \u662f\u5c06\u5b9e\u53c2\u7684\u526f\u672c\u4f20\u9012\u7ed9\u53c2\u6570\uff0c\u5728\u5185\u5b58\u4e2d\uff0c\u65b0\u5efa\u4e86\u4e00\u4e2a\u5730\u5740\uff0c\u56e0\u6b64\u4e0d\u4f1a\u6539\u53d8\u539f\u6709\u5bf9\u8c61\u7684\u503c\uff1b \u5f15\u7528\u4f20\u9012\u672c\u8d28\u4e0a\u4e5f\u662f\u901a\u8fc7\u503c\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u53ea\u662f\u5728\u51fd\u6570\u5185\u90e8\u4fee\u6539\u4e86\u5b9e\u53c2\u7684\u53d8\u91cf\u540d\u7684\u5730\u5740\u5f15\u7528\u3002","title":"1.2 \u503c\u4f20\u9012\u548c\u5f15\u7528\u4f20\u9012"},{"location":"programming/python/parameter/#02","text":"","title":"02. \u4f20\u9012\u53c2\u6570"},{"location":"programming/python/parameter/#21","text":"\u4f4d\u7f6e\u4f20\u53c2\uff0c\u5373\u6309\u7167\u5b9a\u4e49\u51fd\u6570\u65f6\u8bbe\u7f6e\u7684\u5f62\u53c2\uff0c\u6309\u987a\u5e8f\u548c\u6570\u91cf\u4e00\u4e00\u5bf9\u5e94\u3002 \u4f4d\u7f6e\u4f20\u53c2\u8981\u6309\u7167\u51fd\u6570\u5f62\u53c2\u987a\u5e8f\u4f20\u9012\uff0c\u5426\u5219\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u4f1a\u51fa\u4e4e\u610f\u6599\uff0c\u4f46\u4e0d\u4f1a\u62a5\u9519\uff1b \u540c\u65f6\u9700\u8981\u4f20\u9012\u7684\u5b9e\u53c2\u548c\u5f62\u53c2\u6570\u91cf\u9700\u8981\u4fdd\u6301\u4e00\u81f4\uff0c\u5426\u5219\u89e3\u91ca\u5668\u4f1a\u62a5\u9519\u3002 def people ( name , age , weight ): return \"\u59d3\u540d\uff1a {} \\n \u5e74\u9f84\uff1a {} \\n \u4f53\u91cd\uff1a {} \" . format ( name , age , weight ) xiaoming = people ( \"xiaoming\" , 19 , 120 ) print ( xiaoming ) >>> \u59d3\u540d \uff1a xiaoming \u5e74\u9f84 \uff1a 19 \u4f53\u91cd \uff1a 120 \u53c2\u6570\u987a\u5e8f\u4e0d\u540c\u5bfc\u81f4\u7684\u9519\u8bef\uff1a def people ( name , age , weight ): return \"\u59d3\u540d\uff1a {} \\n \u5e74\u9f84\uff1a {} \\n \u4f53\u91cd\uff1a {} \" . format ( name , age , weight ) xiaoming = people ( 19 , \"\u5c0f\u660e\" , 120 ) print ( xiaoming ) >>> \u59d3\u540d \uff1a 19 \u5e74\u9f84 \uff1a \u5c0f\u660e \u4f53\u91cd \uff1a 120 \u6570\u91cf\u4e0d\u540c\u5bfc\u81f4\u7684\u9519\u8bef\uff1a def people ( name , age , weight ): return \"\u59d3\u540d\uff1a {} \\n \u5e74\u9f84\uff1a {} \\n \u4f53\u91cd\uff1a {} \" . format ( name , age , weight ) xiaoming = people ( \"\u5c0f\u660e\" , 120 ) print ( xiaoming ) >>> TypeError : people () missing 1 required positional argument : 'weight'","title":"2.1 \u4f4d\u7f6e\u4f20\u53c2"},{"location":"programming/python/parameter/#22","text":"\u5173\u952e\u5b57\u4f20\u53c2\u662f\u6307\u5728\u8c03\u7528\u51fd\u6570\u5f0f\uff0c\u6309\u7167\u51fd\u6570\u5185\u7684\u5f62\u53c2\u540d\u6765\u786e\u5b9a\u8f93\u5165\u5b9e\u53c2\u503c\u3002 \u5173\u952e\u5b57\u4f20\u53c2\u53ef\u4ee5\u4e0d\u8003\u8651\u4f4d\u7f6e\u7684\u987a\u5e8f\uff0c\u53ea\u8981\u6307\u5b9a\u5f62\u53c2-\u5b9e\u53c2\u5bf9 \u5bf9\u5e94\u5c31\u53ef\u4ee5 \u5173\u952e\u5b57\u4f20\u53c2\u548c\u4f4d\u7f6e\u4f20\u53c2\u53ef\u4ee5\u6df7\u7528\uff0c\u4f46\u9700\u8981\u6ce8\u610f\uff0c\u6df7\u7528\u7684\u60c5\u51b5\uff0c\u5173\u952e\u5b57\u4f20\u53c2\u5fc5\u987b\u5728\u6240\u6709\u4f4d\u7f6e\u4f20\u53c2\u7ed3\u675f\u540e def people ( name , age , weight ): return \"\u59d3\u540d\uff1a {} \\n \u5e74\u9f84\uff1a {} \\n \u4f53\u91cd\uff1a {} \" . format ( name , age , weight ) xiaoming = people ( \"\u5c0f\u660e\" , age = 18 , weight = 120 ) print ( xiaoming ) print ( \"----\u5206\u5272\u7ebf----\" ) xiaomei = people ( name = \"\u5c0f\u7f8e\" , age = 20 , weight = 90 ) print ( xiaomei ) \u4e0a\u8ff0\u5b9e\u4f8b\u7684\u8fd0\u884c\u7ed3\u679c\u662f\uff1a \u59d3\u540d \uff1a \u5c0f\u660e \u5e74\u9f84 \uff1a 18 \u4f53\u91cd \uff1a 120 ---- \u5206\u5272\u7ebf ---- \u59d3\u540d \uff1a \u5c0f\u7f8e \u5e74\u9f84 \uff1a 20 \u4f53\u91cd \uff1a 90 \u4ee5\u4e0a\u5b9e\u4f8b\u4e2d\uff0c\u5c0f\u660e\u7684\u5b9e\u53c2\u4f20\u9012\u6df7\u7528\u4e86\u4f4d\u7f6e\u4f20\u53c2\u548c\u5173\u952e\u5b57\u4f20\u53c2\u3002\u683c\u5f0f\u9700\u8981\u4fdd\u6301\u5173\u952e\u5b57\u4f20\u53c2\u9700\u8981\u5728\u4f4d\u7f6e\u4f20\u53c2\u4e4b\u540e","title":"2.2 \u5173\u952e\u5b57\u4f20\u53c2"},{"location":"programming/python/parameter/#23","text":"\u5728\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u5982\u679c\u67d0\u4e2a\u5f62\u53c2\u4e3a\u5e38\u7528\u503c\uff0c\u4e0d\u9700\u8981\u6bcf\u6b21\u8c03\u7528\u51fd\u6570\u90fd\u4f20\u9012\uff0c\u5219\u53ef\u4ee5\u5b9a\u4e49\u9ed8\u8ba4\u503c\u3002\u8bed\u6cd5\u5982\u4e0b\uff1a def \u51fd\u6570\u540d ( ... \uff0c \u5f62\u53c2\u540d \uff0c \u5f62\u53c2\u540d = \u9ed8\u8ba4\u503c ) \uff1a \u4ee3\u7801\u5757 \u5728\u5b9a\u4e49\u9ed8\u8ba4\u503c\u65f6\u9700\u6ce8\u610f\uff0c\u5c06\u9ed8\u8ba4\u503c\u653e\u5728\u6700\u540e\u3002 \u9ed8\u8ba4\u503c\u7684\u5b9a\u4e49\u548c\u8c03\u7528\u6f14\u793a\uff1a def people ( name , age , weight = 100 ): return \"\u59d3\u540d\uff1a {} \\n \u5e74\u9f84\uff1a {} \\n \u4f53\u91cd\uff1a {} \" . format ( name , age , weight ) xiaoming = people ( \"\u5c0f\u660e\" , age = 18 ) print ( xiaoming ) >>> \u59d3\u540d \uff1a \u5c0f\u660e \u5e74\u9f84 \uff1a 18 \u4f53\u91cd \uff1a 100 \u9ed8\u8ba4\u503c\u7684\u4fee\u6539\uff1a\u5982\u679c\u51fd\u6570\u5185\u7684\u9ed8\u8ba4\u503c\u65e0\u6cd5\u6ee1\u8db3\u8c03\u7528\u9700\u6c42\uff0c\u53ef\u4ee5\u4ee5\u5173\u952e\u5b57\u4f20\u53c2\u7684\u65b9\u5f0f\u66f4\u6539\u9ed8\u8ba4\u503c\uff1a xiaomei = people ( \"\u5c0f\u7f8e\" , 18 , weight = 120 ) print ( xiaomei ) >>> \u59d3\u540d \uff1a \u5c0f\u7f8e \u5e74\u9f84 \uff1a 18 \u4f53\u91cd \uff1a 120 \u67e5\u770b\u51fd\u6570\u9ed8\u8ba4\u503c\uff1a\u4f7f\u7528 __defaults__ \u53ef\u4ee5\u67e5\u770b\u51fd\u6570\u5185\u7684\u9ed8\u8ba4\u503c\uff0c\u8fd4\u56de\u662f\u4e00\u4e2a\u5143\u7ec4\uff1a print ( people . __defaults__ ) >>> ( 100 ,)","title":"2.3 \u9ed8\u8ba4\u503c"},{"location":"programming/python/parameter/#24","text":"\u6709\u65f6\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u51fd\u6570\uff0c\u80fd\u591f\u5904\u7406\u7684\u53c2\u6570\u7684\u4e2a\u6570\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u503c\u53c2\u6570\u3002\u591a\u503c\u53c2\u6570\u6709\u4e24\u79cd\uff1a *args \uff1a\u5b9a\u4e49\u53c2\u6570\u65f6\uff0c\u53d8\u91cf\u540d\u524d\u52a0 \u4e00\u4e2a* \u6216\u76f4\u63a5\u4ee5 *args \u547d\u540d\uff0c\u6b64\u53c2\u6570\u7528\u6765\u63a5\u6536\u5143\u7ec4\uff1b **kwargs : \u5b9a\u4e49\u53c2\u6570\u65f6\uff0c\u53d8\u91cf\u540d\u524d\u52a0 \u4e24\u4e2a* \u6216\u76f4\u63a5\u4ee5 *kwargs \u547d\u540d\uff0c\u6b64\u53c2\u6570\u7528\u6765\u63a5\u6536\u5b57\u5178\uff1b def demo ( num , * args , ** numbers ): print ( num ) print ( args ) print ( numbers ) demo ( 1 , 2 , 3 , 4 , 5 , name = \"xiaoming\" , age = 18 ) >>> 1 ( 2 , 3 , 4 , 5 ) { 'name' : 'xiaoming' , 'age' : 18 } \u5728\u8c03\u7528\u5e26\u6709\u591a\u503c\u51fd\u6570\u65f6\uff0c\u5982\u679c\u9700\u8981\u5c06\u5143\u7ec4\u6216\u5b57\u5178\u76f4\u63a5\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u503c\u53c2\u6570\u7684\u62c6\u5305\uff1a \u5728\u5143\u7ec4\u53d8\u91cf\u524d\u52a0 \u4e00\u4e2a* \u5728\u5b57\u5178\u53d8\u91cf\u524d\u52a0 \u4e24\u4e2a* def demo ( num , * args , ** numbers ): print ( num ) print ( args ) print ( numbers ) num1 = 10 tup1 = ( \"\u5b9d\u9a6c\" , \"\u5954\u9a70\" , \"\u5965\u8fea\" ) dict1 = { \"name\" : \"\u5c0f\u660e\" , \"age\" : 18 } demo ( num1 , * tup1 , ** dict1 ) >>> 10 ( '\u5b9d\u9a6c' , '\u5954\u9a70' , '\u5965\u8fea' ) { 'name' : '\u5c0f\u660e' , 'age' : 18 }","title":"2.4 \u4f20\u9012\u4efb\u610f\u6570\u91cf\u7684\u5b9e\u53c2"},{"location":"programming/python/partial/","text":"\ud83d\udca1 \u504f\u51fd\u6570\u662f\u5bf9\u539f\u51fd\u6570\u7684\u4e8c\u6b21\u5c01\u88c5\uff0c\u5c06\u73b0\u6709\u51fd\u6570\u7684\u90e8\u5206\u53c2\u6570\u9884\u5148\u8bbe\u5b9a\u4e3a\u6307\u5b9a\u503c\uff0c\u4ece\u800c\u5f97\u5230\u65b0\u7684\u51fd\u6570\u3002\u76f8\u6bd4\u539f\u51fd\u6570\uff0c\u504f\u51fd\u6570\u5177\u6709\u8f83\u5c11\u7684\u53c2\u6570\uff0c\u66f4\u65b9\u4fbf\u8c03\u7528 01. \u8bed\u6cd5\u4ecb\u7ecd \u5b9a\u4e49\u504f\u51fd\u6570\uff0c\u9700\u4f7f\u7528 partial \u5173\u952e\u5b57\uff08\u4f4d\u4e8e functools \u6a21\u5757\u4e2d\uff09 from functools import partial \u504f\u51fd\u6570\u540d = partial ( func , * args , ** kwargs ) 02. \u504f\u51fd\u6570\u7684\u7528\u6cd51-\u5173\u952e\u5b57\u65b9\u5f0f\u8bbe\u7f6e\u504f\u51fd\u6570 from functools import partial def add ( a , b ): c = a + b d = a * b return c , d demo = partial ( add , a = 1 ) print ( demo ( b = 3 )) >>> ( 4 , 3 ) \u4f7f\u7528\u504f\u51fd\u6570\u5b9a\u4e49\u4e86\u65b0\u7684\u51fd\u6570\u540e\uff0c\u8c03\u7528\u504f\u51fd\u6570\u65f6\uff0c\u5bf9\u4e8e\u5269\u4f59\u7684\u53c2\u6570\uff0c\u5fc5\u987b\u4f7f\u7528\u5173\u952e\u5b57\u4f20\u53c2\uff0c\u5426\u5219\u89e3\u91ca\u5668\u4f1a\u9519\u8bef\u7406\u89e3\u4f20\u53c2\uff0c\u9020\u6210\u5f02\u5e38 03. \u504f\u51fd\u6570\u7684\u7528\u6cd52-\u4f4d\u7f6e\u4f20\u53c2\u65b9\u5f0f\u8bbe\u7f6e\u504f\u51fd\u6570 from functools import partial def add ( a , b ): c = a + b d = a * b return c , d demo = partial ( add , 2 ) print ( demo ( b = 3 )) >>> ( 5 , 6 ) \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u539f\u51fd\u6570\uff0c\u7136\u540e\u5c06\u5176\u5c01\u88c5\u591a\u4e2a\u504f\u51fd\u6570\uff0c\u5728\u8c03\u7528\u51fd\u6570\u65f6\u5168\u90e8\u8c03\u7528\u504f\u51fd\u6570\uff0c\u4e00\u5b9a\u7a0b\u5e8f\u4e0a\u53ef\u4ee5\u63d0\u9ad8\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\u3002","title":"\u504f\u51fd\u6570"},{"location":"programming/python/partial/#01","text":"\u5b9a\u4e49\u504f\u51fd\u6570\uff0c\u9700\u4f7f\u7528 partial \u5173\u952e\u5b57\uff08\u4f4d\u4e8e functools \u6a21\u5757\u4e2d\uff09 from functools import partial \u504f\u51fd\u6570\u540d = partial ( func , * args , ** kwargs )","title":"01. \u8bed\u6cd5\u4ecb\u7ecd"},{"location":"programming/python/partial/#02-1-","text":"from functools import partial def add ( a , b ): c = a + b d = a * b return c , d demo = partial ( add , a = 1 ) print ( demo ( b = 3 )) >>> ( 4 , 3 ) \u4f7f\u7528\u504f\u51fd\u6570\u5b9a\u4e49\u4e86\u65b0\u7684\u51fd\u6570\u540e\uff0c\u8c03\u7528\u504f\u51fd\u6570\u65f6\uff0c\u5bf9\u4e8e\u5269\u4f59\u7684\u53c2\u6570\uff0c\u5fc5\u987b\u4f7f\u7528\u5173\u952e\u5b57\u4f20\u53c2\uff0c\u5426\u5219\u89e3\u91ca\u5668\u4f1a\u9519\u8bef\u7406\u89e3\u4f20\u53c2\uff0c\u9020\u6210\u5f02\u5e38","title":"02. \u504f\u51fd\u6570\u7684\u7528\u6cd51-\u5173\u952e\u5b57\u65b9\u5f0f\u8bbe\u7f6e\u504f\u51fd\u6570"},{"location":"programming/python/partial/#03-2-","text":"from functools import partial def add ( a , b ): c = a + b d = a * b return c , d demo = partial ( add , 2 ) print ( demo ( b = 3 )) >>> ( 5 , 6 ) \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u539f\u51fd\u6570\uff0c\u7136\u540e\u5c06\u5176\u5c01\u88c5\u591a\u4e2a\u504f\u51fd\u6570\uff0c\u5728\u8c03\u7528\u51fd\u6570\u65f6\u5168\u90e8\u8c03\u7528\u504f\u51fd\u6570\uff0c\u4e00\u5b9a\u7a0b\u5e8f\u4e0a\u53ef\u4ee5\u63d0\u9ad8\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\u3002","title":"03. \u504f\u51fd\u6570\u7684\u7528\u6cd52-\u4f4d\u7f6e\u4f20\u53c2\u65b9\u5f0f\u8bbe\u7f6e\u504f\u51fd\u6570"},{"location":"programming/python/polymorphism/","text":"01. \u591a\u6001\u7684\u5b9a\u4e49 \u4e0d\u540c\u7684\u5b50\u5bf9\u8c61\uff0c\u8c03\u7528\u76f8\u540c\u7684\u7236\u7c7b\u65b9\u6cd5\uff0c\u4ea7\u751f\u4e0d\u540c\u7684\u7ed3\u679c\u6267\u884c\uff1b \u7ee7\u627f\uff1a\u591a\u6001\u4e00\u5b9a\u662f\u53d1\u751f\u5728\u5b50\u7c7b\u548c\u7236\u7c7b\u4e4b\u95f4\uff1b \u91cd\u5199\uff1a\u5b50\u7c7b\u91cd\u5199\u4e86\u7236\u7c7b\u65b9\u6cd5 class A : def say ( self ): print ( \"\u8fd9\u662fA\u7c7b\u4e0b\u7684say\u65b9\u6cd5\" ) class B ( A ): def say ( self ): print ( \"\u8fd9\u662fB\u7c7b\u4e0b\u7684say\u65b9\u6cd5\" ) demo_a = A () demo_a . say () demo_b = B () demo_b . say () >>> \u8fd9\u662fA\u7c7b\u4e0b\u7684say\u65b9\u6cd5 \u8fd9\u662fB\u7c7b\u4e0b\u7684say\u65b9\u6cd5 02. \u591a\u6001\u6f14\u7ec3 class Dog : def __init__ ( self , name ): self . name = name def game ( self ): print ( \" {} \u8e66\u8e66\u8df3\u8df3\u7684\u73a9\u800d...\" . format ( self . name )) class XiaoTianDog ( Dog ): def game ( self ): print ( \" {} \u5728\u5929\u4e0a\u73a9\u800d\" . format ( self . name )) class Person : def __init__ ( self , name ): self . name = name def game_with_dog ( self , dog ): # dog\u53c2\u6570\u63a5\u53d7dog\u6216XiaoTiandog\u7c7b\u5bf9\u8c61 print ( \" {} \u548c {} \u5feb\u4e50\u7684\u73a9\u800d\" . format ( self . name , dog . name )) dog . game () # \u6267\u884cdog\u5bf9\u8c61\u7684\u5b9e\u4f8b\u65b9\u6cd5 # \u521b\u5efa\u4e00\u6761\u65fa\u8d22\u7684\u72d7\u5bf9\u8c61 wangcai = Dog ( \"\u65fa\u8d22\" ) # \u5b9a\u4e49\u5c0f\u660e\u7684\u4eba\u7c7b\u5bf9\u8c61 xiaoming = Person ( \"\u5c0f\u660e\" ) # \u8c03\u7528Person\u7c7b\u7c7bgame_with_dog\u7684\u65b9\u6cd5 xiaoming . game_with_dog ( wangcai ) # \u4f20\u5165\u65fa\u8d22\u7684\u5bf9\u8c61 >>> \u5c0f\u660e\u548c\u65fa\u8d22\u5feb\u4e50\u7684\u73a9\u800d \u65fa\u8d22\u8e66\u8e66\u8df3\u8df3\u7684\u73a9\u800d ...","title":"\u591a\u6001"},{"location":"programming/python/polymorphism/#01","text":"\u4e0d\u540c\u7684\u5b50\u5bf9\u8c61\uff0c\u8c03\u7528\u76f8\u540c\u7684\u7236\u7c7b\u65b9\u6cd5\uff0c\u4ea7\u751f\u4e0d\u540c\u7684\u7ed3\u679c\u6267\u884c\uff1b \u7ee7\u627f\uff1a\u591a\u6001\u4e00\u5b9a\u662f\u53d1\u751f\u5728\u5b50\u7c7b\u548c\u7236\u7c7b\u4e4b\u95f4\uff1b \u91cd\u5199\uff1a\u5b50\u7c7b\u91cd\u5199\u4e86\u7236\u7c7b\u65b9\u6cd5 class A : def say ( self ): print ( \"\u8fd9\u662fA\u7c7b\u4e0b\u7684say\u65b9\u6cd5\" ) class B ( A ): def say ( self ): print ( \"\u8fd9\u662fB\u7c7b\u4e0b\u7684say\u65b9\u6cd5\" ) demo_a = A () demo_a . say () demo_b = B () demo_b . say () >>> \u8fd9\u662fA\u7c7b\u4e0b\u7684say\u65b9\u6cd5 \u8fd9\u662fB\u7c7b\u4e0b\u7684say\u65b9\u6cd5","title":"01. \u591a\u6001\u7684\u5b9a\u4e49"},{"location":"programming/python/polymorphism/#02","text":"class Dog : def __init__ ( self , name ): self . name = name def game ( self ): print ( \" {} \u8e66\u8e66\u8df3\u8df3\u7684\u73a9\u800d...\" . format ( self . name )) class XiaoTianDog ( Dog ): def game ( self ): print ( \" {} \u5728\u5929\u4e0a\u73a9\u800d\" . format ( self . name )) class Person : def __init__ ( self , name ): self . name = name def game_with_dog ( self , dog ): # dog\u53c2\u6570\u63a5\u53d7dog\u6216XiaoTiandog\u7c7b\u5bf9\u8c61 print ( \" {} \u548c {} \u5feb\u4e50\u7684\u73a9\u800d\" . format ( self . name , dog . name )) dog . game () # \u6267\u884cdog\u5bf9\u8c61\u7684\u5b9e\u4f8b\u65b9\u6cd5 # \u521b\u5efa\u4e00\u6761\u65fa\u8d22\u7684\u72d7\u5bf9\u8c61 wangcai = Dog ( \"\u65fa\u8d22\" ) # \u5b9a\u4e49\u5c0f\u660e\u7684\u4eba\u7c7b\u5bf9\u8c61 xiaoming = Person ( \"\u5c0f\u660e\" ) # \u8c03\u7528Person\u7c7b\u7c7bgame_with_dog\u7684\u65b9\u6cd5 xiaoming . game_with_dog ( wangcai ) # \u4f20\u5165\u65fa\u8d22\u7684\u5bf9\u8c61 >>> \u5c0f\u660e\u548c\u65fa\u8d22\u5feb\u4e50\u7684\u73a9\u800d \u65fa\u8d22\u8e66\u8e66\u8df3\u8df3\u7684\u73a9\u800d ...","title":"02. \u591a\u6001\u6f14\u7ec3"},{"location":"programming/python/recursion/","text":"\ud83d\udca1 \u6559\u5ba4\u91cc\uff0c\u5750\u7b2c\u4e03\u6392\u7684\u7537\u751f\u7231\u6155\u5750\u7b2c\u4e00\u6392\u7684\u5973\u751f\uff0c\u4e8e\u662f\u60f3\u7ed9\u5973\u751f\u4f20\u7eb8\u6761\u8868\u8fbe\u7231\u610f\uff0c\u4e8e\u662f\u4ed6\u5c06\u60c5\u4e66\u4f20\u7ed9\u7b2c\u516d\u6392\u7684\u540c\u5b66\uff0c\u7b2c\u516d\u6392\u518d\u4f20\u7ed9\u7b2c\u4e94\u6392\u540c\u5b66\uff0c\u4f9d\u6b21\u5411\u524d\uff0c\u76f4\u5230\u4f20\u9012\u5230\u7b2c\u4e00\u6392\u7684\u5973\u751f\uff0c\u5973\u751f\u63a5\u5230\u60c5\u4e66\u540e\uff0c\u5f88\u60ca\u559c\uff0c\u56e0\u4e3a\u4ed6\u4e5f\u559c\u6b22\u90a3\u4e2a\u7537\u751f\u3002 \u4e8e\u662f\uff0c\u5979\u5411\u7537\u751f\u56de\u590d\u4e86\u60c5\u4e66\uff0c\u5979\u4ea4\u7ed9\u7b2c\u4e8c\u6392\u7684\u540c\u5b66\uff0c\u7b2c\u4e8c\u6392\u4ea4\u7ed9\u7b2c\u4e09\u6392\u7684\u540c\u5b66\uff0c\u4f9d\u6b21\u5411\u540e\uff0c\u76f4\u5230\u4f20\u5230\u7b2c\u4e03\u6392\u7537\u751f\u7684\u624b\u91cc\u3002\u4e8e\u662f\uff0c\u4ed6\u4eec\u5c31\u5feb\u4e50\u7684\u5728\u4e00\u8d77\u4e86\u3002 \u5728\u4f7f\u7528\u9012\u5f52\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a \u9012\u5f52\u5c31\u662f\u5728\u8fc7\u7a0b\u6216\u51fd\u6570\u91cc\u8c03\u7528\u81ea\u8eab \u5fc5\u987b\u6709\u4e00\u4e2a\u660e\u786e\u7684\u9012\u5f52\u7ed3\u675f\u6761\u4ef6\uff0c\u79f0\u4e3a\u9012\u5f52\u51fa\u53e3\u3002 \u6ce8\u610f\uff1a \u5207\u52ff\u5fd8\u8bb0\u9012\u5f52\u51fa\u53e3\uff0c\u907f\u514d\u51fd\u6570\u65e0\u9650\u8c03\u7528\u3002 1. \u9ad8\u65af\u6c42\u548c\u7b97\u6cd5 1+2+3+4+...+99+100+n \u8fd9\u6837\u6570\u5b57\u7d2f\u52a0\u6c42\u548c\u88ab\u79f0\u4e3a\u9ad8\u65af\u6c42\u548c\uff0c\u4f7f\u7528for\u5faa\u73af\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff1a def sum_number ( num ): result = 0 for i in range ( 1 , num + 1 ): result += i return result sum10 = sum_number ( 10 ) print ( sum10 ) >>> 50 \u5982\u679c\u4f7f\u7528\u9012\u5f52\u51fd\u6570\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a def sum_number ( num ): if num == 1 : return 1 else : return num + sum_number ( num - 1 ) sum10 = sum_number ( 10 ) print ( sum10 ) >>> 50 ''' 4+f(4-1) 3+f(3-1) 2+f(2-1) 1 2+1 3+2+1 4+3+2+1 ''' 2. \u6590\u6ce2\u90a3\u5951\u6570\u5217 0,1,1,2,3,5,8,13,21,33 \u7c7b\u4f3c\u8fd9\u6837\uff0c\u524d\u9762\u4e24\u4e2a\u6570\u76f8\u52a0\u7b49\u4e8e\u7b2c\u4e09\u4e2a\u6570\u88ab\u79f0\u4e3a\u6590\u6ce2\u90a3\u5951\u6570\u5217 def recur_fibo ( n ): \"\"\"\u9012\u5f52\u51fd\u6570 \u8f93\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\"\"\" if n <= 1 : return n else : return ( recur_fibo ( n - 1 ) + recur_fibo ( n - 2 )) # \u83b7\u53d6\u7528\u6237\u8f93\u5165 nterms = int ( input ( \"\u60a8\u8981\u8f93\u51fa\u51e0\u9879? \" )) # \u68c0\u67e5\u8f93\u5165\u7684\u6570\u5b57\u662f\u5426\u6b63\u786e if nterms <= 0 : print ( \"\u8f93\u5165\u6b63\u6570\" ) else : print ( \"\u6590\u6ce2\u90a3\u5951\u6570\u5217:\" ) for i in range ( nterms ): print ( recur_fibo ( i ), end = \",\" ) >>> \u60a8\u8981\u8f93\u51fa\u51e0\u9879 ? 10 \u6590\u6ce2\u90a3\u5951\u6570\u5217 : 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 ,","title":"\u9012\u5f52"},{"location":"programming/python/recursion/#1","text":"1+2+3+4+...+99+100+n \u8fd9\u6837\u6570\u5b57\u7d2f\u52a0\u6c42\u548c\u88ab\u79f0\u4e3a\u9ad8\u65af\u6c42\u548c\uff0c\u4f7f\u7528for\u5faa\u73af\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff1a def sum_number ( num ): result = 0 for i in range ( 1 , num + 1 ): result += i return result sum10 = sum_number ( 10 ) print ( sum10 ) >>> 50 \u5982\u679c\u4f7f\u7528\u9012\u5f52\u51fd\u6570\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a def sum_number ( num ): if num == 1 : return 1 else : return num + sum_number ( num - 1 ) sum10 = sum_number ( 10 ) print ( sum10 ) >>> 50 ''' 4+f(4-1) 3+f(3-1) 2+f(2-1) 1 2+1 3+2+1 4+3+2+1 '''","title":"1. \u9ad8\u65af\u6c42\u548c\u7b97\u6cd5"},{"location":"programming/python/recursion/#2","text":"0,1,1,2,3,5,8,13,21,33 \u7c7b\u4f3c\u8fd9\u6837\uff0c\u524d\u9762\u4e24\u4e2a\u6570\u76f8\u52a0\u7b49\u4e8e\u7b2c\u4e09\u4e2a\u6570\u88ab\u79f0\u4e3a\u6590\u6ce2\u90a3\u5951\u6570\u5217 def recur_fibo ( n ): \"\"\"\u9012\u5f52\u51fd\u6570 \u8f93\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\"\"\" if n <= 1 : return n else : return ( recur_fibo ( n - 1 ) + recur_fibo ( n - 2 )) # \u83b7\u53d6\u7528\u6237\u8f93\u5165 nterms = int ( input ( \"\u60a8\u8981\u8f93\u51fa\u51e0\u9879? \" )) # \u68c0\u67e5\u8f93\u5165\u7684\u6570\u5b57\u662f\u5426\u6b63\u786e if nterms <= 0 : print ( \"\u8f93\u5165\u6b63\u6570\" ) else : print ( \"\u6590\u6ce2\u90a3\u5951\u6570\u5217:\" ) for i in range ( nterms ): print ( recur_fibo ( i ), end = \",\" ) >>> \u60a8\u8981\u8f93\u51fa\u51e0\u9879 ? 10 \u6590\u6ce2\u90a3\u5951\u6570\u5217 : 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 ,","title":"2. \u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"programming/python/return/","text":"01. \u8fd4\u56de\u503c\u7684\u5b9a\u4e49\u548c\u4f7f\u7528 \u5728\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u7528 return \u8bed\u53e5\uff0c\u6307\u5b9a\u5e94\u8be5\u8fd4\u56de\u7684\u503c\uff0c\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u3002\u8fd4\u56de\u503c\u6709\u4ee5\u4e0b\u6ce8\u610f\u70b9\uff1a \u8c03\u7528\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u65f6\uff0c\u5e94\u8be5\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\u7528\u6765\u63a5\u6536\u8fd4\u56de\u503c\uff1b \u5728\u4e00\u4e2a\u51fd\u6570\u5185\u53ef\u4ee5\u6709\u591a\u4e2a return \u8bed\u53e5\uff0c\u4f46\u53ea\u8981\u6709\u4e00\u4e2a retrun \u6267\u884c\uff0c\u51fd\u6570\u8fd0\u884c\u5c06\u4f1a\u7ed3\u675f\uff1b \u8fd4\u56de\u503c\u53ef\u4ee5\u6307\u5b9a\u503c\uff0c\u540c\u65f6 return \u540e\u4e5f\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u7701\u7565\u4e0d\u5199\uff0c\u8fd4\u56de\u503c\u4e3a\u7a7a\uff08None\uff09\u3002 def add ( a , b ): c = a + b return c sums = add ( 2 , 3 ) print ( sums ) >>> 5 02. \u591a\u4e2a return \u8bed\u53e5\u7684\u60c5\u51b5\uff1a def isadulthood ( age ): if age > 18 : return \"\u6210\u5e74\u4e86\" else : return \"\u672a\u6210\u5e74\" xiaoming = isadulthood ( 23 ) print ( xiaoming ) xiaoli = isadulthood ( 12 ) print ( xiaoli ) >>> \u6210\u5e74\u4e86 \u672a\u6210\u5e74 03. \u591a\u4e2a\u8fd4\u56de\u503c \u5982\u679c\u5e0c\u671b\u51fd\u6570\u6709\u591a\u4e2a\u8fd4\u56de\u503c\uff0c\u53ef\u4ee5\u5728 return \u540e\u4ee5\u5143\u7ec4\u3001\u5217\u8868\u3001\u6216\u5b57\u5178\u7684\u5f62\u5f0f\u63a5\u6536\u3002 \u5143\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u591a\u4e2a\u503c def add ( a ): b = a + 1 c = a + 2 return b , c adds = add ( 3 ) print ( adds , type ( adds )) >>> ( 4 , 5 ) < class ' tuple '> \u53ef\u4ee5\u770b\u5230add\u51fd\u6570\u8fd4\u56de\u4e86\u4e00\u4e2a\u5143\u7ec4\u7c7b\u578b\u7684\u5e8f\u5217\uff0c\u8fd9\u91ccreturn\u540e\u5143\u7ec4\u7684\u5199\u6cd5\u53ef\u4ee5\u4f7f\u7528\u62ec\u53f7\uff0c\u4e5f\u53ef\u4ee5\u7701\u7565 \u5217\u8868\u7684\u5f62\u5f0f\u8fd4\u56de\u591a\u4e2a\u503c def add ( a ): b = a + 1 c = a + 2 return [ b , c ] adds = add ( 3 ) print ( adds , type ( adds )) >>> [ 4 , 5 ] < class ' list '> \u5b57\u5178\u7684\u5f62\u5f0f\u8fd4\u56de\u591a\u4e2a\u503c def add ( a ): b = a + 1 c = a + 2 return { \"b\" : b , \"c\" : c } adds = add ( 3 ) print ( adds , type ( adds )) >>> { 'b' : 4 , 'c' : 5 } < class ' dict '>","title":"\u51fd\u6570\u8fd4\u56de\u503c"},{"location":"programming/python/return/#01","text":"\u5728\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u7528 return \u8bed\u53e5\uff0c\u6307\u5b9a\u5e94\u8be5\u8fd4\u56de\u7684\u503c\uff0c\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u3002\u8fd4\u56de\u503c\u6709\u4ee5\u4e0b\u6ce8\u610f\u70b9\uff1a \u8c03\u7528\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u65f6\uff0c\u5e94\u8be5\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\u7528\u6765\u63a5\u6536\u8fd4\u56de\u503c\uff1b \u5728\u4e00\u4e2a\u51fd\u6570\u5185\u53ef\u4ee5\u6709\u591a\u4e2a return \u8bed\u53e5\uff0c\u4f46\u53ea\u8981\u6709\u4e00\u4e2a retrun \u6267\u884c\uff0c\u51fd\u6570\u8fd0\u884c\u5c06\u4f1a\u7ed3\u675f\uff1b \u8fd4\u56de\u503c\u53ef\u4ee5\u6307\u5b9a\u503c\uff0c\u540c\u65f6 return \u540e\u4e5f\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u7701\u7565\u4e0d\u5199\uff0c\u8fd4\u56de\u503c\u4e3a\u7a7a\uff08None\uff09\u3002 def add ( a , b ): c = a + b return c sums = add ( 2 , 3 ) print ( sums ) >>> 5","title":"01. \u8fd4\u56de\u503c\u7684\u5b9a\u4e49\u548c\u4f7f\u7528"},{"location":"programming/python/return/#02-return","text":"def isadulthood ( age ): if age > 18 : return \"\u6210\u5e74\u4e86\" else : return \"\u672a\u6210\u5e74\" xiaoming = isadulthood ( 23 ) print ( xiaoming ) xiaoli = isadulthood ( 12 ) print ( xiaoli ) >>> \u6210\u5e74\u4e86 \u672a\u6210\u5e74","title":"02. \u591a\u4e2areturn \u8bed\u53e5\u7684\u60c5\u51b5\uff1a"},{"location":"programming/python/return/#03","text":"\u5982\u679c\u5e0c\u671b\u51fd\u6570\u6709\u591a\u4e2a\u8fd4\u56de\u503c\uff0c\u53ef\u4ee5\u5728 return \u540e\u4ee5\u5143\u7ec4\u3001\u5217\u8868\u3001\u6216\u5b57\u5178\u7684\u5f62\u5f0f\u63a5\u6536\u3002 \u5143\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u591a\u4e2a\u503c def add ( a ): b = a + 1 c = a + 2 return b , c adds = add ( 3 ) print ( adds , type ( adds )) >>> ( 4 , 5 ) < class ' tuple '> \u53ef\u4ee5\u770b\u5230add\u51fd\u6570\u8fd4\u56de\u4e86\u4e00\u4e2a\u5143\u7ec4\u7c7b\u578b\u7684\u5e8f\u5217\uff0c\u8fd9\u91ccreturn\u540e\u5143\u7ec4\u7684\u5199\u6cd5\u53ef\u4ee5\u4f7f\u7528\u62ec\u53f7\uff0c\u4e5f\u53ef\u4ee5\u7701\u7565 \u5217\u8868\u7684\u5f62\u5f0f\u8fd4\u56de\u591a\u4e2a\u503c def add ( a ): b = a + 1 c = a + 2 return [ b , c ] adds = add ( 3 ) print ( adds , type ( adds )) >>> [ 4 , 5 ] < class ' list '> \u5b57\u5178\u7684\u5f62\u5f0f\u8fd4\u56de\u591a\u4e2a\u503c def add ( a ): b = a + 1 c = a + 2 return { \"b\" : b , \"c\" : c } adds = add ( 3 ) print ( adds , type ( adds )) >>> { 'b' : 4 , 'c' : 5 } < class ' dict '>","title":"03. \u591a\u4e2a\u8fd4\u56de\u503c"},{"location":"programming/python/set/","text":"01.\u96c6\u5408\u7684\u5b9a\u4e49 \u96c6\u5408(set)\u662f\u4e00\u4e2a\u65e0\u5e8f\u7684\u4e0d\u91cd\u590d\u5e8f\u5217 \u96c6\u5408\u53ea\u80fd\u5b58\u50a8\u4e0d\u53ef\u53d8\u6570\u636e\u7c7b\u578b\uff0c\u5305\u62ec\u6574\u5f62\u3001\u6d6e\u70b9\u578b\u3001\u5b57\u7b26\u4e32\u3001\u5143\u7ec4\u3002\u65e0\u6cd5\u5b58\u50a8\u5b57\u5178\u548c\u5217\u8868\u3002 \u4f7f\u7528 {} \u5305\u62ec\uff0c\u76f8\u90bb\u5143\u7d20\u4ee5 , \u5206\u5272\u3002 \u96c6\u5408\u4e2d\u7684\u5143\u7d20\u662f\u552f\u4e00\u7684\uff0c\u5982\u679c\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff0c\u53ea\u4f1a\u4fdd\u7559\u4e00\u4efd\u3002 \u7531\u4e8e\u96c6\u5408\u662f\u65e0\u5e8f\u7684\uff0c\u6bcf\u6b21\u8f93\u51fa\u6392\u5e8f\u987a\u5e8f\u53ef\u80fd\u90fd\u4e0d\u76f8\u540c\u3002 1.1 {} \u65b9\u6cd5\u521b\u5efa\u96c6\u5408 a = { 1 , 2 , 3 } >>> { 1 , 2 , 3 } b = { 1 , 2 , 1 , ( 1 , 2 )} >>> { 1 , 2 , ( 1 , 2 )} 1.2 set() \u65b9\u6cd5\u521b\u5efa\u96c6\u5408 a = set (( \"hello\" , 1 , 2 ,( 1 , 2 ))) >>> {( 1 , 2 ), 1 , 2 , 'hello' } b = set ([ 1 , 2 , 3 , ( \"a\" , \"b\" )]) >>> { 1 , 2 , 3 , ( 'a' , 'b' )} c = set ( \"hello\" ) >>> { 'e' , 'l' , 'h' , 'o' } set()\u5185\u4f20\u9012\u4e00\u4e2a\u53c2\u6570\uff0c\u5982\u679c\u662f\u591a\u4e2a\u5143\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528\u5143\u7ec4\u6216\u8005\u5217\u8868\u8fdb\u884c\u4f20\u53c2\u3002 02. \u96c6\u5408\u7684\u57fa\u672c\u64cd\u4f5c 2.1 \u8bbf\u95ee\u5143\u7d20 \u7531\u4e8e\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u662f\u65e0\u5e8f\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u50cf\u5217\u8868\u4e00\u6837\u4f7f\u7528\u4e0b\u6807\u7684\u65b9\u5f0f\u8bbf\u95ee\u5143\u7d20\u3002\u56e0\u6b64\uff0c\u8bbf\u95ee\u96c6\u5408\u4e2d\u7684\u6570\u636e\u6700\u5e38\u7528\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u5faa\u73af\u904d\u5386 a = set ( \"hello\" ) for i in a : print ( i , end = \"\" ) >>> ehol \u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u4f7f\u7528 in \u5224\u65ad\u5143\u7d20\u662f\u5426\u5728\u96c6\u5408\u5185 a = set ( \"hello\" ) print ( \"o\" in a ) >>> True 2.2 \u5220\u9664\u5143\u7d20 \u5220\u9664\u96c6\u5408\u5143\u7d20\u6709\u51e0\u79cd\u5e38\u7528\u7684\u65b9\u6cd5\u3002 remove \u3001 discard \u3001 pop \u3001 clear remove() \u65b9\u6cd5\u7528\u6237\u5220\u9664\u96c6\u5408\u4e2d\u6307\u5b9a\u5143\u7d20\u3002\u4f46\u5982\u679c\u6307\u5b9a\u5143\u7d20\u4e0d\u5b58\u5728\uff0c\u89e3\u91ca\u5668\u4f1a\u62a5\u9519 a = set ( \"hello\" ) a . remove ( \"l\" ) print ( a ) a . remove ( \"l\" ) print ( a ) >>> { 'e' , 'h' , 'o' } KeyError : 'l' discard() \u65b9\u6cd5\u548cremove\u65b9\u6cd5\u4f7f\u7528\u5b8c\u5168\u4e00\u6837\uff0c\u533a\u522b\u662f\uff0c\u5982\u679c\u5143\u7d20\u4e0d\u5b58\u5728\uff0c\u4e0d\u4f1a\u62a5\u9519\u3002 a = set ( \"hello\" ) a . remove ( \"l\" ) print ( a ) a . discard ( \"l\" ) print ( a ) >>> { 'h' , 'e' , 'o' } { 'h' , 'e' , 'o' } pop() \u65b9\u6cd5\u53ef\u4ee5\u968f\u673a\u5220\u9664\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u3002 a = { 1 , 2 , 3 } a . pop () print ( a ) >>> { 2 , 3 } clear() \u65b9\u6cd5\u7528\u4e8e\u6e05\u7a7a\u96c6\u5408\u3002 a = { 1 , 2 , 3 } a . clear () print ( a ) >>> set () 2.3 \u6dfb\u52a0\u5143\u7d20 add() \u65b9\u6cd5\u5411\u96c6\u5408\u5185\u6dfb\u52a0\u5143\u7d20\uff0c\u5982\u679c\u5143\u7d20\u5df2\u5b58\u5728\uff0c\u5219\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\u53ea\u80fd\u6dfb\u52a0\u4e0d\u53ef\u53d8\u6570\u636e\u7c7b\u578b\u3002 a = { 1 , 2 , 3 } a . add (( 3 , 4 )) print ( a ) >>> { 1 , 2 , 3 , ( 3 , 4 )} update() \u65b9\u6cd5\u5411\u96c6\u5408\u6dfb\u52a0\u5143\u7d20\uff0c\u53ef\u4ee5\u6dfb\u52a0\u5217\u8868\u548c\u5b57\u5178\u3002 a = { 1 , 2 , 3 } a . update ([ 3 , 4 ]) print ( a ) >>> { 1 , 2 , 3 , 4 } 2.4 \u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5dee\u96c6\u548c\u5bf9\u79f0\u5dee\u96c6\u8fd0\u7b97 \u96c6\u5408\u6700\u5e38\u505a\u7684\u64cd\u4f5c\u5c31\u662f\u8fdb\u884c\u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5dee\u96c6\u4ee5\u53ca\u5bf9\u79f0\u5dee\u96c6\u8fd0\u7b97\u3002\u56fe\u4e2d\u6709\u4e24\u4e2a\u96c6\u5408\uff0cset1={1,2,3}\u548cset2={3,4,5}\u3002 \u8fd0\u7b97\u64cd\u4f5c Python\u8fd0\u7b97\u7b26 \u542b\u4e49 \u4f8b\u5b50 \u4ea4\u96c6 & \u53d6\u4e24\u96c6\u5408\u516c\u5171\u7684\u5143\u7d20 >>> set1 & set2 {3} \u5e76\u96c6 \u53d6\u4e24\u96c6\u5408\u5168\u90e8\u7684\u5143\u7d20 \u5dee\u96c6 - \u53d6\u4e00\u4e2a\u96c6\u5408\u4e2d\u53e6\u4e00\u96c6\u5408\u6ca1\u6709\u7684\u5143\u7d20 >>> set1 - set2 {1,2} >>> set2 - set1 {4,5} \u5bf9\u79f0\u5dee\u96c6 ^ \u53d6\u96c6\u5408 A \u548c B \u4e2d\u4e0d\u5c5e\u4e8e A&B \u7684\u5143\u7d20 >>> set1 ^ set2 {1,2,4,5} 03. \u96c6\u5408\u7684\u65b9\u6cd5 ipython3 \u4e2d\u8f93\u5165 dir(set) \u3002\u63d0\u793a\u96c6\u5408\u6709\u4ee5\u4e0b\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u7528\uff1a >>> dir ( set ) [ 'add' , 'clear' , 'copy' , 'difference' , 'difference_update' , 'discard' , 'intersection' , 'intersection_update' , 'isdisjoint' , 'issubset' , 'issuperset' , 'pop' , 'remove' , 'symmetric_difference' , 'symmetric_difference_update' , 'union' , 'update' ] \u5404\u4e2a\u65b9\u6cd5\u7684\u5177\u4f53\u8bed\u6cd5\u548c\u7ed3\u6784\u53ca\u529f\u80fd\u5982\u4e0b\uff1a \u65b9\u6cd5\u540d \u8bed\u6cd5\u683c\u5f0f \u529f\u80fd \u5b9e\u4f8b add() set1.add() \u5411 set1 \u96c6\u5408\u4e2d\u6dfb\u52a0\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u3001\u5143\u7ec4\u6216\u8005\u5e03\u5c14\u7c7b\u578b >>> set1 = {1,2,3} >>> set1.add((1,2)) >>> set1 {(1, 2), 1, 2, 3} clear() set1.clear() \u6e05\u7a7a set1 \u96c6\u5408\u4e2d\u6240\u6709\u5143\u7d20 >>> set1 = {1,2,3} >>> set1.clear() >>> set1 set() set()\u8868\u793a\u7a7a\u96c6\u5408\uff0c{}\u8868\u793a\u7684\u662f\u7a7a\u5b57\u5178 copy() set2 = set1.copy() \u62f7\u8d1d set1 \u96c6\u5408\u7ed9 set2 >>> set1 = {1,2,3} >>> set2 = set1.copy() >>> set1.add(4) >>> set1 {1, 2, 3, 4} >>> set2 {1, 2, 3} difference() set3 = set1.difference(set2) \u5c06 set1 \u4e2d\u6709\u800c set2 \u6ca1\u6709\u7684\u5143\u7d20\u7ed9 set3 >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set3 = set1.difference(set2) >>> set3 {1, 2} difference_update() set1.difference_update(set2) \u4ece set1 \u4e2d\u5220\u9664\u4e0e set2 \u76f8\u540c\u7684\u5143\u7d20 >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set1.difference_update(set2) >>> set1 {1, 2} discard() set1.discard(elem) \u5220\u9664 set1 \u4e2d\u7684 elem \u5143\u7d20 >>> set1 = {1,2,3} >>> set1.discard(2) >>> set1 {1, 3} >>> set1.discard(4) {1, 3} intersection() set3 = set1.intersection(set2) \u53d6 set1 \u548c set2 \u7684\u4ea4\u96c6\u7ed9 set3 >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set3 = set1.intersection(set2) >>> set3 {3} intersection_update() set1.intersection_update(set2) \u53d6 set1\u548c set2 \u7684\u4ea4\u96c6\uff0c\u5e76\u66f4\u65b0\u7ed9 set1 >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set1.intersection_update(set2) >>> set1 {3} isdisjoint() set1.isdisjoint(set2) \u5224\u65ad set1 \u548c set2 \u662f\u5426\u6ca1\u6709\u4ea4\u96c6\uff0c\u6709\u4ea4\u96c6\u8fd4\u56de False\uff1b\u6ca1\u6709\u4ea4\u96c6\u8fd4\u56de True >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set1.isdisjoint(set2) False issubset() set1.issubset(set2) \u5224\u65ad set1 \u662f\u5426\u662f set2 \u7684\u5b50\u96c6 >>> set1 = {1,2,3} >>> set2 = {1,2} >>> set1.issubset(set2) False issuperset() set1.issuperset(set2) \u5224\u65ad set2 \u662f\u5426\u662f set1 \u7684\u5b50\u96c6 >>> set1 = {1,2,3} >>> set2 = {1,2} >>> set1.issuperset(set2) True pop() a = set1.pop() \u53d6 set1 \u4e2d\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u8d4b\u503c\u7ed9 a >>> set1 = {1,2,3} >>> a = set1.pop() >>> set1{2,3} >>> a1 remove() set1.remove(elem) \u79fb\u9664 set1 \u4e2d\u7684 elem \u5143\u7d20 >>> set1 = {1,2,3} >>> set1.remove(2) >>> set1 {1, 3} >>> set1.remove(4) Traceback (most recent call last): File \" \", line 1, in set1.remove(4)KeyError: 4 symmetric_difference() set3 = set1.symmetric_difference(set2) \u53d6 set1 \u548c set2 \u4e2d\u4e92\u4e0d\u76f8\u540c\u7684\u5143\u7d20\uff0c\u7ed9 set3 >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set3 = set1.symmetric_difference(set2) >>> set3 {1, 2, 4} symmetric_difference_update() set1.symmetric_difference_update(set2) \u53d6 set1 \u548c set2 \u4e2d\u4e92\u4e0d\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5e76\u66f4\u65b0\u7ed9 set1 >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set1.symmetric_difference_update(set2) >>> set1 {1, 2, 4} union() set3 = set1.union(set2) \u53d6 set1 \u548c set2 \u7684\u5e76\u96c6\uff0c\u8d4b\u7ed9 set3 >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set3=set1.union(set2) >>> set3 {1, 2, 3, 4} update() set1.update(elem) \u6dfb\u52a0\u5217\u8868\u6216\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u5230 set1 >>> set1 = {1,2,3} >>> set1.update([3,4]) >>> set1 {1,2,3,4}","title":"\u96c6\u5408"},{"location":"programming/python/set/#01","text":"\u96c6\u5408(set)\u662f\u4e00\u4e2a\u65e0\u5e8f\u7684\u4e0d\u91cd\u590d\u5e8f\u5217 \u96c6\u5408\u53ea\u80fd\u5b58\u50a8\u4e0d\u53ef\u53d8\u6570\u636e\u7c7b\u578b\uff0c\u5305\u62ec\u6574\u5f62\u3001\u6d6e\u70b9\u578b\u3001\u5b57\u7b26\u4e32\u3001\u5143\u7ec4\u3002\u65e0\u6cd5\u5b58\u50a8\u5b57\u5178\u548c\u5217\u8868\u3002 \u4f7f\u7528 {} \u5305\u62ec\uff0c\u76f8\u90bb\u5143\u7d20\u4ee5 , \u5206\u5272\u3002 \u96c6\u5408\u4e2d\u7684\u5143\u7d20\u662f\u552f\u4e00\u7684\uff0c\u5982\u679c\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff0c\u53ea\u4f1a\u4fdd\u7559\u4e00\u4efd\u3002 \u7531\u4e8e\u96c6\u5408\u662f\u65e0\u5e8f\u7684\uff0c\u6bcf\u6b21\u8f93\u51fa\u6392\u5e8f\u987a\u5e8f\u53ef\u80fd\u90fd\u4e0d\u76f8\u540c\u3002","title":"01.\u96c6\u5408\u7684\u5b9a\u4e49"},{"location":"programming/python/set/#11","text":"a = { 1 , 2 , 3 } >>> { 1 , 2 , 3 } b = { 1 , 2 , 1 , ( 1 , 2 )} >>> { 1 , 2 , ( 1 , 2 )}","title":"1.1 {} \u65b9\u6cd5\u521b\u5efa\u96c6\u5408"},{"location":"programming/python/set/#12-set","text":"a = set (( \"hello\" , 1 , 2 ,( 1 , 2 ))) >>> {( 1 , 2 ), 1 , 2 , 'hello' } b = set ([ 1 , 2 , 3 , ( \"a\" , \"b\" )]) >>> { 1 , 2 , 3 , ( 'a' , 'b' )} c = set ( \"hello\" ) >>> { 'e' , 'l' , 'h' , 'o' } set()\u5185\u4f20\u9012\u4e00\u4e2a\u53c2\u6570\uff0c\u5982\u679c\u662f\u591a\u4e2a\u5143\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528\u5143\u7ec4\u6216\u8005\u5217\u8868\u8fdb\u884c\u4f20\u53c2\u3002","title":"1.2  set() \u65b9\u6cd5\u521b\u5efa\u96c6\u5408"},{"location":"programming/python/set/#02","text":"","title":"02. \u96c6\u5408\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"programming/python/set/#21","text":"\u7531\u4e8e\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u662f\u65e0\u5e8f\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u50cf\u5217\u8868\u4e00\u6837\u4f7f\u7528\u4e0b\u6807\u7684\u65b9\u5f0f\u8bbf\u95ee\u5143\u7d20\u3002\u56e0\u6b64\uff0c\u8bbf\u95ee\u96c6\u5408\u4e2d\u7684\u6570\u636e\u6700\u5e38\u7528\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u5faa\u73af\u904d\u5386 a = set ( \"hello\" ) for i in a : print ( i , end = \"\" ) >>> ehol \u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u4f7f\u7528 in \u5224\u65ad\u5143\u7d20\u662f\u5426\u5728\u96c6\u5408\u5185 a = set ( \"hello\" ) print ( \"o\" in a ) >>> True","title":"2.1 \u8bbf\u95ee\u5143\u7d20"},{"location":"programming/python/set/#22","text":"\u5220\u9664\u96c6\u5408\u5143\u7d20\u6709\u51e0\u79cd\u5e38\u7528\u7684\u65b9\u6cd5\u3002 remove \u3001 discard \u3001 pop \u3001 clear remove() \u65b9\u6cd5\u7528\u6237\u5220\u9664\u96c6\u5408\u4e2d\u6307\u5b9a\u5143\u7d20\u3002\u4f46\u5982\u679c\u6307\u5b9a\u5143\u7d20\u4e0d\u5b58\u5728\uff0c\u89e3\u91ca\u5668\u4f1a\u62a5\u9519 a = set ( \"hello\" ) a . remove ( \"l\" ) print ( a ) a . remove ( \"l\" ) print ( a ) >>> { 'e' , 'h' , 'o' } KeyError : 'l' discard() \u65b9\u6cd5\u548cremove\u65b9\u6cd5\u4f7f\u7528\u5b8c\u5168\u4e00\u6837\uff0c\u533a\u522b\u662f\uff0c\u5982\u679c\u5143\u7d20\u4e0d\u5b58\u5728\uff0c\u4e0d\u4f1a\u62a5\u9519\u3002 a = set ( \"hello\" ) a . remove ( \"l\" ) print ( a ) a . discard ( \"l\" ) print ( a ) >>> { 'h' , 'e' , 'o' } { 'h' , 'e' , 'o' } pop() \u65b9\u6cd5\u53ef\u4ee5\u968f\u673a\u5220\u9664\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u3002 a = { 1 , 2 , 3 } a . pop () print ( a ) >>> { 2 , 3 } clear() \u65b9\u6cd5\u7528\u4e8e\u6e05\u7a7a\u96c6\u5408\u3002 a = { 1 , 2 , 3 } a . clear () print ( a ) >>> set ()","title":"2.2 \u5220\u9664\u5143\u7d20"},{"location":"programming/python/set/#23","text":"add() \u65b9\u6cd5\u5411\u96c6\u5408\u5185\u6dfb\u52a0\u5143\u7d20\uff0c\u5982\u679c\u5143\u7d20\u5df2\u5b58\u5728\uff0c\u5219\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\u53ea\u80fd\u6dfb\u52a0\u4e0d\u53ef\u53d8\u6570\u636e\u7c7b\u578b\u3002 a = { 1 , 2 , 3 } a . add (( 3 , 4 )) print ( a ) >>> { 1 , 2 , 3 , ( 3 , 4 )} update() \u65b9\u6cd5\u5411\u96c6\u5408\u6dfb\u52a0\u5143\u7d20\uff0c\u53ef\u4ee5\u6dfb\u52a0\u5217\u8868\u548c\u5b57\u5178\u3002 a = { 1 , 2 , 3 } a . update ([ 3 , 4 ]) print ( a ) >>> { 1 , 2 , 3 , 4 }","title":"2.3 \u6dfb\u52a0\u5143\u7d20"},{"location":"programming/python/set/#24","text":"\u96c6\u5408\u6700\u5e38\u505a\u7684\u64cd\u4f5c\u5c31\u662f\u8fdb\u884c\u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5dee\u96c6\u4ee5\u53ca\u5bf9\u79f0\u5dee\u96c6\u8fd0\u7b97\u3002\u56fe\u4e2d\u6709\u4e24\u4e2a\u96c6\u5408\uff0cset1={1,2,3}\u548cset2={3,4,5}\u3002 \u8fd0\u7b97\u64cd\u4f5c Python\u8fd0\u7b97\u7b26 \u542b\u4e49 \u4f8b\u5b50 \u4ea4\u96c6 & \u53d6\u4e24\u96c6\u5408\u516c\u5171\u7684\u5143\u7d20 >>> set1 & set2 {3} \u5e76\u96c6 \u53d6\u4e24\u96c6\u5408\u5168\u90e8\u7684\u5143\u7d20 \u5dee\u96c6 - \u53d6\u4e00\u4e2a\u96c6\u5408\u4e2d\u53e6\u4e00\u96c6\u5408\u6ca1\u6709\u7684\u5143\u7d20 >>> set1 - set2 {1,2} >>> set2 - set1 {4,5} \u5bf9\u79f0\u5dee\u96c6 ^ \u53d6\u96c6\u5408 A \u548c B \u4e2d\u4e0d\u5c5e\u4e8e A&B \u7684\u5143\u7d20 >>> set1 ^ set2 {1,2,4,5}","title":"2.4 \u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5dee\u96c6\u548c\u5bf9\u79f0\u5dee\u96c6\u8fd0\u7b97"},{"location":"programming/python/set/#03","text":"ipython3 \u4e2d\u8f93\u5165 dir(set) \u3002\u63d0\u793a\u96c6\u5408\u6709\u4ee5\u4e0b\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u7528\uff1a >>> dir ( set ) [ 'add' , 'clear' , 'copy' , 'difference' , 'difference_update' , 'discard' , 'intersection' , 'intersection_update' , 'isdisjoint' , 'issubset' , 'issuperset' , 'pop' , 'remove' , 'symmetric_difference' , 'symmetric_difference_update' , 'union' , 'update' ] \u5404\u4e2a\u65b9\u6cd5\u7684\u5177\u4f53\u8bed\u6cd5\u548c\u7ed3\u6784\u53ca\u529f\u80fd\u5982\u4e0b\uff1a \u65b9\u6cd5\u540d \u8bed\u6cd5\u683c\u5f0f \u529f\u80fd \u5b9e\u4f8b add() set1.add() \u5411 set1 \u96c6\u5408\u4e2d\u6dfb\u52a0\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u3001\u5143\u7ec4\u6216\u8005\u5e03\u5c14\u7c7b\u578b >>> set1 = {1,2,3} >>> set1.add((1,2)) >>> set1 {(1, 2), 1, 2, 3} clear() set1.clear() \u6e05\u7a7a set1 \u96c6\u5408\u4e2d\u6240\u6709\u5143\u7d20 >>> set1 = {1,2,3} >>> set1.clear() >>> set1 set() set()\u8868\u793a\u7a7a\u96c6\u5408\uff0c{}\u8868\u793a\u7684\u662f\u7a7a\u5b57\u5178 copy() set2 = set1.copy() \u62f7\u8d1d set1 \u96c6\u5408\u7ed9 set2 >>> set1 = {1,2,3} >>> set2 = set1.copy() >>> set1.add(4) >>> set1 {1, 2, 3, 4} >>> set2 {1, 2, 3} difference() set3 = set1.difference(set2) \u5c06 set1 \u4e2d\u6709\u800c set2 \u6ca1\u6709\u7684\u5143\u7d20\u7ed9 set3 >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set3 = set1.difference(set2) >>> set3 {1, 2} difference_update() set1.difference_update(set2) \u4ece set1 \u4e2d\u5220\u9664\u4e0e set2 \u76f8\u540c\u7684\u5143\u7d20 >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set1.difference_update(set2) >>> set1 {1, 2} discard() set1.discard(elem) \u5220\u9664 set1 \u4e2d\u7684 elem \u5143\u7d20 >>> set1 = {1,2,3} >>> set1.discard(2) >>> set1 {1, 3} >>> set1.discard(4) {1, 3} intersection() set3 = set1.intersection(set2) \u53d6 set1 \u548c set2 \u7684\u4ea4\u96c6\u7ed9 set3 >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set3 = set1.intersection(set2) >>> set3 {3} intersection_update() set1.intersection_update(set2) \u53d6 set1\u548c set2 \u7684\u4ea4\u96c6\uff0c\u5e76\u66f4\u65b0\u7ed9 set1 >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set1.intersection_update(set2) >>> set1 {3} isdisjoint() set1.isdisjoint(set2) \u5224\u65ad set1 \u548c set2 \u662f\u5426\u6ca1\u6709\u4ea4\u96c6\uff0c\u6709\u4ea4\u96c6\u8fd4\u56de False\uff1b\u6ca1\u6709\u4ea4\u96c6\u8fd4\u56de True >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set1.isdisjoint(set2) False issubset() set1.issubset(set2) \u5224\u65ad set1 \u662f\u5426\u662f set2 \u7684\u5b50\u96c6 >>> set1 = {1,2,3} >>> set2 = {1,2} >>> set1.issubset(set2) False issuperset() set1.issuperset(set2) \u5224\u65ad set2 \u662f\u5426\u662f set1 \u7684\u5b50\u96c6 >>> set1 = {1,2,3} >>> set2 = {1,2} >>> set1.issuperset(set2) True pop() a = set1.pop() \u53d6 set1 \u4e2d\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u8d4b\u503c\u7ed9 a >>> set1 = {1,2,3} >>> a = set1.pop() >>> set1{2,3} >>> a1 remove() set1.remove(elem) \u79fb\u9664 set1 \u4e2d\u7684 elem \u5143\u7d20 >>> set1 = {1,2,3} >>> set1.remove(2) >>> set1 {1, 3} >>> set1.remove(4) Traceback (most recent call last): File \" \", line 1, in set1.remove(4)KeyError: 4 symmetric_difference() set3 = set1.symmetric_difference(set2) \u53d6 set1 \u548c set2 \u4e2d\u4e92\u4e0d\u76f8\u540c\u7684\u5143\u7d20\uff0c\u7ed9 set3 >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set3 = set1.symmetric_difference(set2) >>> set3 {1, 2, 4} symmetric_difference_update() set1.symmetric_difference_update(set2) \u53d6 set1 \u548c set2 \u4e2d\u4e92\u4e0d\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5e76\u66f4\u65b0\u7ed9 set1 >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set1.symmetric_difference_update(set2) >>> set1 {1, 2, 4} union() set3 = set1.union(set2) \u53d6 set1 \u548c set2 \u7684\u5e76\u96c6\uff0c\u8d4b\u7ed9 set3 >>> set1 = {1,2,3} >>> set2 = {3,4} >>> set3=set1.union(set2) >>> set3 {1, 2, 3, 4} update() set1.update(elem) \u6dfb\u52a0\u5217\u8868\u6216\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u5230 set1 >>> set1 = {1,2,3} >>> set1.update([3,4]) >>> set1 {1,2,3,4}","title":"03. \u96c6\u5408\u7684\u65b9\u6cd5"},{"location":"programming/python/string/","text":"\u5b57\u7b26\u4e32 01. \u5b57\u7b26\u4e32\u5b9a\u4e49 \u5b57\u7b26\u4e32 \u5c31\u662f \u4e00\u4e32\u5b57\u7b26 \uff0c\u662f\u7f16\u7a0b\u8bed\u8a00\u4e2d\u8868\u793a\u6587\u672c\u7684\u6570\u636e\u7c7b\u578b \u5728 Python \u4e2d\u53ef\u4ee5\u4f7f\u7528 \u4e00\u5bf9\u53cc\u5f15\u53f7 \" \u6216\u8005 \u4e00\u5bf9\u5355\u5f15\u53f7 ' \u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32 \u867d\u7136\u53ef\u4ee5\u4f7f\u7528 \\\" \u6216\u8005 \\' \u505a\u5b57\u7b26\u4e32\u7684\u8f6c\u4e49\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff1a \u5982\u679c\u5b57\u7b26\u4e32\u5185\u90e8\u9700\u8981\u4f7f\u7528 \" \uff0c\u53ef\u4ee5\u4f7f\u7528 ' \u5b9a\u4e49\u5b57\u7b26\u4e32 \u5982\u679c\u5b57\u7b26\u4e32\u5185\u90e8\u9700\u8981\u4f7f\u7528 ' \uff0c\u53ef\u4ee5\u4f7f\u7528 \" \u5b9a\u4e49\u5b57\u7b26\u4e32 \u53ef\u4ee5\u4f7f\u7528 \u7d22\u5f15 \u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d \u6307\u5b9a\u4f4d\u7f6e\u7684\u5b57\u7b26 \uff0c\u7d22\u5f15\u8ba1\u6570\u4ece 0 \u5f00\u59cb \u4e5f\u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u904d\u5386 \u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e00\u4e2a\u5b57\u7b26 string = \"hello python\" 1.1 \u5b57\u7b26\u4e32\u7d22\u5f15 Python \u8bbf\u95ee\u5b50\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u4f7f\u7528\u65b9\u62ec\u53f7 [] \u6765\u622a\u53d6\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u7684\u622a\u53d6\u7684\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a \u53d8\u91cf [ \u5934\u4e0b\u6807 : \u5c3e\u4e0b\u6807 ] \u7d22\u5f15\u503c\u4ee5 0 \u4e3a\u5f00\u59cb\u503c\uff0c -1 \u4e3a\u4ece\u672b\u5c3e\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002 >>> var1 = \"hello python\" var2 = \"helloworld\" print ( var1 [ 0 ]) print ( var2 [ 1 : 5 ]) <<< h ello 02. \u5b57\u7b26\u4e32\u65b9\u6cd5 \u5728pycharm\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32\u53d8\u91cf \u8f93\u5165 \u53d8\u91cf\u540d. pycharm\u4f1a\u63d0\u793a\u80fd\u591f\u4f7f\u7528\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a In [ 1 ]: hello_str . hello_str . capitalize hello_str . isidentifier hello_str . rindex hello_str . casefold hello_str . islower hello_str . rjust hello_str . center hello_str . isnumeric hello_str . rpartition hello_str . count hello_str . isprintable hello_str . rsplit hello_str . encode hello_str . isspace hello_str . rstrip hello_str . endswith hello_str . istitle hello_str . split hello_str . expandtabs hello_str . isupper hello_str . splitlines hello_str . find hello_str . join hello_str . startswith hello_str . format hello_str . ljust hello_str . strip hello_str . format_map hello_str . lower hello_str . swapcase hello_str . index hello_str . lstrip hello_str . title hello_str . isalnum hello_str . maketrans hello_str . translate hello_str . isalpha hello_str . partition hello_str . upper hello_str . isdecimal hello_str . replace hello_str . zfill hello_str . isdigit hello_str . rfind 2.1 \u5224\u65ad\u7c7b\u578b -9 \u65b9\u6cd5 \u8bf4\u660e string.isspace() \u5982\u679c string \u4e2d\u53ea\u5305\u542b\u7a7a\u683c\u548c\u8f6c\u4e49\u7b26\uff0c\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56deFlase string.isalnum() \u5982\u679c string \u81f3\u5c11\u6709\u4e00\u4e2a\u5b57\u7b26\u5e76\u4e14\u6240\u6709\u5b57\u7b26\u90fd\u662f\u5b57\u6bcd\u6216\u6570\u5b57\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56deFlase string.isalpha() \u5982\u679c string \u81f3\u5c11\u6709\u4e00\u4e2a\u5b57\u7b26\u5e76\u4e14\u6240\u6709\u5b57\u7b26\u90fd\u662f\u5b57\u6bcd\u5219\u8fd4\u56de True string.isdecimal() \u5982\u679c string \u53ea\u5305\u542b\u6570\u5b57\u5219\u8fd4\u56de True\uff0c\u5168\u89d2\u6570\u5b57 string.isdigit() \u5982\u679c string \u53ea\u5305\u542b\u6570\u5b57\u5219\u8fd4\u56de True\uff0c\u5168\u89d2\u6570\u5b57\u3001\u2474\u3001\\u00b2 string.isnumeric() \u5982\u679c string \u53ea\u5305\u542b\u6570\u5b57\u5219\u8fd4\u56de True\uff0c\u5168\u89d2\u6570\u5b57\uff0c\u6c49\u5b57\u6570\u5b57 string.istitle() \u5982\u679c string \u662f\u6807\u9898\u5316\u7684(\u6bcf\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u5927\u5199)\u5219\u8fd4\u56de True string.islower() \u5982\u679c string \u4e2d\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u533a\u5206\u5927\u5c0f\u5199\u7684\u5b57\u7b26\uff0c\u5e76\u4e14\u6240\u6709\u8fd9\u4e9b(\u533a\u5206\u5927\u5c0f\u5199\u7684)\u5b57\u7b26\u90fd\u662f\u5c0f\u5199\uff0c\u5219\u8fd4\u56de True string.isupper() \u5982\u679c string \u4e2d\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u533a\u5206\u5927\u5c0f\u5199\u7684\u5b57\u7b26\uff0c\u5e76\u4e14\u6240\u6709\u8fd9\u4e9b(\u533a\u5206\u5927\u5c0f\u5199\u7684)\u5b57\u7b26\u90fd\u662f\u5927\u5199\uff0c\u5219\u8fd4\u56de True \u5224\u65ad\u7c7b\u578b\u6f14\u793a\u5b9e\u4f8b 2.2 \u67e5\u627e\u548c\u66ff\u6362 - 7 \u65b9\u6cd5 \u8bf4\u660e string.startswith(str) \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u662f\u4ee5 str \u5f00\u5934\uff0c\u662f\u5219\u8fd4\u56de True string.endswith(str) \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u662f\u4ee5 str \u7ed3\u675f\uff0c\u662f\u5219\u8fd4\u56de True string.find(str, start=0, end=len(string)) \u68c0\u6d4b str \u662f\u5426\u5305\u542b\u5728 string \u4e2d\uff0c\u5982\u679c start \u548c end \u6307\u5b9a\u8303\u56f4\uff0c\u5219\u68c0\u67e5\u662f\u5426\u5305\u542b\u5728\u6307\u5b9a\u8303\u56f4\u5185\uff0c\u5982\u679c\u662f\u8fd4\u56de\u5f00\u59cb\u7684\u7d22\u5f15\u503c\uff0c\u5426\u5219\u8fd4\u56de -1 string.rfind(str, start=0, end=len(string)) \u4ece\u53f3\u5f00\u59cb\u67e5\u627e\uff0c\u8fd4\u56de\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u5339\u914d\u9879\u5219\u8fd4\u56de-1 string.index(str, start=0, end=len(string)) \u8ddf find() \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u5982\u679c str \u4e0d\u5728 string \u4f1a\u62a5\u9519 string.rindex(str, start=0, end=len(string)) \u7c7b\u4f3c\u4e8e index()\uff0c\u4e0d\u8fc7\u662f\u4ece\u53f3\u8fb9\u5f00\u59cb\uff0c\u8fd4\u56de\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u5339\u914d\u4f1a\u62a5\u9519 string.replace(old_str, new_str, num=string.count(old)) \u628a string \u4e2d\u7684 old_str \u66ff\u6362\u6210 new_str\uff0c\u5982\u679c num \u6307\u5b9a\uff0c\u5219\u66ff\u6362\u4e0d\u8d85\u8fc7 num \u6b21 \u67e5\u627e\u548c\u66ff\u6362\u6f14\u793a\u5b9e\u4f8b 2.3 \u5927\u5c0f\u5199\u8f6c\u6362 - 5 \u65b9\u6cd5 \u8bf4\u660e string.capitalize() \u628a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5927\u5199,\u5176\u4f59\u90e8\u5206\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u9996\u5b57\u7b26\u975e\u5b57\u6bcd\uff0c\u5269\u4f59\u90e8\u5206\u8f6c\u6362\u4e3a\u5c0f\u5199 string.title() \u628a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199,\u975e\u5b57\u6bcd\u540e\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5c06\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd string.lower() \u8f6c\u6362 string \u4e2d\u6240\u6709\u5927\u5199\u5b57\u7b26\u4e3a\u5c0f\u5199 string.upper() \u8f6c\u6362 string \u4e2d\u7684\u5c0f\u5199\u5b57\u6bcd\u4e3a\u5927\u5199 string.swapcase() \u7ffb\u8f6c string \u4e2d\u7684\u5927\u5c0f\u5199 \u5927\u5c0f\u5199\u8f6c\u6362\u6f14\u793a\u5b9e\u4f8b 2.4 \u6587\u672c\u5bf9\u9f50 - 3 \u65b9\u6cd5 \u8bf4\u660e string.ljust(width) \u8fd4\u56de\u4e00\u4e2a\u539f\u5b57\u7b26\u4e32\u5de6\u5bf9\u9f50\uff0c\u5e76\u4f7f\u7528\u7a7a\u683c\u586b\u5145\u81f3\u957f\u5ea6 width \u7684\u65b0\u5b57\u7b26\u4e32 string.rjust(width) \u8fd4\u56de\u4e00\u4e2a\u539f\u5b57\u7b26\u4e32\u53f3\u5bf9\u9f50\uff0c\u5e76\u4f7f\u7528\u7a7a\u683c\u586b\u5145\u81f3\u957f\u5ea6 width \u7684\u65b0\u5b57\u7b26\u4e32 string.center(width) \u8fd4\u56de\u4e00\u4e2a\u539f\u5b57\u7b26\u4e32\u5c45\u4e2d\uff0c\u5e76\u4f7f\u7528\u7a7a\u683c\u586b\u5145\u81f3\u957f\u5ea6 width \u7684\u65b0\u5b57\u7b26\u4e32 \u6587\u672c\u5bf9\u9f50\u6f14\u793a\u5b9e\u4f8b 2.5 \u53bb\u9664\u7a7a\u767d\u5b57\u7b26 - 3 \u65b9\u6cd5 \u8bf4\u660e string.lstrip() \u622a\u6389 string \u5de6\u8fb9\uff08\u5f00\u59cb\uff09\u7684\u7a7a\u767d\u5b57\u7b26,\u5305\u62ec\u7a7a\u683c\uff0c\u6362\u884c\u7b26\uff0c\u56de\u8f66\u7b26\uff0c\u5236\u8868\u7b26 string.rstrip() \u622a\u6389 string \u53f3\u8fb9\uff08\u672b\u5c3e\uff09\u7684\u7a7a\u767d\u5b57\u7b26 string.strip() \u622a\u6389 string \u5de6\u53f3\u4e24\u8fb9\u7684\u7a7a\u767d\u5b57\u7b26 \u53bb\u9664\u7a7a\u767d\u5b57\u7b26\u6f14\u793a\u5b9e\u4f8b 2.6 \u62c6\u5206\u548c\u8fde\u63a5 - 5 \u65b9\u6cd5 \u8bf4\u660e string.partition(str) \u628a\u5b57\u7b26\u4e32 string \u5206\u6210\u4e00\u4e2a 3 \u5143\u7d20\u7684\u5143\u7ec4 (str\u524d\u9762, str, str\u540e\u9762) string.rpartition(str) \u7c7b\u4f3c\u4e8e partition() \u65b9\u6cd5\uff0c\u4e0d\u8fc7\u662f\u4ece\u53f3\u8fb9\u5f00\u59cb\u67e5\u627e string.split(str=\"\", num) \u4ee5 str \u4e3a\u5206\u9694\u7b26\u62c6\u5206 string\uff0c\u5982\u679c num \u6709\u6307\u5b9a\u503c\uff0c\u5219\u4ec5\u5206\u9694 num + 1 \u4e2a\u5b50\u5b57\u7b26\u4e32\uff0cstr \u9ed8\u8ba4\u5305\u542b \u2018,\u2019, \u2018\u2019 \u548c\u7a7a\u683c string.splitlines() \u6309\u7167\u884c(\u2018,\u2019\u2018,\u2019\u2019)\u5206\u9694\uff0c\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5404\u884c\u4f5c\u4e3a\u5143\u7d20\u7684\u5217\u8868 string.join(seq) \u4ee5 string \u4f5c\u4e3a\u5206\u9694\u7b26\uff0c\u5c06 seq \u4e2d\u6240\u6709\u7684\u5143\u7d20\uff08\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff09\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 \u62c6\u5206\u548c\u8fde\u63a5\u6f14\u793a\u5b9e\u4f8b 03. \u683c\u5f0f\u5316\u8f93\u51fa 3.1 %\u683c\u5f0f\u5316\u8f93\u51fa Python \u652f\u6301\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8f93\u51fa \u3002\u57fa\u672c\u7684\u7528\u6cd5\u662f\u5c06\u4e00\u4e2a\u503c\u63d2\u5165\u5230\u4e00\u4e2a\u6709\u5b57\u7b26\u4e32\u683c\u5f0f\u7b26 %s \u7684\u5b57\u7b26\u4e32\u4e2d\u3002 print ( \"\u6211\u7684\u540d\u5b57\u53eb %s \uff0c\u6211\u7684\u5e74\u9f84\u662f %d \u5c81\" % ( \"\u5c0f\u660e\" , 18 )) >>> \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u660e \uff0c \u6211\u7684\u5e74\u9f84\u662f18\u5c81 \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u7b26\u53f7\uff1a \u7b26 \u53f7 \u63cf\u8ff0 %c \u683c\u5f0f\u5316\u5b57\u7b26\u53ca\u5176ASCII\u7801 %s \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 %d \u683c\u5f0f\u5316\u6574\u6570 %u \u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u6574\u578b %o \u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u516b\u8fdb\u5236\u6570 %x \u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u5341\u516d\u8fdb\u5236\u6570 %X \u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u5341\u516d\u8fdb\u5236\u6570\uff08\u5927\u5199\uff09 %f \u683c\u5f0f\u5316\u6d6e\u70b9\u6570\u5b57\uff0c\u53ef\u6307\u5b9a\u5c0f\u6570\u70b9\u540e\u7684\u7cbe\u5ea6 %e \u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f\u5316\u6d6e\u70b9\u6570 %E \u4f5c\u7528\u540c%e\uff0c\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f\u5316\u6d6e\u70b9\u6570 %g %f\u548c%e\u7684\u7b80\u5199 %G %f \u548c %E \u7684\u7b80\u5199 %p \u7528\u5341\u516d\u8fdb\u5236\u6570\u683c\u5f0f\u5316\u53d8\u91cf\u7684\u5730\u5740 3.2 f-string\u5b57\u9762\u91cf\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 f-string \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4ee5 f \u5f00\u5934\uff0c\u540e\u9762\u8ddf\u7740\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u4e2d\u7684\u8868\u8fbe\u5f0f\u7528\u5927\u62ec\u53f7 {} \u5305\u8d77\u6765\uff0c\u5b83\u4f1a\u5c06\u53d8\u91cf\u6216\u8868\u8fbe\u5f0f\u8ba1\u7b97\u540e\u7684\u503c\u66ff\u6362\u8fdb\u53bb\uff0c\u5b9e\u4f8b\u5982\u4e0b\uff1a name = \"\u5c0f\u660e\" age = 18 print ( f \"\u6211\u7684\u540d\u5b57\u53eb { name } \" ) # \u66ff\u6362\u53d8\u91cf >>>> \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u660e print ( f \"\u6211\u7684\u5e74\u9f84\u662f { age + 5 } \" ) # \u4f7f\u7528\u8868\u8fbe\u5f0f >>> \u6211\u7684\u5e74\u9f84\u662f23 w = { \"name\" : \"\u5c0f\u660e\" , \"age\" : 18 } print ( f '\u6211\u7684\u540d\u5b57\u53eb { w [ \"name\" ] } ,\u6211\u7684\u5e74\u9f84\u662f { w [ \"age\" ] + 5 } ' ) # \u4ee5\u5b57\u5178\u7684key\u66ff\u6362\u503c >>> \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u660e \uff0c \u6211\u7684\u5e74\u9f84\u662f23 3.3 format\u51fd\u6570 \u4ecepython2.6\u5f00\u59cb\u65b0\u589e\u7684 str.format \u51fd\u6570\uff0c\u589e\u5f3a\u4e86\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u7684\u529f\u80fd\u3002 \u57fa\u672c\u8bed\u6cd5\u662f\u901a\u8fc7 {} \u548c : \u6765\u4ee3\u66ff\u4ee5\u524d\u7684 % format\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u4e0d\u9650\u4e2a\u53c2\u6570\uff0c\u4f4d\u7f6e\u53ef\u4ee5\u4e0d\u6309\u987a\u5e8f.\u6f14\u793a\u5982\u4e0b: # \u4e0d\u6307\u5b9a\u4f4d\u7f6e\uff0c\u6309\u9ed8\u8ba4\u987a\u5e8f name = \"\u5c0f\u660e\" age = 18 print ( \"\u6211\u7684\u540d\u5b57\u53eb\u53eb {} , \u6211\u7684\u5e74\u9f84\u662f {} \u5c81\" . format ( name , age )) >>> \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u660e \uff0c \u6211\u7684\u5e74\u9f84\u662f18\u5c81 # \u8bbe\u7f6e\u6307\u5b9a\u4f4d\u7f6e print ( \" {0} , {1} \" . format ( name , age )) >>> \u5c0f\u660e , 18 # \u8bbe\u7f6e\u6307\u5b9a\u4f4d\u7f6e\uff0c\u591a\u4e2a\u53c2\u6570 print ( \" {1} , {0} , {1} \" . format ( name , age )) >>> 18 , \u5c0f\u660e , 18 \u4f20\u9012\u53c2\u6570\u683c\u5f0f\u8f93\u51fa\uff1a # \u901a\u8fc7\u5173\u952e\u5b57\u4f20\u53c2 print ( \" {name}{age} \" . format ( name = \"\u5c0f\u534e\" , age = 18 )) >>> \u5c0f\u534e18 # \u901a\u8fc7\u4e0b\u6807\u4f20\u53c2 tuple1 = ( \"\u5c0f\u660e\" , 18 ) print ( \" {0[0]}{0[1]} \" . format ( tuple1 )) >>> \u5c0f\u660e18 list1 = [ \"\u5c0f\u660e\" , 18 ] print ( \" {0[0]}{0[1]} \" . format ( list1 )) >>> \u5c0f\u660e18 dict1 = { \"name\" : \"\u5c0f\u660e\" , \"age\" : 19 } print ( \" {0[name]}{0[age]} \" . format ( ** dict1 )) >>> \u5c0f\u660e19 \u901a\u8fc7\u5bf9\u8c61\u5c5e\u6027\u4f20\u9012\uff1a class AssignValue ( object ): def __init__ ( self , value ): self . value = value my_value = AssignValue ( 6 ) print ( 'value \u4e3a: {0.value} ' . format ( my_value )) # \"0\" \u662f\u53ef\u9009\u7684 \u683c\u5f0f\u9650\u5b9a\u7b26\uff1a ^ , < , > \u5206\u522b\u662f\u5c45\u4e2d\u3001\u5de6\u5bf9\u9f50\u3001\u53f3\u5bf9\u9f50\uff0c\u540e\u9762\u5e26\u5bbd\u5ea6\uff1b : \u53f7\u540e\u9762\u5e26\u586b\u5145\u7684\u5b57\u7b26\uff0c\u53ea\u80fd\u662f\u4e00\u4e2a\u5b57\u7b26\uff0c\u4e0d\u6307\u5b9a\u5219\u9ed8\u8ba4\u662f\u7528\u7a7a\u683c\u586b\u5145\uff1b + \u8868\u793a\u5728\u6b63\u6570\u524d\u663e\u793a + \uff0c\u8d1f\u6570\u524d\u663e\u793a - \uff1b \uff08\u7a7a\u683c\uff09 \u8868\u793a\u5728\u6b63\u6570\u524d\u52a0\u7a7a\u683c\uff1b b \u3001 d \u3001 o \u3001 x \u5206\u522b\u662f\u4e8c\u8fdb\u5236\u3001\u5341\u8fdb\u5236\u3001\u516b\u8fdb\u5236\u3001\u5341\u516d\u8fdb\u5236\uff1b print ( \" {:*>10} \" . format ( \"9527\" )) # \u4ee5*\u586b\u5145\uff0c\u53f3\u5bf9\u9f50\uff0c\u957f\u5ea610 >>> ****** 9527 print ( \" {:^10} \" . format ( \"good\" )) # \u4e0d\u6307\u5b9a\u586b\u5145\u5b57\u7b26\uff0c\u5c45\u4e2d\u5bf9\u9f50\uff0c\u957f\u5ea610 >>> good print ( \" {:0=30} \" . format ( 1889 )) # 0\u586b\u5145\uff0c\u957f\u5ea630\uff0c\u53ea\u6709\u5728\u5b9a\u4e49int\u7c7b\u578b\u65f6\u4f7f\u7528= >>> 000000000000000000000000001889 print ( \" {:+10} , {:+10} \" . format ( 909 , - 3.14 )) # +\u9ed8\u8ba4\u663e\u793a\u6570\u636e\u6b63\u8d1f\uff0c\u524d\u9762\u52a0+-\u53f7\uff0c\u957f\u5ea610 >>> + 909 , - 3.14 \u6570\u5b57\u683c\u5f0f\u5316\uff1a \u4e0b\u9762\u5c55\u793a\u4e86\u6570\u5b57\u683c\u5f0f\u5316\u7684\u65b9\u6cd5\uff0c:\u540e\u9762\u8ddf\u4e0a\u6570\u503c\u4f4d\u6570\u3002\u5b9a\u4e49\u65b9\u6cd5\u548c%\u65b9\u6cd5\u7c7b\u4f3c print ( \" {:.2f} \" . format ( 3.1495926 )) # \u56db\u820d\u4e94\u5165\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570 >>> 3.15 \u6570\u5b57 \u683c\u5f0f \u8f93\u51fa \u63cf\u8ff0 3.1415926 {:.2f} 3.14 \u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d 3.1415926 {:+.2f} +3.14 \u5e26\u7b26\u53f7\u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d -1 {:+.2f} -1.00 \u5e26\u7b26\u53f7\u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d 2.71828 {:.0f} 3 \u4e0d\u5e26\u5c0f\u6570 5 {:0>2d} 05 \u6570\u5b57\u8865\u96f6 (\u586b\u5145\u5de6\u8fb9, \u5bbd\u5ea6\u4e3a2) 5 {:x<4d} 5xxx \u6570\u5b57\u8865x (\u586b\u5145\u53f3\u8fb9, \u5bbd\u5ea6\u4e3a4) 10 {:x<4d} 10xx \u6570\u5b57\u8865x (\u586b\u5145\u53f3\u8fb9, \u5bbd\u5ea6\u4e3a4) 1000000 {:,} 1,000,000 \u4ee5\u9017\u53f7\u5206\u9694\u7684\u6570\u5b57\u683c\u5f0f,\u5343\u4f4d\u5206\u5272 0.25 {:.2%} 25.00% \u767e\u5206\u6bd4\u683c\u5f0f 1000000000 {:.2e} 1.00e+09 \u6307\u6570\u8bb0\u6cd5 13 {:>10d} 13 \u53f3\u5bf9\u9f50 (\u9ed8\u8ba4, \u5bbd\u5ea6\u4e3a10) 13 {:<10d} 13 \u5de6\u5bf9\u9f50 (\u5bbd\u5ea6\u4e3a10) 13 {:^10d} 13 \u4e2d\u95f4\u5bf9\u9f50 (\u5bbd\u5ea6\u4e3a10) 11 '{:b}'.format(11) '{:d}'.format(11) '{:o}'.format(11) '{:x}'.format(11) '{:#x}'.format(11) '{:#X}'.format(11) 1011 11 13 b 0xb 0XB \u8fdb\u5236 \u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26 \u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b + \u5b57\u7b26\u4e32\u8fde\u63a5 >>>a + b 'HelloPython' * \u91cd\u590d\u8f93\u51fa\u5b57\u7b26\u4e32 >>>a * 2 'HelloHello' [] \u901a\u8fc7\u7d22\u5f15\u83b7\u53d6\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26 >>>a[1] 'e' [ : ] \u622a\u53d6\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u90e8\u5206 >>>a[1:4] 'ell' in \u6210\u5458\u8fd0\u7b97\u7b26 - \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u7ed9\u5b9a\u7684\u5b57\u7b26\u8fd4\u56de True >>>\"H\" in a True not in \u6210\u5458\u8fd0\u7b97\u7b26 - \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u4e0d\u5305\u542b\u7ed9\u5b9a\u7684\u5b57\u7b26\u8fd4\u56de True >>>\"M\" not in a True r/R \u539f\u59cb\u5b57\u7b26\u4e32 - \u539f\u59cb\u5b57\u7b26\u4e32\uff1a\u6240\u6709\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u76f4\u63a5\u6309\u7167\u5b57\u9762\u7684\u610f\u601d\u6765\u4f7f\u7528\uff0c\u6ca1\u6709\u8f6c\u4e49\u7279\u6b8a\u6216\u4e0d\u80fd\u6253\u5370\u7684\u5b57\u7b26\u3002 \u539f\u59cb\u5b57\u7b26\u4e32\u9664\u5728\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5f15\u53f7\u524d\u52a0\u4e0a\u5b57\u6bcd\"r\"\uff08\u53ef\u4ee5\u5927\u5c0f\u5199\uff09\u4ee5\u5916\uff0c\u4e0e\u666e\u901a\u5b57\u7b26\u4e32\u6709\u7740\u51e0\u4e4e\u5b8c\u5168\u76f8\u540c\u7684\u8bed\u6cd5\u3002 >>>print r'\\n' \\n >>> print R'\\n'<br>\\n \u8f6c\u4e49\u5b57\u7b26 \u5728\u9700\u8981\u5728\u5b57\u7b26\u4e2d\u4f7f\u7528\u7279\u6b8a\u5b57\u7b26\u65f6\uff0cpython \u7528\u53cd\u659c\u6760 \\ \u8f6c\u4e49\u5b57\u7b26\u3002\u5982\u4e0b\u8868\uff1a \u8f6c\u4e49\u5b57\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b (\u5728\u884c\u5c3e\u65f6) \u7eed\u884c\u7b26 >>> print(\"line1 ... line2 ... line3\")line1 line2 line3>>> \\ \u53cd\u659c\u6760\u7b26\u53f7 >>> print(\"\\\")\\ \\' \u5355\u5f15\u53f7 >>> print('\\'')' \\\" \u53cc\u5f15\u53f7 >>> print(\"\\\"\")\" \\a \u54cd\u94c3 >>> print(\"\\a\")\u6267\u884c\u540e\u7535\u8111\u6709\u54cd\u58f0\u3002 \\b \u9000\u683c(Backspace) >>> print(\"Hello \\b World!\")Hello World! \\000 \u7a7a >>> print(\"\\000\")>>> \\n \u6362\u884c >>> print(\"\\n\")>>> \\v \u7eb5\u5411\u5236\u8868\u7b26 >>> print(\"Hello \\v World!\")Hello World!>>> \\t \u6a2a\u5411\u5236\u8868\u7b26 >>> print(\"Hello \\t World!\")Hello World!>>> \\r \u56de\u8f66\uff0c\u5c06 \\r \u540e\u9762\u7684\u5185\u5bb9\u79fb\u5230\u5b57\u7b26\u4e32\u5f00\u5934\uff0c\u5e76\u9010\u4e00\u66ff\u6362\u5f00\u5934\u90e8\u5206\u7684\u5b57\u7b26\uff0c\u76f4\u81f3\u5c06 \\r \u540e\u9762\u7684\u5185\u5bb9\u5b8c\u5168\u66ff\u6362\u5b8c\u6210\u3002 >>> print(\"Hello\\rWorld!\")World!>>> print('google runoob taobao\\r123456')123456 runoob taobao \\f \u6362\u9875 >>> print(\"Hello \\f World!\")Hello World!>>> \\yyy \u516b\u8fdb\u5236\u6570\uff0cy \u4ee3\u8868 0~7 \u7684\u5b57\u7b26\uff0c\u4f8b\u5982\uff1a\\012 \u4ee3\u8868\u6362\u884c\u3002 >>> print(\"\\110\\145\\154\\154\\157\\40\\127\\157\\162\\154\\144\\41\")Hello World! \\xyy \u5341\u516d\u8fdb\u5236\u6570\uff0c\u4ee5 \\x \u5f00\u5934\uff0cy \u4ee3\u8868\u7684\u5b57\u7b26\uff0c\u4f8b\u5982\uff1a\\x0a \u4ee3\u8868\u6362\u884c >>> print(\"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\\x21\")Hello World! \\other \u5176\u5b83\u7684\u5b57\u7b26\u4ee5\u666e\u901a\u683c\u5f0f\u8f93\u51fa","title":"\u5b57\u7b26\u4e32"},{"location":"programming/python/string/#_1","text":"","title":"\u5b57\u7b26\u4e32"},{"location":"programming/python/string/#01","text":"\u5b57\u7b26\u4e32 \u5c31\u662f \u4e00\u4e32\u5b57\u7b26 \uff0c\u662f\u7f16\u7a0b\u8bed\u8a00\u4e2d\u8868\u793a\u6587\u672c\u7684\u6570\u636e\u7c7b\u578b \u5728 Python \u4e2d\u53ef\u4ee5\u4f7f\u7528 \u4e00\u5bf9\u53cc\u5f15\u53f7 \" \u6216\u8005 \u4e00\u5bf9\u5355\u5f15\u53f7 ' \u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32 \u867d\u7136\u53ef\u4ee5\u4f7f\u7528 \\\" \u6216\u8005 \\' \u505a\u5b57\u7b26\u4e32\u7684\u8f6c\u4e49\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff1a \u5982\u679c\u5b57\u7b26\u4e32\u5185\u90e8\u9700\u8981\u4f7f\u7528 \" \uff0c\u53ef\u4ee5\u4f7f\u7528 ' \u5b9a\u4e49\u5b57\u7b26\u4e32 \u5982\u679c\u5b57\u7b26\u4e32\u5185\u90e8\u9700\u8981\u4f7f\u7528 ' \uff0c\u53ef\u4ee5\u4f7f\u7528 \" \u5b9a\u4e49\u5b57\u7b26\u4e32 \u53ef\u4ee5\u4f7f\u7528 \u7d22\u5f15 \u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d \u6307\u5b9a\u4f4d\u7f6e\u7684\u5b57\u7b26 \uff0c\u7d22\u5f15\u8ba1\u6570\u4ece 0 \u5f00\u59cb \u4e5f\u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u904d\u5386 \u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e00\u4e2a\u5b57\u7b26 string = \"hello python\"","title":"01. \u5b57\u7b26\u4e32\u5b9a\u4e49"},{"location":"programming/python/string/#11","text":"Python \u8bbf\u95ee\u5b50\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u4f7f\u7528\u65b9\u62ec\u53f7 [] \u6765\u622a\u53d6\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u7684\u622a\u53d6\u7684\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a \u53d8\u91cf [ \u5934\u4e0b\u6807 : \u5c3e\u4e0b\u6807 ] \u7d22\u5f15\u503c\u4ee5 0 \u4e3a\u5f00\u59cb\u503c\uff0c -1 \u4e3a\u4ece\u672b\u5c3e\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002 >>> var1 = \"hello python\" var2 = \"helloworld\" print ( var1 [ 0 ]) print ( var2 [ 1 : 5 ]) <<< h ello","title":"1.1 \u5b57\u7b26\u4e32\u7d22\u5f15"},{"location":"programming/python/string/#02","text":"\u5728pycharm\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32\u53d8\u91cf \u8f93\u5165 \u53d8\u91cf\u540d. pycharm\u4f1a\u63d0\u793a\u80fd\u591f\u4f7f\u7528\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a In [ 1 ]: hello_str . hello_str . capitalize hello_str . isidentifier hello_str . rindex hello_str . casefold hello_str . islower hello_str . rjust hello_str . center hello_str . isnumeric hello_str . rpartition hello_str . count hello_str . isprintable hello_str . rsplit hello_str . encode hello_str . isspace hello_str . rstrip hello_str . endswith hello_str . istitle hello_str . split hello_str . expandtabs hello_str . isupper hello_str . splitlines hello_str . find hello_str . join hello_str . startswith hello_str . format hello_str . ljust hello_str . strip hello_str . format_map hello_str . lower hello_str . swapcase hello_str . index hello_str . lstrip hello_str . title hello_str . isalnum hello_str . maketrans hello_str . translate hello_str . isalpha hello_str . partition hello_str . upper hello_str . isdecimal hello_str . replace hello_str . zfill hello_str . isdigit hello_str . rfind","title":"02. \u5b57\u7b26\u4e32\u65b9\u6cd5"},{"location":"programming/python/string/#21-9","text":"\u65b9\u6cd5 \u8bf4\u660e string.isspace() \u5982\u679c string \u4e2d\u53ea\u5305\u542b\u7a7a\u683c\u548c\u8f6c\u4e49\u7b26\uff0c\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56deFlase string.isalnum() \u5982\u679c string \u81f3\u5c11\u6709\u4e00\u4e2a\u5b57\u7b26\u5e76\u4e14\u6240\u6709\u5b57\u7b26\u90fd\u662f\u5b57\u6bcd\u6216\u6570\u5b57\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56deFlase string.isalpha() \u5982\u679c string \u81f3\u5c11\u6709\u4e00\u4e2a\u5b57\u7b26\u5e76\u4e14\u6240\u6709\u5b57\u7b26\u90fd\u662f\u5b57\u6bcd\u5219\u8fd4\u56de True string.isdecimal() \u5982\u679c string \u53ea\u5305\u542b\u6570\u5b57\u5219\u8fd4\u56de True\uff0c\u5168\u89d2\u6570\u5b57 string.isdigit() \u5982\u679c string \u53ea\u5305\u542b\u6570\u5b57\u5219\u8fd4\u56de True\uff0c\u5168\u89d2\u6570\u5b57\u3001\u2474\u3001\\u00b2 string.isnumeric() \u5982\u679c string \u53ea\u5305\u542b\u6570\u5b57\u5219\u8fd4\u56de True\uff0c\u5168\u89d2\u6570\u5b57\uff0c\u6c49\u5b57\u6570\u5b57 string.istitle() \u5982\u679c string \u662f\u6807\u9898\u5316\u7684(\u6bcf\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u5927\u5199)\u5219\u8fd4\u56de True string.islower() \u5982\u679c string \u4e2d\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u533a\u5206\u5927\u5c0f\u5199\u7684\u5b57\u7b26\uff0c\u5e76\u4e14\u6240\u6709\u8fd9\u4e9b(\u533a\u5206\u5927\u5c0f\u5199\u7684)\u5b57\u7b26\u90fd\u662f\u5c0f\u5199\uff0c\u5219\u8fd4\u56de True string.isupper() \u5982\u679c string \u4e2d\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u533a\u5206\u5927\u5c0f\u5199\u7684\u5b57\u7b26\uff0c\u5e76\u4e14\u6240\u6709\u8fd9\u4e9b(\u533a\u5206\u5927\u5c0f\u5199\u7684)\u5b57\u7b26\u90fd\u662f\u5927\u5199\uff0c\u5219\u8fd4\u56de True \u5224\u65ad\u7c7b\u578b\u6f14\u793a\u5b9e\u4f8b","title":"2.1 \u5224\u65ad\u7c7b\u578b -9"},{"location":"programming/python/string/#22-7","text":"\u65b9\u6cd5 \u8bf4\u660e string.startswith(str) \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u662f\u4ee5 str \u5f00\u5934\uff0c\u662f\u5219\u8fd4\u56de True string.endswith(str) \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u662f\u4ee5 str \u7ed3\u675f\uff0c\u662f\u5219\u8fd4\u56de True string.find(str, start=0, end=len(string)) \u68c0\u6d4b str \u662f\u5426\u5305\u542b\u5728 string \u4e2d\uff0c\u5982\u679c start \u548c end \u6307\u5b9a\u8303\u56f4\uff0c\u5219\u68c0\u67e5\u662f\u5426\u5305\u542b\u5728\u6307\u5b9a\u8303\u56f4\u5185\uff0c\u5982\u679c\u662f\u8fd4\u56de\u5f00\u59cb\u7684\u7d22\u5f15\u503c\uff0c\u5426\u5219\u8fd4\u56de -1 string.rfind(str, start=0, end=len(string)) \u4ece\u53f3\u5f00\u59cb\u67e5\u627e\uff0c\u8fd4\u56de\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u5339\u914d\u9879\u5219\u8fd4\u56de-1 string.index(str, start=0, end=len(string)) \u8ddf find() \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u5982\u679c str \u4e0d\u5728 string \u4f1a\u62a5\u9519 string.rindex(str, start=0, end=len(string)) \u7c7b\u4f3c\u4e8e index()\uff0c\u4e0d\u8fc7\u662f\u4ece\u53f3\u8fb9\u5f00\u59cb\uff0c\u8fd4\u56de\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u5339\u914d\u4f1a\u62a5\u9519 string.replace(old_str, new_str, num=string.count(old)) \u628a string \u4e2d\u7684 old_str \u66ff\u6362\u6210 new_str\uff0c\u5982\u679c num \u6307\u5b9a\uff0c\u5219\u66ff\u6362\u4e0d\u8d85\u8fc7 num \u6b21 \u67e5\u627e\u548c\u66ff\u6362\u6f14\u793a\u5b9e\u4f8b","title":"2.2 \u67e5\u627e\u548c\u66ff\u6362 - 7"},{"location":"programming/python/string/#23-5","text":"\u65b9\u6cd5 \u8bf4\u660e string.capitalize() \u628a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5927\u5199,\u5176\u4f59\u90e8\u5206\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u9996\u5b57\u7b26\u975e\u5b57\u6bcd\uff0c\u5269\u4f59\u90e8\u5206\u8f6c\u6362\u4e3a\u5c0f\u5199 string.title() \u628a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199,\u975e\u5b57\u6bcd\u540e\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5c06\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd string.lower() \u8f6c\u6362 string \u4e2d\u6240\u6709\u5927\u5199\u5b57\u7b26\u4e3a\u5c0f\u5199 string.upper() \u8f6c\u6362 string \u4e2d\u7684\u5c0f\u5199\u5b57\u6bcd\u4e3a\u5927\u5199 string.swapcase() \u7ffb\u8f6c string \u4e2d\u7684\u5927\u5c0f\u5199 \u5927\u5c0f\u5199\u8f6c\u6362\u6f14\u793a\u5b9e\u4f8b","title":"2.3 \u5927\u5c0f\u5199\u8f6c\u6362 - 5"},{"location":"programming/python/string/#24-3","text":"\u65b9\u6cd5 \u8bf4\u660e string.ljust(width) \u8fd4\u56de\u4e00\u4e2a\u539f\u5b57\u7b26\u4e32\u5de6\u5bf9\u9f50\uff0c\u5e76\u4f7f\u7528\u7a7a\u683c\u586b\u5145\u81f3\u957f\u5ea6 width \u7684\u65b0\u5b57\u7b26\u4e32 string.rjust(width) \u8fd4\u56de\u4e00\u4e2a\u539f\u5b57\u7b26\u4e32\u53f3\u5bf9\u9f50\uff0c\u5e76\u4f7f\u7528\u7a7a\u683c\u586b\u5145\u81f3\u957f\u5ea6 width \u7684\u65b0\u5b57\u7b26\u4e32 string.center(width) \u8fd4\u56de\u4e00\u4e2a\u539f\u5b57\u7b26\u4e32\u5c45\u4e2d\uff0c\u5e76\u4f7f\u7528\u7a7a\u683c\u586b\u5145\u81f3\u957f\u5ea6 width \u7684\u65b0\u5b57\u7b26\u4e32 \u6587\u672c\u5bf9\u9f50\u6f14\u793a\u5b9e\u4f8b","title":"2.4 \u6587\u672c\u5bf9\u9f50 - 3"},{"location":"programming/python/string/#25-3","text":"\u65b9\u6cd5 \u8bf4\u660e string.lstrip() \u622a\u6389 string \u5de6\u8fb9\uff08\u5f00\u59cb\uff09\u7684\u7a7a\u767d\u5b57\u7b26,\u5305\u62ec\u7a7a\u683c\uff0c\u6362\u884c\u7b26\uff0c\u56de\u8f66\u7b26\uff0c\u5236\u8868\u7b26 string.rstrip() \u622a\u6389 string \u53f3\u8fb9\uff08\u672b\u5c3e\uff09\u7684\u7a7a\u767d\u5b57\u7b26 string.strip() \u622a\u6389 string \u5de6\u53f3\u4e24\u8fb9\u7684\u7a7a\u767d\u5b57\u7b26 \u53bb\u9664\u7a7a\u767d\u5b57\u7b26\u6f14\u793a\u5b9e\u4f8b","title":"2.5 \u53bb\u9664\u7a7a\u767d\u5b57\u7b26 - 3"},{"location":"programming/python/string/#26-5","text":"\u65b9\u6cd5 \u8bf4\u660e string.partition(str) \u628a\u5b57\u7b26\u4e32 string \u5206\u6210\u4e00\u4e2a 3 \u5143\u7d20\u7684\u5143\u7ec4 (str\u524d\u9762, str, str\u540e\u9762) string.rpartition(str) \u7c7b\u4f3c\u4e8e partition() \u65b9\u6cd5\uff0c\u4e0d\u8fc7\u662f\u4ece\u53f3\u8fb9\u5f00\u59cb\u67e5\u627e string.split(str=\"\", num) \u4ee5 str \u4e3a\u5206\u9694\u7b26\u62c6\u5206 string\uff0c\u5982\u679c num \u6709\u6307\u5b9a\u503c\uff0c\u5219\u4ec5\u5206\u9694 num + 1 \u4e2a\u5b50\u5b57\u7b26\u4e32\uff0cstr \u9ed8\u8ba4\u5305\u542b \u2018,\u2019, \u2018\u2019 \u548c\u7a7a\u683c string.splitlines() \u6309\u7167\u884c(\u2018,\u2019\u2018,\u2019\u2019)\u5206\u9694\uff0c\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5404\u884c\u4f5c\u4e3a\u5143\u7d20\u7684\u5217\u8868 string.join(seq) \u4ee5 string \u4f5c\u4e3a\u5206\u9694\u7b26\uff0c\u5c06 seq \u4e2d\u6240\u6709\u7684\u5143\u7d20\uff08\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff09\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 \u62c6\u5206\u548c\u8fde\u63a5\u6f14\u793a\u5b9e\u4f8b","title":"2.6 \u62c6\u5206\u548c\u8fde\u63a5 - 5"},{"location":"programming/python/string/#03","text":"","title":"03. \u683c\u5f0f\u5316\u8f93\u51fa"},{"location":"programming/python/string/#31","text":"Python \u652f\u6301\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8f93\u51fa \u3002\u57fa\u672c\u7684\u7528\u6cd5\u662f\u5c06\u4e00\u4e2a\u503c\u63d2\u5165\u5230\u4e00\u4e2a\u6709\u5b57\u7b26\u4e32\u683c\u5f0f\u7b26 %s \u7684\u5b57\u7b26\u4e32\u4e2d\u3002 print ( \"\u6211\u7684\u540d\u5b57\u53eb %s \uff0c\u6211\u7684\u5e74\u9f84\u662f %d \u5c81\" % ( \"\u5c0f\u660e\" , 18 )) >>> \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u660e \uff0c \u6211\u7684\u5e74\u9f84\u662f18\u5c81 \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u7b26\u53f7\uff1a \u7b26 \u53f7 \u63cf\u8ff0 %c \u683c\u5f0f\u5316\u5b57\u7b26\u53ca\u5176ASCII\u7801 %s \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 %d \u683c\u5f0f\u5316\u6574\u6570 %u \u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u6574\u578b %o \u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u516b\u8fdb\u5236\u6570 %x \u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u5341\u516d\u8fdb\u5236\u6570 %X \u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u5341\u516d\u8fdb\u5236\u6570\uff08\u5927\u5199\uff09 %f \u683c\u5f0f\u5316\u6d6e\u70b9\u6570\u5b57\uff0c\u53ef\u6307\u5b9a\u5c0f\u6570\u70b9\u540e\u7684\u7cbe\u5ea6 %e \u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f\u5316\u6d6e\u70b9\u6570 %E \u4f5c\u7528\u540c%e\uff0c\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f\u5316\u6d6e\u70b9\u6570 %g %f\u548c%e\u7684\u7b80\u5199 %G %f \u548c %E \u7684\u7b80\u5199 %p \u7528\u5341\u516d\u8fdb\u5236\u6570\u683c\u5f0f\u5316\u53d8\u91cf\u7684\u5730\u5740","title":"3.1 %\u683c\u5f0f\u5316\u8f93\u51fa"},{"location":"programming/python/string/#32-f-string","text":"f-string \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4ee5 f \u5f00\u5934\uff0c\u540e\u9762\u8ddf\u7740\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u4e2d\u7684\u8868\u8fbe\u5f0f\u7528\u5927\u62ec\u53f7 {} \u5305\u8d77\u6765\uff0c\u5b83\u4f1a\u5c06\u53d8\u91cf\u6216\u8868\u8fbe\u5f0f\u8ba1\u7b97\u540e\u7684\u503c\u66ff\u6362\u8fdb\u53bb\uff0c\u5b9e\u4f8b\u5982\u4e0b\uff1a name = \"\u5c0f\u660e\" age = 18 print ( f \"\u6211\u7684\u540d\u5b57\u53eb { name } \" ) # \u66ff\u6362\u53d8\u91cf >>>> \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u660e print ( f \"\u6211\u7684\u5e74\u9f84\u662f { age + 5 } \" ) # \u4f7f\u7528\u8868\u8fbe\u5f0f >>> \u6211\u7684\u5e74\u9f84\u662f23 w = { \"name\" : \"\u5c0f\u660e\" , \"age\" : 18 } print ( f '\u6211\u7684\u540d\u5b57\u53eb { w [ \"name\" ] } ,\u6211\u7684\u5e74\u9f84\u662f { w [ \"age\" ] + 5 } ' ) # \u4ee5\u5b57\u5178\u7684key\u66ff\u6362\u503c >>> \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u660e \uff0c \u6211\u7684\u5e74\u9f84\u662f23","title":"3.2 f-string\u5b57\u9762\u91cf\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"},{"location":"programming/python/string/#33-format","text":"\u4ecepython2.6\u5f00\u59cb\u65b0\u589e\u7684 str.format \u51fd\u6570\uff0c\u589e\u5f3a\u4e86\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u7684\u529f\u80fd\u3002 \u57fa\u672c\u8bed\u6cd5\u662f\u901a\u8fc7 {} \u548c : \u6765\u4ee3\u66ff\u4ee5\u524d\u7684 % format\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u4e0d\u9650\u4e2a\u53c2\u6570\uff0c\u4f4d\u7f6e\u53ef\u4ee5\u4e0d\u6309\u987a\u5e8f.\u6f14\u793a\u5982\u4e0b: # \u4e0d\u6307\u5b9a\u4f4d\u7f6e\uff0c\u6309\u9ed8\u8ba4\u987a\u5e8f name = \"\u5c0f\u660e\" age = 18 print ( \"\u6211\u7684\u540d\u5b57\u53eb\u53eb {} , \u6211\u7684\u5e74\u9f84\u662f {} \u5c81\" . format ( name , age )) >>> \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u660e \uff0c \u6211\u7684\u5e74\u9f84\u662f18\u5c81 # \u8bbe\u7f6e\u6307\u5b9a\u4f4d\u7f6e print ( \" {0} , {1} \" . format ( name , age )) >>> \u5c0f\u660e , 18 # \u8bbe\u7f6e\u6307\u5b9a\u4f4d\u7f6e\uff0c\u591a\u4e2a\u53c2\u6570 print ( \" {1} , {0} , {1} \" . format ( name , age )) >>> 18 , \u5c0f\u660e , 18 \u4f20\u9012\u53c2\u6570\u683c\u5f0f\u8f93\u51fa\uff1a # \u901a\u8fc7\u5173\u952e\u5b57\u4f20\u53c2 print ( \" {name}{age} \" . format ( name = \"\u5c0f\u534e\" , age = 18 )) >>> \u5c0f\u534e18 # \u901a\u8fc7\u4e0b\u6807\u4f20\u53c2 tuple1 = ( \"\u5c0f\u660e\" , 18 ) print ( \" {0[0]}{0[1]} \" . format ( tuple1 )) >>> \u5c0f\u660e18 list1 = [ \"\u5c0f\u660e\" , 18 ] print ( \" {0[0]}{0[1]} \" . format ( list1 )) >>> \u5c0f\u660e18 dict1 = { \"name\" : \"\u5c0f\u660e\" , \"age\" : 19 } print ( \" {0[name]}{0[age]} \" . format ( ** dict1 )) >>> \u5c0f\u660e19 \u901a\u8fc7\u5bf9\u8c61\u5c5e\u6027\u4f20\u9012\uff1a class AssignValue ( object ): def __init__ ( self , value ): self . value = value my_value = AssignValue ( 6 ) print ( 'value \u4e3a: {0.value} ' . format ( my_value )) # \"0\" \u662f\u53ef\u9009\u7684 \u683c\u5f0f\u9650\u5b9a\u7b26\uff1a ^ , < , > \u5206\u522b\u662f\u5c45\u4e2d\u3001\u5de6\u5bf9\u9f50\u3001\u53f3\u5bf9\u9f50\uff0c\u540e\u9762\u5e26\u5bbd\u5ea6\uff1b : \u53f7\u540e\u9762\u5e26\u586b\u5145\u7684\u5b57\u7b26\uff0c\u53ea\u80fd\u662f\u4e00\u4e2a\u5b57\u7b26\uff0c\u4e0d\u6307\u5b9a\u5219\u9ed8\u8ba4\u662f\u7528\u7a7a\u683c\u586b\u5145\uff1b + \u8868\u793a\u5728\u6b63\u6570\u524d\u663e\u793a + \uff0c\u8d1f\u6570\u524d\u663e\u793a - \uff1b \uff08\u7a7a\u683c\uff09 \u8868\u793a\u5728\u6b63\u6570\u524d\u52a0\u7a7a\u683c\uff1b b \u3001 d \u3001 o \u3001 x \u5206\u522b\u662f\u4e8c\u8fdb\u5236\u3001\u5341\u8fdb\u5236\u3001\u516b\u8fdb\u5236\u3001\u5341\u516d\u8fdb\u5236\uff1b print ( \" {:*>10} \" . format ( \"9527\" )) # \u4ee5*\u586b\u5145\uff0c\u53f3\u5bf9\u9f50\uff0c\u957f\u5ea610 >>> ****** 9527 print ( \" {:^10} \" . format ( \"good\" )) # \u4e0d\u6307\u5b9a\u586b\u5145\u5b57\u7b26\uff0c\u5c45\u4e2d\u5bf9\u9f50\uff0c\u957f\u5ea610 >>> good print ( \" {:0=30} \" . format ( 1889 )) # 0\u586b\u5145\uff0c\u957f\u5ea630\uff0c\u53ea\u6709\u5728\u5b9a\u4e49int\u7c7b\u578b\u65f6\u4f7f\u7528= >>> 000000000000000000000000001889 print ( \" {:+10} , {:+10} \" . format ( 909 , - 3.14 )) # +\u9ed8\u8ba4\u663e\u793a\u6570\u636e\u6b63\u8d1f\uff0c\u524d\u9762\u52a0+-\u53f7\uff0c\u957f\u5ea610 >>> + 909 , - 3.14 \u6570\u5b57\u683c\u5f0f\u5316\uff1a \u4e0b\u9762\u5c55\u793a\u4e86\u6570\u5b57\u683c\u5f0f\u5316\u7684\u65b9\u6cd5\uff0c:\u540e\u9762\u8ddf\u4e0a\u6570\u503c\u4f4d\u6570\u3002\u5b9a\u4e49\u65b9\u6cd5\u548c%\u65b9\u6cd5\u7c7b\u4f3c print ( \" {:.2f} \" . format ( 3.1495926 )) # \u56db\u820d\u4e94\u5165\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570 >>> 3.15 \u6570\u5b57 \u683c\u5f0f \u8f93\u51fa \u63cf\u8ff0 3.1415926 {:.2f} 3.14 \u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d 3.1415926 {:+.2f} +3.14 \u5e26\u7b26\u53f7\u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d -1 {:+.2f} -1.00 \u5e26\u7b26\u53f7\u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d 2.71828 {:.0f} 3 \u4e0d\u5e26\u5c0f\u6570 5 {:0>2d} 05 \u6570\u5b57\u8865\u96f6 (\u586b\u5145\u5de6\u8fb9, \u5bbd\u5ea6\u4e3a2) 5 {:x<4d} 5xxx \u6570\u5b57\u8865x (\u586b\u5145\u53f3\u8fb9, \u5bbd\u5ea6\u4e3a4) 10 {:x<4d} 10xx \u6570\u5b57\u8865x (\u586b\u5145\u53f3\u8fb9, \u5bbd\u5ea6\u4e3a4) 1000000 {:,} 1,000,000 \u4ee5\u9017\u53f7\u5206\u9694\u7684\u6570\u5b57\u683c\u5f0f,\u5343\u4f4d\u5206\u5272 0.25 {:.2%} 25.00% \u767e\u5206\u6bd4\u683c\u5f0f 1000000000 {:.2e} 1.00e+09 \u6307\u6570\u8bb0\u6cd5 13 {:>10d} 13 \u53f3\u5bf9\u9f50 (\u9ed8\u8ba4, \u5bbd\u5ea6\u4e3a10) 13 {:<10d} 13 \u5de6\u5bf9\u9f50 (\u5bbd\u5ea6\u4e3a10) 13 {:^10d} 13 \u4e2d\u95f4\u5bf9\u9f50 (\u5bbd\u5ea6\u4e3a10) 11 '{:b}'.format(11) '{:d}'.format(11) '{:o}'.format(11) '{:x}'.format(11) '{:#x}'.format(11) '{:#X}'.format(11) 1011 11 13 b 0xb 0XB \u8fdb\u5236","title":"3.3 format\u51fd\u6570"},{"location":"programming/python/string/#_2","text":"\u64cd\u4f5c\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b + \u5b57\u7b26\u4e32\u8fde\u63a5 >>>a + b 'HelloPython' * \u91cd\u590d\u8f93\u51fa\u5b57\u7b26\u4e32 >>>a * 2 'HelloHello' [] \u901a\u8fc7\u7d22\u5f15\u83b7\u53d6\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26 >>>a[1] 'e' [ : ] \u622a\u53d6\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u90e8\u5206 >>>a[1:4] 'ell' in \u6210\u5458\u8fd0\u7b97\u7b26 - \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u7ed9\u5b9a\u7684\u5b57\u7b26\u8fd4\u56de True >>>\"H\" in a True not in \u6210\u5458\u8fd0\u7b97\u7b26 - \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u4e0d\u5305\u542b\u7ed9\u5b9a\u7684\u5b57\u7b26\u8fd4\u56de True >>>\"M\" not in a True r/R \u539f\u59cb\u5b57\u7b26\u4e32 - \u539f\u59cb\u5b57\u7b26\u4e32\uff1a\u6240\u6709\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u76f4\u63a5\u6309\u7167\u5b57\u9762\u7684\u610f\u601d\u6765\u4f7f\u7528\uff0c\u6ca1\u6709\u8f6c\u4e49\u7279\u6b8a\u6216\u4e0d\u80fd\u6253\u5370\u7684\u5b57\u7b26\u3002 \u539f\u59cb\u5b57\u7b26\u4e32\u9664\u5728\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5f15\u53f7\u524d\u52a0\u4e0a\u5b57\u6bcd\"r\"\uff08\u53ef\u4ee5\u5927\u5c0f\u5199\uff09\u4ee5\u5916\uff0c\u4e0e\u666e\u901a\u5b57\u7b26\u4e32\u6709\u7740\u51e0\u4e4e\u5b8c\u5168\u76f8\u540c\u7684\u8bed\u6cd5\u3002 >>>print r'\\n' \\n >>> print R'\\n'<br>\\n","title":"\u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26"},{"location":"programming/python/string/#_3","text":"\u5728\u9700\u8981\u5728\u5b57\u7b26\u4e2d\u4f7f\u7528\u7279\u6b8a\u5b57\u7b26\u65f6\uff0cpython \u7528\u53cd\u659c\u6760 \\ \u8f6c\u4e49\u5b57\u7b26\u3002\u5982\u4e0b\u8868\uff1a \u8f6c\u4e49\u5b57\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b (\u5728\u884c\u5c3e\u65f6) \u7eed\u884c\u7b26 >>> print(\"line1 ... line2 ... line3\")line1 line2 line3>>> \\ \u53cd\u659c\u6760\u7b26\u53f7 >>> print(\"\\\")\\ \\' \u5355\u5f15\u53f7 >>> print('\\'')' \\\" \u53cc\u5f15\u53f7 >>> print(\"\\\"\")\" \\a \u54cd\u94c3 >>> print(\"\\a\")\u6267\u884c\u540e\u7535\u8111\u6709\u54cd\u58f0\u3002 \\b \u9000\u683c(Backspace) >>> print(\"Hello \\b World!\")Hello World! \\000 \u7a7a >>> print(\"\\000\")>>> \\n \u6362\u884c >>> print(\"\\n\")>>> \\v \u7eb5\u5411\u5236\u8868\u7b26 >>> print(\"Hello \\v World!\")Hello World!>>> \\t \u6a2a\u5411\u5236\u8868\u7b26 >>> print(\"Hello \\t World!\")Hello World!>>> \\r \u56de\u8f66\uff0c\u5c06 \\r \u540e\u9762\u7684\u5185\u5bb9\u79fb\u5230\u5b57\u7b26\u4e32\u5f00\u5934\uff0c\u5e76\u9010\u4e00\u66ff\u6362\u5f00\u5934\u90e8\u5206\u7684\u5b57\u7b26\uff0c\u76f4\u81f3\u5c06 \\r \u540e\u9762\u7684\u5185\u5bb9\u5b8c\u5168\u66ff\u6362\u5b8c\u6210\u3002 >>> print(\"Hello\\rWorld!\")World!>>> print('google runoob taobao\\r123456')123456 runoob taobao \\f \u6362\u9875 >>> print(\"Hello \\f World!\")Hello World!>>> \\yyy \u516b\u8fdb\u5236\u6570\uff0cy \u4ee3\u8868 0~7 \u7684\u5b57\u7b26\uff0c\u4f8b\u5982\uff1a\\012 \u4ee3\u8868\u6362\u884c\u3002 >>> print(\"\\110\\145\\154\\154\\157\\40\\127\\157\\162\\154\\144\\41\")Hello World! \\xyy \u5341\u516d\u8fdb\u5236\u6570\uff0c\u4ee5 \\x \u5f00\u5934\uff0cy \u4ee3\u8868\u7684\u5b57\u7b26\uff0c\u4f8b\u5982\uff1a\\x0a \u4ee3\u8868\u6362\u884c >>> print(\"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\\x21\")Hello World! \\other \u5176\u5b83\u7684\u5b57\u7b26\u4ee5\u666e\u901a\u683c\u5f0f\u8f93\u51fa","title":"\u8f6c\u4e49\u5b57\u7b26"},{"location":"programming/python/tuple/","text":"01. \u5143\u7ec4\u7684\u5b9a\u4e49 \u5143\u7ec4\u4e0e\u5217\u8868\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5143\u7d20\u4e0d\u80fd\u4fee\u6539\uff1b \u5143\u7ec4\u4f7f\u7528 () \u5b9a\u4e49\uff0c\u4f7f\u7528 , \u5206\u5272\uff1b \u5143\u7ec4\u7684\u7d22\u5f15\u4ece 0 \u5f00\u59cb tup = ( \"\u5c0f\u660e\" , \"\u5c0f\u5f20\" , \"\u5c0f\u674e\" ) print ( tup ) print ( type ( tup )) >>> ( '\u5c0f\u660e' , '\u5c0f\u5f20' , '\u5c0f\u674e' ) >>> < class ' tuple '> # \u4e0d\u52a0\u62ec\u53f7\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u5143\u7ec4 tup3 = \"a\" , 1.89 , 20 , \"good\" print ( type ( tup3 )) >>> < class ' tuple '> 1.1 \u5b9a\u4e49\u7a7a\u5143\u7ec4 tup = () 1.2 \u5143\u7ec4\u4e2d\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20 \u5143\u7ec4\u4e2d\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u9700\u8981\u5728\u5143\u7d20\u540e\u9762\u52a0 , tup = ( 50 ) print ( type ( tup )) >>> < class ' int '> tup2 = ( 50 ,) print ( type ( tup2 )) >>> < class ' tuple '> 02. \u5143\u7ec4\u7684\u53d6\u503c\u548c\u622a\u53d6 \u56e0\u4e3a\u5143\u7ec4\u4e5f\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u5143\u7ec4\u4e2d\u7684\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u4e5f\u53ef\u4ee5\u622a\u53d6\u7d22\u5f15\u4e2d\u7684\u4e00\u6bb5\u5143\u7d20 2.1 \u5143\u7ec4\u7684\u8bbf\u95ee\u548c\u622a\u53d6 \u5143\u7ec4\u53ef\u4ee5\u4f7f\u7528\u4e0b\u6807\u7d22\u5f15\u6765\u8bbf\u95ee\u5143\u7ec4\u4e2d\u7684\u503c\uff1a tup3 = ( \"\u5c0f\u660e\" , 18 , 1.75 ) print ( tup3 [ 0 ]) print ( tup3 [:]) print ( \"\u6211\u7684\u540d\u5b57\u53eb {} ,\u6211\u7684\u5e74\u9f84\u662f {} \u5c81\" . format ( * tup3 )) >>> \u5c0f\u660e ( '\u5c0f\u660e' , 18 , 1.75 ) \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u660e , \u6211\u7684\u5e74\u9f84\u662f18\u5c81 2.2 \u5143\u7956\u4fee\u6539 \u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u503c\u662f\u4e0d\u5141\u8bb8\u4fee\u6539\u7684\uff0c\u4f46\u53ef\u4ee5\u5bf9\u5143\u7ec4\u8fdb\u884c\u8fde\u63a5\u7ec4\u5408\uff0c\u5982\u4e0b\u5b9e\u4f8b: tup1 = ( 1 , 2 , 3 ) tup2 = ( \"a\" , \"b\" , \"c\" ) # \u901a\u8fc7\u4e0b\u6807\u4fee\u6539\u662f\u975e\u6cd5\u7684 # tup1[0] = 2 # TypeError: 'tuple' object does not support item assignment # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5143\u7ec4 tup3 = tup1 + tup2 print ( tup3 ) >>> ( 1 , 2 , 3 , 'a' , 'b' , 'c' ) tup1 += tup2 print ( tup1 ) >>> ( 1 , 2 , 3 , 'a' , 'b' , 'c' ) 2.3 \u5143\u7ec4\u5220\u9664 \u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u503c\u662f\u4e0d\u5141\u8bb8\u5220\u9664\u7684\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528del\u8bed\u53e5\u6765\u5220\u9664\u6574\u4e2a\u5143\u7ec4\u3002 del\u5173\u952e\u5b57\u672c\u8d28\u4e0a\u662f\u5c06\u5143\u7ec4\u4ece\u5185\u5b58\u4e2d\u5220\u9664\uff0c\u6240\u4ee5\u540e\u7eed\u65e0\u6cd5\u518d\u8c03\u7528 tuple = ( \"hello\" , \"python\" , \"world\" ) print ( tuple ) >>> ( 'hello' , 'python' , 'world' ) del tuple print ( tuple ) >>> NameError : name 'tup' is not defined 03. \u5143\u7ec4\u7684\u8fd0\u7b97 \u4e0e\u5b57\u7b26\u4e32\u4e00\u6837\uff0c\u5143\u7ec4\u4e4b\u95f4\u53ef\u4ee5\u4f7f\u7528 + \u53f7\u548c * \u53f7\u8fdb\u884c\u8fd0\u7b97\u3002\u8fd9\u5c31\u610f\u5473\u7740\u4ed6\u4eec\u53ef\u4ee5\u7ec4\u5408\u548c\u590d\u5236\uff0c\u8fd0\u7b97\u540e\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5143\u7ec4\u3002 Python \u8868\u8fbe\u5f0f \u7ed3\u679c \u63cf\u8ff0 len((1, 2, 3)) 3 \u8ba1\u7b97\u5143\u7d20\u4e2a\u6570 (1, 2, 3) + (4, 5, 6) (1, 2, 3, 4, 5, 6) \u8fde\u63a5 ('Hi!',) * 4 ('Hi!', 'Hi!', 'Hi!', 'Hi!') \u590d\u5236 3 in (1, 2, 3) True \u5143\u7d20\u662f\u5426\u5b58\u5728 for x in (1, 2, 3): print (x,) 1 2 3 \u8fed\u4ee3 tup = ( \"a\" , \"b\" , \"c\" ) print ( len ( tup )) >>> 3 tup = ( \"a\" , \"b\" , \"c\" ) tup1 = ( 1 , 2 , 3 ) tup += tup1 print ( tup ) >>> ( 'a' , 'b' , 'c' , 1 , 2 , 3 ) tup1 = ( 1 , 2 , 3 ) print ( tup1 * 3 ) >>> ( 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 ) tup1 = ( 1 , 2 , 3 ) print ( 3 in tup1 ) >>> True tup1 = ( 1 , 2 , 3 ) for x in tup1 : print ( x ) >>> 1 2 3 04. \u5143\u7ec4\u7684\u5185\u7f6e\u51fd\u6570 Python\u5143\u7ec4\u5305\u542b\u4e86\u4ee5\u4e0b\u5185\u7f6e\u51fd\u6570 \u5e8f\u53f7 \u65b9\u6cd5\u53ca\u63cf\u8ff0 \u5b9e\u4f8b 1 len(tuple)\u8ba1\u7b97\u5143\u7ec4\u5143\u7d20\u4e2a\u6570\u3002 >>> tuple1 = ('Google', 'Runoob', 'Taobao') >>> len(tuple1) 3 2 max(tuple)\u8fd4\u56de\u5143\u7ec4\u4e2d\u5143\u7d20\u6700\u5927\u503c\u3002 >>> tuple2 = ('5', '4', '8') >>> max(tuple2) '8' 3 min(tuple)\u8fd4\u56de\u5143\u7ec4\u4e2d\u5143\u7d20\u6700\u5c0f\u503c\u3002 >>> tuple2 = ('5', '4', '8') >>> min(tuple2) '4' 4 tuple(iterable)\u5c06\u53ef\u8fed\u4ee3\u7cfb\u5217\u8f6c\u6362\u4e3a\u5143\u7ec4\u3002 >>> list1= ['Google', 'Taobao', 'Runoob', 'Baidu'] >>> tuple1=tuple(list1) >>> tuple1 ('Google', 'Taobao', 'Runoob', 'Baidu') 05. \u5143\u7ec4\u7684\u65b9\u6cd5 Python \u6709\u4e24\u4e2a\u53ef\u4ee5\u5728\u5143\u7ec4\u4e0a\u4f7f\u7528\u7684\u5185\u5efa\u65b9\u6cd5: \u65b9\u6cd5 \u63cf\u8ff0 count() \u8fd4\u56de\u5143\u7ec4\u4e2d\u6307\u5b9a\u503c\u51fa\u73b0\u7684\u6b21\u6570\u3002 index() \u5728\u5143\u7ec4\u4e2d\u641c\u7d22\u6307\u5b9a\u7684\u503c\u5e76\u8fd4\u56de\u5b83\u7b2c\u4e00\u6b21\u88ab\u627e\u5230\u7684\u4f4d\u7f6e\u3002 tup1 = ( 1 , 2 , 3 , 1 , 2 , 4 , 5 ) print ( tup1 . count ( 1 )) >>> 2 tup1 = ( 1 , 2 , 3 , 1 , 2 , 4 , 5 ) print ( tup1 . index ( 1 )) >>> 0","title":"\u5143\u7ec4"},{"location":"programming/python/tuple/#01","text":"\u5143\u7ec4\u4e0e\u5217\u8868\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5143\u7d20\u4e0d\u80fd\u4fee\u6539\uff1b \u5143\u7ec4\u4f7f\u7528 () \u5b9a\u4e49\uff0c\u4f7f\u7528 , \u5206\u5272\uff1b \u5143\u7ec4\u7684\u7d22\u5f15\u4ece 0 \u5f00\u59cb tup = ( \"\u5c0f\u660e\" , \"\u5c0f\u5f20\" , \"\u5c0f\u674e\" ) print ( tup ) print ( type ( tup )) >>> ( '\u5c0f\u660e' , '\u5c0f\u5f20' , '\u5c0f\u674e' ) >>> < class ' tuple '> # \u4e0d\u52a0\u62ec\u53f7\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u5143\u7ec4 tup3 = \"a\" , 1.89 , 20 , \"good\" print ( type ( tup3 )) >>> < class ' tuple '>","title":"01. \u5143\u7ec4\u7684\u5b9a\u4e49"},{"location":"programming/python/tuple/#11","text":"tup = ()","title":"1.1 \u5b9a\u4e49\u7a7a\u5143\u7ec4"},{"location":"programming/python/tuple/#12","text":"\u5143\u7ec4\u4e2d\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u9700\u8981\u5728\u5143\u7d20\u540e\u9762\u52a0 , tup = ( 50 ) print ( type ( tup )) >>> < class ' int '> tup2 = ( 50 ,) print ( type ( tup2 )) >>> < class ' tuple '>","title":"1.2 \u5143\u7ec4\u4e2d\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20"},{"location":"programming/python/tuple/#02","text":"\u56e0\u4e3a\u5143\u7ec4\u4e5f\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u5143\u7ec4\u4e2d\u7684\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u4e5f\u53ef\u4ee5\u622a\u53d6\u7d22\u5f15\u4e2d\u7684\u4e00\u6bb5\u5143\u7d20","title":"02. \u5143\u7ec4\u7684\u53d6\u503c\u548c\u622a\u53d6"},{"location":"programming/python/tuple/#21","text":"\u5143\u7ec4\u53ef\u4ee5\u4f7f\u7528\u4e0b\u6807\u7d22\u5f15\u6765\u8bbf\u95ee\u5143\u7ec4\u4e2d\u7684\u503c\uff1a tup3 = ( \"\u5c0f\u660e\" , 18 , 1.75 ) print ( tup3 [ 0 ]) print ( tup3 [:]) print ( \"\u6211\u7684\u540d\u5b57\u53eb {} ,\u6211\u7684\u5e74\u9f84\u662f {} \u5c81\" . format ( * tup3 )) >>> \u5c0f\u660e ( '\u5c0f\u660e' , 18 , 1.75 ) \u6211\u7684\u540d\u5b57\u53eb\u5c0f\u660e , \u6211\u7684\u5e74\u9f84\u662f18\u5c81","title":"2.1 \u5143\u7ec4\u7684\u8bbf\u95ee\u548c\u622a\u53d6"},{"location":"programming/python/tuple/#22","text":"\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u503c\u662f\u4e0d\u5141\u8bb8\u4fee\u6539\u7684\uff0c\u4f46\u53ef\u4ee5\u5bf9\u5143\u7ec4\u8fdb\u884c\u8fde\u63a5\u7ec4\u5408\uff0c\u5982\u4e0b\u5b9e\u4f8b: tup1 = ( 1 , 2 , 3 ) tup2 = ( \"a\" , \"b\" , \"c\" ) # \u901a\u8fc7\u4e0b\u6807\u4fee\u6539\u662f\u975e\u6cd5\u7684 # tup1[0] = 2 # TypeError: 'tuple' object does not support item assignment # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5143\u7ec4 tup3 = tup1 + tup2 print ( tup3 ) >>> ( 1 , 2 , 3 , 'a' , 'b' , 'c' ) tup1 += tup2 print ( tup1 ) >>> ( 1 , 2 , 3 , 'a' , 'b' , 'c' )","title":"2.2 \u5143\u7956\u4fee\u6539"},{"location":"programming/python/tuple/#23","text":"\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u503c\u662f\u4e0d\u5141\u8bb8\u5220\u9664\u7684\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528del\u8bed\u53e5\u6765\u5220\u9664\u6574\u4e2a\u5143\u7ec4\u3002 del\u5173\u952e\u5b57\u672c\u8d28\u4e0a\u662f\u5c06\u5143\u7ec4\u4ece\u5185\u5b58\u4e2d\u5220\u9664\uff0c\u6240\u4ee5\u540e\u7eed\u65e0\u6cd5\u518d\u8c03\u7528 tuple = ( \"hello\" , \"python\" , \"world\" ) print ( tuple ) >>> ( 'hello' , 'python' , 'world' ) del tuple print ( tuple ) >>> NameError : name 'tup' is not defined","title":"2.3 \u5143\u7ec4\u5220\u9664"},{"location":"programming/python/tuple/#03","text":"\u4e0e\u5b57\u7b26\u4e32\u4e00\u6837\uff0c\u5143\u7ec4\u4e4b\u95f4\u53ef\u4ee5\u4f7f\u7528 + \u53f7\u548c * \u53f7\u8fdb\u884c\u8fd0\u7b97\u3002\u8fd9\u5c31\u610f\u5473\u7740\u4ed6\u4eec\u53ef\u4ee5\u7ec4\u5408\u548c\u590d\u5236\uff0c\u8fd0\u7b97\u540e\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5143\u7ec4\u3002 Python \u8868\u8fbe\u5f0f \u7ed3\u679c \u63cf\u8ff0 len((1, 2, 3)) 3 \u8ba1\u7b97\u5143\u7d20\u4e2a\u6570 (1, 2, 3) + (4, 5, 6) (1, 2, 3, 4, 5, 6) \u8fde\u63a5 ('Hi!',) * 4 ('Hi!', 'Hi!', 'Hi!', 'Hi!') \u590d\u5236 3 in (1, 2, 3) True \u5143\u7d20\u662f\u5426\u5b58\u5728 for x in (1, 2, 3): print (x,) 1 2 3 \u8fed\u4ee3 tup = ( \"a\" , \"b\" , \"c\" ) print ( len ( tup )) >>> 3 tup = ( \"a\" , \"b\" , \"c\" ) tup1 = ( 1 , 2 , 3 ) tup += tup1 print ( tup ) >>> ( 'a' , 'b' , 'c' , 1 , 2 , 3 ) tup1 = ( 1 , 2 , 3 ) print ( tup1 * 3 ) >>> ( 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 ) tup1 = ( 1 , 2 , 3 ) print ( 3 in tup1 ) >>> True tup1 = ( 1 , 2 , 3 ) for x in tup1 : print ( x ) >>> 1 2 3","title":"03. \u5143\u7ec4\u7684\u8fd0\u7b97"},{"location":"programming/python/tuple/#04","text":"Python\u5143\u7ec4\u5305\u542b\u4e86\u4ee5\u4e0b\u5185\u7f6e\u51fd\u6570 \u5e8f\u53f7 \u65b9\u6cd5\u53ca\u63cf\u8ff0 \u5b9e\u4f8b 1 len(tuple)\u8ba1\u7b97\u5143\u7ec4\u5143\u7d20\u4e2a\u6570\u3002 >>> tuple1 = ('Google', 'Runoob', 'Taobao') >>> len(tuple1) 3 2 max(tuple)\u8fd4\u56de\u5143\u7ec4\u4e2d\u5143\u7d20\u6700\u5927\u503c\u3002 >>> tuple2 = ('5', '4', '8') >>> max(tuple2) '8' 3 min(tuple)\u8fd4\u56de\u5143\u7ec4\u4e2d\u5143\u7d20\u6700\u5c0f\u503c\u3002 >>> tuple2 = ('5', '4', '8') >>> min(tuple2) '4' 4 tuple(iterable)\u5c06\u53ef\u8fed\u4ee3\u7cfb\u5217\u8f6c\u6362\u4e3a\u5143\u7ec4\u3002 >>> list1= ['Google', 'Taobao', 'Runoob', 'Baidu'] >>> tuple1=tuple(list1) >>> tuple1 ('Google', 'Taobao', 'Runoob', 'Baidu')","title":"04. \u5143\u7ec4\u7684\u5185\u7f6e\u51fd\u6570"},{"location":"programming/python/tuple/#05","text":"Python \u6709\u4e24\u4e2a\u53ef\u4ee5\u5728\u5143\u7ec4\u4e0a\u4f7f\u7528\u7684\u5185\u5efa\u65b9\u6cd5: \u65b9\u6cd5 \u63cf\u8ff0 count() \u8fd4\u56de\u5143\u7ec4\u4e2d\u6307\u5b9a\u503c\u51fa\u73b0\u7684\u6b21\u6570\u3002 index() \u5728\u5143\u7ec4\u4e2d\u641c\u7d22\u6307\u5b9a\u7684\u503c\u5e76\u8fd4\u56de\u5b83\u7b2c\u4e00\u6b21\u88ab\u627e\u5230\u7684\u4f4d\u7f6e\u3002 tup1 = ( 1 , 2 , 3 , 1 , 2 , 4 , 5 ) print ( tup1 . count ( 1 )) >>> 2 tup1 = ( 1 , 2 , 3 , 1 , 2 , 4 , 5 ) print ( tup1 . index ( 1 )) >>> 0","title":"05. \u5143\u7ec4\u7684\u65b9\u6cd5"},{"location":"programming/python/variable/","text":"\u53d8\u91cf\u6570\u636e\u7c7b\u578b python\u53d8\u91cf\u7c7b\u578b \u53d8\u91cf\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u7684\u503c\uff0c\u610f\u5473\u7740\u5728\u521b\u5efa\u53d8\u91cf\u65f6\u4f1a\u5728\u5185\u5b58\u4e2d\u5f00\u8f9f\u4e00\u4e2a\u7a7a\u95f4\u3002 \u57fa\u4e8e\u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\uff0c\u89e3\u91ca\u5668\u4f1a\u5206\u914d\u6307\u5b9a\u5185\u5b58\uff0c\u5e76\u51b3\u5b9a\u4ec0\u4e48\u6570\u636e\u53ef\u4ee5\u88ab\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u3002 \u56e0\u6b64\uff0c\u53d8\u91cf\u53ef\u4ee5\u6307\u5b9a\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u5b58\u50a8\u6574\u6570\uff0c\u5c0f\u6570\u6216\u5b57\u7b26\u3002 01. \u53d8\u91cf\u8d4b\u503c Python \u4e2d\u7684\u53d8\u91cf\u8d4b\u503c\u4e0d\u9700\u8981\u7c7b\u578b\u58f0\u660e\u3002 \u6bcf\u4e2a\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u521b\u5efa\uff0c\u90fd\u5305\u62ec\u53d8\u91cf\u7684\u6807\u8bc6\uff0c\u540d\u79f0\u548c\u6570\u636e\u8fd9\u4e9b\u4fe1\u606f\u3002 \u6bcf\u4e2a\u53d8\u91cf\u5728\u4f7f\u7528\u524d\u90fd\u5fc5\u987b\u8d4b\u503c\uff0c\u53d8\u91cf\u8d4b\u503c\u4ee5\u540e\u8be5\u53d8\u91cf\u624d\u4f1a\u88ab\u521b\u5efa\u3002 \u7b49\u53f7 = \u7528\u6765\u7ed9\u53d8\u91cf\u8d4b\u503c\u3002 \u7b49\u53f7 = \u8fd0\u7b97\u7b26\u5de6\u8fb9\u662f\u4e00\u4e2a\u53d8\u91cf\u540d\uff0c\u7b49\u53f7 = \u8fd0\u7b97\u7b26\u53f3\u8fb9\u662f\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\u7684\u503c\u3002\u4f8b\u5982\uff1a >>> name = \"kaka\" # \u5b57\u7b26\u4e32\u7c7b\u578b age = 27 # \u6574\u6570\u7c7b\u578b height = 1.78 # \u6d6e\u70b9\u6570 print ( name ) print ( age ) print ( height ) <<< kaka 27 1.78 02. \u591a\u4e2a\u53d8\u91cf\u8d4b\u503c python\u5141\u8bb8\u540c\u65f6\u4e3a\u591a\u4e2a\u53d8\u91cf\u8d4b\u503c\u3002\u4f8b\u5982\uff1a a = b = c = 1 \u521b\u5efa\u5b9e\u4f8b\uff0c\u540c\u65f6\u4e3aa\u3001b\u3001c\u521b\u5efa\u76f8\u540c\u503c\u7684\u53d8\u91cf\uff0c\u8fd9\u4e09\u4e2a\u53d8\u91cf\u7684\u503c\u50a8\u5b58\u5728\u540c\u4e00\u5185\u5b58\u7a7a\u95f4\u3002 \u4e5f\u53ef\u4ee5\u4e3a\u591a\u4e2a\u5bf9\u8c61\u6307\u5b9a\u591a\u4e2a\u53d8\u91cf\u3002\u4f8b\u5982 a , b , c = 1 , 1.78 , \"kaka\" \u6574\u5f62\u5bf9\u8c611\u5206\u914d\u7ed9a\u53d8\u91cf\uff0c\u6d6e\u70b9\u5bf9\u8c611.78\u5206\u914d\u7ed9b\u5bf9\u8c61\uff0c\u201ckaka\u201d\u5b57\u7b26\u4e32\u5bf9\u8c61\u5206\u914d\u7ed9c\u53d8\u91cf 03. \u53d8\u91cf\u547d\u540d\u89c4\u8303 \u53d8\u91cf\u540d\u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u3002\u53d8\u91cf\u540d\u53ef\u4ee5\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u6253\u5934\uff0c\u4f46\u4e0d\u80fd\u4ee5\u6570\u5b57\u6253 \u5934\uff0c\u4f8b\u5982\uff0c\u53ef\u5c06\u53d8\u91cf\u547d\u540d\u4e3a message_1 \uff0c\u4f46\u4e0d\u80fd\u5c06\u5176\u547d\u540d\u4e3a 1_message \u3002 \u53d8\u91cf\u540d\u4e0d\u80fd\u5305\u542b\u7a7a\u683c\uff0c\u4f46\u53ef\u4f7f\u7528\u4e0b\u5212\u7ebf\u6765\u5206\u9694\u5176\u4e2d\u7684\u5355\u8bcd\u3002\u4f8b\u5982\uff0c\u53d8\u91cf\u540d greeting_message \u53ef\u884c\uff0c\u4f46\u53d8\u91cf\u540d greeting message \u4f1a\u5f15\u53d1\u9519\u8bef\u3002 \u53d8\u91cf\u540d\u5e94\u65e2\u7b80\u77ed\u53c8\u5177\u6709\u63cf\u8ff0\u6027\u3002\u4f8b\u5982\uff0c name \u6bd4 n \u597d\uff0c student_name \u6bd4 s_n \u597d\uff0c name_length \u6bd4 length_of_persons_name \u597d\u3002 \u614e\u7528\u5c0f\u5199\u5b57\u6bcd l \u548c\u5927\u5199\u5b57\u6bcd O \uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u80fd\u88ab\u4eba\u9519\u770b\u6210\u6570\u5b57 1 \u548c 0 \u3002 \u4e0d\u8981\u5c06Python\u5173\u952e\u5b57\u548c\u51fd\u6570\u540d\u7528\u4f5c\u53d8\u91cf\u540d\uff0c\u5373\u4e0d\u8981\u4f7f\u7528Python\u4fdd\u7559\u7528\u4e8e\u7279\u6b8a\u7528\u9014\u7684\u5355\u8bcd\u3002 04. \u53d8\u91cf\u7684\u5f15\u7528 \u53d8\u91cf \u548c \u6570\u636e \u90fd\u662f\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u3002\u5728 Python \u4e2d \u51fd\u6570 \u7684 \u53c2\u6570\u4f20\u9012 \u4ee5\u53ca \u8fd4\u56de\u503c \u90fd\u662f\u9760 \u5f15\u7528 \u4f20\u9012\u7684 \u53d8\u91cf \u548c \u6570\u636e \u662f\u5206\u5f00\u5b58\u50a8\u7684 \u6570\u636e \u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e \u53d8\u91cf \u4e2d\u4fdd\u5b58\u7740\u6570\u636e\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740 \u53d8\u91cf \u4e2d \u8bb0\u5f55\u6570\u636e\u7684\u5730\u5740 \uff0c\u5c31\u53eb\u505a \u5f15\u7528 \u4f7f\u7528 id() \u51fd\u6570\u53ef\u4ee5\u67e5\u770b\u53d8\u91cf\u4e2d\u4fdd\u5b58\u6570\u636e\u6240\u5728\u7684 \u5185\u5b58\u5730\u5740 \u6ce8\u610f\uff1a\u5982\u679c\u53d8\u91cf\u5df2\u7ecf\u88ab\u5b9a\u4e49\uff0c\u5f53\u7ed9\u4e00\u4e2a\u53d8\u91cf\u8d4b\u503c\u7684\u65f6\u5019\uff0c\u672c\u8d28\u4e0a\u662f \u4fee\u6539\u4e86\u6570\u636e\u7684\u5f15\u7528\u3002 \u53d8\u91cf \u4e0d\u518d \u5bf9\u4e4b\u524d\u7684\u6570\u636e\u5f15\u7528 \u53d8\u91cf \u6539\u4e3a \u5bf9\u65b0\u8d4b\u503c\u7684\u6570\u636e\u5f15\u7528 a = 1 print ( id ( a )) b = 1 print ( id ( b )) <<< 4311894064 4311894064 05. \u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf \u5c40\u90e8\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5185\u90e8 \u5b9a\u4e49\u7684\u53d8\u91cf\uff0c \u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 \u5168\u5c40\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5916\u90e8\u5b9a\u4e49 \u7684\u53d8\u91cf\uff08\u6ca1\u6709\u5b9a\u4e49\u5728\u67d0\u4e00\u4e2a\u51fd\u6570\u5185\uff09\uff0c \u6240\u6709\u51fd\u6570 \u5185\u90e8 \u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf 5.1 \u5c40\u90e8\u53d8\u91cf \u5c40\u90e8\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5185\u90e8 \u5b9a\u4e49\u7684\u53d8\u91cf\uff0c \u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 \u51fd\u6570\u6267\u884c\u7ed3\u675f\u540e\uff0c \u51fd\u6570\u5185\u90e8\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u4f1a\u88ab\u7cfb\u7edf\u56de\u6536 \u4e0d\u540c\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u5b9a\u4e49\u76f8\u540c\u7684\u540d\u5b57\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u4f46\u662f \u5f7c\u6b64\u4e4b\u95f4 \u4e0d\u4f1a\u4ea7\u751f\u5f71\u54cd def demo1 (): num = 10 print ( num ) num = 20 print ( \"\u4fee\u6539\u540e %d \" % num ) def demo2 (): num = 100 print ( num ) demo1 () demo2 () print ( \"over\" ) 5.2 \u5c40\u90e8\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f \u6240\u8c13 \u751f\u547d\u5468\u671f \u5c31\u662f\u53d8\u91cf\u4ece \u88ab\u521b\u5efa \u5230 \u88ab\u7cfb\u7edf\u56de\u6536 \u7684\u8fc7\u7a0b \u5c40\u90e8\u53d8\u91cf \u5728 \u51fd\u6570\u6267\u884c\u65f6 \u624d\u4f1a\u88ab\u521b\u5efa \u51fd\u6570\u6267\u884c\u7ed3\u675f\u540e \u5c40\u90e8\u53d8\u91cf \u88ab\u7cfb\u7edf\u56de\u6536 \u5c40\u90e8\u53d8\u91cf\u5728\u751f\u547d\u5468\u671f \u5185\uff0c\u53ef\u4ee5\u7528\u6765\u5b58\u50a8 \u51fd\u6570\u5185\u90e8\u4e34\u65f6\u4f7f\u7528\u5230\u7684\u6570\u636e 5.3 \u5168\u5c40\u53d8\u91cf \u5168\u5c40\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5916\u90e8\u5b9a\u4e49 \u7684\u53d8\u91cf\uff0c\u6240\u6709\u51fd\u6570\u5185\u90e8\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf # \u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf num = 10 def demo1 (): print ( num ) def demo2 (): print ( num ) demo1 () demo2 () print ( \"over\" ) \u6ce8\u610f \uff1a\u51fd\u6570\u6267\u884c\u65f6\uff0c \u9700\u8981\u5904\u7406\u53d8\u91cf\u65f6 \u4f1a\uff1a \u9996\u5148 \u67e5\u627e \u51fd\u6570\u5185\u90e8 \u662f\u5426\u5b58\u5728 \u6307\u5b9a\u540d\u79f0 \u7684\u5c40\u90e8\u53d8\u91cf \uff0c \u5982\u679c\u6709\uff0c\u76f4\u63a5\u4f7f\u7528 \u5982\u679c\u6ca1\u6709\uff0c\u67e5\u627e \u51fd\u6570\u5916\u90e8 \u662f\u5426\u5b58\u5728 \u6307\u5b9a\u540d\u79f0 \u7684\u5168\u5c40\u53d8\u91cf \uff0c \u5982\u679c\u6709\uff0c\u76f4\u63a5\u4f7f\u7528 \u5982\u679c\u8fd8\u6ca1\u6709\uff0c\u7a0b\u5e8f\u62a5\u9519\uff01 5.4 \u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e \u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u7684\u51fd\u6570\u90fd\u80fd\u591f\u6b63\u786e\u4f7f\u7528\u5230\u5168\u5c40\u53d8\u91cf\uff0c\u5e94\u8be5 \u5c06\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u5728\u5176\u4ed6\u51fd\u6570\u7684\u4e0a\u65b9 a = 10 def demo (): print ( \" %d \" % a ) print ( \" %d \" % b ) print ( \" %d \" % c ) b = 20 demo () c = 30 \u7531\u4e8e\u5168\u5c40\u53d8\u91cf c\uff0c\u662f\u5728\u8c03\u7528\u51fd\u6570\u4e4b\u540e\uff0c\u624d\u5b9a\u4e49\u7684\uff0c\u5728\u6267\u884c\u51fd\u6570\u65f6\uff0c\u53d8\u91cf\u8fd8\u6ca1\u6709\u5b9a\u4e49\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u62a5\u9519\uff01 5.5 \u5168\u5c40\u53d8\u91cf\u7684\u547d\u540d \u4e3a\u4e86\u907f\u514d\u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf\u51fa\u73b0\u6df7\u6dc6\uff0c\u5728\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u53d8\u91cf\u540d\u524d\u5e94\u8be5\u589e\u52a0 g_ \u6216\u8005 gl_ \u7684\u524d\u7f00 06. \u6570\u636e\u7c7b\u578b Python3 \u4e2d\u6709\u516d\u4e2a\u6807\u51c6\u7684\u6570\u636e\u7c7b\u578b\uff1a Number \uff08\u6570\u5b57\uff09 String \uff08\u5b57\u7b26\u4e32\uff09 List \uff08\u5217\u8868\uff09 Tuple \uff08\u5143\u7ec4\uff09 Set \uff08\u96c6\u5408\uff09 Dictionary \uff08\u5b57\u5178\uff09 Python3 \u7684\u516d\u4e2a\u6807\u51c6\u6570\u636e\u7c7b\u578b\u4e2d\uff1a \u4e0d\u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a Number \uff08\u6570\u5b57\uff09\u3001 String \uff08\u5b57\u7b26\u4e32\uff09\u3001 Tuple \uff08\u5143\u7ec4\uff09\uff1b \u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a List \uff08\u5217\u8868\uff09\u3001 Dictionary \uff08\u5b57\u5178\uff09\u3001 Set \uff08\u96c6\u5408\uff09\u3002","title":"\u53d8\u91cf\u7c7b\u578b"},{"location":"programming/python/variable/#_1","text":"","title":"\u53d8\u91cf\u6570\u636e\u7c7b\u578b"},{"location":"programming/python/variable/#python","text":"\u53d8\u91cf\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u7684\u503c\uff0c\u610f\u5473\u7740\u5728\u521b\u5efa\u53d8\u91cf\u65f6\u4f1a\u5728\u5185\u5b58\u4e2d\u5f00\u8f9f\u4e00\u4e2a\u7a7a\u95f4\u3002 \u57fa\u4e8e\u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\uff0c\u89e3\u91ca\u5668\u4f1a\u5206\u914d\u6307\u5b9a\u5185\u5b58\uff0c\u5e76\u51b3\u5b9a\u4ec0\u4e48\u6570\u636e\u53ef\u4ee5\u88ab\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u3002 \u56e0\u6b64\uff0c\u53d8\u91cf\u53ef\u4ee5\u6307\u5b9a\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u5b58\u50a8\u6574\u6570\uff0c\u5c0f\u6570\u6216\u5b57\u7b26\u3002","title":"python\u53d8\u91cf\u7c7b\u578b"},{"location":"programming/python/variable/#01","text":"Python \u4e2d\u7684\u53d8\u91cf\u8d4b\u503c\u4e0d\u9700\u8981\u7c7b\u578b\u58f0\u660e\u3002 \u6bcf\u4e2a\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u521b\u5efa\uff0c\u90fd\u5305\u62ec\u53d8\u91cf\u7684\u6807\u8bc6\uff0c\u540d\u79f0\u548c\u6570\u636e\u8fd9\u4e9b\u4fe1\u606f\u3002 \u6bcf\u4e2a\u53d8\u91cf\u5728\u4f7f\u7528\u524d\u90fd\u5fc5\u987b\u8d4b\u503c\uff0c\u53d8\u91cf\u8d4b\u503c\u4ee5\u540e\u8be5\u53d8\u91cf\u624d\u4f1a\u88ab\u521b\u5efa\u3002 \u7b49\u53f7 = \u7528\u6765\u7ed9\u53d8\u91cf\u8d4b\u503c\u3002 \u7b49\u53f7 = \u8fd0\u7b97\u7b26\u5de6\u8fb9\u662f\u4e00\u4e2a\u53d8\u91cf\u540d\uff0c\u7b49\u53f7 = \u8fd0\u7b97\u7b26\u53f3\u8fb9\u662f\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\u7684\u503c\u3002\u4f8b\u5982\uff1a >>> name = \"kaka\" # \u5b57\u7b26\u4e32\u7c7b\u578b age = 27 # \u6574\u6570\u7c7b\u578b height = 1.78 # \u6d6e\u70b9\u6570 print ( name ) print ( age ) print ( height ) <<< kaka 27 1.78","title":"01.  \u53d8\u91cf\u8d4b\u503c"},{"location":"programming/python/variable/#02","text":"python\u5141\u8bb8\u540c\u65f6\u4e3a\u591a\u4e2a\u53d8\u91cf\u8d4b\u503c\u3002\u4f8b\u5982\uff1a a = b = c = 1 \u521b\u5efa\u5b9e\u4f8b\uff0c\u540c\u65f6\u4e3aa\u3001b\u3001c\u521b\u5efa\u76f8\u540c\u503c\u7684\u53d8\u91cf\uff0c\u8fd9\u4e09\u4e2a\u53d8\u91cf\u7684\u503c\u50a8\u5b58\u5728\u540c\u4e00\u5185\u5b58\u7a7a\u95f4\u3002 \u4e5f\u53ef\u4ee5\u4e3a\u591a\u4e2a\u5bf9\u8c61\u6307\u5b9a\u591a\u4e2a\u53d8\u91cf\u3002\u4f8b\u5982 a , b , c = 1 , 1.78 , \"kaka\" \u6574\u5f62\u5bf9\u8c611\u5206\u914d\u7ed9a\u53d8\u91cf\uff0c\u6d6e\u70b9\u5bf9\u8c611.78\u5206\u914d\u7ed9b\u5bf9\u8c61\uff0c\u201ckaka\u201d\u5b57\u7b26\u4e32\u5bf9\u8c61\u5206\u914d\u7ed9c\u53d8\u91cf","title":"02. \u591a\u4e2a\u53d8\u91cf\u8d4b\u503c"},{"location":"programming/python/variable/#03","text":"\u53d8\u91cf\u540d\u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u3002\u53d8\u91cf\u540d\u53ef\u4ee5\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u6253\u5934\uff0c\u4f46\u4e0d\u80fd\u4ee5\u6570\u5b57\u6253 \u5934\uff0c\u4f8b\u5982\uff0c\u53ef\u5c06\u53d8\u91cf\u547d\u540d\u4e3a message_1 \uff0c\u4f46\u4e0d\u80fd\u5c06\u5176\u547d\u540d\u4e3a 1_message \u3002 \u53d8\u91cf\u540d\u4e0d\u80fd\u5305\u542b\u7a7a\u683c\uff0c\u4f46\u53ef\u4f7f\u7528\u4e0b\u5212\u7ebf\u6765\u5206\u9694\u5176\u4e2d\u7684\u5355\u8bcd\u3002\u4f8b\u5982\uff0c\u53d8\u91cf\u540d greeting_message \u53ef\u884c\uff0c\u4f46\u53d8\u91cf\u540d greeting message \u4f1a\u5f15\u53d1\u9519\u8bef\u3002 \u53d8\u91cf\u540d\u5e94\u65e2\u7b80\u77ed\u53c8\u5177\u6709\u63cf\u8ff0\u6027\u3002\u4f8b\u5982\uff0c name \u6bd4 n \u597d\uff0c student_name \u6bd4 s_n \u597d\uff0c name_length \u6bd4 length_of_persons_name \u597d\u3002 \u614e\u7528\u5c0f\u5199\u5b57\u6bcd l \u548c\u5927\u5199\u5b57\u6bcd O \uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u80fd\u88ab\u4eba\u9519\u770b\u6210\u6570\u5b57 1 \u548c 0 \u3002 \u4e0d\u8981\u5c06Python\u5173\u952e\u5b57\u548c\u51fd\u6570\u540d\u7528\u4f5c\u53d8\u91cf\u540d\uff0c\u5373\u4e0d\u8981\u4f7f\u7528Python\u4fdd\u7559\u7528\u4e8e\u7279\u6b8a\u7528\u9014\u7684\u5355\u8bcd\u3002","title":"03.  \u53d8\u91cf\u547d\u540d\u89c4\u8303"},{"location":"programming/python/variable/#04","text":"\u53d8\u91cf \u548c \u6570\u636e \u90fd\u662f\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u3002\u5728 Python \u4e2d \u51fd\u6570 \u7684 \u53c2\u6570\u4f20\u9012 \u4ee5\u53ca \u8fd4\u56de\u503c \u90fd\u662f\u9760 \u5f15\u7528 \u4f20\u9012\u7684 \u53d8\u91cf \u548c \u6570\u636e \u662f\u5206\u5f00\u5b58\u50a8\u7684 \u6570\u636e \u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e \u53d8\u91cf \u4e2d\u4fdd\u5b58\u7740\u6570\u636e\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740 \u53d8\u91cf \u4e2d \u8bb0\u5f55\u6570\u636e\u7684\u5730\u5740 \uff0c\u5c31\u53eb\u505a \u5f15\u7528 \u4f7f\u7528 id() \u51fd\u6570\u53ef\u4ee5\u67e5\u770b\u53d8\u91cf\u4e2d\u4fdd\u5b58\u6570\u636e\u6240\u5728\u7684 \u5185\u5b58\u5730\u5740 \u6ce8\u610f\uff1a\u5982\u679c\u53d8\u91cf\u5df2\u7ecf\u88ab\u5b9a\u4e49\uff0c\u5f53\u7ed9\u4e00\u4e2a\u53d8\u91cf\u8d4b\u503c\u7684\u65f6\u5019\uff0c\u672c\u8d28\u4e0a\u662f \u4fee\u6539\u4e86\u6570\u636e\u7684\u5f15\u7528\u3002 \u53d8\u91cf \u4e0d\u518d \u5bf9\u4e4b\u524d\u7684\u6570\u636e\u5f15\u7528 \u53d8\u91cf \u6539\u4e3a \u5bf9\u65b0\u8d4b\u503c\u7684\u6570\u636e\u5f15\u7528 a = 1 print ( id ( a )) b = 1 print ( id ( b )) <<< 4311894064 4311894064","title":"04. \u53d8\u91cf\u7684\u5f15\u7528"},{"location":"programming/python/variable/#05","text":"\u5c40\u90e8\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5185\u90e8 \u5b9a\u4e49\u7684\u53d8\u91cf\uff0c \u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 \u5168\u5c40\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5916\u90e8\u5b9a\u4e49 \u7684\u53d8\u91cf\uff08\u6ca1\u6709\u5b9a\u4e49\u5728\u67d0\u4e00\u4e2a\u51fd\u6570\u5185\uff09\uff0c \u6240\u6709\u51fd\u6570 \u5185\u90e8 \u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf","title":"05. \u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf"},{"location":"programming/python/variable/#51","text":"\u5c40\u90e8\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5185\u90e8 \u5b9a\u4e49\u7684\u53d8\u91cf\uff0c \u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 \u51fd\u6570\u6267\u884c\u7ed3\u675f\u540e\uff0c \u51fd\u6570\u5185\u90e8\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u4f1a\u88ab\u7cfb\u7edf\u56de\u6536 \u4e0d\u540c\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u5b9a\u4e49\u76f8\u540c\u7684\u540d\u5b57\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u4f46\u662f \u5f7c\u6b64\u4e4b\u95f4 \u4e0d\u4f1a\u4ea7\u751f\u5f71\u54cd def demo1 (): num = 10 print ( num ) num = 20 print ( \"\u4fee\u6539\u540e %d \" % num ) def demo2 (): num = 100 print ( num ) demo1 () demo2 () print ( \"over\" )","title":"5.1 \u5c40\u90e8\u53d8\u91cf"},{"location":"programming/python/variable/#52","text":"\u6240\u8c13 \u751f\u547d\u5468\u671f \u5c31\u662f\u53d8\u91cf\u4ece \u88ab\u521b\u5efa \u5230 \u88ab\u7cfb\u7edf\u56de\u6536 \u7684\u8fc7\u7a0b \u5c40\u90e8\u53d8\u91cf \u5728 \u51fd\u6570\u6267\u884c\u65f6 \u624d\u4f1a\u88ab\u521b\u5efa \u51fd\u6570\u6267\u884c\u7ed3\u675f\u540e \u5c40\u90e8\u53d8\u91cf \u88ab\u7cfb\u7edf\u56de\u6536 \u5c40\u90e8\u53d8\u91cf\u5728\u751f\u547d\u5468\u671f \u5185\uff0c\u53ef\u4ee5\u7528\u6765\u5b58\u50a8 \u51fd\u6570\u5185\u90e8\u4e34\u65f6\u4f7f\u7528\u5230\u7684\u6570\u636e","title":"5.2 \u5c40\u90e8\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f"},{"location":"programming/python/variable/#53","text":"\u5168\u5c40\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5916\u90e8\u5b9a\u4e49 \u7684\u53d8\u91cf\uff0c\u6240\u6709\u51fd\u6570\u5185\u90e8\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf # \u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf num = 10 def demo1 (): print ( num ) def demo2 (): print ( num ) demo1 () demo2 () print ( \"over\" ) \u6ce8\u610f \uff1a\u51fd\u6570\u6267\u884c\u65f6\uff0c \u9700\u8981\u5904\u7406\u53d8\u91cf\u65f6 \u4f1a\uff1a \u9996\u5148 \u67e5\u627e \u51fd\u6570\u5185\u90e8 \u662f\u5426\u5b58\u5728 \u6307\u5b9a\u540d\u79f0 \u7684\u5c40\u90e8\u53d8\u91cf \uff0c \u5982\u679c\u6709\uff0c\u76f4\u63a5\u4f7f\u7528 \u5982\u679c\u6ca1\u6709\uff0c\u67e5\u627e \u51fd\u6570\u5916\u90e8 \u662f\u5426\u5b58\u5728 \u6307\u5b9a\u540d\u79f0 \u7684\u5168\u5c40\u53d8\u91cf \uff0c \u5982\u679c\u6709\uff0c\u76f4\u63a5\u4f7f\u7528 \u5982\u679c\u8fd8\u6ca1\u6709\uff0c\u7a0b\u5e8f\u62a5\u9519\uff01","title":"5.3 \u5168\u5c40\u53d8\u91cf"},{"location":"programming/python/variable/#54","text":"\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u7684\u51fd\u6570\u90fd\u80fd\u591f\u6b63\u786e\u4f7f\u7528\u5230\u5168\u5c40\u53d8\u91cf\uff0c\u5e94\u8be5 \u5c06\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u5728\u5176\u4ed6\u51fd\u6570\u7684\u4e0a\u65b9 a = 10 def demo (): print ( \" %d \" % a ) print ( \" %d \" % b ) print ( \" %d \" % c ) b = 20 demo () c = 30 \u7531\u4e8e\u5168\u5c40\u53d8\u91cf c\uff0c\u662f\u5728\u8c03\u7528\u51fd\u6570\u4e4b\u540e\uff0c\u624d\u5b9a\u4e49\u7684\uff0c\u5728\u6267\u884c\u51fd\u6570\u65f6\uff0c\u53d8\u91cf\u8fd8\u6ca1\u6709\u5b9a\u4e49\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u62a5\u9519\uff01","title":"5.4 \u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e"},{"location":"programming/python/variable/#55","text":"\u4e3a\u4e86\u907f\u514d\u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf\u51fa\u73b0\u6df7\u6dc6\uff0c\u5728\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u53d8\u91cf\u540d\u524d\u5e94\u8be5\u589e\u52a0 g_ \u6216\u8005 gl_ \u7684\u524d\u7f00","title":"5.5 \u5168\u5c40\u53d8\u91cf\u7684\u547d\u540d"},{"location":"programming/python/variable/#06","text":"Python3 \u4e2d\u6709\u516d\u4e2a\u6807\u51c6\u7684\u6570\u636e\u7c7b\u578b\uff1a Number \uff08\u6570\u5b57\uff09 String \uff08\u5b57\u7b26\u4e32\uff09 List \uff08\u5217\u8868\uff09 Tuple \uff08\u5143\u7ec4\uff09 Set \uff08\u96c6\u5408\uff09 Dictionary \uff08\u5b57\u5178\uff09 Python3 \u7684\u516d\u4e2a\u6807\u51c6\u6570\u636e\u7c7b\u578b\u4e2d\uff1a \u4e0d\u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a Number \uff08\u6570\u5b57\uff09\u3001 String \uff08\u5b57\u7b26\u4e32\uff09\u3001 Tuple \uff08\u5143\u7ec4\uff09\uff1b \u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a List \uff08\u5217\u8868\uff09\u3001 Dictionary \uff08\u5b57\u5178\uff09\u3001 Set \uff08\u96c6\u5408\uff09\u3002","title":"06. \u6570\u636e\u7c7b\u578b"},{"location":"programming/python/string/%E5%88%A4%E6%96%AD%E7%B1%BB%E5%9E%8B%E6%BC%94%E7%A4%BA%E5%AE%9E%E4%BE%8B/","text":"# string.isspace() var1 = \" \\n\\t \" var2 = \"he llo \\n \" print ( var1 . isspace ()) print ( var2 . isspace ()) >>> True False # string.isalnum() var1 = \"a1\u554a\" var2 = \" a2\u554a\" print ( var1 . isalnum ()) print ( var2 . isalnum ()) >>> True False # string.isalpha() var1 = \"hellopython\" var2 = \"hello python 2\" print ( var1 . isalpha ()) print ( var2 . isalpha ()) >>> True False # string.isdecimal() var1 = \"23423411\" var2 = \"23423411hello\" print ( var1 . isdecimal ()) print ( var2 . isdecimal ()) >>> True False # string.istitle() var1 = \"Hello Python\" var2 = \"hello python\" print ( var1 . istitle ()) print ( var2 . istitle ()) >>> True False # string.islower() var1 = \"HELLO python\" print ( var1 . islower ()) var2 = \"hello python\" print ( var2 . islower ()) >>> False True # string.isupper() var1 = \"HELLO PYTHON\" pring ( var1 . isupper ()) var2 = \"hello PYTHON\" >>> True False","title":"\u5224\u65ad\u7c7b\u578b\u6f14\u793a\u5b9e\u4f8b"},{"location":"programming/python/string/%E5%8E%BB%E9%99%A4%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6%E6%BC%94%E7%A4%BA%E5%AE%9E%E4%BE%8B/","text":"# string.lstrip(chars) var1 = \" this is good day\" var2 = \"88888this is good day8888\" print ( var1 . lstrip ()) print ( var2 . lstrip ( \"8\" )) >>> this is good day this is good day8888 # string.rstrip() var1 = \"this is good day \" var2 = \"88888this is good day\" print ( var1 . rstrip ()) print ( var2 . rstrip ( \"yad\" )) print ( var2 . rstrip ( \"day\" )) this is good day 88888 this is good 88888 this is good # string.strip() var1 = \"***this**is**good**day***\" var2 = \"123abcdefg321\" print ( var1 . strip ( \"*\" )) print ( var2 . strip ( \"12\" )) >>> this ** is ** good ** day 3 abcdefg3","title":"\u53bb\u9664\u7a7a\u767d\u5b57\u7b26\u6f14\u793a\u5b9e\u4f8b"},{"location":"programming/python/string/%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2%E6%BC%94%E7%A4%BA%E5%AE%9E%E4%BE%8B/","text":"# string.capitalize() var1 = \"hello python\" var2 = \"hello PYTHON\" var3 = \"123hello PYTHON\" print ( var1 . capitalize ()) print ( var2 . capitalize ()) print ( var3 . capitalize ()) >>> Hello python Hello python 123 hello python # string.title() var1 = \"this is good day\" var2 = \"this is 2b2b2b and g3g3g3\" print ( var1 . title ()) print ( var2 . title ()) >>> This Is Good Day This Is 2 B2B2B And G3G3G3 # string.lower() var1 = \"HelloPYTHon\" print ( var1 . lower ()) >>> hellopython # string.upper() var1 = \"hello python\" print ( var1 . upper ()) >>> HELLO PYTHON # string.swapcase() var1 = \"hello PYTHON\" print ( var1 . swapcase ()) >>> HELLO python","title":"\u5927\u5c0f\u5199\u8f6c\u6362\u6f14\u793a\u5b9e\u4f8b"},{"location":"programming/python/string/%E6%8B%86%E5%88%86%E5%92%8C%E8%BF%9E%E6%8E%A5%E6%BC%94%E7%A4%BA%E5%AE%9E%E4%BE%8B/","text":"# string.partition() var1 = \"www.baidu.com\" print ( var1 . partition ( \".\" )) >>> ( 'www' , '.' , 'baidu.com' ) # string.split(char) var1 = \"*good*day*\" var2 = \"www.baidu.com\" print ( var1 . split ( \"*\" )) print ( var2 . split ( \".\" )) >>> [ '' , 'good' , 'day' , '' ] [ 'www' , 'baidu' , 'com' ] # string.splitlines(keepends) var1 = \"\u4f60\u597d \\n hello \\t good \\r f\" print ( var1 . splitlines ()) print ( var1 . splitlines ( True )) print ( var1 . splitlines ( False )) >>> [ '\u4f60\u597d' , 'hello \\t good' , 'f' ] [ '\u4f60\u597d \\n ' , 'hello \\t good \\r ' , 'f' ] [ '\u4f60\u597d' , 'hello \\t good' , 'f' ] # string.join(seq) var1 = \"\" var2 = \"-\" var3 = [ \"a\" , \"b\" , \"c\" , \"d\" ] var4 = ( \"a\" , \"b\" , \"c\" , \"d\" ) print ( var2 . join ( var3 )) print ( var1 . join ( var4 )) >>> a - b - c - d abcd","title":"\u62c6\u5206\u548c\u8fde\u63a5\u6f14\u793a\u5b9e\u4f8b"},{"location":"programming/python/string/%E6%96%87%E6%9C%AC%E5%AF%B9%E9%BD%90%E6%BC%94%E7%A4%BA%E5%AE%9E%E4%BE%8B/","text":"# string.ljust() var1 = \"hello\" print ( var1 . ljust ( 10 )) print ( var1 . ljust ( 10 , \"*\" )) >>> hello helllo ***** # string.rjust() var1 = \"hello\" print ( var1 . rjust ( 10 )) print ( var1 . rjust ( 10 , \"*\" )) >>> hello ***** hello # string.center() var1 = \"hello\" print ( var1 . center ( 10 )) print ( var1 . center ( 10 , \"*\" )) >>> hello ** hello *** # center\u6269\u5c55 print ( '123' . center ( 4 , '*' )) # \u5947\u6570\u4e2a\u5b57\u7b26\u65f6\u4f18\u5148\u5411\u53f3\u8fb9\u8865* # 123* print ( '1234' . center ( 5 , '*' )) # \u5076\u6570\u4e2a\u5b57\u7b26\u65f6\u4f18\u5148\u5411\u5de6\u8fb9\u8865* # *1234","title":"\u6587\u672c\u5bf9\u9f50\u6f14\u793a\u5b9e\u4f8b"},{"location":"programming/python/string/%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9B%BF%E6%8D%A2%E6%BC%94%E7%A4%BA%E5%AE%9E%E4%BE%8B/","text":"# string.startswith(str) var1 = \"hello\" print ( var1 . startswith ( \"he\" )) print ( var1 . startswith ( \"ha\" )) >>> True False # string.endswith(str) var1 = \"hello\" print ( var1 . endswith ( \"llo\" )) print ( var1 . endswith ( \"lle\" )) >>> True False # string.find(str, start=0, end=len(string) var1 = \"hello python\" print ( var1 . find ( \"py\" )) print ( var1 . find ( \"py\" , 5 )) print ( var1 . find ( \"py\" , 7 )) >>> 6 6 - 1 # string.rfind(str, start=0, end=len(string) var1 = \"hello pypython\" print ( var1 . rfind ( \"py\" )) print ( var1 . rfind ( \"py\" , 5 , len ( var1 ))) print ( var1 . rfind ( \"py\" , 9 )) var1 = \"hellopython\" >>> 8 8 - 1 # string.index(str, start=0, end=len(string) var1 = \"hello python\" print ( var1 . index ( \"py\" )) print ( var1 . index ( \"py\" , 5 , len ( var1 ))) print ( var1 . index ( \"py\" , 9 )) >>> 6 6 ValueError : substring not found # string.rindex(str, start=, end=len(string) var1 = \"this is good day\" var2 = \"is\" print ( var1 . rindex ( var2 )) print ( var1 . rindex ( var2 , 2 , len ( var1 ))) print ( var1 . rindex ( var2 , 6 )) >>> 5 5 ValueError : substring not found # string.replace(new, old, max) var1 = \"python\" var2 = \"this is good day is\" print ( \"hello\" , var1 . replace ( \"python\" , \"world\" )) print ( var2 . replace ( \"is\" , \"was\" , 2 )) >>> hello wold thwas was good day is","title":"\u67e5\u627e\u548c\u66ff\u6362\u6f14\u793a\u5b9e\u4f8b"},{"location":"programming/web/JQuery/","text":"1. jQuery\u642d\u5efa 1.1 \u4e0b\u8f7d\u5e76\u590d\u5236\u6587\u4ef6\u5230\u9879\u76ee\u4e2d https://jquery.com/download/ 1.2 \u5f15\u5165\u5230HTML\u4e2d <!--\u5728\u5f15\u5165js\u6587\u4ef6\u7684\u4f4d\u7f6e--> <!--\u5982\u679cjs\u6587\u4ef6\u5728\u5916\u90e8\uff0c\u653e\u5728\u5f15\u5165js\u6587\u4ef6\u7684\u4e0a\u9762--> < script src = \"static/plugins/jquery-3.6.0.min.js\" ></ script > < script src = \"static/js/3.JQuery.js\" ></ script > 1.3 \u7b80\u5355\u5e94\u7528 HTML\u90e8\u5206 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < h1 id = \"txt\" > \u53ef\u53e3\u53ef\u4e50 </ h1 > < script src = \"static/plugins/jquery-3.6.0.min.js\" ></ script > < script src = \"static/js/3.JQuery.js\" ></ script > </ body > </ html > js\u6587\u4ef6\u4ee3\u7801 // $\u627e\u5230id\u4e3atxt\u7684\u6807\u7b7e\uff0c.text\u83b7\u53d6\u6807\u7b7e\u5185\u7684\u6587\u672c\uff0c\u201c\u767e\u4e8b\u53ef\u4e50\u201d\u4e3a\u4fee\u6539\u540e\u7684\u5185\u5bb9 $(\"#txt\").text(\"\u767e\u4e8b\u53ef\u4e50\") // \u901a\u8fc7DOM\u5b9e\u73b0 var newTxtTag = document.getElementById(\"txt\"); newTxtTag.innerText = \"\u767e\u4e8b\u53ef\u4e50\" 2. \u5bfb\u627e\u6807\u7b7e\uff08\u76f4\u63a5\u5bfb\u627e\uff09 ID\u9009\u62e9\u5668 < h1 id = \"txt\" > \u4e2d\u56fd\u8054\u901a </ h1 > < h1 > \u4e2d\u56fd\u8054\u901a </ h1 > < h1 > \u4e2d\u56fd\u8054\u901a </ h1 > $(\"#txt\") \u6837\u5f0f\u9009\u62e9\u5668 < h1 class = \"c1\" > \u4e2d\u56fd\u8054\u901a1 </ h1 > < h1 class = \"c1\" > \u4e2d\u56fd\u8054\u901a2 </ h1 > < h1 class = \"c2\" > \u4e2d\u56fd\u8054\u901a3 </ h1 > $(\".c1\") \u6807\u7b7e\u9009\u62e9\u5668 < h1 class = \"c1\" > \u4e2d\u56fd\u8054\u901a1 </ h1 > < div class = \"c1\" > \u4e2d\u56fd\u8054\u901a2 </ h1 > < h1 class = \"c2\" > \u4e2d\u56fd\u8054\u901a3 </ h1 > $(\"h1\") \u5c42\u7ea7\u9009\u62e9\u5668 < h1 class = \"c1\" > \u4e2d\u56fd\u8054\u901a1 </ h1 > < h1 class = \"c1\" > < div class = \"c2\" > < span ></ span > < a ></ a > </ div > </ h1 > < h1 class = \"c2\" > \u4e2d\u56fd\u8054\u901a3 </ h1 > $(\".c1 .c2 a\") \u591a\u9009\u62e9\u5668 < h1 class = \"c1\" > \u4e2d\u56fd\u8054\u901a1 </ h1 > < h1 class = \"c1\" > < div class = \"c3\" > < span ></ span > < a ></ a > </ div > </ h1 > < h1 class = \"c2\" > \u4e2d\u56fd\u8054\u901a3 </ h1 > < ul > < li > xx </ li > < li > xx </ li > </ ul > $(\"#c3,#c2,li\") \u5c5e\u6027\u9009\u62e9\u5668 < input type = 'text' name = \"n1\" /> < input type = 'text' name = \"n1\" /> < input type = 'text' name = \"n2\" /> $(\"input[name='n1']\") 3. \u95f4\u63a5\u5bfb\u627e \u627e\u5144\u5f1f < div > < div > \u5317\u4eac </ div > < div id = 'c1' > \u4e0a\u6d77 </ div > < div > \u6df1\u5733 </ div > < div > \u5e7f\u5dde </ div > </ div > $(\"#c1\").prev() // \u4e0a\u4e00\u4e2a \u5317\u4eac $(\"#c1\") $(\"#c1\").next() // \u4e0b\u4e00\u4e2a \u6df1\u5733 $(\"#c1\").next().next() // \u4e0b\u4e00\u4e2a\u3001\u4e0b\u4e00\u4e2a \u5e7f\u5dde $(\"#c1\").siblings() // \u6240\u6709\u7684\u5144\u5f1f \u627e\u7236\u5b50 < div > < div > < div > \u5317\u4eac </ div > < div id = 'c1' > < div > \u9752\u6d66\u533a </ div > < div class = \"p10\" > \u5b9d\u5c71\u533a </ div > < div > \u6d66\u4e1c\u65b0\u533a </ div > </ div > < div > \u6df1\u5733 </ div > < div > \u5e7f\u5dde </ div > </ div > < div > < div > \u9655\u897f </ div > < div > \u5c71\u897f </ div > < div > \u6cb3\u5317 </ div > < div > \u6cb3\u5357 </ div > </ div > </ div > $(\"#c1\").parent() // \u7236\u4eb2 $(\"#c1\").parent().parent() // \u7236\u4eb2\u7684\u7236\u4eb2 $(\"#c1\").children() // \u6240\u6709\u7684\u513f\u5b50 $(\"#c1\").children(\".p10\") // \u6240\u6709\u7684\u513f\u5b50\u4e2d\u5bfb\u627eclass=p10 $(\"#c1\").find(\".p10\") // \u53bb\u6240\u6709\u5b50\u5b59\u4e2d\u5bfb\u627eclass=p10 $(\"#c1\").find(\"div\") // \u53bb\u6240\u6709\u5b50\u5b59\u4e2d\u5bfb\u627ediv 4. \u83dc\u5355\u6848\u4f8b 4.1 \u70b9\u51fb\u5c55\u5f00\u540e\u4e0d\u81ea\u52a8\u95ed\u5408\uff0c\u518d\u6b21\u70b9\u51fb\u540e\u95ed\u5408 html\u90e8\u5206 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < link rel = \"stylesheet\" href = \"static/css/city.css\" > </ head > < body > < div class = \"menus\" > < div class = \"item\" > < div class = \"header\" onclick = \"clickMe(this);\" > \u4e0a\u6d77 </ div > < div class = \"content hide\" > < a > \u9752\u6d66\u533a </ a > < a > \u5b9d\u5c71\u533a </ a > < a > \u677e\u6c5f\u533a </ a > < a > \u6d66\u4e1c\u65b0\u533a </ a > </ div > </ div > < div class = \"item\" > < div class = \"header\" onclick = \"clickMe(this);\" > \u676d\u5dde </ div > < div class = \"content hide\" > < a > \u897f\u6e56\u533a </ a > < a > \u4f59\u676d\u533a </ a > < a > \u8427\u5c71\u533a </ a > < a > \u62f1\u5885\u533a </ a > </ div > </ div > < div class = \"item\" > < div class = \"header\" onclick = \"clickMe(this);\" > \u4e0a\u6d772 </ div > < div class = \"content hide\" > < a > \u9752\u6d66\u533a </ a > < a > \u5b9d\u5c71\u533a </ a > < a > \u677e\u6c5f\u533a </ a > < a > \u6d66\u4e1c\u65b0\u533a </ a > </ div > </ div > < div class = \"item\" > < div class = \"header\" onclick = \"clickMe(this);\" > \u676d\u5dde2 </ div > < div class = \"content hide\" > < a > \u897f\u6e56\u533a </ a > < a > \u4f59\u676d\u533a </ a > < a > \u8427\u5c71\u533a </ a > < a > \u62f1\u5885\u533a </ a > </ div > </ div > </ div > < script src = \"static/plugins/jquery-3.6.0.min.js\" ></ script > < script src = \"static/js/4.\u70b9\u51fb\u5c55\u5f00\u4e0d\u95ed\u5408.js\" ></ script > </ body > </ html > css\u90e8\u5206 . menus { width : 200 px ; height : 800 px ; border : 1 px solid red ; } . header { background-color : beige ; padding : 5 px 10 px ; border-bottom : 1 px dotted #dddddd ; cursor : pointer ; } . menus . content a { display : block ; padding : 5 px 5 px ; border-bottom : 1 px dotted #dddddd } . hide { display : none ; } js // \u5b9e\u73b0\u70b9\u51fb\u540e\u5c55\u5f00\u4e0d\u81ea\u52a8\u95ed\u5408 \uff0c \u518d\u6b21\u70b9\u51fb\u540e\u95ed\u5408 function clickMe ( self ) { var hasHide = $(self).next().hasClass(\"hide\") ; if (hasHide){ $(self).next().removeClass(\"hide\") ; } else { $(self).next().addClass(\"hide\") ; } } 4.2 \u81ea\u52a8\u95ed\u5408 \u70b9\u51fb\u540e\u5c55\u5f00\uff0c\u5f53\u70b9\u51fb\u5176\u4ed6\u83dc\u5355\uff0c\u7b2c\u4e00\u6b21\u88ab\u5c55\u5f00\u7684\u81ea\u52a8\u95ed\u5408 //\u70b9\u51fb\u540e\u5c55\u5f00\uff0c\u5f53\u70b9\u51fb\u5176\u4ed6\u83dc\u5355\uff0c\u7b2c\u4e00\u6b21\u88ab\u5c55\u5f00\u7684\u81ea\u52a8\u95ed\u5408 function clickMe(self){ // \u8ba9\u81ea\u5df1\u4e0b\u9762\u7684\u529f\u80fd\u70b9\u51fb\u540e\u5c55\u793a\u51fa\u6765 $(self).next().removeClass(\"hide\"); // \u627e\u81ea\u5df1\u7236\u4eb2\u3001\u7236\u4eb2\u7684\u6240\u6709\u5144\u5f1f\u3001\u5bfb\u627eclass=content\u3001\u6dfb\u52a0hide\u6837\u5f0f $(self).parent().siblings().find(\".content\").addClass(\"hide\"); } 4.3 \u6848\u4f8b\u77e5\u8bc6\u70b9 css\u5185 cursor: pointer \u8868\u793a\u9f20\u6807\u653e\u4e0a\u53bb\u53d8\u6210\u624b\u884c\uff1b css\u5185 display: none \u8868\u793a\u9690\u85cf\u3001\u4e0d\u5c55\u793a onclick=func(this) \u70b9\u51fb\u81ea\u5df1\uff0c\u5728js\u4ee3\u7801\u4e2d\u5411\u51fd\u6570\u4e2d\u4f20\u9012\u81ea\u5df1 $(self) func(self) \u51fd\u6570\u8bbe\u7f6e\u53c2\u6570\uff0cself\u662f\u53c2\u6570\u540d\uff0c\u5f53\u8fd0\u884c\u51fd\u6570\u65f6\uff0c\u5411self\u4f20\u9012\u7684\u53c2\u6570\u662f this \uff0c\u5373\u81ea\u5df1\u8fd9\u4e2a\u6807\u7b7e hasClass \u662f\u5426\u6709\u53c2\u6570\u5185\u8fd9\u4e2a\u6837\u5f0f removeClass \u5220\u9664\u53c2\u6570\u5185\u6837\u5f0f addClass \u589e\u52a0\u53c2\u6570\u5185\u6837\u5f0f 5. \u503c\u7684\u64cd\u4f5c \u6807\u7b7e\u5185\u6587\u672c\u64cd\u4f5c < div id = 'c1' > \u5185\u5bb9 </ div > $(\"#c1\").text() // \u83b7\u53d6\u6587\u672c\u5185\u5bb9 $(\"#c1\").text(\"\u4f11\u606f\") // \u8bbe\u7f6e\u6587\u672c\u5185\u5bb9 input\u6807\u7b7e\u503c\u64cd\u4f5c < input type = 'text' id = 'c2' /> $(\"#c2\").val() // \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u503c $(\"#c2\").val(\"\u54c8\u54c8\u54c8\") // \u8bbe\u7f6e\u503c 5.1 \u52a8\u6001\u6dfb\u52a0\u6570\u636e\uff08\u6848\u4f8b\uff09 html\u90e8\u5206 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < input type = \"text\" id = \"txtUser\" placeholder = \"\u7528\u6237\u540d\" > < input type = \"text\" id = \"txtEmail\" placeholder = \"\u90ae\u7bb1\" > < input type = \"button\" value = \"\u63d0\u4ea4\" onclick = \"getInfo()\" > < ul id = \"view\" ></ ul > < script src = \"plugins/jquery-3.6.0.min.js\" ></ script > < script src = \"js/3.\u52a8\u6001\u521b\u5efa\u6570\u636e.js\" ></ script > </ body > </ html > js\u90e8\u5206 function getInfo(){ //1. \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u59d3\u540d\u548c\u90ae\u7bb1 var userName= $(\"#txtUser\").val(); var email = $(\"#txtEmail\").val(); //2. \u5b57\u7b26\u4e32\u62fc\u63a5 var newString = userName + \"-\" + email //3.\u521b\u5efali\u6807\u7b7e,\u5e76\u5199\u5165\u5185\u5bb9 var newLi = $(\"<li>\").text(newString); //4. \u628a\u65b0\u521b\u5efa\u7684li\u6807\u7b7e\u653e\u5728ul\u91cc\u9762 $(\"#view\").append(newLi); } 5.2 jQuery\u65b0\u5efa\u6807\u7b7e\u548cappend $(\"<li>\") //\u65b0\u5efa\u4e86li\u6807\u7b7e $(\"#id\").append(var) //\u628avar\u52a0\u5165\u5230\u9009\u62e9\u6807\u7b7e\u7684\u5185\u90e8 6. \u4e8b\u4ef6 6.1 jQuery\u5185\u5b9e\u73b0\u70b9\u51fb\u4e8b\u4ef6 onclick=func() \u5728HTML\u6807\u7b7e\u4e2d\u8fd9\u4e48\u5199\uff0c\u662f\u901a\u8fc7DOM\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u5982\u679c\u5b58\u5728\u591a\u6807\u7b7e\u7684\u60c5\u51b5\u5e76\u4e0d\u65b9\u4fbf < input type = \"button\" value = \"\u63d0\u4ea4\" onclick = \"getInfo()\" /> < script > function getInfo () { } </ script > $(\"li\").click(function() \u8868\u793a\u5f53\u70b9\u51fbli\u6807\u7b7e\u65f6\u81ea\u52a8\u6267\u884c\u8fd9\u4e2a\u51fd\u6570 $(this) \u9009\u62e9\u5f53\u524d\u70b9\u51fb\u7684\u6807\u7b7e <ul> <li>\u767e\u5ea6</li> <li>\u8c37\u6b4c</li> <li>\u641c\u72d7</li> </ul> <script> $(\"li\").click(function(){ // \u70b9\u51fbli\u6807\u7b7e\u65f6\uff0c\u81ea\u52a8\u6267\u884c\u8fd9\u4e2a\u51fd\u6570\uff1b // $(this) \u5f53\u524d\u4f60\u70b9\u51fb\u7684\u662f\u90a3\u4e2a\u6807\u7b7e\u3002 }); </script> 6.2 \u5220\u9664\u67d0\u4e2a\u6807\u7b7e .remove() \u8868\u793a\u5220\u9664\u9009\u62e9\u7684\u6807\u7b7e <div id='c1'>\u5185\u5bb9</div> $(\"#c1\").remove(); \u6848\u4f8b\u5c55\u793a\uff1a <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < ul > < li > \u767e\u5ea6 </ li > < li > \u8c37\u6b4c </ li > < li > \u641c\u72d7 </ li > </ ul > < script src = \"static/jquery-3.6.0.min.js\" ></ script > < script > $ ( \"li\" ). click ( function () { $ ( this ). remove (); }); </ script > </ body > </ html > 6.3 \u9875\u9762\u6846\u67b6\u52a0\u8f7d\u5b8c\u5c31\u5f00\u59cb\u6267\u884cjs \u6b63\u5e38\u7684js\u5199\u6cd5\uff0c\u662f\u9700\u8981html\u6807\u7b7e\u5168\u90e8\u52a0\u8f7d\u5b8c\u540e\u624d\u4f1a\u5f00\u59cb\u6267\u884cjs\u4ee3\u7801\uff0c\u5982\u679c\u9875\u9762\u5b58\u5728\u5927\u56fe\u7247\u7b49\u60c5\u51b5\uff0c\u6548\u7387\u4f1a\u4f4e jQuery\u7684 $(function(){} \u4f5c\u7528\u57df\u5185\uff0c\u8868\u793a\u5f53html\u6846\u67b6\u52a0\u8f7d\u5b8c\u5c31\u5f00\u59cb\u6267\u884c\uff0c\u9875\u9762\u5df2\u7ecf\u6709\u4e86\u5bf9\u5e94\u7684\u6807\u7b7e\uff0c\u65e0\u9700\u7b49\u5f85\u6807\u7b7e\u5185\u5143\u7d20\u52a0\u8f7d\u5b8c\u6210 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < ul > < li > \u767e\u5ea6 </ li > < li > \u8c37\u6b4c </ li > < li > \u641c\u72d7 </ li > </ ul > < script src = \"static/jquery-3.6.0.min.js\" ></ script > < script > $ ( function () { // \u5f53\u9875\u9762\u7684\u6846\u67b6\u52a0\u8f7d\u5b8c\u6210\u4e4b\u540e\uff0c\u81ea\u52a8\u5c31\u6267\u884c\u3002 $ ( \"li\" ). click ( function () { $ ( this ). remove (); }); }); </ script > </ body > </ html >","title":"JQuery"},{"location":"programming/web/JQuery/#1-jquery","text":"","title":"1. jQuery\u642d\u5efa"},{"location":"programming/web/JQuery/#11","text":"https://jquery.com/download/","title":"1.1 \u4e0b\u8f7d\u5e76\u590d\u5236\u6587\u4ef6\u5230\u9879\u76ee\u4e2d"},{"location":"programming/web/JQuery/#12-html","text":"<!--\u5728\u5f15\u5165js\u6587\u4ef6\u7684\u4f4d\u7f6e--> <!--\u5982\u679cjs\u6587\u4ef6\u5728\u5916\u90e8\uff0c\u653e\u5728\u5f15\u5165js\u6587\u4ef6\u7684\u4e0a\u9762--> < script src = \"static/plugins/jquery-3.6.0.min.js\" ></ script > < script src = \"static/js/3.JQuery.js\" ></ script >","title":"1.2 \u5f15\u5165\u5230HTML\u4e2d"},{"location":"programming/web/JQuery/#13","text":"HTML\u90e8\u5206 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < h1 id = \"txt\" > \u53ef\u53e3\u53ef\u4e50 </ h1 > < script src = \"static/plugins/jquery-3.6.0.min.js\" ></ script > < script src = \"static/js/3.JQuery.js\" ></ script > </ body > </ html > js\u6587\u4ef6\u4ee3\u7801 // $\u627e\u5230id\u4e3atxt\u7684\u6807\u7b7e\uff0c.text\u83b7\u53d6\u6807\u7b7e\u5185\u7684\u6587\u672c\uff0c\u201c\u767e\u4e8b\u53ef\u4e50\u201d\u4e3a\u4fee\u6539\u540e\u7684\u5185\u5bb9 $(\"#txt\").text(\"\u767e\u4e8b\u53ef\u4e50\") // \u901a\u8fc7DOM\u5b9e\u73b0 var newTxtTag = document.getElementById(\"txt\"); newTxtTag.innerText = \"\u767e\u4e8b\u53ef\u4e50\"","title":"1.3 \u7b80\u5355\u5e94\u7528"},{"location":"programming/web/JQuery/#2","text":"ID\u9009\u62e9\u5668 < h1 id = \"txt\" > \u4e2d\u56fd\u8054\u901a </ h1 > < h1 > \u4e2d\u56fd\u8054\u901a </ h1 > < h1 > \u4e2d\u56fd\u8054\u901a </ h1 > $(\"#txt\") \u6837\u5f0f\u9009\u62e9\u5668 < h1 class = \"c1\" > \u4e2d\u56fd\u8054\u901a1 </ h1 > < h1 class = \"c1\" > \u4e2d\u56fd\u8054\u901a2 </ h1 > < h1 class = \"c2\" > \u4e2d\u56fd\u8054\u901a3 </ h1 > $(\".c1\") \u6807\u7b7e\u9009\u62e9\u5668 < h1 class = \"c1\" > \u4e2d\u56fd\u8054\u901a1 </ h1 > < div class = \"c1\" > \u4e2d\u56fd\u8054\u901a2 </ h1 > < h1 class = \"c2\" > \u4e2d\u56fd\u8054\u901a3 </ h1 > $(\"h1\") \u5c42\u7ea7\u9009\u62e9\u5668 < h1 class = \"c1\" > \u4e2d\u56fd\u8054\u901a1 </ h1 > < h1 class = \"c1\" > < div class = \"c2\" > < span ></ span > < a ></ a > </ div > </ h1 > < h1 class = \"c2\" > \u4e2d\u56fd\u8054\u901a3 </ h1 > $(\".c1 .c2 a\") \u591a\u9009\u62e9\u5668 < h1 class = \"c1\" > \u4e2d\u56fd\u8054\u901a1 </ h1 > < h1 class = \"c1\" > < div class = \"c3\" > < span ></ span > < a ></ a > </ div > </ h1 > < h1 class = \"c2\" > \u4e2d\u56fd\u8054\u901a3 </ h1 > < ul > < li > xx </ li > < li > xx </ li > </ ul > $(\"#c3,#c2,li\") \u5c5e\u6027\u9009\u62e9\u5668 < input type = 'text' name = \"n1\" /> < input type = 'text' name = \"n1\" /> < input type = 'text' name = \"n2\" /> $(\"input[name='n1']\")","title":"2. \u5bfb\u627e\u6807\u7b7e\uff08\u76f4\u63a5\u5bfb\u627e\uff09"},{"location":"programming/web/JQuery/#3","text":"\u627e\u5144\u5f1f < div > < div > \u5317\u4eac </ div > < div id = 'c1' > \u4e0a\u6d77 </ div > < div > \u6df1\u5733 </ div > < div > \u5e7f\u5dde </ div > </ div > $(\"#c1\").prev() // \u4e0a\u4e00\u4e2a \u5317\u4eac $(\"#c1\") $(\"#c1\").next() // \u4e0b\u4e00\u4e2a \u6df1\u5733 $(\"#c1\").next().next() // \u4e0b\u4e00\u4e2a\u3001\u4e0b\u4e00\u4e2a \u5e7f\u5dde $(\"#c1\").siblings() // \u6240\u6709\u7684\u5144\u5f1f \u627e\u7236\u5b50 < div > < div > < div > \u5317\u4eac </ div > < div id = 'c1' > < div > \u9752\u6d66\u533a </ div > < div class = \"p10\" > \u5b9d\u5c71\u533a </ div > < div > \u6d66\u4e1c\u65b0\u533a </ div > </ div > < div > \u6df1\u5733 </ div > < div > \u5e7f\u5dde </ div > </ div > < div > < div > \u9655\u897f </ div > < div > \u5c71\u897f </ div > < div > \u6cb3\u5317 </ div > < div > \u6cb3\u5357 </ div > </ div > </ div > $(\"#c1\").parent() // \u7236\u4eb2 $(\"#c1\").parent().parent() // \u7236\u4eb2\u7684\u7236\u4eb2 $(\"#c1\").children() // \u6240\u6709\u7684\u513f\u5b50 $(\"#c1\").children(\".p10\") // \u6240\u6709\u7684\u513f\u5b50\u4e2d\u5bfb\u627eclass=p10 $(\"#c1\").find(\".p10\") // \u53bb\u6240\u6709\u5b50\u5b59\u4e2d\u5bfb\u627eclass=p10 $(\"#c1\").find(\"div\") // \u53bb\u6240\u6709\u5b50\u5b59\u4e2d\u5bfb\u627ediv","title":"3. \u95f4\u63a5\u5bfb\u627e"},{"location":"programming/web/JQuery/#4","text":"","title":"4. \u83dc\u5355\u6848\u4f8b"},{"location":"programming/web/JQuery/#41","text":"html\u90e8\u5206 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < link rel = \"stylesheet\" href = \"static/css/city.css\" > </ head > < body > < div class = \"menus\" > < div class = \"item\" > < div class = \"header\" onclick = \"clickMe(this);\" > \u4e0a\u6d77 </ div > < div class = \"content hide\" > < a > \u9752\u6d66\u533a </ a > < a > \u5b9d\u5c71\u533a </ a > < a > \u677e\u6c5f\u533a </ a > < a > \u6d66\u4e1c\u65b0\u533a </ a > </ div > </ div > < div class = \"item\" > < div class = \"header\" onclick = \"clickMe(this);\" > \u676d\u5dde </ div > < div class = \"content hide\" > < a > \u897f\u6e56\u533a </ a > < a > \u4f59\u676d\u533a </ a > < a > \u8427\u5c71\u533a </ a > < a > \u62f1\u5885\u533a </ a > </ div > </ div > < div class = \"item\" > < div class = \"header\" onclick = \"clickMe(this);\" > \u4e0a\u6d772 </ div > < div class = \"content hide\" > < a > \u9752\u6d66\u533a </ a > < a > \u5b9d\u5c71\u533a </ a > < a > \u677e\u6c5f\u533a </ a > < a > \u6d66\u4e1c\u65b0\u533a </ a > </ div > </ div > < div class = \"item\" > < div class = \"header\" onclick = \"clickMe(this);\" > \u676d\u5dde2 </ div > < div class = \"content hide\" > < a > \u897f\u6e56\u533a </ a > < a > \u4f59\u676d\u533a </ a > < a > \u8427\u5c71\u533a </ a > < a > \u62f1\u5885\u533a </ a > </ div > </ div > </ div > < script src = \"static/plugins/jquery-3.6.0.min.js\" ></ script > < script src = \"static/js/4.\u70b9\u51fb\u5c55\u5f00\u4e0d\u95ed\u5408.js\" ></ script > </ body > </ html > css\u90e8\u5206 . menus { width : 200 px ; height : 800 px ; border : 1 px solid red ; } . header { background-color : beige ; padding : 5 px 10 px ; border-bottom : 1 px dotted #dddddd ; cursor : pointer ; } . menus . content a { display : block ; padding : 5 px 5 px ; border-bottom : 1 px dotted #dddddd } . hide { display : none ; } js // \u5b9e\u73b0\u70b9\u51fb\u540e\u5c55\u5f00\u4e0d\u81ea\u52a8\u95ed\u5408 \uff0c \u518d\u6b21\u70b9\u51fb\u540e\u95ed\u5408 function clickMe ( self ) { var hasHide = $(self).next().hasClass(\"hide\") ; if (hasHide){ $(self).next().removeClass(\"hide\") ; } else { $(self).next().addClass(\"hide\") ; } }","title":"4.1 \u70b9\u51fb\u5c55\u5f00\u540e\u4e0d\u81ea\u52a8\u95ed\u5408\uff0c\u518d\u6b21\u70b9\u51fb\u540e\u95ed\u5408"},{"location":"programming/web/JQuery/#42","text":"\u70b9\u51fb\u540e\u5c55\u5f00\uff0c\u5f53\u70b9\u51fb\u5176\u4ed6\u83dc\u5355\uff0c\u7b2c\u4e00\u6b21\u88ab\u5c55\u5f00\u7684\u81ea\u52a8\u95ed\u5408 //\u70b9\u51fb\u540e\u5c55\u5f00\uff0c\u5f53\u70b9\u51fb\u5176\u4ed6\u83dc\u5355\uff0c\u7b2c\u4e00\u6b21\u88ab\u5c55\u5f00\u7684\u81ea\u52a8\u95ed\u5408 function clickMe(self){ // \u8ba9\u81ea\u5df1\u4e0b\u9762\u7684\u529f\u80fd\u70b9\u51fb\u540e\u5c55\u793a\u51fa\u6765 $(self).next().removeClass(\"hide\"); // \u627e\u81ea\u5df1\u7236\u4eb2\u3001\u7236\u4eb2\u7684\u6240\u6709\u5144\u5f1f\u3001\u5bfb\u627eclass=content\u3001\u6dfb\u52a0hide\u6837\u5f0f $(self).parent().siblings().find(\".content\").addClass(\"hide\"); }","title":"4.2 \u81ea\u52a8\u95ed\u5408"},{"location":"programming/web/JQuery/#43","text":"css\u5185 cursor: pointer \u8868\u793a\u9f20\u6807\u653e\u4e0a\u53bb\u53d8\u6210\u624b\u884c\uff1b css\u5185 display: none \u8868\u793a\u9690\u85cf\u3001\u4e0d\u5c55\u793a onclick=func(this) \u70b9\u51fb\u81ea\u5df1\uff0c\u5728js\u4ee3\u7801\u4e2d\u5411\u51fd\u6570\u4e2d\u4f20\u9012\u81ea\u5df1 $(self) func(self) \u51fd\u6570\u8bbe\u7f6e\u53c2\u6570\uff0cself\u662f\u53c2\u6570\u540d\uff0c\u5f53\u8fd0\u884c\u51fd\u6570\u65f6\uff0c\u5411self\u4f20\u9012\u7684\u53c2\u6570\u662f this \uff0c\u5373\u81ea\u5df1\u8fd9\u4e2a\u6807\u7b7e hasClass \u662f\u5426\u6709\u53c2\u6570\u5185\u8fd9\u4e2a\u6837\u5f0f removeClass \u5220\u9664\u53c2\u6570\u5185\u6837\u5f0f addClass \u589e\u52a0\u53c2\u6570\u5185\u6837\u5f0f","title":"4.3 \u6848\u4f8b\u77e5\u8bc6\u70b9"},{"location":"programming/web/JQuery/#5","text":"\u6807\u7b7e\u5185\u6587\u672c\u64cd\u4f5c < div id = 'c1' > \u5185\u5bb9 </ div > $(\"#c1\").text() // \u83b7\u53d6\u6587\u672c\u5185\u5bb9 $(\"#c1\").text(\"\u4f11\u606f\") // \u8bbe\u7f6e\u6587\u672c\u5185\u5bb9 input\u6807\u7b7e\u503c\u64cd\u4f5c < input type = 'text' id = 'c2' /> $(\"#c2\").val() // \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u503c $(\"#c2\").val(\"\u54c8\u54c8\u54c8\") // \u8bbe\u7f6e\u503c","title":"5. \u503c\u7684\u64cd\u4f5c"},{"location":"programming/web/JQuery/#51","text":"html\u90e8\u5206 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < input type = \"text\" id = \"txtUser\" placeholder = \"\u7528\u6237\u540d\" > < input type = \"text\" id = \"txtEmail\" placeholder = \"\u90ae\u7bb1\" > < input type = \"button\" value = \"\u63d0\u4ea4\" onclick = \"getInfo()\" > < ul id = \"view\" ></ ul > < script src = \"plugins/jquery-3.6.0.min.js\" ></ script > < script src = \"js/3.\u52a8\u6001\u521b\u5efa\u6570\u636e.js\" ></ script > </ body > </ html > js\u90e8\u5206 function getInfo(){ //1. \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u59d3\u540d\u548c\u90ae\u7bb1 var userName= $(\"#txtUser\").val(); var email = $(\"#txtEmail\").val(); //2. \u5b57\u7b26\u4e32\u62fc\u63a5 var newString = userName + \"-\" + email //3.\u521b\u5efali\u6807\u7b7e,\u5e76\u5199\u5165\u5185\u5bb9 var newLi = $(\"<li>\").text(newString); //4. \u628a\u65b0\u521b\u5efa\u7684li\u6807\u7b7e\u653e\u5728ul\u91cc\u9762 $(\"#view\").append(newLi); }","title":"5.1 \u52a8\u6001\u6dfb\u52a0\u6570\u636e\uff08\u6848\u4f8b\uff09"},{"location":"programming/web/JQuery/#52-jqueryappend","text":"$(\"<li>\") //\u65b0\u5efa\u4e86li\u6807\u7b7e $(\"#id\").append(var) //\u628avar\u52a0\u5165\u5230\u9009\u62e9\u6807\u7b7e\u7684\u5185\u90e8","title":"5.2 jQuery\u65b0\u5efa\u6807\u7b7e\u548cappend"},{"location":"programming/web/JQuery/#6","text":"","title":"6. \u4e8b\u4ef6"},{"location":"programming/web/JQuery/#61-jquery","text":"onclick=func() \u5728HTML\u6807\u7b7e\u4e2d\u8fd9\u4e48\u5199\uff0c\u662f\u901a\u8fc7DOM\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u5982\u679c\u5b58\u5728\u591a\u6807\u7b7e\u7684\u60c5\u51b5\u5e76\u4e0d\u65b9\u4fbf < input type = \"button\" value = \"\u63d0\u4ea4\" onclick = \"getInfo()\" /> < script > function getInfo () { } </ script > $(\"li\").click(function() \u8868\u793a\u5f53\u70b9\u51fbli\u6807\u7b7e\u65f6\u81ea\u52a8\u6267\u884c\u8fd9\u4e2a\u51fd\u6570 $(this) \u9009\u62e9\u5f53\u524d\u70b9\u51fb\u7684\u6807\u7b7e <ul> <li>\u767e\u5ea6</li> <li>\u8c37\u6b4c</li> <li>\u641c\u72d7</li> </ul> <script> $(\"li\").click(function(){ // \u70b9\u51fbli\u6807\u7b7e\u65f6\uff0c\u81ea\u52a8\u6267\u884c\u8fd9\u4e2a\u51fd\u6570\uff1b // $(this) \u5f53\u524d\u4f60\u70b9\u51fb\u7684\u662f\u90a3\u4e2a\u6807\u7b7e\u3002 }); </script>","title":"6.1 jQuery\u5185\u5b9e\u73b0\u70b9\u51fb\u4e8b\u4ef6"},{"location":"programming/web/JQuery/#62","text":".remove() \u8868\u793a\u5220\u9664\u9009\u62e9\u7684\u6807\u7b7e <div id='c1'>\u5185\u5bb9</div> $(\"#c1\").remove(); \u6848\u4f8b\u5c55\u793a\uff1a <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < ul > < li > \u767e\u5ea6 </ li > < li > \u8c37\u6b4c </ li > < li > \u641c\u72d7 </ li > </ ul > < script src = \"static/jquery-3.6.0.min.js\" ></ script > < script > $ ( \"li\" ). click ( function () { $ ( this ). remove (); }); </ script > </ body > </ html >","title":"6.2 \u5220\u9664\u67d0\u4e2a\u6807\u7b7e"},{"location":"programming/web/JQuery/#63-js","text":"\u6b63\u5e38\u7684js\u5199\u6cd5\uff0c\u662f\u9700\u8981html\u6807\u7b7e\u5168\u90e8\u52a0\u8f7d\u5b8c\u540e\u624d\u4f1a\u5f00\u59cb\u6267\u884cjs\u4ee3\u7801\uff0c\u5982\u679c\u9875\u9762\u5b58\u5728\u5927\u56fe\u7247\u7b49\u60c5\u51b5\uff0c\u6548\u7387\u4f1a\u4f4e jQuery\u7684 $(function(){} \u4f5c\u7528\u57df\u5185\uff0c\u8868\u793a\u5f53html\u6846\u67b6\u52a0\u8f7d\u5b8c\u5c31\u5f00\u59cb\u6267\u884c\uff0c\u9875\u9762\u5df2\u7ecf\u6709\u4e86\u5bf9\u5e94\u7684\u6807\u7b7e\uff0c\u65e0\u9700\u7b49\u5f85\u6807\u7b7e\u5185\u5143\u7d20\u52a0\u8f7d\u5b8c\u6210 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < ul > < li > \u767e\u5ea6 </ li > < li > \u8c37\u6b4c </ li > < li > \u641c\u72d7 </ li > </ ul > < script src = \"static/jquery-3.6.0.min.js\" ></ script > < script > $ ( function () { // \u5f53\u9875\u9762\u7684\u6846\u67b6\u52a0\u8f7d\u5b8c\u6210\u4e4b\u540e\uff0c\u81ea\u52a8\u5c31\u6267\u884c\u3002 $ ( \"li\" ). click ( function () { $ ( this ). remove (); }); }); </ script > </ body > </ html >","title":"6.3 \u9875\u9762\u6846\u67b6\u52a0\u8f7d\u5b8c\u5c31\u5f00\u59cb\u6267\u884cjs"},{"location":"programming/web/ORM/","text":"1. ORM ORM\u662fdjango\u5185\u7f6e\u7684\u6570\u636e\u5e93\u6846\u67b6\uff0c\u4e0d\u9700\u8981\u5199\u539f\u751fsql\u5c31\u53ef\u4ee5\u5bf9\u6570\u636e\u5e93\u8868\u548c\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\uff08\u65e0\u6cd5\u5bf9\u6570\u636e\u5e93\u64cd\u4f5c\uff09 ORM\u5e95\u5c42\u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u8fde\u63a5 pymsql MySQLdb mysqlclient (\u5b98\u65b9\u63a8\u8350\u7684\u5e93\uff09 2. django\u8fde\u63a5mysql 2.1 \u5b89\u88c5mysqlclient pip3 install mysqlclient 2.2 \u521b\u5efa\u6570\u636e\u5e93 django\u65e0\u6cd5\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u64cd\u4f5c\uff0c\u6240\u4ee5\u9700\u8981\u7528mysql\u64cd\u4f5c create database \u6570\u636e\u5e93\u540d\u5b57 DEFAULT CHARSET utf8 COLLATE utf8_general_ci ; 2.3 django\u8fde\u63a5\u6570\u636e\u5e93 \u5728setting\u2014>DATABASES\u4e2d\u914d\u7f6e\uff1a DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.mysql' , 'NAME' : 'gx_day15' , # \u6570\u636e\u5e93\u540d\u5b57 'USER' : 'root' , 'PASSWORD' : 'root123' , 'HOST' : '127.0.0.1' , # \u5b89\u88c5\u4e86 MySQL\u7684\u670d\u52a1\u5668 'PORT' : 3306 , } } 3. ORM\u64cd\u4f5c\u6570\u636e\u8868 \u8868\u76f8\u5173\u64cd\u4f5c\u5728 APP \u4e0b\u7684 models.py \u6587\u4ef6\u4e2d\u64cd\u4f5c \u65b0\u521b\u5efa\u4e00\u4e2a\u7c7b\u8868\u793a\u521b\u5efa\u4e00\u5f20\u8868\uff1b \u8868\u540d\u4e3a app\u540d\u5b57_\u7c7b\u540d \uff0c\u5982 shop_user models.py \u4e2d\u6709\u4efb\u4f55\u5bf9\u8868\u7684\u6539\u52a8\uff0c\u90fd\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4 cd\u5230\u9879\u76ee\u6839\u76ee\u5f55 python3 manage.py makemigrations python3 manage.py migrate 3.1 \u521b\u5efa\u8868 models\u6587\u4ef6\u4e2d class UserInfo ( models . Model ): name = models . CharField ( max_length = 32 ) password = models . CharField ( max_length = 64 ) age = models . IntegerField () \u4ee5\u4e0a\u8bed\u53e5\u76f8\u5f53\u4e8e\uff1a create table app01_userinfo ( id bigint auto_increment primary key , name varchar ( 32 ), password varchar ( 64 ), age int ) \u5728models\u6587\u4ef6\u4e2d\u521b\u5efa\u7c7b\uff0c\u4f1a\u81ea\u52a8\u521b\u5efaid\u81ea\u589e\u4e3b\u952e 3.2 \u5220\u9664\u8868\u548c\u5217 \u6bcf\u4e2aclass\u4e3a\u4e00\u5f20\u8868\uff0c\u5220\u9664\u8868\u6ce8\u91ca\u6389\u5bf9\u5e94class\u4ee3\u7801\u5373\u53ef \u5220\u9664\u5217\u4e5f\u9009\u62e9\u6ce8\u91ca\u6389 3.3 \u65b0\u589e\u5b57\u6bb5 \u5728\u8868\u4e2d\u65b0\u589e\u5217\u65f6\uff0c\u7531\u4e8e\u5df2\u6709\u7684\u5b57\u6bb5\u6709\u6570\u636e\uff0c\u65b0\u589e\u5217\u6682\u65e0\u6570\u636e\uff0c\u6240\u4ee5\u6709\u4e09\u79cd\u586b\u5145\u65b9\u5f0f\uff1a \u624b\u52a8\u6307\u5b9a\u4e00\u4e2a\u503c \u6267\u884cpython3 manage . py makemigrations\u65f6 \uff0c \u5bf9\u7ec8\u7aef\u5f39\u51fa\u7684\u62a5\u9519\u9009\u62e91 \uff0c \u7136\u540e\u6307\u5b9a\u9ed8\u8ba4\u503c \u5728\u5b57\u6bb5\u540e\u52a0\u9ed8\u8ba4\u503c\u53c2\u6570 height = models . CharField ( default = 100 , max_length = 64 ) \u5141\u8bb8\u4e3a\u7a7a data = models . CharField ( null = True , blank = True , max_length = 32 ) 4. \u6570\u636e\u64cd\u4f5c 4.1 \u65b0\u589e Department . objects . create ( title = \"\u9500\u552e\u90e8\" ) Department . objects . create ( title = \"IT\u90e8\" ) Department . objects . create ( title = \"\u8fd0\u8425\u90e8\" ) UserInfo . objects . create ( name = \"\u6b66\u6c9b\u9f50\" , password = \"123\" , age = 19 ) UserInfo . objects . create ( name = \"\u6731\u864e\u98de\" , password = \"666\" , age = 29 ) # \u5bf9\u5e94\u5b57\u6bb5\u4e0d\u6307\u5b9a\uff0c\u5219\u6309\u9ed8\u8ba4\u503c\u586b\u5145 UserInfo . objects . create ( name = \"\u5434\u9633\u519b\" , password = \"666\" ) 4.2 \u5220\u9664 # \u5220\u9664\u7b5b\u9009\u4e2d\u7684 UserInfo . objects . filter ( id = 3 ) . delete () # \u5220\u9664\u6240\u6709 Department . objects . all () . delete () 4.3 \u67e5\u8be2 # \u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6570\u636e # data_list = [\u5bf9\u8c61,\u5bf9\u8c61,\u5bf9\u8c61] QuerySet\u7c7b\u578b data_list = UserInfo . objects . all () for obj in data_list : print ( obj . id , obj . name , obj . password , obj . age ) # \u83b7\u53d6\u7b5b\u9009\u7684\u6570\u636e\uff0c\u5982\u679c\u4ec5\u6709\u4e00\u6761 row_obj = UserInfo . objects . filter ( id = 1 ) . first () print ( row_obj . id , row_obj . name , row_obj . password , row_obj . age ) # \u4ee5\u5b57\u5178\u65b9\u5f0f\u4f20\u53c2\u81f3filter models . PrettyNum . objects . filter ( mobile = \"19999999991\" , id = 12 ) data_dict = { \"mobile\" : \"19999999991\" , \"id\" : 123 } models . PrettyNum . objects . filter ( ** data_dict ) # \u6570\u503c\u5224\u65ad models . PrettyNum . objects . filter ( id = 12 ) # \u7b49\u4e8e12 models . PrettyNum . objects . filter ( id__gt = 12 ) # \u5927\u4e8e12 models . PrettyNum . objects . filter ( id__gte = 12 ) # \u5927\u4e8e\u7b49\u4e8e12 models . PrettyNum . objects . filter ( id__lt = 12 ) # \u5c0f\u4e8e12 models . PrettyNum . objects . filter ( id__lte = 12 ) # \u5c0f\u4e8e\u7b49\u4e8e12 data_dict = { \"id__lte\" : 12 } models . PrettyNum . objects . filter ( ** data_dict ) # \u5b57\u7b26\u4e32\u5224\u65ad models . PrettyNum . objects . filter ( mobile = \"999\" ) # \u7b49\u4e8e models . PrettyNum . objects . filter ( mobile__startswith = \"1999\" ) # \u7b5b\u9009\u51fa\u4ee51999\u5f00\u5934 models . PrettyNum . objects . filter ( mobile__endswith = \"999\" ) # \u7b5b\u9009\u51fa\u4ee5999\u7ed3\u5c3e models . PrettyNum . objects . filter ( mobile__contains = \"999\" ) # \u7b5b\u9009\u51fa\u5305\u542b999 data_dict = { \"mobile__contains\" : \"999\" } models . PrettyNum . objects . filter ( ** data_dict ) 4.4 \u66f4\u65b0 UserInfo . objects . all () . update ( password = 999 ) UserInfo . objects . filter ( id = 2 ) . update ( age = 999 ) UserInfo . objects . filter ( name = \"\u6731\u864e\u98de\" ) . update ( age = 999 ) 5. \u8054\u8868\u64cd\u4f5c 5.1 \u4e3b\u952e\u548c\u81ea\u589e Auto_id = models . AutoField ( primary_key = True ) models.AutoField \u81ea\u52a8\u589e\u52a0\u7684\u4e00\u4e2a\u6570\u636e\u5e93\u5b57\u6bb5\u7c7b\u578b\uff0c\u4f8b\u5982id\u5b57\u6bb5\u5c31\u53ef\u4ee5\u4f7f\u7528\u8be5\u6570\u636e\u7c7b\u578b\uff0c\u53c2\u6570\u4e2d\u5fc5\u987b\u586b\u5165primary_key=True models.BigAutoField \u548cAutoField\u76f8\u540c\uff0c64\u4f4d\u6574\u6570\uff0c\u53c2\u6570\u4e2d\u5fc5\u987b\u586b\u5165primary_key=True \u81ea\u589e\u7c7b\u578b\u9700\u8981\u548cdjango\u6307\u5b9a\u7c7b\u578b\u4e00\u81f4\uff0c\u53ef\u4ee5\u5728 AppConfig.default_auto_field \u4e2d\u6307\u5b9a\uff0c\u6216\u8005\u5728 DEFAULT_AUTO_FIELD \u5168\u5c40\u6307\u5b9a 5.2 \u6570\u636e\u5e93\u8303\u5f0f \u5728\u8054\u8868\u5173\u8054\u5b57\u6bb5\u65f6\uff0c\u5e94\u8be5\u9009\u62e9\u88ab\u94fe\u63a5\u8868\u7684ID\uff0c\u800c\u4e0d\u662f\u5177\u4f53\u4fe1\u606f\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u8282\u7701\u5185\u5b58\u5360\u7528 5.3 \u5b57\u6bb5\u7ea6\u675f # \u65e0\u7ea6\u675f depart_id = models . BigIntegerField ( verbose_name = \"\u90e8\u95e8ID\" ) # \u6709\u7ea6\u675f depart = models . ForeignKey ( to = \"Department\" , to_field = \"id\" ) -- ForeignKey --> \u4e00\u5bf9\u591a\u6570\u636e\u5e93\u65f6\u8bbe\u7f6e\u7ea6\u675f -- ManyToManyField --> \u591a\u5bf9\u591a\u6570\u636e\u5e93\u8bbe\u7f6e\u7ea6\u675f -- to --> \u4e0e\u54ea\u5f20\u8868\u5173\u8054 -- to_field --> \u4e0e\u5173\u8054\u8868\u7684\u54ea\u4e00\u4e2a\u5b57\u6bb5\u5173\u8054 # django\u7ea6\u675f gender_choices = ( ( 1 , \"\u7537\" ), ( 2 , \"\u5973\" ), ) gender = models . SmallIntegerField ( verbose_name = \"\u6027\u522b\" , choices = gender_choices ) 5.4 \u5173\u8054\u5b57\u6bb5\u88ab\u5220\u9664 \u7ea7\u8054\u5220\u9664 on_delete=models.CASCADE \uff1a\u5220\u9664\u5173\u8054\u6570\u636e\uff0c\u4e0e\u4e4b\u5173\u8054\u4e5f\u5220\u9664 depart = models . ForeignKey ( to = \"Department\" , to_field = \"id\" , on_delete = models . CASCADE ) \u7f6e\u7a7a on_delete=models.SET_NULL \uff1a\u5220\u9664\u5173\u8054\u6570\u636e\uff0c\u4e0e\u4e4b\u5173\u8054\u7684\u503c\u8bbe\u7f6e\u4e3anull\uff08\u524d\u63d0FK\u5b57\u6bb5\u9700\u8981\u8bbe\u7f6e\u4e3a\u53ef\u7a7a\uff09 depart = models . ForeignKey ( to = \"Department\" , to_field = \"id\" , null = True , blank = True , on_delete = models . SET_NULL )","title":"ORM"},{"location":"programming/web/ORM/#1-orm","text":"ORM\u662fdjango\u5185\u7f6e\u7684\u6570\u636e\u5e93\u6846\u67b6\uff0c\u4e0d\u9700\u8981\u5199\u539f\u751fsql\u5c31\u53ef\u4ee5\u5bf9\u6570\u636e\u5e93\u8868\u548c\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\uff08\u65e0\u6cd5\u5bf9\u6570\u636e\u5e93\u64cd\u4f5c\uff09 ORM\u5e95\u5c42\u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u8fde\u63a5 pymsql MySQLdb mysqlclient (\u5b98\u65b9\u63a8\u8350\u7684\u5e93\uff09","title":"1. ORM"},{"location":"programming/web/ORM/#2-djangomysql","text":"","title":"2. django\u8fde\u63a5mysql"},{"location":"programming/web/ORM/#21-mysqlclient","text":"pip3 install mysqlclient","title":"2.1 \u5b89\u88c5mysqlclient"},{"location":"programming/web/ORM/#22","text":"django\u65e0\u6cd5\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u64cd\u4f5c\uff0c\u6240\u4ee5\u9700\u8981\u7528mysql\u64cd\u4f5c create database \u6570\u636e\u5e93\u540d\u5b57 DEFAULT CHARSET utf8 COLLATE utf8_general_ci ;","title":"2.2 \u521b\u5efa\u6570\u636e\u5e93"},{"location":"programming/web/ORM/#23-django","text":"\u5728setting\u2014>DATABASES\u4e2d\u914d\u7f6e\uff1a DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.mysql' , 'NAME' : 'gx_day15' , # \u6570\u636e\u5e93\u540d\u5b57 'USER' : 'root' , 'PASSWORD' : 'root123' , 'HOST' : '127.0.0.1' , # \u5b89\u88c5\u4e86 MySQL\u7684\u670d\u52a1\u5668 'PORT' : 3306 , } }","title":"2.3 django\u8fde\u63a5\u6570\u636e\u5e93"},{"location":"programming/web/ORM/#3-orm","text":"\u8868\u76f8\u5173\u64cd\u4f5c\u5728 APP \u4e0b\u7684 models.py \u6587\u4ef6\u4e2d\u64cd\u4f5c \u65b0\u521b\u5efa\u4e00\u4e2a\u7c7b\u8868\u793a\u521b\u5efa\u4e00\u5f20\u8868\uff1b \u8868\u540d\u4e3a app\u540d\u5b57_\u7c7b\u540d \uff0c\u5982 shop_user models.py \u4e2d\u6709\u4efb\u4f55\u5bf9\u8868\u7684\u6539\u52a8\uff0c\u90fd\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4 cd\u5230\u9879\u76ee\u6839\u76ee\u5f55 python3 manage.py makemigrations python3 manage.py migrate","title":"3. ORM\u64cd\u4f5c\u6570\u636e\u8868"},{"location":"programming/web/ORM/#31","text":"models\u6587\u4ef6\u4e2d class UserInfo ( models . Model ): name = models . CharField ( max_length = 32 ) password = models . CharField ( max_length = 64 ) age = models . IntegerField () \u4ee5\u4e0a\u8bed\u53e5\u76f8\u5f53\u4e8e\uff1a create table app01_userinfo ( id bigint auto_increment primary key , name varchar ( 32 ), password varchar ( 64 ), age int ) \u5728models\u6587\u4ef6\u4e2d\u521b\u5efa\u7c7b\uff0c\u4f1a\u81ea\u52a8\u521b\u5efaid\u81ea\u589e\u4e3b\u952e","title":"3.1 \u521b\u5efa\u8868"},{"location":"programming/web/ORM/#32","text":"\u6bcf\u4e2aclass\u4e3a\u4e00\u5f20\u8868\uff0c\u5220\u9664\u8868\u6ce8\u91ca\u6389\u5bf9\u5e94class\u4ee3\u7801\u5373\u53ef \u5220\u9664\u5217\u4e5f\u9009\u62e9\u6ce8\u91ca\u6389","title":"3.2 \u5220\u9664\u8868\u548c\u5217"},{"location":"programming/web/ORM/#33","text":"\u5728\u8868\u4e2d\u65b0\u589e\u5217\u65f6\uff0c\u7531\u4e8e\u5df2\u6709\u7684\u5b57\u6bb5\u6709\u6570\u636e\uff0c\u65b0\u589e\u5217\u6682\u65e0\u6570\u636e\uff0c\u6240\u4ee5\u6709\u4e09\u79cd\u586b\u5145\u65b9\u5f0f\uff1a \u624b\u52a8\u6307\u5b9a\u4e00\u4e2a\u503c \u6267\u884cpython3 manage . py makemigrations\u65f6 \uff0c \u5bf9\u7ec8\u7aef\u5f39\u51fa\u7684\u62a5\u9519\u9009\u62e91 \uff0c \u7136\u540e\u6307\u5b9a\u9ed8\u8ba4\u503c \u5728\u5b57\u6bb5\u540e\u52a0\u9ed8\u8ba4\u503c\u53c2\u6570 height = models . CharField ( default = 100 , max_length = 64 ) \u5141\u8bb8\u4e3a\u7a7a data = models . CharField ( null = True , blank = True , max_length = 32 )","title":"3.3 \u65b0\u589e\u5b57\u6bb5"},{"location":"programming/web/ORM/#4","text":"","title":"4. \u6570\u636e\u64cd\u4f5c"},{"location":"programming/web/ORM/#41","text":"Department . objects . create ( title = \"\u9500\u552e\u90e8\" ) Department . objects . create ( title = \"IT\u90e8\" ) Department . objects . create ( title = \"\u8fd0\u8425\u90e8\" ) UserInfo . objects . create ( name = \"\u6b66\u6c9b\u9f50\" , password = \"123\" , age = 19 ) UserInfo . objects . create ( name = \"\u6731\u864e\u98de\" , password = \"666\" , age = 29 ) # \u5bf9\u5e94\u5b57\u6bb5\u4e0d\u6307\u5b9a\uff0c\u5219\u6309\u9ed8\u8ba4\u503c\u586b\u5145 UserInfo . objects . create ( name = \"\u5434\u9633\u519b\" , password = \"666\" )","title":"4.1 \u65b0\u589e"},{"location":"programming/web/ORM/#42","text":"# \u5220\u9664\u7b5b\u9009\u4e2d\u7684 UserInfo . objects . filter ( id = 3 ) . delete () # \u5220\u9664\u6240\u6709 Department . objects . all () . delete ()","title":"4.2 \u5220\u9664"},{"location":"programming/web/ORM/#43","text":"# \u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u6570\u636e # data_list = [\u5bf9\u8c61,\u5bf9\u8c61,\u5bf9\u8c61] QuerySet\u7c7b\u578b data_list = UserInfo . objects . all () for obj in data_list : print ( obj . id , obj . name , obj . password , obj . age ) # \u83b7\u53d6\u7b5b\u9009\u7684\u6570\u636e\uff0c\u5982\u679c\u4ec5\u6709\u4e00\u6761 row_obj = UserInfo . objects . filter ( id = 1 ) . first () print ( row_obj . id , row_obj . name , row_obj . password , row_obj . age ) # \u4ee5\u5b57\u5178\u65b9\u5f0f\u4f20\u53c2\u81f3filter models . PrettyNum . objects . filter ( mobile = \"19999999991\" , id = 12 ) data_dict = { \"mobile\" : \"19999999991\" , \"id\" : 123 } models . PrettyNum . objects . filter ( ** data_dict ) # \u6570\u503c\u5224\u65ad models . PrettyNum . objects . filter ( id = 12 ) # \u7b49\u4e8e12 models . PrettyNum . objects . filter ( id__gt = 12 ) # \u5927\u4e8e12 models . PrettyNum . objects . filter ( id__gte = 12 ) # \u5927\u4e8e\u7b49\u4e8e12 models . PrettyNum . objects . filter ( id__lt = 12 ) # \u5c0f\u4e8e12 models . PrettyNum . objects . filter ( id__lte = 12 ) # \u5c0f\u4e8e\u7b49\u4e8e12 data_dict = { \"id__lte\" : 12 } models . PrettyNum . objects . filter ( ** data_dict ) # \u5b57\u7b26\u4e32\u5224\u65ad models . PrettyNum . objects . filter ( mobile = \"999\" ) # \u7b49\u4e8e models . PrettyNum . objects . filter ( mobile__startswith = \"1999\" ) # \u7b5b\u9009\u51fa\u4ee51999\u5f00\u5934 models . PrettyNum . objects . filter ( mobile__endswith = \"999\" ) # \u7b5b\u9009\u51fa\u4ee5999\u7ed3\u5c3e models . PrettyNum . objects . filter ( mobile__contains = \"999\" ) # \u7b5b\u9009\u51fa\u5305\u542b999 data_dict = { \"mobile__contains\" : \"999\" } models . PrettyNum . objects . filter ( ** data_dict )","title":"4.3 \u67e5\u8be2"},{"location":"programming/web/ORM/#44","text":"UserInfo . objects . all () . update ( password = 999 ) UserInfo . objects . filter ( id = 2 ) . update ( age = 999 ) UserInfo . objects . filter ( name = \"\u6731\u864e\u98de\" ) . update ( age = 999 )","title":"4.4 \u66f4\u65b0"},{"location":"programming/web/ORM/#5","text":"","title":"5. \u8054\u8868\u64cd\u4f5c"},{"location":"programming/web/ORM/#51","text":"Auto_id = models . AutoField ( primary_key = True ) models.AutoField \u81ea\u52a8\u589e\u52a0\u7684\u4e00\u4e2a\u6570\u636e\u5e93\u5b57\u6bb5\u7c7b\u578b\uff0c\u4f8b\u5982id\u5b57\u6bb5\u5c31\u53ef\u4ee5\u4f7f\u7528\u8be5\u6570\u636e\u7c7b\u578b\uff0c\u53c2\u6570\u4e2d\u5fc5\u987b\u586b\u5165primary_key=True models.BigAutoField \u548cAutoField\u76f8\u540c\uff0c64\u4f4d\u6574\u6570\uff0c\u53c2\u6570\u4e2d\u5fc5\u987b\u586b\u5165primary_key=True \u81ea\u589e\u7c7b\u578b\u9700\u8981\u548cdjango\u6307\u5b9a\u7c7b\u578b\u4e00\u81f4\uff0c\u53ef\u4ee5\u5728 AppConfig.default_auto_field \u4e2d\u6307\u5b9a\uff0c\u6216\u8005\u5728 DEFAULT_AUTO_FIELD \u5168\u5c40\u6307\u5b9a","title":"5.1 \u4e3b\u952e\u548c\u81ea\u589e"},{"location":"programming/web/ORM/#52","text":"\u5728\u8054\u8868\u5173\u8054\u5b57\u6bb5\u65f6\uff0c\u5e94\u8be5\u9009\u62e9\u88ab\u94fe\u63a5\u8868\u7684ID\uff0c\u800c\u4e0d\u662f\u5177\u4f53\u4fe1\u606f\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u8282\u7701\u5185\u5b58\u5360\u7528","title":"5.2 \u6570\u636e\u5e93\u8303\u5f0f"},{"location":"programming/web/ORM/#53","text":"# \u65e0\u7ea6\u675f depart_id = models . BigIntegerField ( verbose_name = \"\u90e8\u95e8ID\" ) # \u6709\u7ea6\u675f depart = models . ForeignKey ( to = \"Department\" , to_field = \"id\" ) -- ForeignKey --> \u4e00\u5bf9\u591a\u6570\u636e\u5e93\u65f6\u8bbe\u7f6e\u7ea6\u675f -- ManyToManyField --> \u591a\u5bf9\u591a\u6570\u636e\u5e93\u8bbe\u7f6e\u7ea6\u675f -- to --> \u4e0e\u54ea\u5f20\u8868\u5173\u8054 -- to_field --> \u4e0e\u5173\u8054\u8868\u7684\u54ea\u4e00\u4e2a\u5b57\u6bb5\u5173\u8054 # django\u7ea6\u675f gender_choices = ( ( 1 , \"\u7537\" ), ( 2 , \"\u5973\" ), ) gender = models . SmallIntegerField ( verbose_name = \"\u6027\u522b\" , choices = gender_choices )","title":"5.3 \u5b57\u6bb5\u7ea6\u675f"},{"location":"programming/web/ORM/#54","text":"\u7ea7\u8054\u5220\u9664 on_delete=models.CASCADE \uff1a\u5220\u9664\u5173\u8054\u6570\u636e\uff0c\u4e0e\u4e4b\u5173\u8054\u4e5f\u5220\u9664 depart = models . ForeignKey ( to = \"Department\" , to_field = \"id\" , on_delete = models . CASCADE ) \u7f6e\u7a7a on_delete=models.SET_NULL \uff1a\u5220\u9664\u5173\u8054\u6570\u636e\uff0c\u4e0e\u4e4b\u5173\u8054\u7684\u503c\u8bbe\u7f6e\u4e3anull\uff08\u524d\u63d0FK\u5b57\u6bb5\u9700\u8981\u8bbe\u7f6e\u4e3a\u53ef\u7a7a\uff09 depart = models . ForeignKey ( to = \"Department\" , to_field = \"id\" , null = True , blank = True , on_delete = models . SET_NULL )","title":"5.4 \u5173\u8054\u5b57\u6bb5\u88ab\u5220\u9664"},{"location":"programming/web/ajax/","text":"1. get\u8bf7\u6c42 $ . ajax ({ url : '/task/ajax/' , type : \"get\" , data : { n1 : 123 , n2 : 456 }, success : function ( res ) { console . log ( res ); } }) 2. post $ . ajax ({ url : '/task/ajax/' , type : \"post\" , data : { n1 : 123 , n2 : 456 }, success : function ( res ) { console . log ( res ); } }) from django.shortcuts import render , HttpResponse # \u514d\u9664csrf_token from django.views.decorators.csrf import csrf_exempt @csrf_exempt def task_ajax ( request ): print ( request . GET ) print ( request . POST ) return HttpResponse ( \"\u6210\u529f\u4e86\" ) 3. \u52a0\u8f7d\u6846\u67b6\u540e\u6267\u884c {% extends 'layout.html' %} {% block content %} <div class=\"container\"> <h1>\u4efb\u52a1\u7ba1\u7406</h1> <h3>\u793a\u4f8b1</h3> <input id=\"btn1\" type=\"button\" class=\"btn btn-primary\" value=\"\u70b9\u51fb\"/> </div> {% endblock %} {% block js %} <script type=\"text/javascript\"> $(function () { // \u9875\u9762\u6846\u67b6\u52a0\u8f7d\u5b8c\u6210\u4e4b\u540e\u4ee3\u7801\u81ea\u52a8\u6267\u884c bindBtn1Event(); }) function bindBtn1Event() { $(\"#btn1\").click(function () { $.ajax({ url: '/task/ajax/', type: \"post\", data: { n1: 123, n2: 456 }, success: function (res) { console.log(res); } }) }) } </script> {% endblock %} 4. \u8fd4\u56de\u503c \u4e00\u822c\u90fd\u4f1a\u8fd4\u56dejson\u683c\u5f0f {% extends 'layout.html' %} {% block content %} <div class=\"container\"> <h1>\u4efb\u52a1\u7ba1\u7406</h1> <h3>\u793a\u4f8b1</h3> <input id=\"btn1\" type=\"button\" class=\"btn btn-primary\" value=\"\u70b9\u51fb\"/> </div> {% endblock %} {% block js %} <script type=\"text/javascript\"> $(function () { // \u9875\u9762\u6846\u67b6\u52a0\u8f7d\u5b8c\u6210\u4e4b\u540e\u4ee3\u7801\u81ea\u52a8\u6267\u884c bindBtn1Event(); }) function bindBtn1Event() { $(\"#btn1\").click(function () { $.ajax({ url: '/task/ajax/', type: \"post\", data: { n1: 123, n2: 456 }, dataType: \"JSON\", success: function (res) { console.log(res); console.log(res.status); console.log(res.data); } }) }) } </script> {% endblock %} \u540e\u7aef\u8fd4\u56de import json from django.shortcuts import render , HttpResponse # \u76f4\u63a5\u8fd4\u56dejson from django.http import JsonResponse from django.views.decorators.csrf import csrf_exempt def task_list ( request ): \"\"\" \u4efb\u52a1\u5217\u8868 \"\"\" return render ( request , \"task_list.html\" ) @csrf_exempt def task_ajax ( request ): data_dict = { \"status\" : True , 'data' : [ 11 , 22 , 33 , 44 ]} return HttpResponse ( json . dumps ( data_dict )) #\u76f4\u63a5\u8fd4\u56dejson\u5199\u6cd5 @csrf_exempt def task_ajax ( request ): json_data = { 'status' : 'SUCCESS' , 'data' : [ 1 , 2 , 3 , 4 , 5 ]} return JsonResponse ( json_data )","title":"Ajax"},{"location":"programming/web/ajax/#1-get","text":"$ . ajax ({ url : '/task/ajax/' , type : \"get\" , data : { n1 : 123 , n2 : 456 }, success : function ( res ) { console . log ( res ); } })","title":"1. get\u8bf7\u6c42"},{"location":"programming/web/ajax/#2-post","text":"$ . ajax ({ url : '/task/ajax/' , type : \"post\" , data : { n1 : 123 , n2 : 456 }, success : function ( res ) { console . log ( res ); } }) from django.shortcuts import render , HttpResponse # \u514d\u9664csrf_token from django.views.decorators.csrf import csrf_exempt @csrf_exempt def task_ajax ( request ): print ( request . GET ) print ( request . POST ) return HttpResponse ( \"\u6210\u529f\u4e86\" )","title":"2. post"},{"location":"programming/web/ajax/#3","text":"{% extends 'layout.html' %} {% block content %} <div class=\"container\"> <h1>\u4efb\u52a1\u7ba1\u7406</h1> <h3>\u793a\u4f8b1</h3> <input id=\"btn1\" type=\"button\" class=\"btn btn-primary\" value=\"\u70b9\u51fb\"/> </div> {% endblock %} {% block js %} <script type=\"text/javascript\"> $(function () { // \u9875\u9762\u6846\u67b6\u52a0\u8f7d\u5b8c\u6210\u4e4b\u540e\u4ee3\u7801\u81ea\u52a8\u6267\u884c bindBtn1Event(); }) function bindBtn1Event() { $(\"#btn1\").click(function () { $.ajax({ url: '/task/ajax/', type: \"post\", data: { n1: 123, n2: 456 }, success: function (res) { console.log(res); } }) }) } </script> {% endblock %}","title":"3. \u52a0\u8f7d\u6846\u67b6\u540e\u6267\u884c"},{"location":"programming/web/ajax/#4","text":"\u4e00\u822c\u90fd\u4f1a\u8fd4\u56dejson\u683c\u5f0f {% extends 'layout.html' %} {% block content %} <div class=\"container\"> <h1>\u4efb\u52a1\u7ba1\u7406</h1> <h3>\u793a\u4f8b1</h3> <input id=\"btn1\" type=\"button\" class=\"btn btn-primary\" value=\"\u70b9\u51fb\"/> </div> {% endblock %} {% block js %} <script type=\"text/javascript\"> $(function () { // \u9875\u9762\u6846\u67b6\u52a0\u8f7d\u5b8c\u6210\u4e4b\u540e\u4ee3\u7801\u81ea\u52a8\u6267\u884c bindBtn1Event(); }) function bindBtn1Event() { $(\"#btn1\").click(function () { $.ajax({ url: '/task/ajax/', type: \"post\", data: { n1: 123, n2: 456 }, dataType: \"JSON\", success: function (res) { console.log(res); console.log(res.status); console.log(res.data); } }) }) } </script> {% endblock %} \u540e\u7aef\u8fd4\u56de import json from django.shortcuts import render , HttpResponse # \u76f4\u63a5\u8fd4\u56dejson from django.http import JsonResponse from django.views.decorators.csrf import csrf_exempt def task_list ( request ): \"\"\" \u4efb\u52a1\u5217\u8868 \"\"\" return render ( request , \"task_list.html\" ) @csrf_exempt def task_ajax ( request ): data_dict = { \"status\" : True , 'data' : [ 11 , 22 , 33 , 44 ]} return HttpResponse ( json . dumps ( data_dict )) #\u76f4\u63a5\u8fd4\u56dejson\u5199\u6cd5 @csrf_exempt def task_ajax ( request ): json_data = { 'status' : 'SUCCESS' , 'data' : [ 1 , 2 , 3 , 4 , 5 ]} return JsonResponse ( json_data )","title":"4. \u8fd4\u56de\u503c"},{"location":"programming/web/css-select/","text":"1. css\u5e94\u7528\u65b9\u5f0f 1.1 \u5728\u6807\u7b7e\u4e0a\u76f4\u63a5\u4f7f\u7528 < img src = \"...\" style = \"height:100px\" /> < div style = \"color:red;\" > \u4e2d\u56fd\u8054\u901a </ div > 1.2 \u5728head\u6807\u7b7e\u4e2d\u5199\u6837\u5f0f <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { color : red ; } </ style > </ head > < body > < h1 class = 'c1' > \u7528\u6237\u767b\u5f55 </ h1 > < h1 class = 'c1' > \u7528\u6237\u767b\u5f55 </ h1 > < h1 class = 'c1' > \u7528\u6237\u767b\u5f55 </ h1 > < h1 class = 'c1' > \u7528\u6237\u767b\u5f55 </ h1 > </ body > </ html > 1.3 \u5728\u65b0\u6587\u4ef6\u4e2d\u5199\u6837\u5f0f common.css . c1 { height : 100 px ; } . c2 { color : red ; } html\u6587\u4ef6\u4e2d\u5f15\u5165 rel=\u201cstylesheet\u201d \u5f15\u5165\u5916\u90e8\u6837\u5f0f\u8868 href=\u201dcss\u6587\u4ef6\u7684\u8def\u5f84\u201d <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < link rel = \"stylesheet\" href = \"common.css\" /> </ head > < body > < h1 class = 'c1' > \u7528\u6237\u767b\u5f55 </ h1 > < h1 class = 'c2' > \u7528\u6237\u767b\u5f55 </ h1 > < h1 class = 'c2' > \u7528\u6237\u767b\u5f55 </ h1 > < h1 class = 'c1' > \u7528\u6237\u767b\u5f55 </ h1 > </ body > </ html > 2. css\u9009\u62e9\u5668 2.1 ID\u9009\u62e9\u5668 ID\u5728body\u5185\u662f\u552f\u4e00\u7684 < style > # c1 { color : red ; } </ style > < h1 id = \"c1\" > \u4e2d\u56fd\u8054\u901a < h1 > 2.2 \u7c7b\u9009\u62e9\u5668 class\u53ef\u4ee5\u590d\u7528\u5230\u591a\u4e2a\u6807\u7b7e . c1 { color : green ; } < div class = \"c1\" > \u4eca\u5929\u5929\u6c14\u771f\u597d\u554a </ div > 2.3 \u6807\u7b7e\u9009\u62e9\u5668 \u9009\u4e2d\u9875\u9762\u6240\u6709\u6307\u5b9a\u7684\u6807\u7b7e < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > li { background-color : blue ; } </ style > </ head > < body > < ul > < li > \u767e\u5ea6 </ li > < li > \u817e\u8baf </ li > < li > \u8c37\u6b4c </ li > </ ul > </ body > 2.4 \u5c5e\u6027\u9009\u62e9\u5668 \u6839\u636e\u6807\u7b7e\u6307\u5b9a\u5c5e\u6027 < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > input [ type = \"text\" ] { border : 1 px solid red ; } </ style > </ head > < body > < input type = \"text\" > < input type = \"password\" > </ body > \u6839\u636e\u7c7b\u6307\u5b9a\u5c5e\u6027 < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . v1 [ name = \"123\" ] { color : red ; } </ style > </ head > < body > < div class = \"v1\" name = \"123\" > \u4e2d\u56fd\u79fb\u52a8 </ div > < div class = \"v1\" name = \"456\" > \u4e2d\u56fd\u8054\u901a </ div > < div class = \"v1\" name = \"999\" > \u4e2d\u56fd\u7535\u4fe1 </ div > </ body > 2.5 \u540e\u4ee3\u9009\u62e9\u5668 \u6240\u6709\u540e\u4ee3\u4ee5\u7a7a\u683c\u9694\u5f00 \u6307\u5b9a\u540e\u4ee3\u4ee5 > \u5206\u9694 < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . yy li { color : red ; } . yy > div > a { color : blue ; } </ style > </ head > < body > < div class = \"yy\" > < a > \u767e\u5ea6 </ a > < div > < a > \u8c37\u6b4c </ a > </ div > < ul > < li > \u7f8e\u56fd </ li > < li > \u65e5\u672c </ li > < li > \u97e9\u56fd </ li > </ ul > </ body > 2.6 \u9009\u62e9\u5668\u4f7f\u7528\u9891\u7387 \u9ad8\u9891 \u7c7b\u9009\u62e9\u5668 \u6807\u7b7e\u9009\u62e9\u5668 \u540e\u4ee3\u9009\u62e9\u5668 \u4f4e\u9891 \u5c5e\u6027\u9009\u62e9\u5668 ID\u9009\u62e9\u5668 3. \u591a\u4e2a\u6837\u5f0f\u8986\u76d6\u95ee\u9898 \u5f53\u6807\u7b7e\u4f7f\u7528\u591a\u4e2a\u7c7b\uff0c\u8be5\u6807\u7b7e\u540c\u65f6\u4f7f\u7528\u591a\u4e2acss\u7684\u5b9a\u4e49 \u5982\u679c\u5b58\u5728\u5c5e\u6027\u91cd\u590d\uff0c\u5219style\u90e8\u5206\uff0c\u4e0b\u9762\u4ee3\u7801\u90e8\u5206\u4f1a\u8986\u76d6\u4e0a\u9762\u90e8\u5206\uff0c\u5373\u91cd\u590d\u65f6\u4f7f\u7528\u4e0b\u9762\u7684\u6837\u5f0f\u3002\u8986\u76d6\u903b\u8f91\u548c\u6807\u7b7e\u5185class\u6307\u5b9a\u7684\u987a\u5e8f\u65e0\u5173 \u5982\u679c\u5b58\u5728\u91cd\u590d\u5c5e\u6027\u65f6\uff0c\u4e0d\u5e0c\u671b\u88ab\u8986\u76d6\uff0c\u4f9d\u7136\u4f7f\u7528\u4e0a\u9762\u7684\u6837\u5f0f\uff0c\u53ef\u4ee5\u5728\u8be5\u5c5e\u6027\u540e\u9762\u52a0\u4e0a !important \u8868\u793a\u91cd\u8981 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { color : red !important ; border : 1 px solid red ; } . c2 { font-size : 28 px ; color : blue ; } </ style > </ head > < body > < span class = \"c1 c2\" > \u4e2d\u56fd\u8054\u901a </ span > </ body > </ html >","title":"CSS\u9009\u62e9\u5668"},{"location":"programming/web/css-select/#1-css","text":"","title":"1. css\u5e94\u7528\u65b9\u5f0f"},{"location":"programming/web/css-select/#11","text":"< img src = \"...\" style = \"height:100px\" /> < div style = \"color:red;\" > \u4e2d\u56fd\u8054\u901a </ div >","title":"1.1 \u5728\u6807\u7b7e\u4e0a\u76f4\u63a5\u4f7f\u7528"},{"location":"programming/web/css-select/#12-head","text":"<!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { color : red ; } </ style > </ head > < body > < h1 class = 'c1' > \u7528\u6237\u767b\u5f55 </ h1 > < h1 class = 'c1' > \u7528\u6237\u767b\u5f55 </ h1 > < h1 class = 'c1' > \u7528\u6237\u767b\u5f55 </ h1 > < h1 class = 'c1' > \u7528\u6237\u767b\u5f55 </ h1 > </ body > </ html >","title":"1.2 \u5728head\u6807\u7b7e\u4e2d\u5199\u6837\u5f0f"},{"location":"programming/web/css-select/#13","text":"common.css . c1 { height : 100 px ; } . c2 { color : red ; } html\u6587\u4ef6\u4e2d\u5f15\u5165 rel=\u201cstylesheet\u201d \u5f15\u5165\u5916\u90e8\u6837\u5f0f\u8868 href=\u201dcss\u6587\u4ef6\u7684\u8def\u5f84\u201d <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < link rel = \"stylesheet\" href = \"common.css\" /> </ head > < body > < h1 class = 'c1' > \u7528\u6237\u767b\u5f55 </ h1 > < h1 class = 'c2' > \u7528\u6237\u767b\u5f55 </ h1 > < h1 class = 'c2' > \u7528\u6237\u767b\u5f55 </ h1 > < h1 class = 'c1' > \u7528\u6237\u767b\u5f55 </ h1 > </ body > </ html >","title":"1.3 \u5728\u65b0\u6587\u4ef6\u4e2d\u5199\u6837\u5f0f"},{"location":"programming/web/css-select/#2-css","text":"","title":"2. css\u9009\u62e9\u5668"},{"location":"programming/web/css-select/#21-id","text":"ID\u5728body\u5185\u662f\u552f\u4e00\u7684 < style > # c1 { color : red ; } </ style > < h1 id = \"c1\" > \u4e2d\u56fd\u8054\u901a < h1 >","title":"2.1 ID\u9009\u62e9\u5668"},{"location":"programming/web/css-select/#22","text":"class\u53ef\u4ee5\u590d\u7528\u5230\u591a\u4e2a\u6807\u7b7e . c1 { color : green ; } < div class = \"c1\" > \u4eca\u5929\u5929\u6c14\u771f\u597d\u554a </ div >","title":"2.2 \u7c7b\u9009\u62e9\u5668"},{"location":"programming/web/css-select/#23","text":"\u9009\u4e2d\u9875\u9762\u6240\u6709\u6307\u5b9a\u7684\u6807\u7b7e < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > li { background-color : blue ; } </ style > </ head > < body > < ul > < li > \u767e\u5ea6 </ li > < li > \u817e\u8baf </ li > < li > \u8c37\u6b4c </ li > </ ul > </ body >","title":"2.3 \u6807\u7b7e\u9009\u62e9\u5668"},{"location":"programming/web/css-select/#24","text":"\u6839\u636e\u6807\u7b7e\u6307\u5b9a\u5c5e\u6027 < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > input [ type = \"text\" ] { border : 1 px solid red ; } </ style > </ head > < body > < input type = \"text\" > < input type = \"password\" > </ body > \u6839\u636e\u7c7b\u6307\u5b9a\u5c5e\u6027 < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . v1 [ name = \"123\" ] { color : red ; } </ style > </ head > < body > < div class = \"v1\" name = \"123\" > \u4e2d\u56fd\u79fb\u52a8 </ div > < div class = \"v1\" name = \"456\" > \u4e2d\u56fd\u8054\u901a </ div > < div class = \"v1\" name = \"999\" > \u4e2d\u56fd\u7535\u4fe1 </ div > </ body >","title":"2.4 \u5c5e\u6027\u9009\u62e9\u5668"},{"location":"programming/web/css-select/#25","text":"\u6240\u6709\u540e\u4ee3\u4ee5\u7a7a\u683c\u9694\u5f00 \u6307\u5b9a\u540e\u4ee3\u4ee5 > \u5206\u9694 < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . yy li { color : red ; } . yy > div > a { color : blue ; } </ style > </ head > < body > < div class = \"yy\" > < a > \u767e\u5ea6 </ a > < div > < a > \u8c37\u6b4c </ a > </ div > < ul > < li > \u7f8e\u56fd </ li > < li > \u65e5\u672c </ li > < li > \u97e9\u56fd </ li > </ ul > </ body >","title":"2.5 \u540e\u4ee3\u9009\u62e9\u5668"},{"location":"programming/web/css-select/#26","text":"\u9ad8\u9891 \u7c7b\u9009\u62e9\u5668 \u6807\u7b7e\u9009\u62e9\u5668 \u540e\u4ee3\u9009\u62e9\u5668 \u4f4e\u9891 \u5c5e\u6027\u9009\u62e9\u5668 ID\u9009\u62e9\u5668","title":"2.6 \u9009\u62e9\u5668\u4f7f\u7528\u9891\u7387"},{"location":"programming/web/css-select/#3","text":"\u5f53\u6807\u7b7e\u4f7f\u7528\u591a\u4e2a\u7c7b\uff0c\u8be5\u6807\u7b7e\u540c\u65f6\u4f7f\u7528\u591a\u4e2acss\u7684\u5b9a\u4e49 \u5982\u679c\u5b58\u5728\u5c5e\u6027\u91cd\u590d\uff0c\u5219style\u90e8\u5206\uff0c\u4e0b\u9762\u4ee3\u7801\u90e8\u5206\u4f1a\u8986\u76d6\u4e0a\u9762\u90e8\u5206\uff0c\u5373\u91cd\u590d\u65f6\u4f7f\u7528\u4e0b\u9762\u7684\u6837\u5f0f\u3002\u8986\u76d6\u903b\u8f91\u548c\u6807\u7b7e\u5185class\u6307\u5b9a\u7684\u987a\u5e8f\u65e0\u5173 \u5982\u679c\u5b58\u5728\u91cd\u590d\u5c5e\u6027\u65f6\uff0c\u4e0d\u5e0c\u671b\u88ab\u8986\u76d6\uff0c\u4f9d\u7136\u4f7f\u7528\u4e0a\u9762\u7684\u6837\u5f0f\uff0c\u53ef\u4ee5\u5728\u8be5\u5c5e\u6027\u540e\u9762\u52a0\u4e0a !important \u8868\u793a\u91cd\u8981 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { color : red !important ; border : 1 px solid red ; } . c2 { font-size : 28 px ; color : blue ; } </ style > </ head > < body > < span class = \"c1 c2\" > \u4e2d\u56fd\u8054\u901a </ span > </ body > </ html >","title":"3. \u591a\u4e2a\u6837\u5f0f\u8986\u76d6\u95ee\u9898"},{"location":"programming/web/css-style/","text":"1. \u9ad8\u5ea6\u548c\u5bbd\u5ea6 . c1 { height : 300 px ; width : 50 % ; } \u5bbd\u5ea6\u8bbe\u7f6e\u652f\u6301\u50cf\u7d20\u548c\u767e\u5206\u6bd4\uff1b \u5bbd\u9ad8\u8bbe\u7f6e\u5bf9\u884c\u5185\u6807\u7b7e\u9ed8\u8ba4\u65e0\u6548\uff1b \u5bf9\u5757\u7ea7\u6807\u7b7e\u9ed8\u8ba4\u6709\u6548\uff08\u4f46\u5757\u7ea7\u6807\u7b7e\u975e\u5e38\u9738\u9053\uff0c\u5373\u65f6\u53f3\u8fb9\u7a7a\u51fa\u6765\u4e5f\u4e0d\u53ef\u4ee5\u4f7f\u7528\uff09 2. \u884c\u5185&\u5757\u7ea7\u7279\u6027 \u89e3\u51b3\u5757\u7ea7\u6807\u7b7e\u72ec\u5360\u4e00\u884c\uff0c\u884c\u5185\u6807\u7b7e\u65e0\u6cd5\u6539\u53d8\u5bbd\u9ad8\u7684\u95ee\u9898 display: inline-block \u6539\u53d8\u6807\u7b7e\u7279\u6027\uff0c\u4f7f\u5176\u65e2\u5177\u5907\u884c\u5185\u6807\u7b7e\u7684\u7279\u6027\uff0c\u53c8\u5177\u5907\u5757\u7ea7\u6807\u7b7e\u7684\u7279\u6027 <! DOCTYPE html > < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { display : inline-block ; height : 300 px ; width : 300 px ; border : 1 px solid red ; } </ style > </ head > < body > < div class = \"c1\" > \u4e2d\u56fd\u8054\u901adiv </ div > < span class = \"c1\" > \u4e2d\u56fd\u8054\u901aspan </ span > < div class = \"c1\" > \u4e2d\u56fd\u8054\u901adiv </ div > < span class = \"c1\" > \u4e2d\u56fd\u79fb\u52a8span </ span > </ body > </ html > 2.1 \u884c\u5185\u548c\u5757\u7ea7\u8f6c\u6362 # \u5757\u7ea7\u6807\u7b7e\u8f6c\u4e3a\u884c\u5185 < div style = \"display: inline\" > \u4e2d\u56fd\u8054\u901adiv </ div > # \u884c\u5185\u8f6c\u5757\u7ea7 < span style = \"display: block\" > \u4e2d\u56fd\u8054\u901aspan </ span > 3.\u5b57\u4f53\u548c\u989c\u8272 . c1 { color : red ; <! \u5b57\u4f53\u989c\u8272 font-size : 34 px ; <! \u5b57\u4f53\u5927\u5c0f font-weight : 500 ; <!\u5b57\u4f53\u7c97\u5ea6 font-family : Lantinghei SC ; <!\u5b57\u4f53 } 4.\u6587\u5b57\u5bf9\u9f50 text-align:center \u6c34\u5e73\u65b9\u5411\u5c45\u4e2d\uff1b line-height \u5782\u76f4\u65b9\u5411\u5bf9\u9f50\uff0c\u6570\u503c\u548c\u5757\u9ad8\u5ea6\u4e00\u81f4\uff0c\u5373\u5782\u76f4\u5c45\u4e2d \u5f53\u5757\u5185\u6709\u591a\u884c\u6587\u672c\u65f6\uff0c\u4e0d\u80fd\u8fd9\u6837\u4f7f\u7528 <! DOCTYPE html > < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { width : 50 % ; height : 100 px ; border : 1 px solid red ; text-align : center ; /* \u6c34\u5e73\u65b9\u5411\u5c45\u4e2d*/ line-height : 100 px ; /* \u5782\u76f4\u65b9\u5411\u5c45\u4e2d*/ } </ style > </ head > < body > < div class = \"c1\" > \u4e2d\u56fd\u8054\u901adiv </ div > </ body > </ html > 5. \u6d6e\u52a8 float:right \u6807\u7b7e\u5411\u53f3\u8fb9\u6d6e\u52a8 < div > < span > \u5de6\u8fb9 </ span > < span style = \"float: right\" > \u53f3\u8fb9 </ span > </ div > 5.1 \u5757\u7ea7\u6807\u7b7e\u6d6e\u52a8 \u5757\u7ea7\u6807\u7b7e\u5165div\u8bbe\u7f6e float \u53c2\u6570\u540e\uff0c\u5c06\u4e0d\u518d\u662f\u5feb\u7ea7\u6807\u7b7e\uff0c\u4f1a\u6839\u636e\u81ea\u8eab\u8bbe\u7f6e\u7684\u5bbd\u9ad8\u5360\u4f4d <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . item { float : left ; width : 300 px ; height : 100 px ; border : 1 px solid red ; } </ style > </ head > < body > < div > < div class = \"item\" ></ div > < div class = \"item\" ></ div > < div class = \"item\" ></ div > < div class = \"item\" ></ div > </ div > </ body > </ html > 5.2 \u8131\u79bb\u6587\u6863\u6d41 \u5982\u679c\u6807\u7b7e\u8bbe\u7f6e float \u6837\u5f0f\uff0c\u9700\u8981\u5728\u8be5\u6807\u7b7e\u7684\u672b\u5c3e\u6dfb\u52a0 clear:both \u5c5e\u6027\uff0c\u5426\u5219\u6539\u6807\u7b7e\u4f1a\u8131\u79bb\u6587\u6863\u6d41\u6d41\u98de\u8d77\u6765\uff0c\u65e0\u6cd5\u6491\u8d77\u7236\u6807\u7b7e <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . item { float : left ; width : 300 px ; height : 100 px ; border : 1 px solid red ; } </ style > </ head > < body > < div style = \"background-color: blue\" > < div class = \"item\" ></ div > < div class = \"item\" ></ div > < div class = \"item\" ></ div > < div class = \"item\" ></ div > < div style = \"clear: both\" ></ div > </ div > </ body > </ html > 6. \u5185\u8fb9\u8ddd \u5757\u5185\u5143\u7d20\u4e0e\u5757\u8fb9\u7f18\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u5185\u8fb9\u8ddd\uff0c\u5757\u5927\u5c0f\u4f1a\u88ab\u6491\u5f00 padding-top: \u9876\u90e8 padding-left: \u5de6\u8fb9 padding-right: \u53f3\u8fb9 padding-bottom: \u5e95\u90e8 padding:20px \u4e0a\u4e0b\u5de6\u53f3\u5168\u662f20px\u7684\u5185\u8fb9\u8ddd padding:20px 10px 5px 20px \u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6\u5185\u8fb9\u8ddd <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { width : 200 px ; height : 200 px ; border : 1 px solid red ; padding-top : 20 px ; \u9876\u90e8 padding-left : 20 px ; \u5de6\u8fb9 padding-right : 20 px ; \u53f3\u8fb9 padding-bottom : 20 px ; \u5e95\u90e8 } . c2 { background-color : gold ; } </ style > </ head > < body > < div class = \"c1\" > < div class = \"c2\" > \u606d\u559c\u53d1\u8d22 </ div > < div > \u4e07\u4e8b\u5982\u610f </ div > </ div > </ body > </ html > 7. \u5916\u8fb9\u8ddd body\u9ed8\u8ba4\u6709\u5916\u8fb9\u8ddd \u81ea\u8eab\u4e8e\u76f8\u90bb\u5757\u7684\u8fb9\u8ddd margin-top margin-left margin-right margin-bottom \u4e0a \u5de6 \u53f3 \u4e0b margin-top \u56db\u8fb9 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { height : 200 px ; background-color : gold ; } . c2 { height : 100 px ; background-color : red ; margin-top : 20 px ; } </ style > </ head > < body > < div class = \"c1\" ></ div > < div class = \"c2\" ></ div > </ body > </ html > 8.\u5c45\u4e2d \u6587\u672c\u5c45\u4e2d < div style = \"text-align: center\" > \u4f60\u597d </ div > \u533a\u57df\u5c45\u4e2d\uff08\u81ea\u5df1\u8981\u6709\u5bbd\u5ea6\uff09 margin:0 auto \u8868\u793a\u4e0a\u4e0b0 \u5de6\u53f3\u5c45\u4e2d < div style = \"width: 300px;margin: auto \" > \u4f60\u597d </ div > 9. \u9f20\u6807\u653e\u7f6e\u6837\u5f0f . class : hover { color : red ; } 10.\u53d6\u6d88a\u6807\u7b7e\u6587\u672c\u4e0b\u5212\u7ebf text-decoration : none ; 11. \u900f\u660e\u5ea6 \u503c\u533a\u95f4\u4e3a0-1 opacity : 0 . 8 ; 12. hover\uff08\u4f2a\u7c7b\uff09 <! DOCTYPE html > < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { color : red ; font-size : 18 px ; } . c1 : hover { color : green ; font-size : 50 px ; } . c2 { height : 300 px ; width : 500 px ; border : 3 px solid red ; } . c2 : hover { border : 3 px solid green ; } . download { display : none ; } . app : hover . download { display : block ; } . app : hover . title { color : red ; } </ style > </ head > < body > < div class = \"c1\" > \u8054\u901a </ div > < div class = \"c2\" > \u5e7f\u897f </ div > < div class = \"app\" > < div class = \"title\" > \u4e0b\u8f7dAPP </ div > < div class = \"download\" > < img src = \"images/qcode.png\" alt = \"\" > </ div > </ div > </ body > </ html > 13. after 13.1 after\u62fc\u63a5 < style > . c1 : after { content : \"\u4f60\u597d\" ; } </ style > </ head > < body > < div class = \"c1\" > \u8054\u901a </ div > < div class = \"c2\" > \u5e7f\u897f </ div > 13.2 after\u8131\u79bb\u6587\u6863\u6d41 \u5982\u679c\u6807\u7b7e\u4f7f\u7528 float \u6837\u5f0f\uff0c\u4f1a\u4f7f\u6807\u7b7e\u8131\u79bb\u6587\u6863\u6d41\uff0c\u65e0\u6cd5\u6491\u5f00\u7236\u5143\u7d20\uff0c\u6709\u4e24\u79cd\u89e3\u51b3\u529e\u6cd5 \u65b0\u5efa\u6807\u7b7e\u4e2d\u6dfb\u52a0 clear:both \u4f7f\u7528 after \u7684 clearfix . clearfix : after { content : \"\" ; display : block ; clear : both ; } 14. position 14.1 fixed-\u56fa\u5b9a\u5728\u7a97\u53e3\u67d0\u4e2a\u4f4d\u7f6e <! DOCTYPE html > < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . back { position : fixed ; width : 60 px ; height : 60 px ; border : 1 px solid red ; right : 10 px ; bottom : 50 px ; } </ style > </ head > < body > < div style = \"height: 1000px;background-color: #5f5750\" ></ div > < div class = \"back\" ></ div > </ body > </ html > 14.2 relative\u548cabsolute <! DOCTYPE html > < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { height : 300 px ; width : 500 px ; border : 1 px solid red ; margin : 100 px ; position : relative ; } . c1 . c2 { height : 59 px ; width : 59 px ; background-color : #00FF7F ; position : absolute ; right : 20 px ; bottom : 10 px ; } </ style > </ head > < body > < div class = \"c1\" > < div class = \"c2\" ></ div > </ div > </ body > </ html > 15. bootstrap \u4e0b\u8f7d \u8d77\u6b65 \u00b7 Bootstrap v3 \u4e2d\u6587\u6587\u6863 | Bootstrap \u4e2d\u6587\u7f51 (bootcss.com) \u653e\u7f6e\u4f4d\u7f6e /static/plugins/bootstrp\u6587\u4ef6\u5939 \u5f15\u5165 < link rel = \"stylesheet\" href = \"{ % s tatic 'plugins/bootstrap-3.4.1-dist/css/bootstrap.min.css' %}\" >","title":"CSS\u6837\u5f0f"},{"location":"programming/web/css-style/#1","text":". c1 { height : 300 px ; width : 50 % ; } \u5bbd\u5ea6\u8bbe\u7f6e\u652f\u6301\u50cf\u7d20\u548c\u767e\u5206\u6bd4\uff1b \u5bbd\u9ad8\u8bbe\u7f6e\u5bf9\u884c\u5185\u6807\u7b7e\u9ed8\u8ba4\u65e0\u6548\uff1b \u5bf9\u5757\u7ea7\u6807\u7b7e\u9ed8\u8ba4\u6709\u6548\uff08\u4f46\u5757\u7ea7\u6807\u7b7e\u975e\u5e38\u9738\u9053\uff0c\u5373\u65f6\u53f3\u8fb9\u7a7a\u51fa\u6765\u4e5f\u4e0d\u53ef\u4ee5\u4f7f\u7528\uff09","title":"1. \u9ad8\u5ea6\u548c\u5bbd\u5ea6"},{"location":"programming/web/css-style/#2","text":"\u89e3\u51b3\u5757\u7ea7\u6807\u7b7e\u72ec\u5360\u4e00\u884c\uff0c\u884c\u5185\u6807\u7b7e\u65e0\u6cd5\u6539\u53d8\u5bbd\u9ad8\u7684\u95ee\u9898 display: inline-block \u6539\u53d8\u6807\u7b7e\u7279\u6027\uff0c\u4f7f\u5176\u65e2\u5177\u5907\u884c\u5185\u6807\u7b7e\u7684\u7279\u6027\uff0c\u53c8\u5177\u5907\u5757\u7ea7\u6807\u7b7e\u7684\u7279\u6027 <! DOCTYPE html > < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { display : inline-block ; height : 300 px ; width : 300 px ; border : 1 px solid red ; } </ style > </ head > < body > < div class = \"c1\" > \u4e2d\u56fd\u8054\u901adiv </ div > < span class = \"c1\" > \u4e2d\u56fd\u8054\u901aspan </ span > < div class = \"c1\" > \u4e2d\u56fd\u8054\u901adiv </ div > < span class = \"c1\" > \u4e2d\u56fd\u79fb\u52a8span </ span > </ body > </ html >","title":"2. \u884c\u5185&amp;\u5757\u7ea7\u7279\u6027"},{"location":"programming/web/css-style/#21","text":"# \u5757\u7ea7\u6807\u7b7e\u8f6c\u4e3a\u884c\u5185 < div style = \"display: inline\" > \u4e2d\u56fd\u8054\u901adiv </ div > # \u884c\u5185\u8f6c\u5757\u7ea7 < span style = \"display: block\" > \u4e2d\u56fd\u8054\u901aspan </ span >","title":"2.1 \u884c\u5185\u548c\u5757\u7ea7\u8f6c\u6362"},{"location":"programming/web/css-style/#3","text":". c1 { color : red ; <! \u5b57\u4f53\u989c\u8272 font-size : 34 px ; <! \u5b57\u4f53\u5927\u5c0f font-weight : 500 ; <!\u5b57\u4f53\u7c97\u5ea6 font-family : Lantinghei SC ; <!\u5b57\u4f53 }","title":"3.\u5b57\u4f53\u548c\u989c\u8272"},{"location":"programming/web/css-style/#4","text":"text-align:center \u6c34\u5e73\u65b9\u5411\u5c45\u4e2d\uff1b line-height \u5782\u76f4\u65b9\u5411\u5bf9\u9f50\uff0c\u6570\u503c\u548c\u5757\u9ad8\u5ea6\u4e00\u81f4\uff0c\u5373\u5782\u76f4\u5c45\u4e2d \u5f53\u5757\u5185\u6709\u591a\u884c\u6587\u672c\u65f6\uff0c\u4e0d\u80fd\u8fd9\u6837\u4f7f\u7528 <! DOCTYPE html > < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { width : 50 % ; height : 100 px ; border : 1 px solid red ; text-align : center ; /* \u6c34\u5e73\u65b9\u5411\u5c45\u4e2d*/ line-height : 100 px ; /* \u5782\u76f4\u65b9\u5411\u5c45\u4e2d*/ } </ style > </ head > < body > < div class = \"c1\" > \u4e2d\u56fd\u8054\u901adiv </ div > </ body > </ html >","title":"4.\u6587\u5b57\u5bf9\u9f50"},{"location":"programming/web/css-style/#5","text":"float:right \u6807\u7b7e\u5411\u53f3\u8fb9\u6d6e\u52a8 < div > < span > \u5de6\u8fb9 </ span > < span style = \"float: right\" > \u53f3\u8fb9 </ span > </ div >","title":"5. \u6d6e\u52a8"},{"location":"programming/web/css-style/#51","text":"\u5757\u7ea7\u6807\u7b7e\u5165div\u8bbe\u7f6e float \u53c2\u6570\u540e\uff0c\u5c06\u4e0d\u518d\u662f\u5feb\u7ea7\u6807\u7b7e\uff0c\u4f1a\u6839\u636e\u81ea\u8eab\u8bbe\u7f6e\u7684\u5bbd\u9ad8\u5360\u4f4d <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . item { float : left ; width : 300 px ; height : 100 px ; border : 1 px solid red ; } </ style > </ head > < body > < div > < div class = \"item\" ></ div > < div class = \"item\" ></ div > < div class = \"item\" ></ div > < div class = \"item\" ></ div > </ div > </ body > </ html >","title":"5.1 \u5757\u7ea7\u6807\u7b7e\u6d6e\u52a8"},{"location":"programming/web/css-style/#52","text":"\u5982\u679c\u6807\u7b7e\u8bbe\u7f6e float \u6837\u5f0f\uff0c\u9700\u8981\u5728\u8be5\u6807\u7b7e\u7684\u672b\u5c3e\u6dfb\u52a0 clear:both \u5c5e\u6027\uff0c\u5426\u5219\u6539\u6807\u7b7e\u4f1a\u8131\u79bb\u6587\u6863\u6d41\u6d41\u98de\u8d77\u6765\uff0c\u65e0\u6cd5\u6491\u8d77\u7236\u6807\u7b7e <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . item { float : left ; width : 300 px ; height : 100 px ; border : 1 px solid red ; } </ style > </ head > < body > < div style = \"background-color: blue\" > < div class = \"item\" ></ div > < div class = \"item\" ></ div > < div class = \"item\" ></ div > < div class = \"item\" ></ div > < div style = \"clear: both\" ></ div > </ div > </ body > </ html >","title":"5.2 \u8131\u79bb\u6587\u6863\u6d41"},{"location":"programming/web/css-style/#6","text":"\u5757\u5185\u5143\u7d20\u4e0e\u5757\u8fb9\u7f18\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u5185\u8fb9\u8ddd\uff0c\u5757\u5927\u5c0f\u4f1a\u88ab\u6491\u5f00 padding-top: \u9876\u90e8 padding-left: \u5de6\u8fb9 padding-right: \u53f3\u8fb9 padding-bottom: \u5e95\u90e8 padding:20px \u4e0a\u4e0b\u5de6\u53f3\u5168\u662f20px\u7684\u5185\u8fb9\u8ddd padding:20px 10px 5px 20px \u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6\u5185\u8fb9\u8ddd <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { width : 200 px ; height : 200 px ; border : 1 px solid red ; padding-top : 20 px ; \u9876\u90e8 padding-left : 20 px ; \u5de6\u8fb9 padding-right : 20 px ; \u53f3\u8fb9 padding-bottom : 20 px ; \u5e95\u90e8 } . c2 { background-color : gold ; } </ style > </ head > < body > < div class = \"c1\" > < div class = \"c2\" > \u606d\u559c\u53d1\u8d22 </ div > < div > \u4e07\u4e8b\u5982\u610f </ div > </ div > </ body > </ html >","title":"6. \u5185\u8fb9\u8ddd"},{"location":"programming/web/css-style/#7","text":"body\u9ed8\u8ba4\u6709\u5916\u8fb9\u8ddd \u81ea\u8eab\u4e8e\u76f8\u90bb\u5757\u7684\u8fb9\u8ddd margin-top margin-left margin-right margin-bottom \u4e0a \u5de6 \u53f3 \u4e0b margin-top \u56db\u8fb9 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { height : 200 px ; background-color : gold ; } . c2 { height : 100 px ; background-color : red ; margin-top : 20 px ; } </ style > </ head > < body > < div class = \"c1\" ></ div > < div class = \"c2\" ></ div > </ body > </ html >","title":"7. \u5916\u8fb9\u8ddd"},{"location":"programming/web/css-style/#8","text":"\u6587\u672c\u5c45\u4e2d < div style = \"text-align: center\" > \u4f60\u597d </ div > \u533a\u57df\u5c45\u4e2d\uff08\u81ea\u5df1\u8981\u6709\u5bbd\u5ea6\uff09 margin:0 auto \u8868\u793a\u4e0a\u4e0b0 \u5de6\u53f3\u5c45\u4e2d < div style = \"width: 300px;margin: auto \" > \u4f60\u597d </ div >","title":"8.\u5c45\u4e2d"},{"location":"programming/web/css-style/#9","text":". class : hover { color : red ; }","title":"9. \u9f20\u6807\u653e\u7f6e\u6837\u5f0f"},{"location":"programming/web/css-style/#10a","text":"text-decoration : none ;","title":"10.\u53d6\u6d88a\u6807\u7b7e\u6587\u672c\u4e0b\u5212\u7ebf"},{"location":"programming/web/css-style/#11","text":"\u503c\u533a\u95f4\u4e3a0-1 opacity : 0 . 8 ;","title":"11. \u900f\u660e\u5ea6"},{"location":"programming/web/css-style/#12-hover","text":"<! DOCTYPE html > < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { color : red ; font-size : 18 px ; } . c1 : hover { color : green ; font-size : 50 px ; } . c2 { height : 300 px ; width : 500 px ; border : 3 px solid red ; } . c2 : hover { border : 3 px solid green ; } . download { display : none ; } . app : hover . download { display : block ; } . app : hover . title { color : red ; } </ style > </ head > < body > < div class = \"c1\" > \u8054\u901a </ div > < div class = \"c2\" > \u5e7f\u897f </ div > < div class = \"app\" > < div class = \"title\" > \u4e0b\u8f7dAPP </ div > < div class = \"download\" > < img src = \"images/qcode.png\" alt = \"\" > </ div > </ div > </ body > </ html >","title":"12. hover\uff08\u4f2a\u7c7b\uff09"},{"location":"programming/web/css-style/#13-after","text":"","title":"13. after"},{"location":"programming/web/css-style/#131-after","text":"< style > . c1 : after { content : \"\u4f60\u597d\" ; } </ style > </ head > < body > < div class = \"c1\" > \u8054\u901a </ div > < div class = \"c2\" > \u5e7f\u897f </ div >","title":"13.1 after\u62fc\u63a5"},{"location":"programming/web/css-style/#132-after","text":"\u5982\u679c\u6807\u7b7e\u4f7f\u7528 float \u6837\u5f0f\uff0c\u4f1a\u4f7f\u6807\u7b7e\u8131\u79bb\u6587\u6863\u6d41\uff0c\u65e0\u6cd5\u6491\u5f00\u7236\u5143\u7d20\uff0c\u6709\u4e24\u79cd\u89e3\u51b3\u529e\u6cd5 \u65b0\u5efa\u6807\u7b7e\u4e2d\u6dfb\u52a0 clear:both \u4f7f\u7528 after \u7684 clearfix . clearfix : after { content : \"\" ; display : block ; clear : both ; }","title":"13.2 after\u8131\u79bb\u6587\u6863\u6d41"},{"location":"programming/web/css-style/#14-position","text":"","title":"14. position"},{"location":"programming/web/css-style/#141-fixed-","text":"<! DOCTYPE html > < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . back { position : fixed ; width : 60 px ; height : 60 px ; border : 1 px solid red ; right : 10 px ; bottom : 50 px ; } </ style > </ head > < body > < div style = \"height: 1000px;background-color: #5f5750\" ></ div > < div class = \"back\" ></ div > </ body > </ html >","title":"14.1 fixed-\u56fa\u5b9a\u5728\u7a97\u53e3\u67d0\u4e2a\u4f4d\u7f6e"},{"location":"programming/web/css-style/#142-relativeabsolute","text":"<! DOCTYPE html > < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < style > . c1 { height : 300 px ; width : 500 px ; border : 1 px solid red ; margin : 100 px ; position : relative ; } . c1 . c2 { height : 59 px ; width : 59 px ; background-color : #00FF7F ; position : absolute ; right : 20 px ; bottom : 10 px ; } </ style > </ head > < body > < div class = \"c1\" > < div class = \"c2\" ></ div > </ div > </ body > </ html >","title":"14.2 relative\u548cabsolute"},{"location":"programming/web/css-style/#15-bootstrap","text":"\u4e0b\u8f7d \u8d77\u6b65 \u00b7 Bootstrap v3 \u4e2d\u6587\u6587\u6863 | Bootstrap \u4e2d\u6587\u7f51 (bootcss.com) \u653e\u7f6e\u4f4d\u7f6e /static/plugins/bootstrp\u6587\u4ef6\u5939 \u5f15\u5165 < link rel = \"stylesheet\" href = \"{ % s tatic 'plugins/bootstrap-3.4.1-dist/css/bootstrap.min.css' %}\" >","title":"15. bootstrap"},{"location":"programming/web/django-create/","text":"1. \u5b89\u88c5Django pip install django \u5b89\u88c5\u540eDjango\u540e\uff0cpython\u6587\u4ef6\u76ee\u5f55\u7ed3\u6784 c: \\p ython39 - python.exe - Scripts - pip.exe - django-admin.exe \u3010\u5de5\u5177\uff0c\u521b\u5efadjango\u9879\u76ee\u4e2d\u7684\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u3011 - Lib - \u5185\u7f6e\u6a21\u5757 - site-packages - openpyxl - python-docx - flask - django \u3010\u6846\u67b6\u7684\u6e90\u7801\u3011 2. \u521b\u5efa\u9879\u76ee 2.1 \u7ec8\u7aef\u521b\u5efa cd\u81f3\u9700\u8981\u653eDjango\u9879\u76ee\u7684\u6587\u4ef6\u5939 \u6267\u884c\u521b\u5efa\u547d\u4ee4 \"c:\\python39\\Scripts\\django-admin.exe\" startproject \u9879\u76ee\u540d\u79f0 2.2 pycharm\u521b\u5efa 2.3 \u4e24\u79cd\u521b\u5efa\u65b9\u5f0f\u5bf9\u6bd4 \u901a\u8fc7\u7ec8\u7aef\u521b\u5efa\u7684\u662f\u6807\u51c6\u7684Django\u9879\u76ee \u901a\u8fc7pycharm\u521b\u5efa\u7684\uff0c\u4f1a\u5728\u6807\u51c6\u7684\u57fa\u7840\u4e0a\uff0c\u52a0\u4e00\u4e9b\u4e1c\u897f \u81ea\u52a8\u521b\u5efa\u4e86templates\u76ee\u5f55\u3010\u5220\u9664\u6389\u3011 seting.py\u6587\u4ef6\u4e2d \u3010\u5220\u9664\u6389\u3011 2.4 \u9ed8\u8ba4\u6587\u4ef6\u4ecb\u7ecd mysite \u251c\u2500\u2500 manage.py \u3010\u9879\u76ee\u7684\u7ba1\u7406\uff0c\u542f\u52a8\u9879\u76ee\u3001\u521b\u5efaapp\u3001\u6570\u636e\u7ba1\u7406\u3011\u3010***\u5e38\u5e38\u7528***\u3011 \u2514\u2500\u2500 mysite \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u3010\u9879\u76ee\u914d\u7f6e\u3011 \u3010***\u5e38\u5e38\u4fee\u6539***\u3011 \u251c\u2500\u2500 urls.py \u3010URL\u548c\u51fd\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u3011\u3010***\u5e38\u5e38\u4fee\u6539***\u3011 \u251c\u2500\u2500 asgi.py \u3010\u63a5\u6536\u7f51\u7edc\u8bf7\u6c42\u3011 \u3010\u5f02\u6b65\u3011 \u2514\u2500\u2500 wsgi.py \u3010\u63a5\u6536\u7f51\u7edc\u8bf7\u6c42\u3011 \u3010\u540c\u6b65\u3011 3. \u521b\u5efaAPP python manage.py startapp appname - \u9879\u76ee - app\uff0c\u7528\u6237\u7ba1\u7406\u3010\u8868\u7ed3\u6784\u3001\u51fd\u6570\u3001HTML\u6a21\u677f\u3001CSS\u3011 - app\uff0c\u8ba2\u5355\u7ba1\u7406\u3010\u8868\u7ed3\u6784\u3001\u51fd\u6570\u3001HTML\u6a21\u677f\u3001CSS\u3011 - app\uff0c\u540e\u53f0\u7ba1\u7406\u3010\u8868\u7ed3\u6784\u3001\u51fd\u6570\u3001HTML\u6a21\u677f\u3001CSS\u3011 - app\uff0c\u7f51\u7ad9 \u3010\u8868\u7ed3\u6784\u3001\u51fd\u6570\u3001HTML\u6a21\u677f\u3001CSS\u3011 - app\uff0cAPI \u3010\u8868\u7ed3\u6784\u3001\u51fd\u6570\u3001HTML\u6a21\u677f\u3001CSS\u3011 ... \u6ce8\u610f\uff1a\u6bd4\u8f83\u7b80\u6d01\u7684\u5f00\u53d1\uff0c\u7528\u4e0d\u5230\u591aapp\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u9879\u76ee\u4e0b\u521b\u5efa1\u4e2aapp\u5373\u53ef\u3002 \u251c\u2500\u2500 app01 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u3010\u56fa\u5b9a\uff0c\u4e0d\u7528\u52a8\u3011django\u9ed8\u8ba4\u63d0\u4f9b\u4e86admin\u540e\u53f0\u7ba1\u7406\u3002 \u2502 \u251c\u2500\u2500 apps.py \u3010\u56fa\u5b9a\uff0c\u4e0d\u7528\u52a8\u3011app\u542f\u52a8\u7c7b \u2502 \u251c\u2500\u2500 migrations \u3010\u56fa\u5b9a\uff0c\u4e0d\u7528\u52a8\u3011\u6570\u636e\u5e93\u53d8\u66f4\u8bb0\u5f55 \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u3010**\u91cd\u8981**\u3011\uff0c\u5bf9\u6570\u636e\u5e93\u64cd\u4f5c\u3002 \u2502 \u251c\u2500\u2500 tests.py \u3010\u56fa\u5b9a\uff0c\u4e0d\u7528\u52a8\u3011\u5355\u5143\u6d4b\u8bd5 \u2502 \u2514\u2500\u2500 views.py \u3010**\u91cd\u8981**\u3011\uff0c\u51fd\u6570\u3002 \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 mysite2 \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 asgi.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u3010URL->\u51fd\u6570\u3011 \u2514\u2500\u2500 wsgi.py 3.1 app\u6ce8\u518c \u9879\u76ee\u76ee\u5f55\u4e0b\u7684seting.py\u6587\u4ef6\u4e2d INSTALLED_APP\u5904\u6dfb\u52a0 app.apps.appclass 3.2 url\u548c\u51fd\u6570\u5bf9\u5e94\u5173\u7cfb \u5728\u9879\u76ee\u76ee\u5f55\u4e0b\u7684urls.py\u6587\u4ef6\u4e2d\u7f16\u5199 3.3 \u89c6\u56fe\u51fd\u6570 app\u76ee\u5f55\u4e0b\u7684views.py\u6587\u4ef6\u4e2d 3.4 \u542f\u52a8\u9879\u76ee \u7ec8\u7aef\u542f\u52a8 python manage.py runserver pycharm\u542f\u52a8 4. \u524d\u7aef\u9875\u9762 4.1 html\u6587\u4ef6 views\u6587\u4ef6\u4e2d\u6307\u5411html\u6587\u4ef6 \u5bfb\u627e\u903b\u8f91\u662f\u5728APP\u76ee\u5f55\u4e0b\u7684templates\u76ee\u5f55\u4e0b def user_list ( request ): return render ( request , 'user_list.html' ) 4.2 templates\u76ee\u5f55 \u521b\u5efa\u5728APP\u76ee\u5f55\u4e0b 4.3 \u9759\u6001\u6587\u4ef6 \u5728APP\u76ee\u5f55\u4e0b\u521b\u5efastatic\u76ee\u5f55 css js img plugins 4.4 \u9759\u6001\u6587\u4ef6\u5f15\u7528 - \u6587\u4ef6\u5934\u52a0 { % load static % } - \u5f15\u5165\u4f4d\u7f6e\u52a0 { % static '\u6587\u4ef6\u8def\u5f84' % } 5. \u6a21\u677f\u8bed\u6cd5 \u53d8\u91cf\u52a0\u53cc\u5927\u62ec\u53f7 < div > {{ name }} < div > \u7d22\u5f15\u53d6\u503c < div > {{ name .1 }} < div > \u652f\u6301\u5faa\u73af { % for item in name_List % } < div > {{ item }} < div > { % endfor % } \u63a7\u5236\u6761\u4ef6 { % if name == '\u5c0f\u660e' % } < div > {{ name }} < div > { % elif name == '\u5c0f\u674e' % } < div > {{ name }} < div > { % else % } < div > {{ name }} < div > { % endif % } 5. \u8bf7\u6c42\u548c\u54cd\u5e94 5.1 \u8bf7\u6c42 request.method request . method --> \u83b7\u53d6\u8bf7\u6c42\u65b9\u5f0f \uff0c GET / POST request.get request . get --> \u5728url\u4e2d\u4f20\u53c2 \uff0c index / ? n1 = 100 & n2 = 999 request.post request . post --> \u5728\u8bf7\u6c42\u4f53\u4e2d\u63d0\u4ea4\u6570\u636e 5.2 \u54cd\u5e94 HttpResponse return HttpResponse ( '\u8fd4\u56de\u7684\u5b57\u7b26\u4e32' ) --> \u5b57\u7b26\u4e32\u5185\u5bb9\u8fd4\u56de\u7ed9\u8bf7\u6c42\u8005 render # \u8fd4\u56de\u4e00\u4e2ahtml\uff0c\u5148\u8bfb\u53d6HTML\u7684\u5185\u5bb9+\u6e32\u67d3->\u5f62\u6210\u5b57\u7b26\u4e32\u8fd4\u56de\u7ed9\u8bf7\u6c42\u8005 return render ( request , 'index.html' ,{ 'tittle' : '\u4e00\u8d77\u8fd4\u56de\u7684\u6570\u636e' }) redirect \u91cd\u5b9a\u5411 # \u8ba9\u6d4f\u89c8\u5668\u91cd\u5b9a\u5411\u5230\u5176\u4ed6\u9875\u9762 return redirect ( 'https://www.baidu.com' ) \u91cd\u5b9a\u5411\u7684\u6b65\u9aa4\u662f\uff0c\u8bf7\u6c42\u540e\u8fd4\u56de\u91cd\u5b9a\u5411\u7f51\u7ad9\uff0c\u6d4f\u89c8\u5668\u518d\u6b21\u5411\u91cd\u5b9a\u5411\u7f51\u7ad9\u53d1\u8bf7\u6c42 \u7528\u6237\u767b\u5f55\u6848\u4f8b csrf_token form\u8868\u5355\u4e3a\u4e86\u5b89\u5168\u9a8c\u8bc1\uff0cdjango\u5185\u7f6e\u7684\u9a8c\u8bc1\u673a\u5236\uff0c\u9700\u8981\u5728form\u8868\u5355\u5185\u6dfb\u52a0 {% csrf_token %} urls urlpatterns = [ # path('admin/', admin.site.urls), path ( 'login/' , views . login ), ] view.py from django.shortcuts import render , HttpResponse , redirect # Create your views here. def login ( request ): if request . method == 'GET' : return render ( request , 'login.html' ) username = request . POST . get ( 'user' ) pwd = request . POST . get ( 'pwd' ) if username == 'root' and pwd == '123' : return redirect ( 'https://www.baidu.com' ) return render ( request , 'login.html' , { 'error_msg' : '\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef' }) login.html < ! DOCTYPE html > < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < h1 > \u7528\u6237\u767b\u5f55 </ h1 > < form method = \"post\" action = \"/login/\" > { % csrf_token % } < input type = \"text\" name = \"user\" placeholder = \"\u7528\u6237\u540d\" > < input type = \"password\" name = \"pwd\" placeholder = \"\u5bc6\u7801\" > < input type = \"submit\" value = \"\u63d0\u4ea4\" > < span style = \"color: red\" > {{ error_msg }} </ span > </ form > </ body > </ html >","title":"django\u521b\u5efa"},{"location":"programming/web/django-create/#1-django","text":"pip install django \u5b89\u88c5\u540eDjango\u540e\uff0cpython\u6587\u4ef6\u76ee\u5f55\u7ed3\u6784 c: \\p ython39 - python.exe - Scripts - pip.exe - django-admin.exe \u3010\u5de5\u5177\uff0c\u521b\u5efadjango\u9879\u76ee\u4e2d\u7684\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u3011 - Lib - \u5185\u7f6e\u6a21\u5757 - site-packages - openpyxl - python-docx - flask - django \u3010\u6846\u67b6\u7684\u6e90\u7801\u3011","title":"1. \u5b89\u88c5Django"},{"location":"programming/web/django-create/#2","text":"","title":"2. \u521b\u5efa\u9879\u76ee"},{"location":"programming/web/django-create/#21","text":"cd\u81f3\u9700\u8981\u653eDjango\u9879\u76ee\u7684\u6587\u4ef6\u5939 \u6267\u884c\u521b\u5efa\u547d\u4ee4 \"c:\\python39\\Scripts\\django-admin.exe\" startproject \u9879\u76ee\u540d\u79f0","title":"2.1 \u7ec8\u7aef\u521b\u5efa"},{"location":"programming/web/django-create/#22-pycharm","text":"","title":"2.2 pycharm\u521b\u5efa"},{"location":"programming/web/django-create/#23","text":"\u901a\u8fc7\u7ec8\u7aef\u521b\u5efa\u7684\u662f\u6807\u51c6\u7684Django\u9879\u76ee \u901a\u8fc7pycharm\u521b\u5efa\u7684\uff0c\u4f1a\u5728\u6807\u51c6\u7684\u57fa\u7840\u4e0a\uff0c\u52a0\u4e00\u4e9b\u4e1c\u897f \u81ea\u52a8\u521b\u5efa\u4e86templates\u76ee\u5f55\u3010\u5220\u9664\u6389\u3011 seting.py\u6587\u4ef6\u4e2d \u3010\u5220\u9664\u6389\u3011","title":"2.3 \u4e24\u79cd\u521b\u5efa\u65b9\u5f0f\u5bf9\u6bd4"},{"location":"programming/web/django-create/#24","text":"mysite \u251c\u2500\u2500 manage.py \u3010\u9879\u76ee\u7684\u7ba1\u7406\uff0c\u542f\u52a8\u9879\u76ee\u3001\u521b\u5efaapp\u3001\u6570\u636e\u7ba1\u7406\u3011\u3010***\u5e38\u5e38\u7528***\u3011 \u2514\u2500\u2500 mysite \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u3010\u9879\u76ee\u914d\u7f6e\u3011 \u3010***\u5e38\u5e38\u4fee\u6539***\u3011 \u251c\u2500\u2500 urls.py \u3010URL\u548c\u51fd\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u3011\u3010***\u5e38\u5e38\u4fee\u6539***\u3011 \u251c\u2500\u2500 asgi.py \u3010\u63a5\u6536\u7f51\u7edc\u8bf7\u6c42\u3011 \u3010\u5f02\u6b65\u3011 \u2514\u2500\u2500 wsgi.py \u3010\u63a5\u6536\u7f51\u7edc\u8bf7\u6c42\u3011 \u3010\u540c\u6b65\u3011","title":"2.4 \u9ed8\u8ba4\u6587\u4ef6\u4ecb\u7ecd"},{"location":"programming/web/django-create/#3-app","text":"python manage.py startapp appname - \u9879\u76ee - app\uff0c\u7528\u6237\u7ba1\u7406\u3010\u8868\u7ed3\u6784\u3001\u51fd\u6570\u3001HTML\u6a21\u677f\u3001CSS\u3011 - app\uff0c\u8ba2\u5355\u7ba1\u7406\u3010\u8868\u7ed3\u6784\u3001\u51fd\u6570\u3001HTML\u6a21\u677f\u3001CSS\u3011 - app\uff0c\u540e\u53f0\u7ba1\u7406\u3010\u8868\u7ed3\u6784\u3001\u51fd\u6570\u3001HTML\u6a21\u677f\u3001CSS\u3011 - app\uff0c\u7f51\u7ad9 \u3010\u8868\u7ed3\u6784\u3001\u51fd\u6570\u3001HTML\u6a21\u677f\u3001CSS\u3011 - app\uff0cAPI \u3010\u8868\u7ed3\u6784\u3001\u51fd\u6570\u3001HTML\u6a21\u677f\u3001CSS\u3011 ... \u6ce8\u610f\uff1a\u6bd4\u8f83\u7b80\u6d01\u7684\u5f00\u53d1\uff0c\u7528\u4e0d\u5230\u591aapp\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u9879\u76ee\u4e0b\u521b\u5efa1\u4e2aapp\u5373\u53ef\u3002 \u251c\u2500\u2500 app01 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u3010\u56fa\u5b9a\uff0c\u4e0d\u7528\u52a8\u3011django\u9ed8\u8ba4\u63d0\u4f9b\u4e86admin\u540e\u53f0\u7ba1\u7406\u3002 \u2502 \u251c\u2500\u2500 apps.py \u3010\u56fa\u5b9a\uff0c\u4e0d\u7528\u52a8\u3011app\u542f\u52a8\u7c7b \u2502 \u251c\u2500\u2500 migrations \u3010\u56fa\u5b9a\uff0c\u4e0d\u7528\u52a8\u3011\u6570\u636e\u5e93\u53d8\u66f4\u8bb0\u5f55 \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u3010**\u91cd\u8981**\u3011\uff0c\u5bf9\u6570\u636e\u5e93\u64cd\u4f5c\u3002 \u2502 \u251c\u2500\u2500 tests.py \u3010\u56fa\u5b9a\uff0c\u4e0d\u7528\u52a8\u3011\u5355\u5143\u6d4b\u8bd5 \u2502 \u2514\u2500\u2500 views.py \u3010**\u91cd\u8981**\u3011\uff0c\u51fd\u6570\u3002 \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 mysite2 \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 asgi.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u3010URL->\u51fd\u6570\u3011 \u2514\u2500\u2500 wsgi.py","title":"3. \u521b\u5efaAPP"},{"location":"programming/web/django-create/#31-app","text":"\u9879\u76ee\u76ee\u5f55\u4e0b\u7684seting.py\u6587\u4ef6\u4e2d INSTALLED_APP\u5904\u6dfb\u52a0 app.apps.appclass","title":"3.1 app\u6ce8\u518c"},{"location":"programming/web/django-create/#32-url","text":"\u5728\u9879\u76ee\u76ee\u5f55\u4e0b\u7684urls.py\u6587\u4ef6\u4e2d\u7f16\u5199","title":"3.2 url\u548c\u51fd\u6570\u5bf9\u5e94\u5173\u7cfb"},{"location":"programming/web/django-create/#33","text":"app\u76ee\u5f55\u4e0b\u7684views.py\u6587\u4ef6\u4e2d","title":"3.3 \u89c6\u56fe\u51fd\u6570"},{"location":"programming/web/django-create/#34","text":"\u7ec8\u7aef\u542f\u52a8 python manage.py runserver pycharm\u542f\u52a8","title":"3.4 \u542f\u52a8\u9879\u76ee"},{"location":"programming/web/django-create/#4","text":"","title":"4. \u524d\u7aef\u9875\u9762"},{"location":"programming/web/django-create/#41-html","text":"views\u6587\u4ef6\u4e2d\u6307\u5411html\u6587\u4ef6 \u5bfb\u627e\u903b\u8f91\u662f\u5728APP\u76ee\u5f55\u4e0b\u7684templates\u76ee\u5f55\u4e0b def user_list ( request ): return render ( request , 'user_list.html' )","title":"4.1 html\u6587\u4ef6"},{"location":"programming/web/django-create/#42-templates","text":"\u521b\u5efa\u5728APP\u76ee\u5f55\u4e0b","title":"4.2 templates\u76ee\u5f55"},{"location":"programming/web/django-create/#43","text":"\u5728APP\u76ee\u5f55\u4e0b\u521b\u5efastatic\u76ee\u5f55 css js img plugins","title":"4.3 \u9759\u6001\u6587\u4ef6"},{"location":"programming/web/django-create/#44","text":"- \u6587\u4ef6\u5934\u52a0 { % load static % } - \u5f15\u5165\u4f4d\u7f6e\u52a0 { % static '\u6587\u4ef6\u8def\u5f84' % }","title":"4.4 \u9759\u6001\u6587\u4ef6\u5f15\u7528"},{"location":"programming/web/django-create/#5","text":"\u53d8\u91cf\u52a0\u53cc\u5927\u62ec\u53f7 < div > {{ name }} < div > \u7d22\u5f15\u53d6\u503c < div > {{ name .1 }} < div > \u652f\u6301\u5faa\u73af { % for item in name_List % } < div > {{ item }} < div > { % endfor % } \u63a7\u5236\u6761\u4ef6 { % if name == '\u5c0f\u660e' % } < div > {{ name }} < div > { % elif name == '\u5c0f\u674e' % } < div > {{ name }} < div > { % else % } < div > {{ name }} < div > { % endif % }","title":"5. \u6a21\u677f\u8bed\u6cd5"},{"location":"programming/web/django-create/#5_1","text":"","title":"5. \u8bf7\u6c42\u548c\u54cd\u5e94"},{"location":"programming/web/django-create/#51","text":"request.method request . method --> \u83b7\u53d6\u8bf7\u6c42\u65b9\u5f0f \uff0c GET / POST request.get request . get --> \u5728url\u4e2d\u4f20\u53c2 \uff0c index / ? n1 = 100 & n2 = 999 request.post request . post --> \u5728\u8bf7\u6c42\u4f53\u4e2d\u63d0\u4ea4\u6570\u636e","title":"5.1 \u8bf7\u6c42"},{"location":"programming/web/django-create/#52","text":"HttpResponse return HttpResponse ( '\u8fd4\u56de\u7684\u5b57\u7b26\u4e32' ) --> \u5b57\u7b26\u4e32\u5185\u5bb9\u8fd4\u56de\u7ed9\u8bf7\u6c42\u8005 render # \u8fd4\u56de\u4e00\u4e2ahtml\uff0c\u5148\u8bfb\u53d6HTML\u7684\u5185\u5bb9+\u6e32\u67d3->\u5f62\u6210\u5b57\u7b26\u4e32\u8fd4\u56de\u7ed9\u8bf7\u6c42\u8005 return render ( request , 'index.html' ,{ 'tittle' : '\u4e00\u8d77\u8fd4\u56de\u7684\u6570\u636e' }) redirect \u91cd\u5b9a\u5411 # \u8ba9\u6d4f\u89c8\u5668\u91cd\u5b9a\u5411\u5230\u5176\u4ed6\u9875\u9762 return redirect ( 'https://www.baidu.com' ) \u91cd\u5b9a\u5411\u7684\u6b65\u9aa4\u662f\uff0c\u8bf7\u6c42\u540e\u8fd4\u56de\u91cd\u5b9a\u5411\u7f51\u7ad9\uff0c\u6d4f\u89c8\u5668\u518d\u6b21\u5411\u91cd\u5b9a\u5411\u7f51\u7ad9\u53d1\u8bf7\u6c42","title":"5.2 \u54cd\u5e94"},{"location":"programming/web/django-create/#_1","text":"","title":"\u7528\u6237\u767b\u5f55\u6848\u4f8b"},{"location":"programming/web/django-create/#csrf_token","text":"form\u8868\u5355\u4e3a\u4e86\u5b89\u5168\u9a8c\u8bc1\uff0cdjango\u5185\u7f6e\u7684\u9a8c\u8bc1\u673a\u5236\uff0c\u9700\u8981\u5728form\u8868\u5355\u5185\u6dfb\u52a0 {% csrf_token %} urls urlpatterns = [ # path('admin/', admin.site.urls), path ( 'login/' , views . login ), ] view.py from django.shortcuts import render , HttpResponse , redirect # Create your views here. def login ( request ): if request . method == 'GET' : return render ( request , 'login.html' ) username = request . POST . get ( 'user' ) pwd = request . POST . get ( 'pwd' ) if username == 'root' and pwd == '123' : return redirect ( 'https://www.baidu.com' ) return render ( request , 'login.html' , { 'error_msg' : '\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef' }) login.html < ! DOCTYPE html > < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < h1 > \u7528\u6237\u767b\u5f55 </ h1 > < form method = \"post\" action = \"/login/\" > { % csrf_token % } < input type = \"text\" name = \"user\" placeholder = \"\u7528\u6237\u540d\" > < input type = \"password\" name = \"pwd\" placeholder = \"\u5bc6\u7801\" > < input type = \"submit\" value = \"\u63d0\u4ea4\" > < span style = \"color: red\" > {{ error_msg }} </ span > </ form > </ body > </ html >","title":"csrf_token"},{"location":"programming/web/form/","text":"1. \u6a21\u677f\u7684\u7ee7\u627f \u5b9a\u4e49\u6a21\u677f\uff1a layout.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < link rel = \"stylesheet\" href = \"{% static 'plugin...min.css' %}\" > {% block css %}{% endblock %} </ head > < body > < h1 > \u6807\u9898 </ h1 > < div > {% block content %}{% endblock %} </ div > < h1 > \u5e95\u90e8 </ h1 > < script src = \"{% static 'js/jquery-3.6.0.min.js' %}\" ></ script > {% block js %}{% endblock %} </ body > </ html > \u7ee7\u627f\u6a21\u677f\uff1a {% extends 'layout.html' %} {% block css %} < link rel = \"stylesheet\" href = \"{% static 'pluxxx.css' %}\" > < style > ... </ style > {% endblock %} {% block content %} < h1 > \u9996\u9875 </ h1 > {% endblock %} {% block js %} < script src = \"{% static 'js/jqxxxin.js' %}\" ></ script > {% endblock %} 2. datetime\u8f6c\u6362 \u540e\u7aef \u5b57\u6bb5 . strftime ( '%Y-%m- %d ' ) % y \u4e24\u4f4d\u6570\u7684\u5e74\u4efd\u8868\u793a \uff08 00 - 99 \uff09 % Y \u56db\u4f4d\u6570\u7684\u5e74\u4efd\u8868\u793a \uff08 000 - 9999 \uff09 % m \u6708\u4efd \uff08 01 - 12 \uff09 % d \u6708\u5185\u4e2d\u7684\u4e00\u5929 \uff08 0 - 31 \uff09 % H 24 \u5c0f\u65f6\u5236\u5c0f\u65f6\u6570 \uff08 0 - 23 \uff09 % I 12 \u5c0f\u65f6\u5236\u5c0f\u65f6\u6570 \uff08 01 - 12 \uff09 % M \u5206\u949f\u6570 \uff08 00 = 59 \uff09 % S \u79d2 \uff08 00 - 59 \uff09 html {{ date_time | date : \"Y-m-d\" }} 3. choices \u9009\u62e9 gender_choices = ( ( 1 , \"\u7537\" ), ( 2 , \"\u5973\" ), ) gender = models . SmallIntegerField ( verbose_name = \"\u6027\u522b\" , choices = gender_choices ) # \u6839\u636eid\u83b7\u53d6\u6027\u522b get_gender_display () # html\u5185\u4e0d\u52a0\u62ec\u53f7 4. \u8054\u8868\u5b57\u6bb5\u53d6\u503c depart = models . ForeignKey ( to = \"Department\" , to_field = \"id\" , on_delete = models . CASCADE , verbose_name = '\u90e8\u95e8ID' ) # \u5728\u672c\u8868\u5185\u5b58\u50a8\u7684\u662fdepart_id,\u9700\u8981\u83b7\u53d6Department\u8868\u5185\u5176\u4ed6\u5b57\u6bb5\uff0c\u4ee5depart\u4f5c\u4e3a\u8fde\u63a5 title = depart . tittle 5. forms 5.1 \u5e38\u7528\u5b57\u6bb5 - CharField # \u5b57\u7b26\u4e32 - IntegerField # \u6574\u5f62 - SmallIntegerField # \u5c0f\u6574\u5f62 - BooleanField # \u5e03\u5c14\u578b - ChoiceField # \u9009\u62e9 - ModelChoiceField # \u5173\u7cfb\u6a21\u578b - DateTimeField # \u65e5\u671f\u65f6\u95f4 [ '%Y-%m- %d %H:%M:%S' , # '2019-1-5 11:15:57' '%Y-%m- %d %H:%M' , # '2019-3-25 13:30' '%Y-%m- %d ' , # '2019-12-5' '%m/ %d /%Y %H:%M:%S' , # '10/25/2006 14:30:59' '%m/ %d /%Y %H:%M' , # '10/25/2006 14:30' '%m/ %d /%Y' , # '10/25/2006' '%m/ %d /%y %H:%M:%S' , # '1/15/09 14:30:59' '%m/ %d /%y %H:%M' , # '1/15/09 14:30' '%m/ %d /%y' ] # '1/15/09' 5.2 \u9a8c\u8bc1 forms\u9a8c\u8bc1 # forms\u9a8c\u8bc1 from django.core.validators import RegexValidator mobile = forms . CharField ( label = '\u624b\u673a\u53f7' , validators = [ RegexValidator ( r '^1[3-9]\\d {9} ' , '\u9700\u8981\u6570\u5b57' )]) \u94a9\u5b50\u9a8c\u8bc1 def clean_mobile ( self ): import re from django.core.exceptions import ValidationError txt_mobile = self . cleaned_data [ 'mobile' ] re_flag = re . compile ( r '^1[3-9]\\d {9} ' ) if not re_flag . match ( txt_mobile ): raise ValidationError ( '\u683c\u5f0f\u9519\u8bef' ) return txt_mobile 6. Modelform class UserAddForm ( forms . ModelForm ): query_set = models . Department . objects . all () depart = forms . ModelChoiceField ( queryset = query_set , label = '\u6240\u5c5e\u90e8\u95e8' , to_field_name = 'id' , empty_label = '\u8bf7\u9009\u62e9---' , widget = forms . Select ( attrs = { 'class' : 'form-control' , })) class Meta : model = models . UserInfo fields = [ 'name' , 'password' , 'age' , 'account' , 'create_time' , 'gender' , 'depart' ] labels = { 'name' : '\u59d3\u540d' , 'password' : '\u5bc6\u7801' , 'age' : '\u5e74\u9f84' , 'account' : '\u8d26\u6237\u4f59\u989d' , 'create_time' : '\u6ce8\u518c\u65f6\u95f4' , 'gender' : '\u6027\u522b' } widgets = { 'name' : forms . TextInput ( attrs = { 'class' : 'form-control' , 'placeholder' : '\u8bf7\u8f93\u5165\u59d3\u540d' }), 'password' : forms . PasswordInput ( attrs = { 'class' : 'form-control' , 'placeholder' : '\u8bf7\u8f93\u5165\u5bc6\u7801' }), 'age' : forms . NumberInput ( attrs = { 'class' : 'form-control' , 'placeholder' : '\u8bf7\u8f93\u5165\u5e74\u9f84' }), 'account' : forms . NumberInput ( attrs = { 'class' : 'form-control' , 'placeholder' : '\u8bf7\u8f93\u5165\u8d26\u6237\u4f59\u989d' }), 'create_time' : forms . TextInput ( attrs = { 'class' : 'form-control' , 'placeholder' : '\u521b\u5efa\u65f6\u95f4' }), 'gender' : forms . Select ( attrs = { 'class' : 'form-control' }) } 6.1 save\u65b9\u6cd5 \u65b0\u589e form = PrettyModelForm ( request . POST ) #post\u8bf7\u6c42\u7684\u6570\u636e\u5728\u6570\u636e\u5e93\u65b0\u589e if form . is_valid (): # \u9a8c\u8bc1\u901a\u8fc7\u540e\u6267\u884c form . save () return redirect ( '/pretty_list' ) return render ( request , 'pretty_add.html' , { 'form' : form }) \u67e5\u770b a = Book . objects . get ( id = 1 ) f = BookForm ( instance = a ) f . save () \u4fee\u6539 a = Book . objects . get ( id = 1 ) f = BookForm ( request . POST , instance = a ) f . save () 7. \u6279\u91cf\u4fee\u6539\u6807\u7b7e\u5c5e\u6027 def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) for key , field in self . fields . items (): field . widget . attrs = { 'class' : 'form-control' , 'placeholder' : field . label } 8. \u9a8c\u8bc1\u5728\u6570\u636e\u5e93\u662f\u5426\u5b58\u5728 models . \u6570\u636e\u5e93 . object . filter ( id = id ) . exists () \u6392\u9664\u81ea\u5df1\uff0c\u67e5\u770b\u662f\u5426\u6709\u5176\u4ed6\u7684\u5b58\u5728 # id!= primary_key and mobile=post.mobile models . \u6570\u636e\u5e93 . object . exclude ( id = self . instance . pk ) . filter ( mobile = mobile ) . exists () 9. \u67d0\u4e2a\u5b57\u6bb5\u5c55\u793a\u4f46\u4e0d\u652f\u6301\u7f16\u8f91 mobile = forms . CharField ( label = '\u624b\u673a\u53f7' , disabled = True ) 10. bootstrap.modelform\u7c7b class BootStrapModelForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) # \u5faa\u73afModelForm\u4e2d\u7684\u6240\u6709\u5b57\u6bb5\uff0c\u7ed9\u6bcf\u4e2a\u5b57\u6bb5\u7684\u63d2\u4ef6\u8bbe\u7f6e for name , field in self . fields . items (): # \u5b57\u6bb5\u4e2d\u6709\u5c5e\u6027\uff0c\u4fdd\u7559\u539f\u6765\u7684\u5c5e\u6027\uff0c\u6ca1\u6709\u5c5e\u6027\uff0c\u624d\u589e\u52a0\u3002 if field . widget . attrs : field . widget . attrs [ \"class\" ] = \"form-control\" field . widget . attrs [ \"placeholder\" ] = field . label else : field . widget . attrs = { \"class\" : \"form-control\" , \"placeholder\" : field . label } class UserEditModelForm ( BootStrapModelForm ): class Meta : model = models . UserInfo fields = [ \"name\" , \"password\" , \"age\" ,]","title":"\u6a21\u677f\u8bed\u6cd5"},{"location":"programming/web/form/#1","text":"\u5b9a\u4e49\u6a21\u677f\uff1a layout.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < link rel = \"stylesheet\" href = \"{% static 'plugin...min.css' %}\" > {% block css %}{% endblock %} </ head > < body > < h1 > \u6807\u9898 </ h1 > < div > {% block content %}{% endblock %} </ div > < h1 > \u5e95\u90e8 </ h1 > < script src = \"{% static 'js/jquery-3.6.0.min.js' %}\" ></ script > {% block js %}{% endblock %} </ body > </ html > \u7ee7\u627f\u6a21\u677f\uff1a {% extends 'layout.html' %} {% block css %} < link rel = \"stylesheet\" href = \"{% static 'pluxxx.css' %}\" > < style > ... </ style > {% endblock %} {% block content %} < h1 > \u9996\u9875 </ h1 > {% endblock %} {% block js %} < script src = \"{% static 'js/jqxxxin.js' %}\" ></ script > {% endblock %}","title":"1. \u6a21\u677f\u7684\u7ee7\u627f"},{"location":"programming/web/form/#2-datetime","text":"\u540e\u7aef \u5b57\u6bb5 . strftime ( '%Y-%m- %d ' ) % y \u4e24\u4f4d\u6570\u7684\u5e74\u4efd\u8868\u793a \uff08 00 - 99 \uff09 % Y \u56db\u4f4d\u6570\u7684\u5e74\u4efd\u8868\u793a \uff08 000 - 9999 \uff09 % m \u6708\u4efd \uff08 01 - 12 \uff09 % d \u6708\u5185\u4e2d\u7684\u4e00\u5929 \uff08 0 - 31 \uff09 % H 24 \u5c0f\u65f6\u5236\u5c0f\u65f6\u6570 \uff08 0 - 23 \uff09 % I 12 \u5c0f\u65f6\u5236\u5c0f\u65f6\u6570 \uff08 01 - 12 \uff09 % M \u5206\u949f\u6570 \uff08 00 = 59 \uff09 % S \u79d2 \uff08 00 - 59 \uff09 html {{ date_time | date : \"Y-m-d\" }}","title":"2. datetime\u8f6c\u6362"},{"location":"programming/web/form/#3-choices","text":"gender_choices = ( ( 1 , \"\u7537\" ), ( 2 , \"\u5973\" ), ) gender = models . SmallIntegerField ( verbose_name = \"\u6027\u522b\" , choices = gender_choices ) # \u6839\u636eid\u83b7\u53d6\u6027\u522b get_gender_display () # html\u5185\u4e0d\u52a0\u62ec\u53f7","title":"3. choices \u9009\u62e9"},{"location":"programming/web/form/#4","text":"depart = models . ForeignKey ( to = \"Department\" , to_field = \"id\" , on_delete = models . CASCADE , verbose_name = '\u90e8\u95e8ID' ) # \u5728\u672c\u8868\u5185\u5b58\u50a8\u7684\u662fdepart_id,\u9700\u8981\u83b7\u53d6Department\u8868\u5185\u5176\u4ed6\u5b57\u6bb5\uff0c\u4ee5depart\u4f5c\u4e3a\u8fde\u63a5 title = depart . tittle","title":"4. \u8054\u8868\u5b57\u6bb5\u53d6\u503c"},{"location":"programming/web/form/#5-forms","text":"","title":"5. forms"},{"location":"programming/web/form/#51","text":"- CharField # \u5b57\u7b26\u4e32 - IntegerField # \u6574\u5f62 - SmallIntegerField # \u5c0f\u6574\u5f62 - BooleanField # \u5e03\u5c14\u578b - ChoiceField # \u9009\u62e9 - ModelChoiceField # \u5173\u7cfb\u6a21\u578b - DateTimeField # \u65e5\u671f\u65f6\u95f4 [ '%Y-%m- %d %H:%M:%S' , # '2019-1-5 11:15:57' '%Y-%m- %d %H:%M' , # '2019-3-25 13:30' '%Y-%m- %d ' , # '2019-12-5' '%m/ %d /%Y %H:%M:%S' , # '10/25/2006 14:30:59' '%m/ %d /%Y %H:%M' , # '10/25/2006 14:30' '%m/ %d /%Y' , # '10/25/2006' '%m/ %d /%y %H:%M:%S' , # '1/15/09 14:30:59' '%m/ %d /%y %H:%M' , # '1/15/09 14:30' '%m/ %d /%y' ] # '1/15/09'","title":"5.1 \u5e38\u7528\u5b57\u6bb5"},{"location":"programming/web/form/#52","text":"forms\u9a8c\u8bc1 # forms\u9a8c\u8bc1 from django.core.validators import RegexValidator mobile = forms . CharField ( label = '\u624b\u673a\u53f7' , validators = [ RegexValidator ( r '^1[3-9]\\d {9} ' , '\u9700\u8981\u6570\u5b57' )]) \u94a9\u5b50\u9a8c\u8bc1 def clean_mobile ( self ): import re from django.core.exceptions import ValidationError txt_mobile = self . cleaned_data [ 'mobile' ] re_flag = re . compile ( r '^1[3-9]\\d {9} ' ) if not re_flag . match ( txt_mobile ): raise ValidationError ( '\u683c\u5f0f\u9519\u8bef' ) return txt_mobile","title":"5.2 \u9a8c\u8bc1"},{"location":"programming/web/form/#6-modelform","text":"class UserAddForm ( forms . ModelForm ): query_set = models . Department . objects . all () depart = forms . ModelChoiceField ( queryset = query_set , label = '\u6240\u5c5e\u90e8\u95e8' , to_field_name = 'id' , empty_label = '\u8bf7\u9009\u62e9---' , widget = forms . Select ( attrs = { 'class' : 'form-control' , })) class Meta : model = models . UserInfo fields = [ 'name' , 'password' , 'age' , 'account' , 'create_time' , 'gender' , 'depart' ] labels = { 'name' : '\u59d3\u540d' , 'password' : '\u5bc6\u7801' , 'age' : '\u5e74\u9f84' , 'account' : '\u8d26\u6237\u4f59\u989d' , 'create_time' : '\u6ce8\u518c\u65f6\u95f4' , 'gender' : '\u6027\u522b' } widgets = { 'name' : forms . TextInput ( attrs = { 'class' : 'form-control' , 'placeholder' : '\u8bf7\u8f93\u5165\u59d3\u540d' }), 'password' : forms . PasswordInput ( attrs = { 'class' : 'form-control' , 'placeholder' : '\u8bf7\u8f93\u5165\u5bc6\u7801' }), 'age' : forms . NumberInput ( attrs = { 'class' : 'form-control' , 'placeholder' : '\u8bf7\u8f93\u5165\u5e74\u9f84' }), 'account' : forms . NumberInput ( attrs = { 'class' : 'form-control' , 'placeholder' : '\u8bf7\u8f93\u5165\u8d26\u6237\u4f59\u989d' }), 'create_time' : forms . TextInput ( attrs = { 'class' : 'form-control' , 'placeholder' : '\u521b\u5efa\u65f6\u95f4' }), 'gender' : forms . Select ( attrs = { 'class' : 'form-control' }) }","title":"6. Modelform"},{"location":"programming/web/form/#61-save","text":"\u65b0\u589e form = PrettyModelForm ( request . POST ) #post\u8bf7\u6c42\u7684\u6570\u636e\u5728\u6570\u636e\u5e93\u65b0\u589e if form . is_valid (): # \u9a8c\u8bc1\u901a\u8fc7\u540e\u6267\u884c form . save () return redirect ( '/pretty_list' ) return render ( request , 'pretty_add.html' , { 'form' : form }) \u67e5\u770b a = Book . objects . get ( id = 1 ) f = BookForm ( instance = a ) f . save () \u4fee\u6539 a = Book . objects . get ( id = 1 ) f = BookForm ( request . POST , instance = a ) f . save ()","title":"6.1 save\u65b9\u6cd5"},{"location":"programming/web/form/#7","text":"def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) for key , field in self . fields . items (): field . widget . attrs = { 'class' : 'form-control' , 'placeholder' : field . label }","title":"7. \u6279\u91cf\u4fee\u6539\u6807\u7b7e\u5c5e\u6027"},{"location":"programming/web/form/#8","text":"models . \u6570\u636e\u5e93 . object . filter ( id = id ) . exists () \u6392\u9664\u81ea\u5df1\uff0c\u67e5\u770b\u662f\u5426\u6709\u5176\u4ed6\u7684\u5b58\u5728 # id!= primary_key and mobile=post.mobile models . \u6570\u636e\u5e93 . object . exclude ( id = self . instance . pk ) . filter ( mobile = mobile ) . exists ()","title":"8. \u9a8c\u8bc1\u5728\u6570\u636e\u5e93\u662f\u5426\u5b58\u5728"},{"location":"programming/web/form/#9","text":"mobile = forms . CharField ( label = '\u624b\u673a\u53f7' , disabled = True )","title":"9. \u67d0\u4e2a\u5b57\u6bb5\u5c55\u793a\u4f46\u4e0d\u652f\u6301\u7f16\u8f91"},{"location":"programming/web/form/#10-bootstrapmodelform","text":"class BootStrapModelForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) # \u5faa\u73afModelForm\u4e2d\u7684\u6240\u6709\u5b57\u6bb5\uff0c\u7ed9\u6bcf\u4e2a\u5b57\u6bb5\u7684\u63d2\u4ef6\u8bbe\u7f6e for name , field in self . fields . items (): # \u5b57\u6bb5\u4e2d\u6709\u5c5e\u6027\uff0c\u4fdd\u7559\u539f\u6765\u7684\u5c5e\u6027\uff0c\u6ca1\u6709\u5c5e\u6027\uff0c\u624d\u589e\u52a0\u3002 if field . widget . attrs : field . widget . attrs [ \"class\" ] = \"form-control\" field . widget . attrs [ \"placeholder\" ] = field . label else : field . widget . attrs = { \"class\" : \"form-control\" , \"placeholder\" : field . label } class UserEditModelForm ( BootStrapModelForm ): class Meta : model = models . UserInfo fields = [ \"name\" , \"password\" , \"age\" ,]","title":"10. bootstrap.modelform\u7c7b"},{"location":"programming/web/html/","text":"1. \u521b\u5efaflask\u9879\u76ee 1.1 \u5b89\u88c5flask pip3 install flask 1.2 \u521b\u5efa\u9879\u76ee from flask import Flask , render_template app = Flask ( __name__ ) @app . route ( '/index' ) # \u51fd\u6570\u548c\u9875\u9762\u7684\u5bf9\u5e94\u5173\u7cfb def index (): return render_template ( 'index.html' ) if __name__ == '__main__' : app . run () 1.3 \u521b\u5efatemplates\u76ee\u5f55 2. head\u5757 2.1 mate\u7f16\u7801 < meta charset = \"UTF-8\" > # \u6307\u5b9a\u7f51\u9875\u7f16\u7801\u4e3autf-8 2.2 Tittle\uff08\u9875\u9762\u6807\u9898\uff09 < title > \u9875\u9762\u6807\u9898 </ title > 3. \u5757\u5185\u6807\u7b7e\uff08\u5355\u884c\u6807\u7b7e\uff09 3.1 H\u6807\u7b7e\uff08\u6807\u9898\uff09 < h1 > \u4e00\u7ea7\u6807\u9898 </ h1 > < h2 > \u4e8c\u7ea7\u6807\u9898 </ h2 > < h3 > \u4e09\u7ea7\u6807\u9898 </ h3 > < h4 > \u56db\u7ea7\u6807\u9898 </ h4 > < h5 > \u4e94\u7ea7\u6807\u9898 </ h5 > < h6 > \u516d\u7ea7\u6807\u9898 </ h6 > 3.2 div < div > \u8fd9\u662f\u72ec\u5360\u4e00\u884c\u7684div </ div > 4. \u884c\u5185\u6807\u7b7e 4.1 span < span > \u7b2c\u4e00\u4e2a </ span > < span > \u7b2c\u4e8c\u4e2a </ span > 4.2 a\u6807\u7b7e\uff08\u8d85\u94fe\u63a5\uff09 \u8df3\u8f6c\u94fe\u63a5\u5728 href= \u8df3\u8f6c\u522b\u4eba\u7f51\u7ad9\u9700\u8981\u7edd\u5bf9\u8def\u5f84 \u81ea\u5df1\u7f51\u7ad9\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84 \u94fe\u63a5\u6587\u672c\u5728a\u6807\u7b7e\u5185\u5305\u88f9 target=_blank \u5728\u65b0\u6807\u7b7e\u9875\u6253\u5f00 < a href = \"www.baidu.com\" > \u70b9\u51fb\u8df3\u8f6c </ a > < a href = \"/user/login\" target = \"_blank\" > \u70b9\u51fb\u8df3\u8f6c </ a > 4.3 img \u81ea\u95ed\u5408\u6807\u7b7e src \u53c2\u6570\u653e\u56fe\u7247\u8def\u5f84 < img src = \"https://pic4.zhimg.com/v2-b23f984c2aeaa7bed12e890b4338d499_720w.jpg\" /> 5. \u5217\u8868 5.1 ul\uff08\u65e0\u5e8f\u5217\u8868\uff09 li \u4e3a\u5355\u884c\u6807\u7b7e \u6bcf\u4e2a\u5217\u8868\u5185\u5bb9\u5728 li \u5185\u5305\u88f9 < ul > < li > \u5317\u4eac </ li > < li > \u4e0a\u6d77 </ li > < li > \u5e7f\u5dde </ li > </ ul > 5.2 ol\uff08\u6709\u5e8f\u5217\u8868\uff09 < ol > < li > \u5317\u4eac </ li > < li > \u4e0a\u6d77 </ li > < li > \u5e7f\u5dde </ li > </ ol > 6.\u8868\u683c <table> :\u8868\u683c\u6807\u7b7e <thead> :\u8868\u5934 <tr> \uff1a\u5355\u884c\u8868\u5934 <th> \uff1a\u8868\u5934\u5b57\u6bb5\uff0c\u53ef\u4ee5\u662f\u591a\u5217\uff0c\u591a\u4e2ath <tbody> \uff1a\u6570\u636e\u5185\u5bb9 <tr> \uff1a\u5355\u884c\u6570\u636e <td> \uff1a\u591a\u5217\u6570\u636e\u5185\u5bb9 < table > < thead > < tr > < th > \u59d3\u540d </ th > < th > \u5e74\u9f84 </ th > < th > \u8eab\u9ad8 </ th > </ tr > </ thead > < tbody > < tr > < td > \u5c0f\u660e </ td > < td > 18 </ td > < td > 180 </ td > </ tr > < tr > < td > \u5c0f\u674e </ td > < td > 20 </ td > < td > 175 </ td > </ tr > </ tbody > </ table > 7. input\u7cfb\u5217 < input type = \"text\" /> -->\u6587\u672c\u6846 < input type = \"password\" > -->\u5bc6\u7801\u6846 < input type = \"file\" > -->\u672c\u5730\u6587\u4ef6\u9009\u62e9 < input type = \"radio\" name = \"n1\" > \u7537 -->\u5355\u9009\u6846\uff0c\u5b9e\u73b0\u5355\u9009\u6307\u5b9aname\u53c2\u6570\u5e76\u76f8\u540c < input type = \"radio\" name = \"n1\" > \u5973 < input type = \"checkbox\" > \u7bee\u7403 --> \u591a\u9009 < input type = \"checkbox\" > \u8db3\u7403 < input type = \"checkbox\" > \u4e52\u4e53\u7403 < input type = \"checkbox\" > \u68d2\u7403 < input type = \"button\" value = \"\u63d0\u4ea4\" > -->\u666e\u901a\u7684\u6309\u94ae < input type = \"submit\" value = \"\u63d0\u4ea4\" > -->\u63d0\u4ea4\u8868\u5355 8.\u4e0b\u62c9\u6846 < select > < option > \u5317\u4eac </ option > < option > \u4e0a\u6d77 </ option > < option > \u6df1\u5733 </ option > </ select > < select multiple > -->muliple\u53c2\u6570\u4e3a\u591a\u9009 < option > \u5317\u4eac </ option > < option > \u4e0a\u6d77 </ option > < option > \u6df1\u5733 </ option > </ select > 9. \u591a\u884c\u6587\u672c < textarea ></ textarea > < textarea rows = \"3\" ></ textarea > -->\u6307\u5b9a\u9ad8\u5ea6 10.form\u6807\u7b7e form\u6807\u7b7e\u5305\u88f9\u7684\u4fe1\u606f\u4f1a\u901a\u8fc7submit\u6309\u94ae\u6253\u5305\u5e76\u63d0\u4ea4 < form > < div > \u7528\u6237\u540d\uff1a < input type = \"text\" > \u5bc6\u7801\uff1a < input type = \"password\" > </ div > < input type = \"submit\" value = \"\u63d0\u4ea4\" > </ form > 11.\u7f51\u7edc\u8bf7\u6c42 get \u7528\u6237\u63d0\u4ea4\u7684\u53c2\u6570\u901a\u8fc7URL\u62fc\u63a5\u7684\u5f62\u5f0f\u4f53\u73b0\u5728URL\u4e2d\uff0c\u4ee5 ? \u5f00\u59cb\u62fc\u63a5\uff0c & \u62fc\u63a5\u591a\u4e2a\u53c2\u6570\uff0c\u9700\u8981\u6307\u5b9a\u952e\u540d \u7528\u4e8eURL\u65b9\u6cd5\u548c\u8868\u5355\u63d0\u4ea4 post \u7528\u6237\u63d0\u4ea4\u7684\u6570\u636e\u4ee5form data\u7684\u5f62\u5f0f\u4f20\u8f93\u81f3\u670d\u52a1\u5668\uff0curl\u4e0d\u4f53\u73b0 \u7528\u6237\u8868\u5355\u63d0\u4ea4 12. \u7528\u6237\u6ce8\u518c\u6848\u4f8b form\u6807\u7b7e\u5305\u88f9\u8981\u63d0\u4ea4\u7684\u6570\u636e\uff1a \u63d0\u4ea4\u65b9\u5f0f\uff1a\u2018method\u2019=\u2018get\u2019 \u63d0\u4ea4\u7684\u5730\u5740\uff1a\u2018action\u2019=\u2018xxx/xxx\u2019 form\u6807\u7b7e\u5185\u5fc5\u987b\u6709\u4e00\u4e2asubmit\u6807\u7b7e \u4e00\u5b9a\u8981\u5199name\u5c5e\u6027 < form method = \"get\" action = \"xxx/xxxx\" > < div > \u7528\u6237\u540d\uff1a < input type = \"text\" name = \"user\" > \u5bc6\u7801\uff1a < input type = \"password\" name = \"pwd\" > </ div > < input type = \"submit\" value = \"\u63d0\u4ea4\" > </ form > http://127.0.0.1:5000/xxx/xxxx?user=123 & pwd=123 12.1 flask\u4ee3\u7801 from flask import Flask , render_template , request app = Flask ( __name__ ) # index\u51fd\u6570\u6709\u4e24\u79cd\u8bf7\u6c42\u65b9\u5f0f\uff0c\u5f53\u6253\u5f00\u65f6\u662fget\u8bf7\u6c42\uff0c\u5219\u4f1a\u8fd4\u56deindex.html\u9875\u9762 # \u70b9\u51fb\u63d0\u4ea4\u662fpost\u8bf7\u6c42\uff0c\u89c1html\u6587\u4ef6\uff0cpost\u6570\u636e\u8fd4\u56de\u5230index\u51fd\u6570\u7684else\u90e8\u5206\u6267\u884c @app . route ( '/index' , methods = [ 'GET' , 'POST' ]) def index (): if request . method == 'GET' : return render_template ( 'index.html' ) else : user = request . form . get ( 'user' ) pwd = request . form . get ( 'pwd' ) gender = request . form . get ( 'gender' ) hobby = request . form . getlist ( 'hobby' ) city = request . form . get ( 'city' ) skill = request . form . getlist ( 'skill' ) more = request . form . get ( 'more' ) print ( user , pwd , gender , hobby , city , skill , more ) return '\u6ce8\u518c\u6210\u529f' if __name__ == '__main__' : app . run () 12.2 html\u4ee3\u7801 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > \u9875\u9762\u6807\u9898 </ title > </ head > < body > < h1 > \u7528\u6237\u6ce8\u518c </ h1 > < form method = \"post\" action = \"/index\" > < div > \u7528\u6237\u540d\uff1a < input type = \"text\" name = \"user\" > </ div > < div > \u5bc6\u7801\uff1a < input type = \"password\" name = \"pwd\" > </ div > < div > \u6027\u522b\uff1a < input type = \"radio\" name = \"gender\" value = \"0\" > \u7537 < input type = \"radio\" name = \"gender\" value = \"1\" > \u5973 </ div > < div > \u7231\u597d\uff1a < input type = \"checkbox\" name = \"hobby\" value = \"10\" > \u7bee\u7403 < input type = \"checkbox\" name = \"hobby\" value = \"11\" > \u8db3\u7403 < input type = \"checkbox\" name = \"hobby\" value = \"12\" > \u4e52\u4e53\u7403 </ div > < div > \u57ce\u5e02\uff1a < select name = \"city\" > < option value = \"bj\" > \u5317\u4eac </ option > < option value = \"sh\" > \u4e0a\u6d77 </ option > < option value = \"hz\" > \u676d\u5dde </ option > </ select > </ div > < div > \u5220\u9664\u9886\u57df\uff1a < select name = \"skill\" multiple > < option value = \"eat\" > \u5403\u996d </ option > < option value = \"sleep\" > \u7761\u89c9 </ option > < option value = \"bor\" > \u6253\u7403 </ option > </ select > </ div > < div > \u5907\u6ce8\uff1a < textarea name = \"more\" rows = \"3\" ></ textarea > </ div > < input type = \"submit\" value = \"\u7acb\u5373\u63d0\u4ea4\" > </ form > </ body > </ html >","title":"HTML"},{"location":"programming/web/html/#1-flask","text":"","title":"1. \u521b\u5efaflask\u9879\u76ee"},{"location":"programming/web/html/#11-flask","text":"pip3 install flask","title":"1.1 \u5b89\u88c5flask"},{"location":"programming/web/html/#12","text":"from flask import Flask , render_template app = Flask ( __name__ ) @app . route ( '/index' ) # \u51fd\u6570\u548c\u9875\u9762\u7684\u5bf9\u5e94\u5173\u7cfb def index (): return render_template ( 'index.html' ) if __name__ == '__main__' : app . run ()","title":"1.2 \u521b\u5efa\u9879\u76ee"},{"location":"programming/web/html/#13-templates","text":"","title":"1.3 \u521b\u5efatemplates\u76ee\u5f55"},{"location":"programming/web/html/#2-head","text":"","title":"2. head\u5757"},{"location":"programming/web/html/#21-mate","text":"< meta charset = \"UTF-8\" > # \u6307\u5b9a\u7f51\u9875\u7f16\u7801\u4e3autf-8","title":"2.1 mate\u7f16\u7801"},{"location":"programming/web/html/#22-tittle","text":"< title > \u9875\u9762\u6807\u9898 </ title >","title":"2.2 Tittle\uff08\u9875\u9762\u6807\u9898\uff09"},{"location":"programming/web/html/#3","text":"","title":"3. \u5757\u5185\u6807\u7b7e\uff08\u5355\u884c\u6807\u7b7e\uff09"},{"location":"programming/web/html/#31-h","text":"< h1 > \u4e00\u7ea7\u6807\u9898 </ h1 > < h2 > \u4e8c\u7ea7\u6807\u9898 </ h2 > < h3 > \u4e09\u7ea7\u6807\u9898 </ h3 > < h4 > \u56db\u7ea7\u6807\u9898 </ h4 > < h5 > \u4e94\u7ea7\u6807\u9898 </ h5 > < h6 > \u516d\u7ea7\u6807\u9898 </ h6 >","title":"3.1 H\u6807\u7b7e\uff08\u6807\u9898\uff09"},{"location":"programming/web/html/#32-div","text":"< div > \u8fd9\u662f\u72ec\u5360\u4e00\u884c\u7684div </ div >","title":"3.2 div"},{"location":"programming/web/html/#4","text":"","title":"4. \u884c\u5185\u6807\u7b7e"},{"location":"programming/web/html/#41-span","text":"< span > \u7b2c\u4e00\u4e2a </ span > < span > \u7b2c\u4e8c\u4e2a </ span >","title":"4.1 span"},{"location":"programming/web/html/#42-a","text":"\u8df3\u8f6c\u94fe\u63a5\u5728 href= \u8df3\u8f6c\u522b\u4eba\u7f51\u7ad9\u9700\u8981\u7edd\u5bf9\u8def\u5f84 \u81ea\u5df1\u7f51\u7ad9\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84 \u94fe\u63a5\u6587\u672c\u5728a\u6807\u7b7e\u5185\u5305\u88f9 target=_blank \u5728\u65b0\u6807\u7b7e\u9875\u6253\u5f00 < a href = \"www.baidu.com\" > \u70b9\u51fb\u8df3\u8f6c </ a > < a href = \"/user/login\" target = \"_blank\" > \u70b9\u51fb\u8df3\u8f6c </ a >","title":"4.2 a\u6807\u7b7e\uff08\u8d85\u94fe\u63a5\uff09"},{"location":"programming/web/html/#43-img","text":"\u81ea\u95ed\u5408\u6807\u7b7e src \u53c2\u6570\u653e\u56fe\u7247\u8def\u5f84 < img src = \"https://pic4.zhimg.com/v2-b23f984c2aeaa7bed12e890b4338d499_720w.jpg\" />","title":"4.3 img"},{"location":"programming/web/html/#5","text":"","title":"5. \u5217\u8868"},{"location":"programming/web/html/#51-ul","text":"li \u4e3a\u5355\u884c\u6807\u7b7e \u6bcf\u4e2a\u5217\u8868\u5185\u5bb9\u5728 li \u5185\u5305\u88f9 < ul > < li > \u5317\u4eac </ li > < li > \u4e0a\u6d77 </ li > < li > \u5e7f\u5dde </ li > </ ul >","title":"5.1 ul\uff08\u65e0\u5e8f\u5217\u8868\uff09"},{"location":"programming/web/html/#52-ol","text":"< ol > < li > \u5317\u4eac </ li > < li > \u4e0a\u6d77 </ li > < li > \u5e7f\u5dde </ li > </ ol >","title":"5.2 ol\uff08\u6709\u5e8f\u5217\u8868\uff09"},{"location":"programming/web/html/#6","text":"<table> :\u8868\u683c\u6807\u7b7e <thead> :\u8868\u5934 <tr> \uff1a\u5355\u884c\u8868\u5934 <th> \uff1a\u8868\u5934\u5b57\u6bb5\uff0c\u53ef\u4ee5\u662f\u591a\u5217\uff0c\u591a\u4e2ath <tbody> \uff1a\u6570\u636e\u5185\u5bb9 <tr> \uff1a\u5355\u884c\u6570\u636e <td> \uff1a\u591a\u5217\u6570\u636e\u5185\u5bb9 < table > < thead > < tr > < th > \u59d3\u540d </ th > < th > \u5e74\u9f84 </ th > < th > \u8eab\u9ad8 </ th > </ tr > </ thead > < tbody > < tr > < td > \u5c0f\u660e </ td > < td > 18 </ td > < td > 180 </ td > </ tr > < tr > < td > \u5c0f\u674e </ td > < td > 20 </ td > < td > 175 </ td > </ tr > </ tbody > </ table >","title":"6.\u8868\u683c"},{"location":"programming/web/html/#7-input","text":"< input type = \"text\" /> -->\u6587\u672c\u6846 < input type = \"password\" > -->\u5bc6\u7801\u6846 < input type = \"file\" > -->\u672c\u5730\u6587\u4ef6\u9009\u62e9 < input type = \"radio\" name = \"n1\" > \u7537 -->\u5355\u9009\u6846\uff0c\u5b9e\u73b0\u5355\u9009\u6307\u5b9aname\u53c2\u6570\u5e76\u76f8\u540c < input type = \"radio\" name = \"n1\" > \u5973 < input type = \"checkbox\" > \u7bee\u7403 --> \u591a\u9009 < input type = \"checkbox\" > \u8db3\u7403 < input type = \"checkbox\" > \u4e52\u4e53\u7403 < input type = \"checkbox\" > \u68d2\u7403 < input type = \"button\" value = \"\u63d0\u4ea4\" > -->\u666e\u901a\u7684\u6309\u94ae < input type = \"submit\" value = \"\u63d0\u4ea4\" > -->\u63d0\u4ea4\u8868\u5355","title":"7. input\u7cfb\u5217"},{"location":"programming/web/html/#8","text":"< select > < option > \u5317\u4eac </ option > < option > \u4e0a\u6d77 </ option > < option > \u6df1\u5733 </ option > </ select > < select multiple > -->muliple\u53c2\u6570\u4e3a\u591a\u9009 < option > \u5317\u4eac </ option > < option > \u4e0a\u6d77 </ option > < option > \u6df1\u5733 </ option > </ select >","title":"8.\u4e0b\u62c9\u6846"},{"location":"programming/web/html/#9","text":"< textarea ></ textarea > < textarea rows = \"3\" ></ textarea > -->\u6307\u5b9a\u9ad8\u5ea6","title":"9. \u591a\u884c\u6587\u672c"},{"location":"programming/web/html/#10form","text":"form\u6807\u7b7e\u5305\u88f9\u7684\u4fe1\u606f\u4f1a\u901a\u8fc7submit\u6309\u94ae\u6253\u5305\u5e76\u63d0\u4ea4 < form > < div > \u7528\u6237\u540d\uff1a < input type = \"text\" > \u5bc6\u7801\uff1a < input type = \"password\" > </ div > < input type = \"submit\" value = \"\u63d0\u4ea4\" > </ form >","title":"10.form\u6807\u7b7e"},{"location":"programming/web/html/#11","text":"get \u7528\u6237\u63d0\u4ea4\u7684\u53c2\u6570\u901a\u8fc7URL\u62fc\u63a5\u7684\u5f62\u5f0f\u4f53\u73b0\u5728URL\u4e2d\uff0c\u4ee5 ? \u5f00\u59cb\u62fc\u63a5\uff0c & \u62fc\u63a5\u591a\u4e2a\u53c2\u6570\uff0c\u9700\u8981\u6307\u5b9a\u952e\u540d \u7528\u4e8eURL\u65b9\u6cd5\u548c\u8868\u5355\u63d0\u4ea4 post \u7528\u6237\u63d0\u4ea4\u7684\u6570\u636e\u4ee5form data\u7684\u5f62\u5f0f\u4f20\u8f93\u81f3\u670d\u52a1\u5668\uff0curl\u4e0d\u4f53\u73b0 \u7528\u6237\u8868\u5355\u63d0\u4ea4","title":"11.\u7f51\u7edc\u8bf7\u6c42"},{"location":"programming/web/html/#12_1","text":"form\u6807\u7b7e\u5305\u88f9\u8981\u63d0\u4ea4\u7684\u6570\u636e\uff1a \u63d0\u4ea4\u65b9\u5f0f\uff1a\u2018method\u2019=\u2018get\u2019 \u63d0\u4ea4\u7684\u5730\u5740\uff1a\u2018action\u2019=\u2018xxx/xxx\u2019 form\u6807\u7b7e\u5185\u5fc5\u987b\u6709\u4e00\u4e2asubmit\u6807\u7b7e \u4e00\u5b9a\u8981\u5199name\u5c5e\u6027 < form method = \"get\" action = \"xxx/xxxx\" > < div > \u7528\u6237\u540d\uff1a < input type = \"text\" name = \"user\" > \u5bc6\u7801\uff1a < input type = \"password\" name = \"pwd\" > </ div > < input type = \"submit\" value = \"\u63d0\u4ea4\" > </ form > http://127.0.0.1:5000/xxx/xxxx?user=123 & pwd=123","title":"12. \u7528\u6237\u6ce8\u518c\u6848\u4f8b"},{"location":"programming/web/html/#121-flask","text":"from flask import Flask , render_template , request app = Flask ( __name__ ) # index\u51fd\u6570\u6709\u4e24\u79cd\u8bf7\u6c42\u65b9\u5f0f\uff0c\u5f53\u6253\u5f00\u65f6\u662fget\u8bf7\u6c42\uff0c\u5219\u4f1a\u8fd4\u56deindex.html\u9875\u9762 # \u70b9\u51fb\u63d0\u4ea4\u662fpost\u8bf7\u6c42\uff0c\u89c1html\u6587\u4ef6\uff0cpost\u6570\u636e\u8fd4\u56de\u5230index\u51fd\u6570\u7684else\u90e8\u5206\u6267\u884c @app . route ( '/index' , methods = [ 'GET' , 'POST' ]) def index (): if request . method == 'GET' : return render_template ( 'index.html' ) else : user = request . form . get ( 'user' ) pwd = request . form . get ( 'pwd' ) gender = request . form . get ( 'gender' ) hobby = request . form . getlist ( 'hobby' ) city = request . form . get ( 'city' ) skill = request . form . getlist ( 'skill' ) more = request . form . get ( 'more' ) print ( user , pwd , gender , hobby , city , skill , more ) return '\u6ce8\u518c\u6210\u529f' if __name__ == '__main__' : app . run ()","title":"12.1 flask\u4ee3\u7801"},{"location":"programming/web/html/#122-html","text":"<!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > \u9875\u9762\u6807\u9898 </ title > </ head > < body > < h1 > \u7528\u6237\u6ce8\u518c </ h1 > < form method = \"post\" action = \"/index\" > < div > \u7528\u6237\u540d\uff1a < input type = \"text\" name = \"user\" > </ div > < div > \u5bc6\u7801\uff1a < input type = \"password\" name = \"pwd\" > </ div > < div > \u6027\u522b\uff1a < input type = \"radio\" name = \"gender\" value = \"0\" > \u7537 < input type = \"radio\" name = \"gender\" value = \"1\" > \u5973 </ div > < div > \u7231\u597d\uff1a < input type = \"checkbox\" name = \"hobby\" value = \"10\" > \u7bee\u7403 < input type = \"checkbox\" name = \"hobby\" value = \"11\" > \u8db3\u7403 < input type = \"checkbox\" name = \"hobby\" value = \"12\" > \u4e52\u4e53\u7403 </ div > < div > \u57ce\u5e02\uff1a < select name = \"city\" > < option value = \"bj\" > \u5317\u4eac </ option > < option value = \"sh\" > \u4e0a\u6d77 </ option > < option value = \"hz\" > \u676d\u5dde </ option > </ select > </ div > < div > \u5220\u9664\u9886\u57df\uff1a < select name = \"skill\" multiple > < option value = \"eat\" > \u5403\u996d </ option > < option value = \"sleep\" > \u7761\u89c9 </ option > < option value = \"bor\" > \u6253\u7403 </ option > </ select > </ div > < div > \u5907\u6ce8\uff1a < textarea name = \"more\" rows = \"3\" ></ textarea > </ div > < input type = \"submit\" value = \"\u7acb\u5373\u63d0\u4ea4\" > </ form > </ body > </ html >","title":"12.2 html\u4ee3\u7801"},{"location":"programming/web/js/","text":"1. javascript\u7b80\u4ecb JavaScript\u662f\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\uff0c\u2022 \u6d4f\u89c8\u5668\u5c31\u662fJavaScript\u8bed\u8a00\u7684\u89e3\u91ca\u5668\u3002 DOM\u548cBOM: \u76f8\u5f53\u4e8e\u7f16\u7a0b\u8bed\u8a00\u5185\u7f6e\u7684\u6a21\u5757 \u3002 \u4f8b\u5982 \uff1a Python\u4e2d\u7684re \u3001 random \u3001 time \u3001 json\u6a21\u5757\u7b49 \u3002 jQuery \u76f8\u5f53\u4e8e\u662f\u7f16\u7a0b\u8bed\u8a00\u7684\u7b2c\u4e09\u65b9\u6a21\u5757 \u3002 \u4f8b\u5982 \uff1a requests \u3001 openpyxl 2. \u4ee3\u7801\u4f4d\u7f6e <style> \u4e0b\u9762\u6216 <body> \u4e0a\u9762 2.1 \u5176\u4ed6\u6587\u4ef6\u4e2d\u5199js\u6587\u4ef6\u5e76\u5f15\u5165 3. \u53d8\u91cf var name = \"\u5c0f\u660e\" 4. \u5b57\u7b26\u4e32 //\u58f0\u660e var name = \"\u9ad8\u5029\"; var name = String(\"\u9ad8\u5029\"); // \u5e38\u89c1\u529f\u80fd var name = \"\u4e2d\u56fd\u8054\u901a\"; var v1 = name.length; //\u957f\u5ea6 var v2 = name[0]; // name.charAt(3) // \u7d22\u5f15\u53d6\u503c var v3 = name.trim(); //\u53bb\u9664\u7a7a\u767d var v4 = name.substring(0,2); // \u5207\u7247 5. \u6570\u7ec4 5.1 \u5b9a\u4e49\u6570\u7ec4 // \u5b9a\u4e49 var v1 = [11,22,33,44]; var v2 = Array([11,22,33,44]); 5.2 \u589e\u5220\u6539\u67e5 // \u64cd\u4f5c var v1 = [11,22,33,44]; v1[1] v1[0] = \"\u5c0f\u660e\"; v1.push(\"\u8054\u901a\"); // \u5c3e\u90e8\u8ffd\u52a0 [11,22,33,44,\"\u8054\u901a\"] v1.unshift(\"\u8054\u901a\"); // \u5934\u90e8\u8ffd\u52a0 [\"\u8054\u901a\", 11,22,33,44] v1.splice(\u7d22\u5f15\u4f4d\u7f6e,0,\u5143\u7d20); v1.splice(1,0,\"\u4e2d\u56fd\"); // \u5c3e\u90e8\u8ffd\u52a0 [11,\"\u4e2d\u56fd\",22,33,44] v1.pop() //\u5c3e\u90e8\u5220\u9664 v1.shift() //\u5934\u90e8\u5220\u9664 v1.splice(\u7d22\u5f15\u4f4d\u7f6e,1) v1.splice(2,1); // \u7d22\u5f15\u4e3a2\u7684\u5143\u7d20\u5220\u9664 [11,22,44]; 5.3 \u5faa\u73af var v1 = [11,22,33,44]; for(var idx in v1){ // idx=0/1/2/3/ data=v1[idx] } var v1 = [11,22,33,44]; for(var i=0; i<v1.length; i++){ /start\u548cend\uff0ci++\u8868\u793ai+=1 // i=0/1/2/3 data=v1[idx] } \u5faa\u73af\u5185\u53ef\u4ee5\u4f7f\u7528continue\u548cbreak\u63a7\u5236 5.4 \u6570\u7ec4\u6848\u4f8b- \u901a\u8fc7js\u81ea\u52a8\u83b7\u53d6\u6570\u636e HTML\u4ee3\u7801\u90e8\u5206 <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Title</title> </head> <body> <ul id=\"city\"> </ul> <script src=\"static/js/1.city.js\"></script> </body> </html> js\u4ee3\u7801\u90e8\u5206 // \u521b\u5efa\u6570\u7ec4\uff0c\u5e76\u5faa\u73af\u83b7\u53d6\u6570\u636e var cityList = [\"\u5317\u4eac\",\"\u4e0a\u6d77\",\"\u6df1\u5733\"]; for (var idx in cityList){ var text = cityList[idx]; // \u521b\u5efa<li>\u6807\u7b7e var tag = document.createElement(\"li\"); //\u5728li\u6807\u7b7e\u4e2d\u5199\u5185\u5bb9 tag.innerText=text; // \u6dfb\u52a0id=city\u90a3\u4e2a\u6807\u7b7e\u7684\u91cc\u9762 var parentTag = document.getElementById(\"city\"); parentTag.appendChild(tag); } 6. \u5bf9\u8c61\uff08python\u4e2d\u53eb\u5b57\u5178\uff09 6.1 \u521b\u5efa\u5bf9\u8c61 // javascript\u4e2d\u952e\u4e0d\u9700\u8981\u52a0\u5f15\u53f7 info = { name: \"\u5c0f\u660e\", age: 19 } 6.2 \u5e38\u7528\u64cd\u4f5c // \u53d6\u503c info.age info[\"age\"] //\u4fee\u6539 info.name = \"\u5c0f\u5f20\" info[\"name\"] = \"\u5c0f\u5f20\" // \u5220\u9664 delete info[\"age\"] 6.3 \u5b57\u5178\u7684\u5faa\u73af for (var key in info){ // \u9ed8\u8ba4\u83b7\u53d6\u7684\u662f\u952e key=name/age //\u901a\u8fc7\u7d22\u5f15\u83b7\u53d6\u503c data = info[key] } 6.4 \u6848\u4f8b\uff1a\u52a8\u6001\u8868\u683c HTML\u4ee3\u7801 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < table border = \"1\" > < thead > < tr > < th > ID </ th > < th > \u59d3\u540d </ th > < th > \u5e74\u9f84 </ th > </ tr > </ thead > < tbody id = \"body\" > </ tbody > </ table > < script src = \"static/js/1.table.js\" ></ script > </ body > </ html > JS\u4ee3\u7801 info = {id: 809, name: \"\u5c0f\u660e\", age: 19}; // \u521b\u5efatr\u6807\u7b7e var tr = document.createElement(\"tr\"); for (var key in info) { //\u5faa\u73af\u83b7\u53d6\u5bf9\u5e94\u952e\u7684\u503c\uff0c\u6bcf\u83b7\u53d6\u4e00\u6b21\u521b\u5efatd\u6807\u7b7e\u5e76\u5199\u5165\u503c var text = info[key]; var td = document.createElement(\"td\"); td.innerText = text; // \u5c06td\u52a0\u5165\u5230tr\u6807\u7b7e\u5185 tr.appendChild(td); } // \u6839\u636eID\u83b7\u53d6HTML\u5185\u7684\u6807\u7b7e var bodyTag = document.getElementById(\"body\"); // \u5c06tr\u6807\u7b7e\u52a0\u5165\u5230ID\u4e3abody\u7684\u6807\u7b7e\u5185 bodyTag.appendChild(tr) \u5982\u679c\u8868\u683c\u6dfb\u52a0\u591a\u884c\u6570\u636e\uff0cjs\u4ee3\u7801\u5982\u4e0b infoList = [ {id: 809, name: \"\u5c0f\u660e1\", age: 19}, {id: 810, name: \"\u5c0f\u660e2\", age: 19}, {id: 811, name: \"\u5c0f\u660e3\", age: 19}, {id: 812, name: \"\u5c0f\u660e4\", age: 19} ] for (var idx in infoList ){ info = infoList[idx]; // \u521b\u5efatr\u6807\u7b7e var tr = document.createElement(\"tr\"); for (var key in info) { //\u5faa\u73af\u83b7\u53d6\u5bf9\u5e94\u952e\u7684\u503c\uff0c\u6bcf\u83b7\u53d6\u4e00\u6b21\u521b\u5efatd\u6807\u7b7e\u5e76\u5199\u5165\u503c var text = info[key]; var td = document.createElement(\"td\"); td.innerText = text; // \u5c06td\u52a0\u5165\u5230tr\u6807\u7b7e\u5185 tr.appendChild(td); } // \u6839\u636eID\u83b7\u53d6HTML\u5185\u7684\u6807\u7b7e var bodyTag = document.getElementById(\"body\"); // \u5c06tr\u6807\u7b7e\u52a0\u5165\u5230ID\u4e3abody\u7684\u6807\u7b7e\u5185 bodyTag.appendChild(tr) } 7. \u6761\u4ef6\u63a7\u5236 if (\u6761\u4ef6){ pass }else{ pass } if (\u6761\u4ef6){ }else if (\u6761\u4ef6){ }else{ } 8. \u51fd\u6570 python\u51fd\u6570 def func (): ... func () # \u6267\u884c\u51fd\u6570 JavaScript\u51fd\u6570 function func(){ ... } func() //\u6267\u884c\u51fd\u6570 9.DOM DOM\uff0c\u5c31\u662f\u4e00\u4e2a\u6a21\u5757\uff0c\u6a21\u5757\u53ef\u4ee5\u5bf9HTML\u9875\u9762\u4e2d\u7684\u6807\u7b7e\u8fdb\u884c\u64cd\u4f5c\u3002 // \u6839\u636eID\u83b7\u53d6\u6807\u7b7e var tag = document.getElementById(\"xx\"); // \u83b7\u53d6\u6807\u7b7e\u4e2d\u7684\u6587\u672c tag.innerText // \u4fee\u6539\u6807\u7b7e\u4e2d\u7684\u6587\u672c tag.innerText = \"\u54c8\u54c8\u54c8\u54c8\u54c8\"; // \u521b\u5efa\u6807\u7b7e <div>\u54c8\u54c8\u54c8\u54c8\u54c8</div> var tag = document.createElement(\"div\"); // \u6807\u7b7e\u5199\u5185\u5bb9 tag.innerText = \"\u54c8\u54c8\u54c8\u54c8\u54c8\"; <ul id=\"city\"> // <li>\u5317\u4eac</li> </ul> <script type=\"text/javascript\"> //\u901a\u8fc7\u6807\u7b7eID\u83b7\u53d6\u6807\u7b7e var tag = document.getElementById(\"city\"); // <li>\u5317\u4eac</li> //\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6807\u7b7e\u5e76\u5199\u5165\u5185\u5bb9 var newTag = document.createElement(\"li\"); newTag.innerText = \"\u5317\u4eac\"; //\u5c06li\u6807\u7b7e\u52a0\u5165\u5230ul\u6807\u7b7e\u91cc\uff0c\u5f62\u6210\u7236\u5b50\u5173\u7cfb tag.appendChild(newTag); </script> 9.1 \u4e8b\u4ef6\u7684\u7ed1\u5b9a\uff08\u6848\u4f8b\uff09 HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < input type = \"text\" placeholder = \"\u8bf7\u8f93\u5165\u5185\u5bb9\" id = \"userTxt\" > < input type = \"button\" value = \"\u70b9\u51fb\u6dfb\u52a0\" onclick = \"addInfo()\" > <!--onclick\u8868\u793a\u5355\u51fb;ondblclick\u8868\u793a\u53cc\u51fb--> < ul id = \"itemTag\" ></ ul > < script src = \"static/js/2.\u4e8b\u4ef6\u7684\u7ed1\u5b9a.js\" ></ script > </ body > </ html > javascript function addInfo(){ // 1. \u901a\u8fc7ID\u627e\u5230\u7528\u6237\u8f93\u5165\u7684\u6807\u7b7e var txtTag = document.getElementById(\"userTxt\"); //2.\u83b7\u53d6\u6807\u7b7e\u5185\u8f93\u5165\u7684\u5185\u5bb9 var newString = txtTag.value; //3.\u5224\u65ad\u8f93\u5165\u6846\u5185\u8f93\u5165\u5185\u5bb9\u662f\u5426\u4e3a\u7a7a if (newString.length>0) { //4. \u521b\u5efali\u6807\u7b7e var li = document.createElement(\"li\"); //5. \u7ed9li\u6807\u7b7e\u5185\u586b\u5145\u5185\u5bb9 li.innerText = newString; //6.\u628ali\u6807\u7b7e\u6dfb\u52a0\u5230ul\u6807\u7b7e\u4e2d var parentTag = document.getElementById(\"itemTag\"); parentTag.appendChild(li) //7.\u5c06\u8f93\u5165\u7684input\u6846\u5185\u5bb9\u6e05\u7a7a txtTag.value = \"\" }else { //\u5982\u679c\u8f93\u5165\u4e3a\u7a7a\uff0c\u63d0\u9192 alert(\"\u8f93\u5165\u4e0d\u80fd\u4e3a\u7a7a\") } }","title":"JS"},{"location":"programming/web/js/#1-javascript","text":"JavaScript\u662f\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\uff0c\u2022 \u6d4f\u89c8\u5668\u5c31\u662fJavaScript\u8bed\u8a00\u7684\u89e3\u91ca\u5668\u3002 DOM\u548cBOM: \u76f8\u5f53\u4e8e\u7f16\u7a0b\u8bed\u8a00\u5185\u7f6e\u7684\u6a21\u5757 \u3002 \u4f8b\u5982 \uff1a Python\u4e2d\u7684re \u3001 random \u3001 time \u3001 json\u6a21\u5757\u7b49 \u3002 jQuery \u76f8\u5f53\u4e8e\u662f\u7f16\u7a0b\u8bed\u8a00\u7684\u7b2c\u4e09\u65b9\u6a21\u5757 \u3002 \u4f8b\u5982 \uff1a requests \u3001 openpyxl","title":"1. javascript\u7b80\u4ecb"},{"location":"programming/web/js/#2","text":"<style> \u4e0b\u9762\u6216 <body> \u4e0a\u9762","title":"2. \u4ee3\u7801\u4f4d\u7f6e"},{"location":"programming/web/js/#21-js","text":"","title":"2.1 \u5176\u4ed6\u6587\u4ef6\u4e2d\u5199js\u6587\u4ef6\u5e76\u5f15\u5165"},{"location":"programming/web/js/#3","text":"var name = \"\u5c0f\u660e\"","title":"3. \u53d8\u91cf"},{"location":"programming/web/js/#4","text":"//\u58f0\u660e var name = \"\u9ad8\u5029\"; var name = String(\"\u9ad8\u5029\"); // \u5e38\u89c1\u529f\u80fd var name = \"\u4e2d\u56fd\u8054\u901a\"; var v1 = name.length; //\u957f\u5ea6 var v2 = name[0]; // name.charAt(3) // \u7d22\u5f15\u53d6\u503c var v3 = name.trim(); //\u53bb\u9664\u7a7a\u767d var v4 = name.substring(0,2); // \u5207\u7247","title":"4. \u5b57\u7b26\u4e32"},{"location":"programming/web/js/#5","text":"","title":"5. \u6570\u7ec4"},{"location":"programming/web/js/#51","text":"// \u5b9a\u4e49 var v1 = [11,22,33,44]; var v2 = Array([11,22,33,44]);","title":"5.1 \u5b9a\u4e49\u6570\u7ec4"},{"location":"programming/web/js/#52","text":"// \u64cd\u4f5c var v1 = [11,22,33,44]; v1[1] v1[0] = \"\u5c0f\u660e\"; v1.push(\"\u8054\u901a\"); // \u5c3e\u90e8\u8ffd\u52a0 [11,22,33,44,\"\u8054\u901a\"] v1.unshift(\"\u8054\u901a\"); // \u5934\u90e8\u8ffd\u52a0 [\"\u8054\u901a\", 11,22,33,44] v1.splice(\u7d22\u5f15\u4f4d\u7f6e,0,\u5143\u7d20); v1.splice(1,0,\"\u4e2d\u56fd\"); // \u5c3e\u90e8\u8ffd\u52a0 [11,\"\u4e2d\u56fd\",22,33,44] v1.pop() //\u5c3e\u90e8\u5220\u9664 v1.shift() //\u5934\u90e8\u5220\u9664 v1.splice(\u7d22\u5f15\u4f4d\u7f6e,1) v1.splice(2,1); // \u7d22\u5f15\u4e3a2\u7684\u5143\u7d20\u5220\u9664 [11,22,44];","title":"5.2 \u589e\u5220\u6539\u67e5"},{"location":"programming/web/js/#53","text":"var v1 = [11,22,33,44]; for(var idx in v1){ // idx=0/1/2/3/ data=v1[idx] } var v1 = [11,22,33,44]; for(var i=0; i<v1.length; i++){ /start\u548cend\uff0ci++\u8868\u793ai+=1 // i=0/1/2/3 data=v1[idx] } \u5faa\u73af\u5185\u53ef\u4ee5\u4f7f\u7528continue\u548cbreak\u63a7\u5236","title":"5.3 \u5faa\u73af"},{"location":"programming/web/js/#54-js","text":"HTML\u4ee3\u7801\u90e8\u5206 <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Title</title> </head> <body> <ul id=\"city\"> </ul> <script src=\"static/js/1.city.js\"></script> </body> </html> js\u4ee3\u7801\u90e8\u5206 // \u521b\u5efa\u6570\u7ec4\uff0c\u5e76\u5faa\u73af\u83b7\u53d6\u6570\u636e var cityList = [\"\u5317\u4eac\",\"\u4e0a\u6d77\",\"\u6df1\u5733\"]; for (var idx in cityList){ var text = cityList[idx]; // \u521b\u5efa<li>\u6807\u7b7e var tag = document.createElement(\"li\"); //\u5728li\u6807\u7b7e\u4e2d\u5199\u5185\u5bb9 tag.innerText=text; // \u6dfb\u52a0id=city\u90a3\u4e2a\u6807\u7b7e\u7684\u91cc\u9762 var parentTag = document.getElementById(\"city\"); parentTag.appendChild(tag); }","title":"5.4 \u6570\u7ec4\u6848\u4f8b- \u901a\u8fc7js\u81ea\u52a8\u83b7\u53d6\u6570\u636e"},{"location":"programming/web/js/#6-python","text":"","title":"6. \u5bf9\u8c61\uff08python\u4e2d\u53eb\u5b57\u5178\uff09"},{"location":"programming/web/js/#61","text":"// javascript\u4e2d\u952e\u4e0d\u9700\u8981\u52a0\u5f15\u53f7 info = { name: \"\u5c0f\u660e\", age: 19 }","title":"6.1 \u521b\u5efa\u5bf9\u8c61"},{"location":"programming/web/js/#62","text":"// \u53d6\u503c info.age info[\"age\"] //\u4fee\u6539 info.name = \"\u5c0f\u5f20\" info[\"name\"] = \"\u5c0f\u5f20\" // \u5220\u9664 delete info[\"age\"]","title":"6.2 \u5e38\u7528\u64cd\u4f5c"},{"location":"programming/web/js/#63","text":"for (var key in info){ // \u9ed8\u8ba4\u83b7\u53d6\u7684\u662f\u952e key=name/age //\u901a\u8fc7\u7d22\u5f15\u83b7\u53d6\u503c data = info[key] }","title":"6.3 \u5b57\u5178\u7684\u5faa\u73af"},{"location":"programming/web/js/#64","text":"HTML\u4ee3\u7801 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < table border = \"1\" > < thead > < tr > < th > ID </ th > < th > \u59d3\u540d </ th > < th > \u5e74\u9f84 </ th > </ tr > </ thead > < tbody id = \"body\" > </ tbody > </ table > < script src = \"static/js/1.table.js\" ></ script > </ body > </ html > JS\u4ee3\u7801 info = {id: 809, name: \"\u5c0f\u660e\", age: 19}; // \u521b\u5efatr\u6807\u7b7e var tr = document.createElement(\"tr\"); for (var key in info) { //\u5faa\u73af\u83b7\u53d6\u5bf9\u5e94\u952e\u7684\u503c\uff0c\u6bcf\u83b7\u53d6\u4e00\u6b21\u521b\u5efatd\u6807\u7b7e\u5e76\u5199\u5165\u503c var text = info[key]; var td = document.createElement(\"td\"); td.innerText = text; // \u5c06td\u52a0\u5165\u5230tr\u6807\u7b7e\u5185 tr.appendChild(td); } // \u6839\u636eID\u83b7\u53d6HTML\u5185\u7684\u6807\u7b7e var bodyTag = document.getElementById(\"body\"); // \u5c06tr\u6807\u7b7e\u52a0\u5165\u5230ID\u4e3abody\u7684\u6807\u7b7e\u5185 bodyTag.appendChild(tr) \u5982\u679c\u8868\u683c\u6dfb\u52a0\u591a\u884c\u6570\u636e\uff0cjs\u4ee3\u7801\u5982\u4e0b infoList = [ {id: 809, name: \"\u5c0f\u660e1\", age: 19}, {id: 810, name: \"\u5c0f\u660e2\", age: 19}, {id: 811, name: \"\u5c0f\u660e3\", age: 19}, {id: 812, name: \"\u5c0f\u660e4\", age: 19} ] for (var idx in infoList ){ info = infoList[idx]; // \u521b\u5efatr\u6807\u7b7e var tr = document.createElement(\"tr\"); for (var key in info) { //\u5faa\u73af\u83b7\u53d6\u5bf9\u5e94\u952e\u7684\u503c\uff0c\u6bcf\u83b7\u53d6\u4e00\u6b21\u521b\u5efatd\u6807\u7b7e\u5e76\u5199\u5165\u503c var text = info[key]; var td = document.createElement(\"td\"); td.innerText = text; // \u5c06td\u52a0\u5165\u5230tr\u6807\u7b7e\u5185 tr.appendChild(td); } // \u6839\u636eID\u83b7\u53d6HTML\u5185\u7684\u6807\u7b7e var bodyTag = document.getElementById(\"body\"); // \u5c06tr\u6807\u7b7e\u52a0\u5165\u5230ID\u4e3abody\u7684\u6807\u7b7e\u5185 bodyTag.appendChild(tr) }","title":"6.4 \u6848\u4f8b\uff1a\u52a8\u6001\u8868\u683c"},{"location":"programming/web/js/#7","text":"if (\u6761\u4ef6){ pass }else{ pass } if (\u6761\u4ef6){ }else if (\u6761\u4ef6){ }else{ }","title":"7. \u6761\u4ef6\u63a7\u5236"},{"location":"programming/web/js/#8","text":"python\u51fd\u6570 def func (): ... func () # \u6267\u884c\u51fd\u6570 JavaScript\u51fd\u6570 function func(){ ... } func() //\u6267\u884c\u51fd\u6570","title":"8. \u51fd\u6570"},{"location":"programming/web/js/#9dom","text":"DOM\uff0c\u5c31\u662f\u4e00\u4e2a\u6a21\u5757\uff0c\u6a21\u5757\u53ef\u4ee5\u5bf9HTML\u9875\u9762\u4e2d\u7684\u6807\u7b7e\u8fdb\u884c\u64cd\u4f5c\u3002 // \u6839\u636eID\u83b7\u53d6\u6807\u7b7e var tag = document.getElementById(\"xx\"); // \u83b7\u53d6\u6807\u7b7e\u4e2d\u7684\u6587\u672c tag.innerText // \u4fee\u6539\u6807\u7b7e\u4e2d\u7684\u6587\u672c tag.innerText = \"\u54c8\u54c8\u54c8\u54c8\u54c8\"; // \u521b\u5efa\u6807\u7b7e <div>\u54c8\u54c8\u54c8\u54c8\u54c8</div> var tag = document.createElement(\"div\"); // \u6807\u7b7e\u5199\u5185\u5bb9 tag.innerText = \"\u54c8\u54c8\u54c8\u54c8\u54c8\"; <ul id=\"city\"> // <li>\u5317\u4eac</li> </ul> <script type=\"text/javascript\"> //\u901a\u8fc7\u6807\u7b7eID\u83b7\u53d6\u6807\u7b7e var tag = document.getElementById(\"city\"); // <li>\u5317\u4eac</li> //\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6807\u7b7e\u5e76\u5199\u5165\u5185\u5bb9 var newTag = document.createElement(\"li\"); newTag.innerText = \"\u5317\u4eac\"; //\u5c06li\u6807\u7b7e\u52a0\u5165\u5230ul\u6807\u7b7e\u91cc\uff0c\u5f62\u6210\u7236\u5b50\u5173\u7cfb tag.appendChild(newTag); </script>","title":"9.DOM"},{"location":"programming/web/js/#91","text":"HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < input type = \"text\" placeholder = \"\u8bf7\u8f93\u5165\u5185\u5bb9\" id = \"userTxt\" > < input type = \"button\" value = \"\u70b9\u51fb\u6dfb\u52a0\" onclick = \"addInfo()\" > <!--onclick\u8868\u793a\u5355\u51fb;ondblclick\u8868\u793a\u53cc\u51fb--> < ul id = \"itemTag\" ></ ul > < script src = \"static/js/2.\u4e8b\u4ef6\u7684\u7ed1\u5b9a.js\" ></ script > </ body > </ html > javascript function addInfo(){ // 1. \u901a\u8fc7ID\u627e\u5230\u7528\u6237\u8f93\u5165\u7684\u6807\u7b7e var txtTag = document.getElementById(\"userTxt\"); //2.\u83b7\u53d6\u6807\u7b7e\u5185\u8f93\u5165\u7684\u5185\u5bb9 var newString = txtTag.value; //3.\u5224\u65ad\u8f93\u5165\u6846\u5185\u8f93\u5165\u5185\u5bb9\u662f\u5426\u4e3a\u7a7a if (newString.length>0) { //4. \u521b\u5efali\u6807\u7b7e var li = document.createElement(\"li\"); //5. \u7ed9li\u6807\u7b7e\u5185\u586b\u5145\u5185\u5bb9 li.innerText = newString; //6.\u628ali\u6807\u7b7e\u6dfb\u52a0\u5230ul\u6807\u7b7e\u4e2d var parentTag = document.getElementById(\"itemTag\"); parentTag.appendChild(li) //7.\u5c06\u8f93\u5165\u7684input\u6846\u5185\u5bb9\u6e05\u7a7a txtTag.value = \"\" }else { //\u5982\u679c\u8f93\u5165\u4e3a\u7a7a\uff0c\u63d0\u9192 alert(\"\u8f93\u5165\u4e0d\u80fd\u4e3a\u7a7a\") } }","title":"9.1 \u4e8b\u4ef6\u7684\u7ed1\u5b9a\uff08\u6848\u4f8b\uff09"},{"location":"programming/web/middleware/","text":"1. \u4e2d\u95f4\u4ef6\u5199\u6cd5 from django.utils.deprecation import MiddlewareMixin from django.shortcuts import redirect class AuthMiddleWare ( MiddlewareMixin ): def process_request ( self , request ): # 0.\u6392\u67e5\u767b\u5f55\u9875\u9762\uff0c\u4e0d\u9700\u8981session\u4fe1\u606f # request.path_info \u83b7\u53d6\u7528\u6237\u8bbf\u95ee\u7684URL if request . path_info in [ r \"/login/\" , r \"/image_code/\" ]: return # 1.\u83b7\u53d6session\u4fe1\u606f\uff0c\u5982\u679c\u80fd\u8bfb\u5230\uff0c\u7ee7\u7eed\u5411\u540e\u8d70,\u5982\u679c\u8fd4\u56de\u503c\u4e3aNone\uff0c\u7ee7\u7eed\u5411\u540e\u8d70 info_dict = request . session . get ( 'info' ) if info_dict : return # 2.\u5982\u679c\u6ca1\u6709\u767b\u5f55\u4fe1\u606f\uff0c\u91cd\u5b9a\u5411\u767b\u5f55\u9875 return redirect ( '/login/' ) 2. \u53d1\u653esession request . session [ 'info' ] = { 'id' : admin_object . id , 'name' : admin_object . username } 3. \u53d6\u503c # \u7a7f\u8fc7\u4e2d\u95f4\u4ef6\u540e request . session [ 'name' ] code_str = request . session . get ( 'image_code' ) # \u524d\u7aef\u53d6\u503c request . session . info . name # cleaned_data\u67e5\u8be2\u4f53\u591a\u4e0esession input_code = form . cleaned_data . pop ( 'code' ) 4. session\u6709\u6548\u671f # 3\u5c0f\u65f6 request . session . set_expiry ( 60 * 60 * 3 ) 5. \u6e05\u7a7asession request . session . clear ()","title":"\u4e2d\u95f4\u4ef6"},{"location":"programming/web/middleware/#1","text":"from django.utils.deprecation import MiddlewareMixin from django.shortcuts import redirect class AuthMiddleWare ( MiddlewareMixin ): def process_request ( self , request ): # 0.\u6392\u67e5\u767b\u5f55\u9875\u9762\uff0c\u4e0d\u9700\u8981session\u4fe1\u606f # request.path_info \u83b7\u53d6\u7528\u6237\u8bbf\u95ee\u7684URL if request . path_info in [ r \"/login/\" , r \"/image_code/\" ]: return # 1.\u83b7\u53d6session\u4fe1\u606f\uff0c\u5982\u679c\u80fd\u8bfb\u5230\uff0c\u7ee7\u7eed\u5411\u540e\u8d70,\u5982\u679c\u8fd4\u56de\u503c\u4e3aNone\uff0c\u7ee7\u7eed\u5411\u540e\u8d70 info_dict = request . session . get ( 'info' ) if info_dict : return # 2.\u5982\u679c\u6ca1\u6709\u767b\u5f55\u4fe1\u606f\uff0c\u91cd\u5b9a\u5411\u767b\u5f55\u9875 return redirect ( '/login/' )","title":"1. \u4e2d\u95f4\u4ef6\u5199\u6cd5"},{"location":"programming/web/middleware/#2-session","text":"request . session [ 'info' ] = { 'id' : admin_object . id , 'name' : admin_object . username }","title":"2. \u53d1\u653esession"},{"location":"programming/web/middleware/#3","text":"# \u7a7f\u8fc7\u4e2d\u95f4\u4ef6\u540e request . session [ 'name' ] code_str = request . session . get ( 'image_code' ) # \u524d\u7aef\u53d6\u503c request . session . info . name # cleaned_data\u67e5\u8be2\u4f53\u591a\u4e0esession input_code = form . cleaned_data . pop ( 'code' )","title":"3. \u53d6\u503c"},{"location":"programming/web/middleware/#4-session","text":"# 3\u5c0f\u65f6 request . session . set_expiry ( 60 * 60 * 3 )","title":"4. session\u6709\u6548\u671f"},{"location":"programming/web/middleware/#5-session","text":"request . session . clear ()","title":"5. \u6e05\u7a7asession"},{"location":"programming/web/mysql-base/","text":"1. \u6570\u636e\u5e93\u7ba1\u7406 1.1 \u67e5\u770b\u5df2\u6709\u6570\u636e\u5e93 show databases ; 1.2 \u521b\u5efa\u6570\u636e\u5e93 create database \u6570\u636e\u5e93\u540d\u5b57 DEFAULT CHARSET utf8 COLLATE utf8_general_ci ; create database test_01 DEFAULT CHARSET utf8 COLLATE utf8_general_ci ; 1.3 \u5220\u9664\u6570\u636e\u5e93 drop database \u6570\u636e\u5e93\u540d\u79f0 ; 1.4 \u8fdb\u5165\u6570\u636e\u5e93 use \u6570\u636e\u5e93\u540d\u79f0 ; 1.5 \u67e5\u770b\u6570\u636e\u5e93\u6240\u6709\u6570\u636e\u8868 show tables ; 2. \u6570\u636e\u8868\u7ba1\u7406 2.1 \u521b\u5efa\u8868\u8bed\u6cd5 create table \u8868\u540d\u79f0 ( \u5217\u540d\u79f0 \u7c7b\u578b , \u5217\u540d\u79f0 \u7c7b\u578b , \u5217\u540d\u79f0 \u7c7b\u578b ) default charset = utf8 ; \u5199\u6cd5\u4e00 create table tb1 ( id int , name varchar ( 16 ), age int ) default charset = utf8 ; \u5199\u6cd5\u4e8c create table tb1 ( id int , name varchar ( 16 ), age int ) default charset = utf8 ; 2.2 \u5b57\u6bb5\u6570\u636e\u662f\u5426\u5141\u8bb8\u4e3a\u7a7a\uff0c\u9ed8\u8ba4\u5141\u8bb8\u4e3a\u7a7a create table tb1 ( id int , name varchar ( 16 ) not null , -- \u4e0d\u5141\u8bb8\u4e3a\u7a7a age int null , -- \u5141\u8bb8\u4e3a\u7a7a\uff08\u9ed8\u8ba4\uff09 ) default charset = utf8 ; 2.3 \u4e3a\u67d0\u5217\u6dfb\u52a0\u9ed8\u8ba4\u503c create table tb1 ( id int , name varchar ( 16 ), age int default 3 -- \u63d2\u5165\u6570\u636e\u65f6\uff0cage\u5217\u7684\u503c\u9ed8\u8ba43 ) default charset = utf8 ; 2.4 \u4e3b\u952e- primary key create table tb1 ( id int primary key , -- \u4e3b\u952e\uff08\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0c\u4e0d\u5141\u8bb8\u91cd\u590d\uff09 name varchar ( 16 ), age int ) default charset = utf8 ; 2.5 \u81ea\u589e\u4e3b\u952e-auto_increment create table tb1 ( id int auto_increment primary key , -- \u5185\u90e8\u7ef4\u62a4\uff0c\u81ea\u589e name varchar ( 16 ), age int ) default charset = utf8 ; 2.6 \u4e3b\u952e\u6807\u51c6\u5199\u6cd5-\u6307\u5b9a\u6570\u636e\u4e0d\u4e3a\u7a7a create table tb1 ( id int not null auto_increment primary key , name varchar ( 16 ), age int ) default charset = utf8 ; 2.7 \u67e5\u770b\u8868\u5c5e\u6027 Field:\u5b57\u6bb5\u540d\uff1bType\uff1a\u6570\u636e\u7c7b\u578b\uff1bNull:\u662f\u5426\u4e3a\u7a7a\uff1bKey\uff1a\u662f\u5426\u4e3a\u4e3b\u952e\uff1bDefault\uff1a\u9ed8\u8ba4\u503c\uff1bExtra\uff1a\u81ea\u589e mysql > desc tb1 ; + -------+-------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | + -------+-------------+------+-----+---------+----------------+ | id | int ( 11 ) | NO | PRI | NULL | auto_increment | | name | varchar ( 16 ) | YES | | NULL | | | age | int ( 11 ) | YES | | NULL | | + -------+-------------+------+-----+---------+----------------+ 3 rows in set ( 0 . 00 sec ) 2.8 \u5220\u9664\u8868 drop table \u8868\u540d\u79f0 ; 3. \u5e38\u7528\u6570\u636e\u7c7b\u578b 3.1 int\uff08\u6574\u578b\uff09 tinyint \u6709\u7b26\u53f7\uff0c\u53d6\u503c\u8303\u56f4\uff1a - 128 \uff5e 127 ( \u6709\u6b63\u6709\u8d1f ) \u3010\u9ed8\u8ba4\u3011 \u65e0\u7b26\u53f7\uff0c\u53d6\u503c\u8303\u56f4\uff1a 0 \uff5e 255 \uff08\u53ea\u6709\u6b63\uff09 create table tb2 ( id int not null auto_increment primary key , age tinyint -- \u6709\u7b26\u53f7\uff1a\u53d6\u503c\u8303\u56f4\uff1a-128 \uff5e 127 ) default charset = utf8 ; create table tb3 ( id int not null auto_increment primary key , age tinyint unsigned -- \u65e0\u7b26\u53f7\uff1a\u53d6\u503c\u8303\u56f4\uff1a0 \uff5e 255 ) default charset = utf8 ; int int \u8868\u793a\u6709\u7b26\u53f7\uff0c\u53d6\u503c\u8303\u56f4\uff1a - 2147483648 \uff5e 2147483647 int unsigned \u8868\u793a\u65e0\u7b26\u53f7\uff0c\u53d6\u503c\u8303\u56f4\uff1a 0 \uff5e 4294967295 bigint \u6709\u7b26\u53f7\uff0c\u53d6\u503c\u8303\u56f4\uff1a - 9223372036854775808 \uff5e 9223372036854775807 \u65e0\u7b26\u53f7\uff0c\u53d6\u503c\u8303\u56f4\uff1a 0 \uff5e 18446744073709551615 int\u7ec3\u4e60 # \u521b\u5efa\u8868 create table tb2 ( id bigint not null auto_increment primary key , salary int , age tinyint ) default charset = utf8 ; # \u63d2\u5165\u6570\u636e insert into tb2 ( salary , age ) values ( 10000 , 18 ); insert into tb2 ( salary , age ) values ( 20000 , 28 ); insert into tb2 ( salary , age ) values ( 30000 , 38 ),( 40000 , 40 ); # \u67e5\u770b\u8868\u4e2d\u7684\u6570\u636e select * from tb2 ; mysql > show tables ; + --------------------+ | Tables_in_gx_day14 | + --------------------+ | tb1 | + --------------------+ 1 row in set ( 0 . 00 sec ) mysql > create table tb2 ( -> id bigint not null auto_increment primary key , -> salary int , -> age tinyint -> ) default charset = utf8 ; Query OK , 0 rows affected ( 0 . 03 sec ) mysql > show tables ; + --------------------+ | Tables_in_gx_day14 | + --------------------+ | tb1 | | tb2 | + --------------------+ 2 rows in set ( 0 . 00 sec ) mysql > insert into tb2 ( salary , age ) values ( 10000 , 18 ); Query OK , 1 row affected ( 0 . 00 sec ) mysql > insert into tb2 ( salary , age ) values ( 20000 , 28 ); Query OK , 1 row affected ( 0 . 00 sec ) mysql > insert into tb2 ( salary , age ) values ( 30000 , 38 ),( 40000 , 40 ); Query OK , 2 rows affected ( 0 . 01 sec ) Records : 2 Duplicates : 0 Warnings : 0 mysql > select * from tb2 ; + ----+--------+------+ | id | salary | age | + ----+--------+------+ | 1 | 10000 | 18 | | 2 | 20000 | 28 | | 3 | 30000 | 38 | | 4 | 40000 | 40 | + ----+--------+------+ 4 rows in set ( 0 . 00 sec ) 3.2 \u5c0f\u6570 float double decimal \uff08\u5e38\u7528\uff09 \u51c6\u786e\u7684\u5c0f\u6570\u503c\uff0c m\u662f\u6570\u5b57\u603b\u4e2a\u6570 \uff08\u8d1f\u53f7\u4e0d\u7b97\uff09\uff0c d\u662f\u5c0f\u6570\u70b9\u540e\u4e2a\u6570 \u3002 m\u6700\u5927\u503c\u4e3a65 \uff0c d\u6700\u5927\u503c\u4e3a30 \u3002 \u4f8b\u5982\uff1a create table tb3 ( id int not null primary key auto_increment , salary decimal ( 8 , 2 ) ) default charset = utf8 ; insert into tb3 ( salary ) values ( 1 . 28 ); insert into tb3 ( salary ) values ( 5 . 289 ); insert into tb3 ( salary ) values ( 5 . 282 ); insert into tb3 ( salary ) values ( 122115 . 11 ); select * from tb3 ; 3.3 \u5b57\u7b26\u4e32 char (m) \u901f\u5ea6\u5feb \u5b9a\u957f\u5b57\u7b26\u4e32\uff0c m\u4ee3\u8868\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 \uff0c\u6700\u591a\u53ef\u5bb9\u7eb3 255 \u4e2a\u5b57\u7b26\u3002 char ( 11 ) \uff0c\u56fa\u5b9a\u7528 11 \u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u5b58\u50a8\uff0c\u54ea\u6015\u771f\u662f\u6ca1\u6709 11 \u4e2a\u5b57\u7b26\uff0c\u4e5f\u4f1a\u6309\u7167 11 \u5b58\u50a8\u3002 create table tb4 ( id int not null primary key auto_increment , mobile char ( 11 ) ) default charset = utf8 ; insert into tb4 ( mobile ) values ( \"151\" ); insert into tb4 ( mobile ) values ( \"15131255555\" ); varchar (m) \u8282\u7701\u7a7a\u95f4 \u53d8\u957f\u5b57\u7b26\u4e32\uff0c m\u4ee3\u8868\u5b57\u7b26\u7684\u957f\u5ea6 \u3002 \u6700\u5927 65535 \u5b57\u8282 / 3 = \u6700\u5927\u7684 m varchar ( 11 ) \uff0c\u771f\u5b9e\u6570\u636e\u6709\u591a\u5c11\u957f\u4e45\u6309\u7167\u591a\u957f\u5b58\u50a8\u3002 create table tb5 ( id int not null primary key auto_increment , mobile varchar ( 11 ) ) default charset = utf8 ; insert into tb5 ( mobile ) values ( \"151\" ); insert into tb5 ( mobile ) values ( \"15131255555\" ); text text\u6570\u636e\u7c7b\u578b\u7528\u4e8e\u4fdd\u5b58\u53d8\u957f\u7684\u5927\u5b57\u7b26\u4e32 \uff0c\u53ef\u4ee5\u7ec4\u591a\u5230 65535 ( 2 ** 16 \u2212 1 ) \u4e2a\u5b57\u7b26\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u957f\u6587\u672c\u4f1a\u7528 text\u7c7b\u578b \u3002\u4f8b\u5982\uff1a\u6587\u7ae0\u3001\u65b0\u95fb\u7b49\u3002 create table tb6 ( id int not null primary key auto_increment , title varchar ( 128 ), content text ) default charset = utf8 ; mediumtext A TEXT column with a maximum length of 16 , 777 , 215 ( 2 ** 24 \u2212 1 ) characters . longtext A TEXT column with a maximum length of 4 , 294 , 967 , 295 or 4 GB ( 2 ** 32 \u2212 1 ) 3.4 \u65e5\u671f-\u65f6\u95f4 datatime YYYY - MM - DD HH : MM : SS \uff08 1000 - 01 - 01 00 : 00 : 00 / 9999 - 12 - 31 23 : 59 : 59 \uff09 date YYYY - MM - DD \uff08 1000 - 01 - 01 / 9999 - 12 - 31 \uff09 \u7ec3\u4e60\uff08\u7528\u6237\u8868\uff09 create table tb7 ( id int not null primary key auto_increment , name varchar ( 64 ) not null , password char ( 64 ) not null , email varchar ( 64 ) not null , age tinyint , salary decimal ( 10 , 2 ), ctime datetime ) default charset = utf8 ; insert into tb7 ( name , password , email , age , salary , ctime ) values ( \"\u6b66\u6c9b\u9f50\" , \"123\" , \"xx@live.com\" , 19 , 1000 . 20 , \"2011-11-11 11:11:10\" ); insert into tb7 ( name , password , email , age , salary , ctime ) values ( \"\u5f20\u7535\u6469\" , \"123\" , \"xx@live.com\" , 19 , 1000 . 20 , \"2011-11-11 11:11:10\" ); insert into tb7 ( name , password , email , age , salary , ctime ) values ( \"\u5e9e\u5c0f\u9752\" , \"123\" , \"xx@live.com\" , 19 , 1000 . 20 , \"2011-11-11 11:11:10\" ); insert into tb7 ( name , password , email , age , salary , ctime ) values ( \"\u8c22\u6d9b\" , \"123\" , \"xx@live.com\" , 19 , 1000 . 20 , \"2011-11-11 11:11:10\" ); insert into tb7 ( name , password , email , age , salary , ctime ) values ( \"\u8c22\u9e4f\" , \"123\" , \"xx@live.com\" , 19 , 1000 . 20 , \"2011-11-11 11:11:10\" ); select * from tb7 ; + ----+-----------+----------+-------------+------+---------+---------------------+ | id | name | password | email | age | salary | ctime | + ----+-----------+----------+-------------+------+---------+---------------------+ | 1 | \u6b66\u6c9b\u9f50 | 123 | xx @ live . com | 19 | 1000 . 20 | 2011 - 11 - 11 11 : 11 : 10 | + ----+-----------+----------+-------------+------+---------+---------------------+ 1 row in set ( 0 . 00 sec ) 4. \u6570\u636e\u884c\u64cd\u4f5c 4.1 \u65b0\u589e\u6570\u636e insert into \u8868\u540d ( \u5217\u540d , \u5217\u540d ) values ( \u503c , \u503c ); insert into \u8868\u540d ( \u5217\u540d , \u5217\u540d ) values ( \u503c , \u503c ),( \u503c , \u503c ),( \u503c , \u503c ),( \u503c , \u503c ); 4.2 \u5220\u9664\u6570\u636e delete from \u8868\u540d ; delete from \u8868\u540d where \u6761\u4ef6 ; delete from tb7 ; delete from tb7 where id = 3 ; delete from tb7 where id = 4 and name = \"\u8c22\u6d9b\" ; delete from tb7 where id = 4 or name = \"\u8c22\u6d9b\" ; delete from tb7 where id > 4 ; delete from tb7 where id >= 4 ; delete from tb7 where id != 4 ; delete from tb7 where id in ( 1 , 5 ); 4.3 \u4fee\u6539\u6570\u636e update \u8868\u540d set \u5217 = \u503c ; update \u8868\u540d set \u5217 = \u503c , \u5217 = \u503c ; update \u8868\u540d set \u5217 = \u503c where \u6761\u4ef6 ; update tb7 set password = \"\u54c8\u54c8\u54c8\" ; update tb7 set email = \"\u54c8\u54c8\u54c8\" where id > 5 ; update tb7 set age = age + 10 where id > 5 ; 4.4 \u67e5\u8be2\u6570\u636e select * from \u8868\u540d\u79f0 ; select \u5217\u540d\u79f0 , \u5217\u540d\u79f0 from \u8868\u540d\u79f0 ; select \u5217\u540d\u79f0 , \u5217\u540d\u79f0 from \u8868\u540d\u79f0 where \u6761\u4ef6 ; select * from tb7 ; select id , name from tb7 ; select id , name from tb7 where id > 10 ; select id , name from tb7 where name = \"xx\" and password = \"xx\" ; 5. python\u64cd\u4f5cmysql python\u94fe\u63a5mysql\u9700\u8981\u4f9d\u8d56\u7b2c\u4e09\u65b9\u5e93pymysql pip3 install pymysql 5.1 \u65b0\u589e\u6570\u636e import pymysql # 1.\u94fe\u63a5mysql conn = pymysql . connect ( host = '127.0.0.1' , # \u672c\u5730IP port = 3306 , # \u7aef\u53e3\u53f7 user = 'root' , # \u7528\u6237\u540d password = 'kaka0027' , # \u5bc6\u7801 charset = 'utf8' , # \u7f16\u7801 db = 'unicom' , # \u6307\u5b9a\u6570\u636e\u5e93 cursorclass = pymysql . cursors . DictCursor ) # \u56fa\u5b9a\u4f20\u6b64\u5185\u5bb9 # 2. \u521b\u5efa\u6e38\u6807 cursor = conn . cursor () # 3. \u53d1\u9001\u6307\u4ee4 cursor . execute ( 'insert into admin(username,password,mobile) values (\"\u5c0f\u660e\",\"123123\",\"18912345678\")' ) # 4. \u6267\u884c\u6307\u4ee4 conn . commit () # 5. \u5173\u95ed\u6e38\u6807\u548c\u8fde\u63a5\u3002\u5148\u5173\u6e38\u6807\uff0c\u518d\u5173\u8fde\u63a5 cursor . close () conn . close () 5.2 \u67e5\u8be2\u6570\u636e # 3. \u53d1\u9001\u6307\u5b9a cursor . execute ( 'select * from admin' ) # 4. \u6267\u884c\u6307\u4ee4 list1 = cursor . fetchall () dict1 = cursor . fetchone () 5.3 \u5220\u9664\u6570\u636e # 2.\u53d1\u9001\u6307\u4ee4\uff08 *** \u5343\u4e07\u4e0d\u8981\u7528\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u53bb\u505aSQL\u7684\u62fc\u63a5\uff0c\u5b89\u5168\u9690\u60a3SQL\u6ce8\u5165***\uff09 cursor . execute ( \"delete from admin where id= %s \" , [ 3 , ]) conn . commit () 5.4 \u4fee\u6539\u6570\u636e # 2.\u53d1\u9001\u6307\u4ee4\uff08 *** \u5343\u4e07\u4e0d\u8981\u7528\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u53bb\u505aSQL\u7684\u62fc\u63a5\uff0c\u5b89\u5168\u9690\u60a3SQL\u6ce8\u5165***\uff09 cursor . execute ( \"update admin set mobile= %s where id= %s \" , [ \"1888888888\" , 4 , ]) conn . commit () \u77e5\u8bc6\u70b9\u603b\u7ed3 \u65b0\u589e\u3001\u5220\u9664\u548c\u4fee\u6539\u6570\u636e\u65f6\uff0c\u53d1\u9001\u6307\u5b9a\u540e\u9700\u8981\u6307\u5b9a conn.commit() \u3002\u5426\u5219\u6570\u636e\u5e93\u6ca1\u6709\u6570\u636e cursor . execute ( \"sql\u8bed\u53e5\" ) conn . commit () \u67e5\u8be2\u65f6\uff0c\u4e0d\u9700\u8981 conn.commit() \u3002\u4f46\u9700\u8981 cursor.fetchall() \u6216\u8005 cursor.fetchone() cursor . execute ( \"sql\u67e5\u8be2\u8bed\u53e5\" ) list = cursor . fetchall () ## \u8fd4\u56de\u7684\u662f\u5217\u8868\u5957\u5b57\u5178\u7684\u6570\u636e\u683c\u5f0f [{k1:n1,k2:n2},{k1:n3,k2:n4}] dict = cursor . fetchone () ## \u8fd4\u56de\u6ee1\u8db3\u6761\u4ef6\u7684\u7b2c\u4e00\u6761\u6570\u636e\uff0c\u4ee5\u5b57\u5178\u5f62\u5f0f\u53cd\u9988 {k1:n1,k2:n2} sql\u8bed\u53e5\u4e0d\u80fd\u4f7f\u7528\u5b57\u7b26\u4e32\u62fc\u63a5(\u4f1a\u88absql\u6ce8\u5165),\u6709\u5b89\u5168\u9690\u60a3\uff0c\u4e00\u5b9a\u8981\u4f7f\u7528 cursor.execute() \u5185\u90e8\u7684\u4e24\u4e2a\u53c2\u6570 # \u521b\u5efa\u6570\u636e\u65f6\uff0c\u5982\u679c\u8981\u6839\u636e\u7a0b\u5e8f\u81ea\u52a8\u751f\u6210\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\uff1a # 1. execute\u5185\u4ee5\u5217\u8868\u4f20\u53c2 sql = 'insert into table(\u5b57\u6bb51\uff0c\u5b57\u6bb52) values ( %s , %s )' conn . execute ( sql ,[ name1 , name2 ] # 2. \u4ee5\u5b57\u5178\u4f20\u53c2 sql = 'insert into table(\u5b57\u6bb51\uff0c\u5b57\u6bb52) values ( %(k1)s , %(k2)s )' conn . execute ( sql ,{ 'k1' : 'n1' , 'k2' : 'n2' }) # \u5982\u679csql\u8bed\u53e5\u5185\u4ec5\u6709\u4e00\u4e2a\u5360\u4f4d\uff0c\u4f20\u53c2\u4f9d\u7136\u4f7f\u7528\u5217\u8868 sql = 'select * from table where id = %s ' conn . execute ( sql ,[ 3 , ]","title":"mysql\u57fa\u7840"},{"location":"programming/web/mysql-base/#1","text":"","title":"1. \u6570\u636e\u5e93\u7ba1\u7406"},{"location":"programming/web/mysql-base/#11","text":"show databases ;","title":"1.1 \u67e5\u770b\u5df2\u6709\u6570\u636e\u5e93"},{"location":"programming/web/mysql-base/#12","text":"create database \u6570\u636e\u5e93\u540d\u5b57 DEFAULT CHARSET utf8 COLLATE utf8_general_ci ; create database test_01 DEFAULT CHARSET utf8 COLLATE utf8_general_ci ;","title":"1.2 \u521b\u5efa\u6570\u636e\u5e93"},{"location":"programming/web/mysql-base/#13","text":"drop database \u6570\u636e\u5e93\u540d\u79f0 ;","title":"1.3 \u5220\u9664\u6570\u636e\u5e93"},{"location":"programming/web/mysql-base/#14","text":"use \u6570\u636e\u5e93\u540d\u79f0 ;","title":"1.4 \u8fdb\u5165\u6570\u636e\u5e93"},{"location":"programming/web/mysql-base/#15","text":"show tables ;","title":"1.5 \u67e5\u770b\u6570\u636e\u5e93\u6240\u6709\u6570\u636e\u8868"},{"location":"programming/web/mysql-base/#2","text":"","title":"2. \u6570\u636e\u8868\u7ba1\u7406"},{"location":"programming/web/mysql-base/#21","text":"create table \u8868\u540d\u79f0 ( \u5217\u540d\u79f0 \u7c7b\u578b , \u5217\u540d\u79f0 \u7c7b\u578b , \u5217\u540d\u79f0 \u7c7b\u578b ) default charset = utf8 ; \u5199\u6cd5\u4e00 create table tb1 ( id int , name varchar ( 16 ), age int ) default charset = utf8 ; \u5199\u6cd5\u4e8c create table tb1 ( id int , name varchar ( 16 ), age int ) default charset = utf8 ;","title":"2.1 \u521b\u5efa\u8868\u8bed\u6cd5"},{"location":"programming/web/mysql-base/#22","text":"create table tb1 ( id int , name varchar ( 16 ) not null , -- \u4e0d\u5141\u8bb8\u4e3a\u7a7a age int null , -- \u5141\u8bb8\u4e3a\u7a7a\uff08\u9ed8\u8ba4\uff09 ) default charset = utf8 ;","title":"2.2 \u5b57\u6bb5\u6570\u636e\u662f\u5426\u5141\u8bb8\u4e3a\u7a7a\uff0c\u9ed8\u8ba4\u5141\u8bb8\u4e3a\u7a7a"},{"location":"programming/web/mysql-base/#23","text":"create table tb1 ( id int , name varchar ( 16 ), age int default 3 -- \u63d2\u5165\u6570\u636e\u65f6\uff0cage\u5217\u7684\u503c\u9ed8\u8ba43 ) default charset = utf8 ;","title":"2.3 \u4e3a\u67d0\u5217\u6dfb\u52a0\u9ed8\u8ba4\u503c"},{"location":"programming/web/mysql-base/#24-primary-key","text":"create table tb1 ( id int primary key , -- \u4e3b\u952e\uff08\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0c\u4e0d\u5141\u8bb8\u91cd\u590d\uff09 name varchar ( 16 ), age int ) default charset = utf8 ;","title":"2.4 \u4e3b\u952e- primary key"},{"location":"programming/web/mysql-base/#25-auto_increment","text":"create table tb1 ( id int auto_increment primary key , -- \u5185\u90e8\u7ef4\u62a4\uff0c\u81ea\u589e name varchar ( 16 ), age int ) default charset = utf8 ;","title":"2.5 \u81ea\u589e\u4e3b\u952e-auto_increment"},{"location":"programming/web/mysql-base/#26-","text":"create table tb1 ( id int not null auto_increment primary key , name varchar ( 16 ), age int ) default charset = utf8 ;","title":"2.6 \u4e3b\u952e\u6807\u51c6\u5199\u6cd5-\u6307\u5b9a\u6570\u636e\u4e0d\u4e3a\u7a7a"},{"location":"programming/web/mysql-base/#27","text":"Field:\u5b57\u6bb5\u540d\uff1bType\uff1a\u6570\u636e\u7c7b\u578b\uff1bNull:\u662f\u5426\u4e3a\u7a7a\uff1bKey\uff1a\u662f\u5426\u4e3a\u4e3b\u952e\uff1bDefault\uff1a\u9ed8\u8ba4\u503c\uff1bExtra\uff1a\u81ea\u589e mysql > desc tb1 ; + -------+-------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | + -------+-------------+------+-----+---------+----------------+ | id | int ( 11 ) | NO | PRI | NULL | auto_increment | | name | varchar ( 16 ) | YES | | NULL | | | age | int ( 11 ) | YES | | NULL | | + -------+-------------+------+-----+---------+----------------+ 3 rows in set ( 0 . 00 sec )","title":"2.7 \u67e5\u770b\u8868\u5c5e\u6027"},{"location":"programming/web/mysql-base/#28","text":"drop table \u8868\u540d\u79f0 ;","title":"2.8 \u5220\u9664\u8868"},{"location":"programming/web/mysql-base/#3","text":"","title":"3. \u5e38\u7528\u6570\u636e\u7c7b\u578b"},{"location":"programming/web/mysql-base/#31-int","text":"tinyint \u6709\u7b26\u53f7\uff0c\u53d6\u503c\u8303\u56f4\uff1a - 128 \uff5e 127 ( \u6709\u6b63\u6709\u8d1f ) \u3010\u9ed8\u8ba4\u3011 \u65e0\u7b26\u53f7\uff0c\u53d6\u503c\u8303\u56f4\uff1a 0 \uff5e 255 \uff08\u53ea\u6709\u6b63\uff09 create table tb2 ( id int not null auto_increment primary key , age tinyint -- \u6709\u7b26\u53f7\uff1a\u53d6\u503c\u8303\u56f4\uff1a-128 \uff5e 127 ) default charset = utf8 ; create table tb3 ( id int not null auto_increment primary key , age tinyint unsigned -- \u65e0\u7b26\u53f7\uff1a\u53d6\u503c\u8303\u56f4\uff1a0 \uff5e 255 ) default charset = utf8 ; int int \u8868\u793a\u6709\u7b26\u53f7\uff0c\u53d6\u503c\u8303\u56f4\uff1a - 2147483648 \uff5e 2147483647 int unsigned \u8868\u793a\u65e0\u7b26\u53f7\uff0c\u53d6\u503c\u8303\u56f4\uff1a 0 \uff5e 4294967295 bigint \u6709\u7b26\u53f7\uff0c\u53d6\u503c\u8303\u56f4\uff1a - 9223372036854775808 \uff5e 9223372036854775807 \u65e0\u7b26\u53f7\uff0c\u53d6\u503c\u8303\u56f4\uff1a 0 \uff5e 18446744073709551615 int\u7ec3\u4e60 # \u521b\u5efa\u8868 create table tb2 ( id bigint not null auto_increment primary key , salary int , age tinyint ) default charset = utf8 ; # \u63d2\u5165\u6570\u636e insert into tb2 ( salary , age ) values ( 10000 , 18 ); insert into tb2 ( salary , age ) values ( 20000 , 28 ); insert into tb2 ( salary , age ) values ( 30000 , 38 ),( 40000 , 40 ); # \u67e5\u770b\u8868\u4e2d\u7684\u6570\u636e select * from tb2 ; mysql > show tables ; + --------------------+ | Tables_in_gx_day14 | + --------------------+ | tb1 | + --------------------+ 1 row in set ( 0 . 00 sec ) mysql > create table tb2 ( -> id bigint not null auto_increment primary key , -> salary int , -> age tinyint -> ) default charset = utf8 ; Query OK , 0 rows affected ( 0 . 03 sec ) mysql > show tables ; + --------------------+ | Tables_in_gx_day14 | + --------------------+ | tb1 | | tb2 | + --------------------+ 2 rows in set ( 0 . 00 sec ) mysql > insert into tb2 ( salary , age ) values ( 10000 , 18 ); Query OK , 1 row affected ( 0 . 00 sec ) mysql > insert into tb2 ( salary , age ) values ( 20000 , 28 ); Query OK , 1 row affected ( 0 . 00 sec ) mysql > insert into tb2 ( salary , age ) values ( 30000 , 38 ),( 40000 , 40 ); Query OK , 2 rows affected ( 0 . 01 sec ) Records : 2 Duplicates : 0 Warnings : 0 mysql > select * from tb2 ; + ----+--------+------+ | id | salary | age | + ----+--------+------+ | 1 | 10000 | 18 | | 2 | 20000 | 28 | | 3 | 30000 | 38 | | 4 | 40000 | 40 | + ----+--------+------+ 4 rows in set ( 0 . 00 sec )","title":"3.1 int\uff08\u6574\u578b\uff09"},{"location":"programming/web/mysql-base/#32","text":"float double decimal \uff08\u5e38\u7528\uff09 \u51c6\u786e\u7684\u5c0f\u6570\u503c\uff0c m\u662f\u6570\u5b57\u603b\u4e2a\u6570 \uff08\u8d1f\u53f7\u4e0d\u7b97\uff09\uff0c d\u662f\u5c0f\u6570\u70b9\u540e\u4e2a\u6570 \u3002 m\u6700\u5927\u503c\u4e3a65 \uff0c d\u6700\u5927\u503c\u4e3a30 \u3002 \u4f8b\u5982\uff1a create table tb3 ( id int not null primary key auto_increment , salary decimal ( 8 , 2 ) ) default charset = utf8 ; insert into tb3 ( salary ) values ( 1 . 28 ); insert into tb3 ( salary ) values ( 5 . 289 ); insert into tb3 ( salary ) values ( 5 . 282 ); insert into tb3 ( salary ) values ( 122115 . 11 ); select * from tb3 ;","title":"3.2 \u5c0f\u6570"},{"location":"programming/web/mysql-base/#33","text":"char (m) \u901f\u5ea6\u5feb \u5b9a\u957f\u5b57\u7b26\u4e32\uff0c m\u4ee3\u8868\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 \uff0c\u6700\u591a\u53ef\u5bb9\u7eb3 255 \u4e2a\u5b57\u7b26\u3002 char ( 11 ) \uff0c\u56fa\u5b9a\u7528 11 \u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u5b58\u50a8\uff0c\u54ea\u6015\u771f\u662f\u6ca1\u6709 11 \u4e2a\u5b57\u7b26\uff0c\u4e5f\u4f1a\u6309\u7167 11 \u5b58\u50a8\u3002 create table tb4 ( id int not null primary key auto_increment , mobile char ( 11 ) ) default charset = utf8 ; insert into tb4 ( mobile ) values ( \"151\" ); insert into tb4 ( mobile ) values ( \"15131255555\" ); varchar (m) \u8282\u7701\u7a7a\u95f4 \u53d8\u957f\u5b57\u7b26\u4e32\uff0c m\u4ee3\u8868\u5b57\u7b26\u7684\u957f\u5ea6 \u3002 \u6700\u5927 65535 \u5b57\u8282 / 3 = \u6700\u5927\u7684 m varchar ( 11 ) \uff0c\u771f\u5b9e\u6570\u636e\u6709\u591a\u5c11\u957f\u4e45\u6309\u7167\u591a\u957f\u5b58\u50a8\u3002 create table tb5 ( id int not null primary key auto_increment , mobile varchar ( 11 ) ) default charset = utf8 ; insert into tb5 ( mobile ) values ( \"151\" ); insert into tb5 ( mobile ) values ( \"15131255555\" ); text text\u6570\u636e\u7c7b\u578b\u7528\u4e8e\u4fdd\u5b58\u53d8\u957f\u7684\u5927\u5b57\u7b26\u4e32 \uff0c\u53ef\u4ee5\u7ec4\u591a\u5230 65535 ( 2 ** 16 \u2212 1 ) \u4e2a\u5b57\u7b26\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u957f\u6587\u672c\u4f1a\u7528 text\u7c7b\u578b \u3002\u4f8b\u5982\uff1a\u6587\u7ae0\u3001\u65b0\u95fb\u7b49\u3002 create table tb6 ( id int not null primary key auto_increment , title varchar ( 128 ), content text ) default charset = utf8 ; mediumtext A TEXT column with a maximum length of 16 , 777 , 215 ( 2 ** 24 \u2212 1 ) characters . longtext A TEXT column with a maximum length of 4 , 294 , 967 , 295 or 4 GB ( 2 ** 32 \u2212 1 )","title":"3.3 \u5b57\u7b26\u4e32"},{"location":"programming/web/mysql-base/#34-","text":"datatime YYYY - MM - DD HH : MM : SS \uff08 1000 - 01 - 01 00 : 00 : 00 / 9999 - 12 - 31 23 : 59 : 59 \uff09 date YYYY - MM - DD \uff08 1000 - 01 - 01 / 9999 - 12 - 31 \uff09 \u7ec3\u4e60\uff08\u7528\u6237\u8868\uff09 create table tb7 ( id int not null primary key auto_increment , name varchar ( 64 ) not null , password char ( 64 ) not null , email varchar ( 64 ) not null , age tinyint , salary decimal ( 10 , 2 ), ctime datetime ) default charset = utf8 ; insert into tb7 ( name , password , email , age , salary , ctime ) values ( \"\u6b66\u6c9b\u9f50\" , \"123\" , \"xx@live.com\" , 19 , 1000 . 20 , \"2011-11-11 11:11:10\" ); insert into tb7 ( name , password , email , age , salary , ctime ) values ( \"\u5f20\u7535\u6469\" , \"123\" , \"xx@live.com\" , 19 , 1000 . 20 , \"2011-11-11 11:11:10\" ); insert into tb7 ( name , password , email , age , salary , ctime ) values ( \"\u5e9e\u5c0f\u9752\" , \"123\" , \"xx@live.com\" , 19 , 1000 . 20 , \"2011-11-11 11:11:10\" ); insert into tb7 ( name , password , email , age , salary , ctime ) values ( \"\u8c22\u6d9b\" , \"123\" , \"xx@live.com\" , 19 , 1000 . 20 , \"2011-11-11 11:11:10\" ); insert into tb7 ( name , password , email , age , salary , ctime ) values ( \"\u8c22\u9e4f\" , \"123\" , \"xx@live.com\" , 19 , 1000 . 20 , \"2011-11-11 11:11:10\" ); select * from tb7 ; + ----+-----------+----------+-------------+------+---------+---------------------+ | id | name | password | email | age | salary | ctime | + ----+-----------+----------+-------------+------+---------+---------------------+ | 1 | \u6b66\u6c9b\u9f50 | 123 | xx @ live . com | 19 | 1000 . 20 | 2011 - 11 - 11 11 : 11 : 10 | + ----+-----------+----------+-------------+------+---------+---------------------+ 1 row in set ( 0 . 00 sec )","title":"3.4 \u65e5\u671f-\u65f6\u95f4"},{"location":"programming/web/mysql-base/#4","text":"","title":"4. \u6570\u636e\u884c\u64cd\u4f5c"},{"location":"programming/web/mysql-base/#41","text":"insert into \u8868\u540d ( \u5217\u540d , \u5217\u540d ) values ( \u503c , \u503c ); insert into \u8868\u540d ( \u5217\u540d , \u5217\u540d ) values ( \u503c , \u503c ),( \u503c , \u503c ),( \u503c , \u503c ),( \u503c , \u503c );","title":"4.1 \u65b0\u589e\u6570\u636e"},{"location":"programming/web/mysql-base/#42","text":"delete from \u8868\u540d ; delete from \u8868\u540d where \u6761\u4ef6 ; delete from tb7 ; delete from tb7 where id = 3 ; delete from tb7 where id = 4 and name = \"\u8c22\u6d9b\" ; delete from tb7 where id = 4 or name = \"\u8c22\u6d9b\" ; delete from tb7 where id > 4 ; delete from tb7 where id >= 4 ; delete from tb7 where id != 4 ; delete from tb7 where id in ( 1 , 5 );","title":"4.2 \u5220\u9664\u6570\u636e"},{"location":"programming/web/mysql-base/#43","text":"update \u8868\u540d set \u5217 = \u503c ; update \u8868\u540d set \u5217 = \u503c , \u5217 = \u503c ; update \u8868\u540d set \u5217 = \u503c where \u6761\u4ef6 ; update tb7 set password = \"\u54c8\u54c8\u54c8\" ; update tb7 set email = \"\u54c8\u54c8\u54c8\" where id > 5 ; update tb7 set age = age + 10 where id > 5 ;","title":"4.3 \u4fee\u6539\u6570\u636e"},{"location":"programming/web/mysql-base/#44","text":"select * from \u8868\u540d\u79f0 ; select \u5217\u540d\u79f0 , \u5217\u540d\u79f0 from \u8868\u540d\u79f0 ; select \u5217\u540d\u79f0 , \u5217\u540d\u79f0 from \u8868\u540d\u79f0 where \u6761\u4ef6 ; select * from tb7 ; select id , name from tb7 ; select id , name from tb7 where id > 10 ; select id , name from tb7 where name = \"xx\" and password = \"xx\" ;","title":"4.4 \u67e5\u8be2\u6570\u636e"},{"location":"programming/web/mysql-base/#5-pythonmysql","text":"python\u94fe\u63a5mysql\u9700\u8981\u4f9d\u8d56\u7b2c\u4e09\u65b9\u5e93pymysql pip3 install pymysql","title":"5. python\u64cd\u4f5cmysql"},{"location":"programming/web/mysql-base/#51","text":"import pymysql # 1.\u94fe\u63a5mysql conn = pymysql . connect ( host = '127.0.0.1' , # \u672c\u5730IP port = 3306 , # \u7aef\u53e3\u53f7 user = 'root' , # \u7528\u6237\u540d password = 'kaka0027' , # \u5bc6\u7801 charset = 'utf8' , # \u7f16\u7801 db = 'unicom' , # \u6307\u5b9a\u6570\u636e\u5e93 cursorclass = pymysql . cursors . DictCursor ) # \u56fa\u5b9a\u4f20\u6b64\u5185\u5bb9 # 2. \u521b\u5efa\u6e38\u6807 cursor = conn . cursor () # 3. \u53d1\u9001\u6307\u4ee4 cursor . execute ( 'insert into admin(username,password,mobile) values (\"\u5c0f\u660e\",\"123123\",\"18912345678\")' ) # 4. \u6267\u884c\u6307\u4ee4 conn . commit () # 5. \u5173\u95ed\u6e38\u6807\u548c\u8fde\u63a5\u3002\u5148\u5173\u6e38\u6807\uff0c\u518d\u5173\u8fde\u63a5 cursor . close () conn . close ()","title":"5.1 \u65b0\u589e\u6570\u636e"},{"location":"programming/web/mysql-base/#52","text":"# 3. \u53d1\u9001\u6307\u5b9a cursor . execute ( 'select * from admin' ) # 4. \u6267\u884c\u6307\u4ee4 list1 = cursor . fetchall () dict1 = cursor . fetchone ()","title":"5.2 \u67e5\u8be2\u6570\u636e"},{"location":"programming/web/mysql-base/#53","text":"# 2.\u53d1\u9001\u6307\u4ee4\uff08 *** \u5343\u4e07\u4e0d\u8981\u7528\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u53bb\u505aSQL\u7684\u62fc\u63a5\uff0c\u5b89\u5168\u9690\u60a3SQL\u6ce8\u5165***\uff09 cursor . execute ( \"delete from admin where id= %s \" , [ 3 , ]) conn . commit ()","title":"5.3 \u5220\u9664\u6570\u636e"},{"location":"programming/web/mysql-base/#54","text":"# 2.\u53d1\u9001\u6307\u4ee4\uff08 *** \u5343\u4e07\u4e0d\u8981\u7528\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u53bb\u505aSQL\u7684\u62fc\u63a5\uff0c\u5b89\u5168\u9690\u60a3SQL\u6ce8\u5165***\uff09 cursor . execute ( \"update admin set mobile= %s where id= %s \" , [ \"1888888888\" , 4 , ]) conn . commit ()","title":"5.4 \u4fee\u6539\u6570\u636e"},{"location":"programming/web/mysql-base/#_1","text":"\u65b0\u589e\u3001\u5220\u9664\u548c\u4fee\u6539\u6570\u636e\u65f6\uff0c\u53d1\u9001\u6307\u5b9a\u540e\u9700\u8981\u6307\u5b9a conn.commit() \u3002\u5426\u5219\u6570\u636e\u5e93\u6ca1\u6709\u6570\u636e cursor . execute ( \"sql\u8bed\u53e5\" ) conn . commit () \u67e5\u8be2\u65f6\uff0c\u4e0d\u9700\u8981 conn.commit() \u3002\u4f46\u9700\u8981 cursor.fetchall() \u6216\u8005 cursor.fetchone() cursor . execute ( \"sql\u67e5\u8be2\u8bed\u53e5\" ) list = cursor . fetchall () ## \u8fd4\u56de\u7684\u662f\u5217\u8868\u5957\u5b57\u5178\u7684\u6570\u636e\u683c\u5f0f [{k1:n1,k2:n2},{k1:n3,k2:n4}] dict = cursor . fetchone () ## \u8fd4\u56de\u6ee1\u8db3\u6761\u4ef6\u7684\u7b2c\u4e00\u6761\u6570\u636e\uff0c\u4ee5\u5b57\u5178\u5f62\u5f0f\u53cd\u9988 {k1:n1,k2:n2} sql\u8bed\u53e5\u4e0d\u80fd\u4f7f\u7528\u5b57\u7b26\u4e32\u62fc\u63a5(\u4f1a\u88absql\u6ce8\u5165),\u6709\u5b89\u5168\u9690\u60a3\uff0c\u4e00\u5b9a\u8981\u4f7f\u7528 cursor.execute() \u5185\u90e8\u7684\u4e24\u4e2a\u53c2\u6570 # \u521b\u5efa\u6570\u636e\u65f6\uff0c\u5982\u679c\u8981\u6839\u636e\u7a0b\u5e8f\u81ea\u52a8\u751f\u6210\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\uff1a # 1. execute\u5185\u4ee5\u5217\u8868\u4f20\u53c2 sql = 'insert into table(\u5b57\u6bb51\uff0c\u5b57\u6bb52) values ( %s , %s )' conn . execute ( sql ,[ name1 , name2 ] # 2. \u4ee5\u5b57\u5178\u4f20\u53c2 sql = 'insert into table(\u5b57\u6bb51\uff0c\u5b57\u6bb52) values ( %(k1)s , %(k2)s )' conn . execute ( sql ,{ 'k1' : 'n1' , 'k2' : 'n2' }) # \u5982\u679csql\u8bed\u53e5\u5185\u4ec5\u6709\u4e00\u4e2a\u5360\u4f4d\uff0c\u4f20\u53c2\u4f9d\u7136\u4f7f\u7528\u5217\u8868 sql = 'select * from table where id = %s ' conn . execute ( sql ,[ 3 , ]","title":"\u77e5\u8bc6\u70b9\u603b\u7ed3"},{"location":"programming/web/mysql-install/","text":"1. Mac\u5b89\u88c5 \u4e0b\u8f7d\u5730\u5740\uff1a MySQL :: Download MySQL Community Server (Archived Versions) 1.1 \u7cfb\u7edf\u53d8\u91cf\u914d\u7f6e VIM ~/.bash_profile export PATH = ${ PATH } :/usr/local/mysql/bin :wq -->\u8868\u793a\u9000\u51fa\u7f16\u8f91\u6a21\u5f0f\u5e76\u4fdd\u5b58 source ~/.bash_profile -->\u5c06mysql\u6dfb\u52a0\u5230\u7cfb\u7edf\u53d8\u91cf \u4ee5\u4e0a\u65b9\u6cd5\u6bcf\u6b21\u6253\u5f00\u7ec8\u7aef\u90fd\u9700\u8981\u8f93\u5165 source ~/.bash_profile \uff1b\u4e00\u52b3\u6c38\u9038\u7684\u65b9\u6cd5\u662f: vi ~/.zshrc export PATH = ${ PATH } :/usr/local/mysql/bin :wq source ~/.zshrc 1.2 \u767b\u5f55\u6a21\u5f0f\u4fee\u6539\u5bc6\u7801 set password = password ( \"newpassword\" ) 2. Win\u5b89\u88c5 2.1 \u5b89\u88c5\u8865\u4e01 vcredist_64.exe dxwebsetup.exe 2.2 \u5b89\u88c5 \u5c06\u4e0b\u8f7d\u540e\u7684mysql\u89e3\u538b\u81f3\u5b89\u88c5\u76ee\u5f55 2.3 \u521b\u5efa\u914d\u7f6e\u6587\u4ef6 \u5728\u5b89\u88c5\u76ee\u5f55\u4e0b\u65b0\u5efa my.ini \u6587\u4ef6 2.4 \u521d\u59cb\u5316 \u6253\u5f00\u7ec8\u7aef & \u4ee5\u7ba1\u7406\u5458\u7684\u6743\u9650\u53bb\u8fd0\u884c \u8f93\u5165\u521d\u59cb\u5316\u547d\u4ee4 \"D:\\Program Files (x86)\\mysql\\bin\\mysqld.exe\" --initialize-insecure 2.5 \u542f\u52a8mysql \u5236\u4f5c\u670d\u52a1 \"D:\\Program Files (x86)\\mysql\\bin\\mysqld.exe\" --install mysql57 \u542f\u52a8\u548c\u505c\u6b62 >>> net start mysql57 >>> net stop mysql57 windows\u684c\u9762\u7a97\u53e3\u542f\u52a8 \u670d\u52a1-mysql57-\u542f\u52a8/\u505c\u6b62 2.6 \u6dfb\u52a0\u7cfb\u7edf\u53d8\u91cf \u9ad8\u7ea7\u7cfb\u7edf\u8bbe\u7f6e-->\u7cfb\u7edf\u53d8\u91cf-->path-->\u6dfb\u52a0D: \\P rogram Files ( x86 ) \\m ysql \\b in 2.7 \u5728cmd\u542f\u52a8 >>> mysql -u root -p 2.8 \u8bbe\u7f6e\u5bc6\u7801 \u7b2c\u4e00\u6b21\u767b\u9646\u6267\u884c\u5b8c\u542f\u52a8\u547d\u4ee4\u540e\u4e0d\u8f93\u5165\u5bc6\u7801\u76f4\u63a5\u56de\u8f66\uff0c\u7136\u540e\u8bbe\u7f6e\u5bc6\u7801 set password = password ( 'newpassword' ) ;","title":"mysql\u5b89\u88c5"},{"location":"programming/web/mysql-install/#1-mac","text":"\u4e0b\u8f7d\u5730\u5740\uff1a MySQL :: Download MySQL Community Server (Archived Versions)","title":"1. Mac\u5b89\u88c5"},{"location":"programming/web/mysql-install/#11","text":"VIM ~/.bash_profile export PATH = ${ PATH } :/usr/local/mysql/bin :wq -->\u8868\u793a\u9000\u51fa\u7f16\u8f91\u6a21\u5f0f\u5e76\u4fdd\u5b58 source ~/.bash_profile -->\u5c06mysql\u6dfb\u52a0\u5230\u7cfb\u7edf\u53d8\u91cf \u4ee5\u4e0a\u65b9\u6cd5\u6bcf\u6b21\u6253\u5f00\u7ec8\u7aef\u90fd\u9700\u8981\u8f93\u5165 source ~/.bash_profile \uff1b\u4e00\u52b3\u6c38\u9038\u7684\u65b9\u6cd5\u662f: vi ~/.zshrc export PATH = ${ PATH } :/usr/local/mysql/bin :wq source ~/.zshrc","title":"1.1 \u7cfb\u7edf\u53d8\u91cf\u914d\u7f6e"},{"location":"programming/web/mysql-install/#12","text":"set password = password ( \"newpassword\" )","title":"1.2 \u767b\u5f55\u6a21\u5f0f\u4fee\u6539\u5bc6\u7801"},{"location":"programming/web/mysql-install/#2-win","text":"","title":"2. Win\u5b89\u88c5"},{"location":"programming/web/mysql-install/#21","text":"vcredist_64.exe dxwebsetup.exe","title":"2.1 \u5b89\u88c5\u8865\u4e01"},{"location":"programming/web/mysql-install/#22","text":"\u5c06\u4e0b\u8f7d\u540e\u7684mysql\u89e3\u538b\u81f3\u5b89\u88c5\u76ee\u5f55","title":"2.2 \u5b89\u88c5"},{"location":"programming/web/mysql-install/#23","text":"\u5728\u5b89\u88c5\u76ee\u5f55\u4e0b\u65b0\u5efa my.ini \u6587\u4ef6","title":"2.3 \u521b\u5efa\u914d\u7f6e\u6587\u4ef6"},{"location":"programming/web/mysql-install/#24","text":"\u6253\u5f00\u7ec8\u7aef & \u4ee5\u7ba1\u7406\u5458\u7684\u6743\u9650\u53bb\u8fd0\u884c \u8f93\u5165\u521d\u59cb\u5316\u547d\u4ee4 \"D:\\Program Files (x86)\\mysql\\bin\\mysqld.exe\" --initialize-insecure","title":"2.4 \u521d\u59cb\u5316"},{"location":"programming/web/mysql-install/#25-mysql","text":"\u5236\u4f5c\u670d\u52a1 \"D:\\Program Files (x86)\\mysql\\bin\\mysqld.exe\" --install mysql57 \u542f\u52a8\u548c\u505c\u6b62 >>> net start mysql57 >>> net stop mysql57 windows\u684c\u9762\u7a97\u53e3\u542f\u52a8 \u670d\u52a1-mysql57-\u542f\u52a8/\u505c\u6b62","title":"2.5 \u542f\u52a8mysql"},{"location":"programming/web/mysql-install/#26","text":"\u9ad8\u7ea7\u7cfb\u7edf\u8bbe\u7f6e-->\u7cfb\u7edf\u53d8\u91cf-->path-->\u6dfb\u52a0D: \\P rogram Files ( x86 ) \\m ysql \\b in","title":"2.6 \u6dfb\u52a0\u7cfb\u7edf\u53d8\u91cf"},{"location":"programming/web/mysql-install/#27-cmd","text":">>> mysql -u root -p","title":"2.7 \u5728cmd\u542f\u52a8"},{"location":"programming/web/mysql-install/#28","text":"\u7b2c\u4e00\u6b21\u767b\u9646\u6267\u884c\u5b8c\u542f\u52a8\u547d\u4ee4\u540e\u4e0d\u8f93\u5165\u5bc6\u7801\u76f4\u63a5\u56de\u8f66\uff0c\u7136\u540e\u8bbe\u7f6e\u5bc6\u7801 set password = password ( 'newpassword' ) ;","title":"2.8 \u8bbe\u7f6e\u5bc6\u7801"},{"location":"programming/web/pagination/","text":"pagination.py class Pagination : def __init__ ( self , list_info , page_num , current_page ): ''' :param list_info: \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u4e00\u822c\u4e3a\u901a\u8fc7orm\u6570\u636e\u5e93\u67e5\u8be2\u7684\u6570\u636e :param page_num: \u6bcf\u9875\u663e\u793a\u7684\u6570\u91cf :param current_page:\u5f53\u524d\u9875 ''' # python divmod() \u51fd\u6570\u628a\u9664\u6570\u548c\u4f59\u6570\u8fd0\u7b97\u7ed3\u679c\u7ed3\u5408\u8d77\u6765\uff0c\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5546\u548c\u4f59\u6570\u7684\u5143\u7ec4(a // b, a % b)\u3002 # \u6211\u4eec\u8fd9\u91cc\u8981\u8ba1\u7b97\u7684\u662f\u603b\u9875\u6570 \u5982\u679c\u6709\u4f59\u6570\u7684\u8bdd\u8fd8\u8981+1\u624d\u662f\u603b\u9875\u6570\u3002 totalPages , c = divmod ( len ( list_info ), page_num ) if c > 0 : totalPages += 1 # \u4fdd\u8bc1\u4e86\uff08\u5f53\u524d\u9875\uff09 current_page\u57281\u5230totalPages\u4e4b\u95f4 try : current_page = int ( current_page ) except : current_page = 1 if current_page <= 0 : current_page = 1 if current_page > totalPages : current_page = totalPages self . list_info = list_info # \u53ef\u8fed\u4ee3\u5bf9\u8c61 self . totalPages = totalPages # \u603b\u9875\u6570 self . current_page = current_page # \u5f53\u524d\u9875 self . page_num = page_num # \u6bcf\u9875\u663e\u793a\u7684\u6570\u91cf @property def start ( self ): return ( self . current_page - 1 ) * self . page_num @property def end ( self ): return self . current_page * self . page_num def current_list_info ( self ): # \u8fd9\u91cc\u662f\u53d6\u51fa\u5f53\u524d\u9875\u6240\u9700\u8981\u7684\u6570\u636e # \u4f8b\u5982\uff1a[1,2,3,4,5,6,7,8] \u5982\u679c\u5305\u542b8\u4e2a\u6570\u636e\u7684\u6570\u636e\u96c6\uff0c\u6bcf\u9875\u53ea\u5c55\u793a2\u4e2a\uff0c\u6bcf\u6b21\u53d6\u503c\u4e3aqueryset[0,2] /[2,4] /[4,6]/[6,8] \u6ce8\u610f\u7d22\u5f15\u53d6\u5934\u4e0d\u53d6\u5c3e\uff0c\u4e5f\u5c31\u662f\u7d22\u5f150-7\u7684\u6570\u636e\u3002 current_list = self . list_info [ self . start : self . end ] return current_list # \u8fd4\u56de\u7684\u4e5f\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61 def page_str ( self ): list_page = [] # \u4e0a\u4e00\u9875 if self . current_page > 1 : list_page . append ( self . current_page - 1 ) else : list_page . append ( self . current_page ) # \u4e2d\u95f4\u9875 if self . totalPages < 6 : s = 1 t = self . totalPages else : # >=6 if self . current_page <= 3 : s = 1 t = 5 elif self . current_page > 3 : if self . current_page + 2 > self . totalPages : s = self . totalPages - 4 t = self . totalPages else : s = self . current_page - 2 t = self . current_page + 2 for p in range ( s , t + 1 ): list_page . append ( p ) # \u4e0b\u4e00\u9875 if self . current_page < self . totalPages : list_page . append ( self . current_page + 1 ) else : list_page . append ( self . current_page ) # \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5217\u8868 [10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 12] \u9996\u5c3e \u6570\u636e\u5206\u522b\u662f\u4e0a\u4e00\u9875\u548c\u4e0b\u4e00\u9875 # \u9664\u53bb\u4e24\u7aef\u4e2d\u95f4\u7684\u6570\u636e\u5c31\u662f\u5c55\u793a\u7684\u9875 return list_page view.py def pretty_list ( request ): data_dict = {} search_data = request . GET . get ( 'q' , '' ) if search_data : data_dict [ 'mobile__contains' ] = search_data param_n = '&q= {} ' . format ( search_data ) else : param_n = '' queryset = models . PrettyNum . objects . filter ( ** data_dict ) . order_by ( '-level' ) current_p = int ( request . GET . get ( 'page' , 1 )) page = pagination . Pagination ( queryset , 10 , current_p ) # \u603b\u9875\u6570 total_page = page . totalPages # \u5f53\u524d\u9875\u6570\u636e current_list = page . current_list_info () # \u9875\u7801 str_page = page . page_str () # \u5f53\u524d\u9875 currentpage = page . current_page return render ( request , 'pretty_list.html' , { 'search_data' : search_data , 'current_list' : current_list , 'str_page' : str_page , 'total_page' : total_page , 'currentpage' : currentpage , 'param_n' : param_n }) html < ul class = \"pagination\" > {% if currentpage == 1 %} < li class = \"prev disabled\" > < span aria-hidden = \"true\" > \u9996\u9875 </ span > </ li > < li class = \"prev disabled\" > < span aria-hidden = \"true\" > &laquo; </ span > </ li > {% else %} < li > < a href = \"?page=1\" aria-label = \"Previous\" > < span aria-hidden = \"true\" > \u9996\u9875 </ span > </ a > </ li > < li > < a href = \"?page={{ str_page.0 }}{{ param_n }}\" aria-label = \"Previous\" > < span aria-hidden = \"true\" > &laquo; </ span > </ a > </ li > {% endif %} {% for page in str_page|slice:\"1:-1\" %} {% if page == currentpage %} < li class = \"active\" >< a href = \"?page={{ page }}{{ param_n }}\" > {{ page }} < span class = \"sr-only\" > (current) </ span ></ a > </ li > {% else %} < li >< a href = \"?page={{ page }}{{ param_n }}\" > {{ page }} </ a ></ li > {% endif %} {% endfor %} {% if currentpage == total_page %} < li class = \"prev disabled\" > < span aria-hidden = \"true\" > \u5c3e\u9875 </ span > </ li > < li class = \"prev disabled\" > < span aria-hidden = \"true\" > &laquo; </ span > </ li > {% else %} < li > < a href = \"?page={{ str_page|last }}{{ param_n }}\" aria-label = \"Next\" > < span aria-hidden = \"true\" > &raquo; </ span > </ a > </ li > < li > < a href = \"?page={{ total_page }}\" aria-label = \"Next\" > < span aria-hidden = \"true\" > \u5c3e\u9875 </ span > </ a > </ li > {% endif %} < li > < form style = \"float: left;margin-left: -1px\" method = \"get\" > < input name = \"page\" style = \"position: relative;float:left;display: inline-block;width: 80px;border-radius: 0;\" type = \"text\" class = \"form-control\" placeholder = \"\u9875\u7801\" > < button style = \"border-radius: 0\" class = \"btn btn-default\" type = \"submit\" > \u8df3\u8f6c </ button > </ form > </ li > </ ul >","title":"\u5206\u9875"},{"location":"toolbox/mkdocs/","text":"1.\u7b80\u4ecb MkDocs \uff08 M ar k down Doc ument s \uff09\u662f\u4e00\u4e2a\u5feb\u901f\u3001\u7b80\u5355\u7684\u9759\u6001\u7f51\u7ad9\u751f\u6210\u5668\uff0c\u7528\u4e8e\u5c06 Markdown \u6587\u6863\u7ec4\u7ec7\u8d77\u6765\u6784\u5efa\u6210\u6709\u5c42\u6b21\u3001\u7f8e\u89c2\u7684\u6587\u6863\u7ad9\u70b9\u3002 MkDocs\u57fa\u4e8epython3\u7f16\u5199\uff0c\u88ab\u5f88\u591a\u77e5\u540d\u5f00\u6e90\u9879\u76ee\u9009\u4e2d\uff0c\u7528\u4e8e\u642d\u5efa\u548c\u9879\u76ee\u76f8\u5173\u7684\u6587\u6863\u7f51\u7ad9\u3002\u6bd4\u5982 Python \u91cc\u77e5\u540d\u7684 Web \u5708\u91cc\u7684 django-rest-framework \u3001 FastAPI \u4ee5\u53ca\u57fa\u4e8e Go \u7f16\u5199\u7684\u4e91\u7f51\u5173\u4ee3\u7406\u670d\u52a1\u5668 traefik \u7b49\u9879\u76ee\u7684\u5b98\u65b9\u6587\u6863\u7ad9\u70b9\uff0c\u90fd\u662f\u901a\u8fc7 MkDocs \u8fdb\u884c\u642d\u5efa\u3002 1. 1\u5b98\u65b9\u6587\u6863 \u5b98\u65b9\u6587\u6863\uff1a MkDocs \u4e2d\u6587\u6587\u6863\uff1a MkDocs\u4e2d\u6587\u6587\u6863 (zimoapps.com) 2. \u5feb\u901f\u4e0a\u624b 2.1 \u672c\u5730\u73af\u5883 # 1. \u521b\u5efa\u5b58\u653e\u6587\u6863\u6587\u4ef6\u7684\u76ee\u5f55\uff08\u540d\u5b57\u968f\u610f\uff09 mkdir mydocs # 2. \u5207\u6362\u5230mydocs\u76ee\u5f55 cd mydocs # 3.\u642d\u5efapython\u865a\u62df\u73af\u5883\uff08\u53ef\u9009\uff0c\u672c\u5730\u73af\u5883\u5b89\u88c5\u4e5f\u53ef\u4ee5\uff09 virtualenv venv source venv/bin/activate # \u6fc0\u6d3b\u865a\u62df\u73af\u5883 \u5b89\u88c5mkdocs\u5305 pip install mkdocs 2.2 \u751f\u6210\u7ad9\u70b9\u9879\u76ee \u521b\u5efa\u9879\u76ee mkdocs new <your-site-project-name> # \u9879\u76ee\u540d\u79f0\u81ea\u5b9a\u4e49\uff0c\u6bd4\u5982\uff1a mkdocs new mydocs \u8fd0\u884c\u9879\u76ee cd mydocs mkdocs serve \u67e5\u770b\u9879\u76ee \u5728\u6d4f\u89c8\u5668\u8f93\u5165 http://127.0.0.1:8000/ \u5373\u53ef\u67e5\u770b\u521a\u624d\u521b\u5efa\u7684\u6587\u6863\u9879\u76ee 2.3 \u9879\u76ee\u6587\u4ef6 docs\u76ee\u5f55 \uff1a\u5b58\u653e md \u6587\u4ef6\u7684\u76ee\u5f55\uff0c\u4ee5\u6587\u4ef6\u5939\u5c42\u53e0\u8868\u793a\u5c42\u7ea7 index.md \u4e0d\u53ef\u5220\u9664\uff0c\u9ed8\u8ba4\u662f\u9996\u9875\u5c55\u793a\u7684 md \u6587\u4ef6\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7f16\u8f91\u9996\u9875\u9700\u8981\u5c55\u793a\u7684\u5185\u5bb9 mkdocs.yml :\u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u7528\u6765\u914d\u7f6e \u7ad9\u70b9\u540d\u79f0 \u3001 \u76ee\u5f55\u5c42\u7ea7\u7ed3\u6784 \u3001 \u4e3b\u9898 \u3001 \u63d2\u4ef6 \u7b49 3. \u914d\u7f6e\u9879\u76ee 3.1 \u9875\u9762\u642d\u5efa \u7f16\u5199md\u6587\u4ef6 \u5728 mkdocs.yml \u6587\u4ef6\u6dfb\u52a0\u76ee\u5f55\u5c42\u7ea7 nav : - \u76ee\u5f551 : - \u7b2c\u4e00\u4e2a : \u76ee\u5f551 / \u7b2c\u4e00\u4e2a . md - \u5916\u90e8\u6587\u4ef6 : \u5916\u90e8\u7684 . md \u4ee5\u4e0a\u8bbe\u7f6e\u4f1a\u751f\u6210\u4e00\u4e2a\u5e26\u5c42\u7ea7\u7684\u76ee\u5f55\uff0c\u548c\u4e00\u4e2a\u5916\u90e8\u7684\u6587\u4ef6 \u6839\u636e\u77e5\u8bc6\u4f53\u7cfb\uff0c\u53ef\u4ee5\u4ee5 \u76ee\u5f55/\u6587\u6863.md \u7684\u5f62\u5f0f\uff0c\u81ea\u7531\u7f16\u5199\u6811\u72b6\u7ed3\u6784 3.2 \u5916\u89c2\u8bbe\u7f6e \u7b2c\u4e09\u65b9\u4e3b\u9898\u4e0b\u8f7d\u7f51\u7ad9\uff1a MkDocs Themes \u00b7 mkdocs/mkdocs Wiki (github.com) \u4f7f\u7528 material pip install mkdocs - material \u4fee\u6539 mkdocs.yml \u4e3b\u9898\u914d\u7f6e\uff1a theme : name : material 4. \u81ea\u5b9a\u4e49\u6837\u5f0f material \u7531\u4e8e\u662f\u82f1\u6587\u6392\u7248\u6837\u5f0f\uff0c\u5728\u4e2d\u6587\u5c55\u793a\u4e0a\u4e0d\u662f\u5f88\u53cb\u597d\uff0c\u505a\u4ee5\u4e0b\u8c03\u6574\u4f18\u5316 \u53c2\u8003 material \u5b98\u65b9\u6587\u6863\u4fee\u6539\uff1a Material for MkDocs (squidfunk.github.io) 4.1 \u4e2d\u6587\u641c\u7d22 \u7f51\u7ad9\u4e3a\u82f1\u6587\u60c5\u51b5\u4e0b\uff0c\u4e2d\u6587\u641c\u7d22\u4e0d\u8d77\u4f5c\u7528\uff0c\u4fee\u6539\u4e3a\u4e2d\u6587\uff0c\u53ef\u4ee5\u652f\u6301\u4e2d\u6587\u641c\u7d22\uff0c\u4f46\u4e0d\u652f\u6301\u5206\u8bcd theme: name: material # \u7f51\u7ad9\u8bed\u8a00\u8bbe\u7f6e\u4e3a\u4e2d\u6587 language: zh 4.2 \u5bfc\u822a\u8bbe\u7f6e theme : name : material features : # \u8fd4\u56de\u9876\u90e8 - navigation . top # \u951a\u70b9\u8ddf\u8e2a - navigation . tracking - header . autohide # \u6a2a\u5411\u5bfc\u822a - navigation . tabs - navigation . expand # - toc.integrate - content . tabs . link 4.3 \u81ea\u52a8\u591c\u95f4\u6a21\u5f0f # \u81ea\u52a8\u591c\u95f4\u6a21\u5f0f\u5e76\u4fee\u6539\u4e3b\u9898\u8272\u4e3a\u7eff\u8272 palette : # \u767d\u5929\u6a21\u5f0f - scheme : default primary : teal accent : teal toggle : icon : material / lightbulb name : \u5207\u6362\u591c\u665a\u6a21\u5f0f # \u9ed1\u591c\u6a21\u5f0f - scheme : slate primary : black toggle : icon : material / lightbulb - outline name : \u5207\u6362\u767d\u5929\u6a21\u5f0f 4.4 md\u6e32\u67d3\u6837\u5f0f # markdown\u6e32\u67d3\u6837\u5f0f markdown_extensions : - pymdownx . highlight : anchor_linenums : true linenums_style : pymdownx - inline - pymdownx . inlinehilite - pymdownx . snippets - pymdownx . superfences - pymdownx . keys - tables - def_list - pymdownx . tasklist : custom_checkbox : true 4.5 \u81ea\u5b9a\u4e49css \u5728doc\u76ee\u5f55\u4e0b\u65b0\u589e stylesheets/extra.css \u770b\u54ea\u4e0d\u723d\uff0c\u5728\u7f51\u9875\u5ba1\u67e5css\uff0c\u4fee\u6539\u5bf9\u5e94css /* \u4fee\u6539\u4ee3\u7801\u5757\u5b57\u4f53\u548c\u989c\u8272 */ : root > * { --md-code-font : \"Source Code Pro,Consolas,Liberation Mono,Menlo,Courier,monospace\" ; /*--md-code-hl-string-color: #DD1144;*/ /*--md-code-fg-color : #1c7d4d*/ } /* \u4fee\u6539\u4ee3\u7801\u5757\u6837\u5f0f */ . md-typeset code { font-size : 14 px ; font-weight : 400 !important ; line-height : 30 px ; color : #dd1144 ; } /* \u6b63\u6587 */ . md-typeset { line-height : 30 px ; font-size : 15 px ; color : #222 ; letter-spacing : .034 em ; font-family : system-ui , - apple-system , BlinkMacSystemFont , Helvetica Neue , PingFang SC , Hiragino Sans GB , Microsoft YaHei UI , Microsoft YaHei , Arial , sans-serif ; } /* \u76ee\u5f55\u884c\u95f4\u8ddd */ . md-nav { line-height : 20 px ; } /* h2\u6807\u9898 */ . md-typeset h2 { font-size : 18 px ; color : rgb ( 51 , 51 , 51 ); font-weight : bold ; font-family : mp-quote , - apple-system-font , BlinkMacSystemFont , \"Helvetica Neue\" , \"PingFang SC\" , \"Hiragino Sans GB\" , \"Microsoft YaHei UI\" , \"Microsoft YaHei\" , Arial , sans-serif ; } /* h3\u6807\u9898 */ . md-typeset h3 { font-size : 16 px ; color : rgb ( 51 , 51 , 51 ); font-weight : bold ; font-family : mp-quote , - apple-system-font , BlinkMacSystemFont , \"Helvetica Neue\" , \"PingFang SC\" , \"Hiragino Sans GB\" , \"Microsoft YaHei UI\" , \"Microsoft YaHei\" , Arial , sans-serif ; } /* h1\u6807\u9898 */ . md-typeset h1 { font-size : 22 px ; line-height : 1.4 ; font-weight : 400 ; margin-bottom : 14 px ; color : #222 ; font-family : system-ui , - apple-system , BlinkMacSystemFont , Helvetica Neue , PingFang SC , Hiragino Sans GB , Microsoft YaHei UI , Microsoft YaHei , Arial , sans-serif } /* \u6297\u952f\u9f7f */ body { -webkit- font-smoothing : subpixel-antialiased ; } 5. \u6807\u6ce8 5.1 \u5f00\u542f\u914d\u7f6e markdown_extensions : - admonition - pymdownx . details - pymdownx . superfences 5.2 \u57fa\u7840\u7528\u6cd5 !!! note \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f , \u8981\u7f29\u8fdb Note \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f 5.3 \u66f4\u6539\u6807\u9898 !!! note \"\u6211\u662f\u6807\u9898\" \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f , \u8981\u7f29\u8fdb \u6211\u662f\u6807\u9898 \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f,\u8981\u7f29\u8fdb 5.4 \u65e0\u6807\u9898 !!! note \"\" \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f , \u8981\u7f29\u8fdb , \u65e0\u6807\u9898\u6a21\u5f0f\u4e0d\u53ef\u4ee5\u6298\u53e0 \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f,\u8981\u7f29\u8fdb,\u65e0\u6807\u9898\u6a21\u5f0f\u4e0d\u53ef\u4ee5\u6298\u53e0 5.5 \u6298\u53e0\u5757 ??? note \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f , \u8981\u7f29\u8fdb Note \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f,\u8981\u7f29\u8fdb 5.6 \u9ed8\u8ba4\u5c55\u5f00\u7684\u6298\u53e0\u5757 ??? + note \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f , \u8981\u7f29\u8fdb Note \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f,\u8981\u7f29\u8fdb import pandas 5.7 \u81ea\u5e26\u56fe\u6807 Note note Abstract abstract , summary , tldr Info info , todo Tip tip , hint , important Success success , check , done Question question , help , faq Warning warning , caution , attention Fail fail , failure , missing Bug bug Error error , danger Example example Cite cite , cite 6. \u6309\u94ae 6.1 \u914d\u7f6e markdown_extensions : - attr_list 6.2 \u57fa\u7840\u4f7f\u7528 [ \u6309\u94ae\u540d\u79f0 ]( \u94fe\u63a5 ){ . md - button } \u6309\u94ae 6.3 \u6309\u94ae\u586b\u5145 [ \u6309\u94ae\u540d\u79f0 ]( \u94fe\u63a5 ){ . md - button -- primary } \u6309\u94ae 7. \u5e26\u6807\u9898\u7684\u4ee3\u7801\u5757 ``` python title = \"test.py print ( 'hello world' ) ``` test.py print ( 'hello world' ) 8. \u5206\u7ec4\u5c55\u793a 8.1 \u4ee3\u7801\u5757\u5206\u7ec4 === \"test.py\" def test ( request ): pass === \"demo.py\" def demo (): pass test.py demo.py def test ( request ): pass def demo (): pass 8.2 \u5176\u4ed6\u5185\u5bb9\u5206\u7ec4 === \"Unordered list\" * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci === \"Ordered list\" 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Unordered list Ordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci 8.3 \u6298\u53e0\u5185\u5206\u7ec4 !!! example === \"Unordered List\" ``` markdown * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci ``` === \"Ordered List\" ``` markdown 1. Sed sagittis eleifend rutrums 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci ``` Example Unordered List Ordered List * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci 9. \u8fdc\u7a0b\u90e8\u7f72 9.1 \u9879\u76ee\u6253\u5305 mkdocs build \u90e8\u7f72\u65f6\u5019\u5c06 site \u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u4f20\u5230\u670d\u52a1\u5668 9.2 git Git\u5b89\u88c5\u548c\u4f7f\u7528\uff1a git\u5168\u5957\u5b66\u4e60 git \u5168\u5c40\u8bbe\u7f6e # \u8bbe\u7f6e\u7528\u6237\u540d\uff0c\u672c\u5730\u7684\uff0c\u4e0d\u9700\u8981\u548cgithub\u7b49\u4e00\u81f4 git config -- global user . name \u201c username \u201d # \u8bbe\u7f6e\u90ae\u7bb1\uff0c\u672c\u5730\u7684(\u4e0d\u9700\u8981\u5f15\u53f7) git config -- global user . email \"\u90ae\u7bb1\" git ssh key\u751f\u6210 ssh - keygen - t rsa - c \"\u90ae\u7bb1\" \u5728\u6839\u76ee\u5f55 .ssh \u4e0b\u627e\u5230 id_rsa.pub \u6587\u4ef6\uff0c\u5e76\u590d\u5236\u5168\u90e8\u5185\u5bb9 9.3 github/gitee 1.\u914d\u7f6e ssh key 2.\u521b\u5efa\u4ed3\u5e93\uff0c\u5f00\u542fpage\u670d\u52a1 3.\u514b\u9686\u4ed3\u5e93 git clone < github\u4ed3\u5e93https\u94fe\u63a5 > 4.\u5c06 site \u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u590d\u5236\u5230\u514b\u9686\u51fa\u6765\u7684\u6587\u4ef6\u5939\u5185 5.\u63a8\u9001\u5230GitHub git add . # \u6216\u8005git add -A git commit - m '\u4e0a\u4f20\u6ce8\u91ca' git push - u origin master 6.\u8bbf\u95eeGitHubpage","title":"mkdocs"},{"location":"toolbox/mkdocs/#1","text":"MkDocs \uff08 M ar k down Doc ument s \uff09\u662f\u4e00\u4e2a\u5feb\u901f\u3001\u7b80\u5355\u7684\u9759\u6001\u7f51\u7ad9\u751f\u6210\u5668\uff0c\u7528\u4e8e\u5c06 Markdown \u6587\u6863\u7ec4\u7ec7\u8d77\u6765\u6784\u5efa\u6210\u6709\u5c42\u6b21\u3001\u7f8e\u89c2\u7684\u6587\u6863\u7ad9\u70b9\u3002 MkDocs\u57fa\u4e8epython3\u7f16\u5199\uff0c\u88ab\u5f88\u591a\u77e5\u540d\u5f00\u6e90\u9879\u76ee\u9009\u4e2d\uff0c\u7528\u4e8e\u642d\u5efa\u548c\u9879\u76ee\u76f8\u5173\u7684\u6587\u6863\u7f51\u7ad9\u3002\u6bd4\u5982 Python \u91cc\u77e5\u540d\u7684 Web \u5708\u91cc\u7684 django-rest-framework \u3001 FastAPI \u4ee5\u53ca\u57fa\u4e8e Go \u7f16\u5199\u7684\u4e91\u7f51\u5173\u4ee3\u7406\u670d\u52a1\u5668 traefik \u7b49\u9879\u76ee\u7684\u5b98\u65b9\u6587\u6863\u7ad9\u70b9\uff0c\u90fd\u662f\u901a\u8fc7 MkDocs \u8fdb\u884c\u642d\u5efa\u3002","title":"1.\u7b80\u4ecb"},{"location":"toolbox/mkdocs/#1-1","text":"\u5b98\u65b9\u6587\u6863\uff1a MkDocs \u4e2d\u6587\u6587\u6863\uff1a MkDocs\u4e2d\u6587\u6587\u6863 (zimoapps.com)","title":"1. 1\u5b98\u65b9\u6587\u6863"},{"location":"toolbox/mkdocs/#2","text":"","title":"2. \u5feb\u901f\u4e0a\u624b"},{"location":"toolbox/mkdocs/#21","text":"# 1. \u521b\u5efa\u5b58\u653e\u6587\u6863\u6587\u4ef6\u7684\u76ee\u5f55\uff08\u540d\u5b57\u968f\u610f\uff09 mkdir mydocs # 2. \u5207\u6362\u5230mydocs\u76ee\u5f55 cd mydocs # 3.\u642d\u5efapython\u865a\u62df\u73af\u5883\uff08\u53ef\u9009\uff0c\u672c\u5730\u73af\u5883\u5b89\u88c5\u4e5f\u53ef\u4ee5\uff09 virtualenv venv source venv/bin/activate # \u6fc0\u6d3b\u865a\u62df\u73af\u5883 \u5b89\u88c5mkdocs\u5305 pip install mkdocs","title":"2.1 \u672c\u5730\u73af\u5883"},{"location":"toolbox/mkdocs/#22","text":"\u521b\u5efa\u9879\u76ee mkdocs new <your-site-project-name> # \u9879\u76ee\u540d\u79f0\u81ea\u5b9a\u4e49\uff0c\u6bd4\u5982\uff1a mkdocs new mydocs \u8fd0\u884c\u9879\u76ee cd mydocs mkdocs serve \u67e5\u770b\u9879\u76ee \u5728\u6d4f\u89c8\u5668\u8f93\u5165 http://127.0.0.1:8000/ \u5373\u53ef\u67e5\u770b\u521a\u624d\u521b\u5efa\u7684\u6587\u6863\u9879\u76ee","title":"2.2 \u751f\u6210\u7ad9\u70b9\u9879\u76ee"},{"location":"toolbox/mkdocs/#23","text":"docs\u76ee\u5f55 \uff1a\u5b58\u653e md \u6587\u4ef6\u7684\u76ee\u5f55\uff0c\u4ee5\u6587\u4ef6\u5939\u5c42\u53e0\u8868\u793a\u5c42\u7ea7 index.md \u4e0d\u53ef\u5220\u9664\uff0c\u9ed8\u8ba4\u662f\u9996\u9875\u5c55\u793a\u7684 md \u6587\u4ef6\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7f16\u8f91\u9996\u9875\u9700\u8981\u5c55\u793a\u7684\u5185\u5bb9 mkdocs.yml :\u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u7528\u6765\u914d\u7f6e \u7ad9\u70b9\u540d\u79f0 \u3001 \u76ee\u5f55\u5c42\u7ea7\u7ed3\u6784 \u3001 \u4e3b\u9898 \u3001 \u63d2\u4ef6 \u7b49","title":"2.3 \u9879\u76ee\u6587\u4ef6"},{"location":"toolbox/mkdocs/#3","text":"","title":"3. \u914d\u7f6e\u9879\u76ee"},{"location":"toolbox/mkdocs/#31","text":"\u7f16\u5199md\u6587\u4ef6 \u5728 mkdocs.yml \u6587\u4ef6\u6dfb\u52a0\u76ee\u5f55\u5c42\u7ea7 nav : - \u76ee\u5f551 : - \u7b2c\u4e00\u4e2a : \u76ee\u5f551 / \u7b2c\u4e00\u4e2a . md - \u5916\u90e8\u6587\u4ef6 : \u5916\u90e8\u7684 . md \u4ee5\u4e0a\u8bbe\u7f6e\u4f1a\u751f\u6210\u4e00\u4e2a\u5e26\u5c42\u7ea7\u7684\u76ee\u5f55\uff0c\u548c\u4e00\u4e2a\u5916\u90e8\u7684\u6587\u4ef6 \u6839\u636e\u77e5\u8bc6\u4f53\u7cfb\uff0c\u53ef\u4ee5\u4ee5 \u76ee\u5f55/\u6587\u6863.md \u7684\u5f62\u5f0f\uff0c\u81ea\u7531\u7f16\u5199\u6811\u72b6\u7ed3\u6784","title":"3.1 \u9875\u9762\u642d\u5efa"},{"location":"toolbox/mkdocs/#32","text":"\u7b2c\u4e09\u65b9\u4e3b\u9898\u4e0b\u8f7d\u7f51\u7ad9\uff1a MkDocs Themes \u00b7 mkdocs/mkdocs Wiki (github.com) \u4f7f\u7528 material pip install mkdocs - material \u4fee\u6539 mkdocs.yml \u4e3b\u9898\u914d\u7f6e\uff1a theme : name : material","title":"3.2 \u5916\u89c2\u8bbe\u7f6e"},{"location":"toolbox/mkdocs/#4","text":"material \u7531\u4e8e\u662f\u82f1\u6587\u6392\u7248\u6837\u5f0f\uff0c\u5728\u4e2d\u6587\u5c55\u793a\u4e0a\u4e0d\u662f\u5f88\u53cb\u597d\uff0c\u505a\u4ee5\u4e0b\u8c03\u6574\u4f18\u5316 \u53c2\u8003 material \u5b98\u65b9\u6587\u6863\u4fee\u6539\uff1a Material for MkDocs (squidfunk.github.io)","title":"4. \u81ea\u5b9a\u4e49\u6837\u5f0f"},{"location":"toolbox/mkdocs/#41","text":"\u7f51\u7ad9\u4e3a\u82f1\u6587\u60c5\u51b5\u4e0b\uff0c\u4e2d\u6587\u641c\u7d22\u4e0d\u8d77\u4f5c\u7528\uff0c\u4fee\u6539\u4e3a\u4e2d\u6587\uff0c\u53ef\u4ee5\u652f\u6301\u4e2d\u6587\u641c\u7d22\uff0c\u4f46\u4e0d\u652f\u6301\u5206\u8bcd theme: name: material # \u7f51\u7ad9\u8bed\u8a00\u8bbe\u7f6e\u4e3a\u4e2d\u6587 language: zh","title":"4.1 \u4e2d\u6587\u641c\u7d22"},{"location":"toolbox/mkdocs/#42","text":"theme : name : material features : # \u8fd4\u56de\u9876\u90e8 - navigation . top # \u951a\u70b9\u8ddf\u8e2a - navigation . tracking - header . autohide # \u6a2a\u5411\u5bfc\u822a - navigation . tabs - navigation . expand # - toc.integrate - content . tabs . link","title":"4.2 \u5bfc\u822a\u8bbe\u7f6e"},{"location":"toolbox/mkdocs/#43","text":"# \u81ea\u52a8\u591c\u95f4\u6a21\u5f0f\u5e76\u4fee\u6539\u4e3b\u9898\u8272\u4e3a\u7eff\u8272 palette : # \u767d\u5929\u6a21\u5f0f - scheme : default primary : teal accent : teal toggle : icon : material / lightbulb name : \u5207\u6362\u591c\u665a\u6a21\u5f0f # \u9ed1\u591c\u6a21\u5f0f - scheme : slate primary : black toggle : icon : material / lightbulb - outline name : \u5207\u6362\u767d\u5929\u6a21\u5f0f","title":"4.3 \u81ea\u52a8\u591c\u95f4\u6a21\u5f0f"},{"location":"toolbox/mkdocs/#44-md","text":"# markdown\u6e32\u67d3\u6837\u5f0f markdown_extensions : - pymdownx . highlight : anchor_linenums : true linenums_style : pymdownx - inline - pymdownx . inlinehilite - pymdownx . snippets - pymdownx . superfences - pymdownx . keys - tables - def_list - pymdownx . tasklist : custom_checkbox : true","title":"4.4 md\u6e32\u67d3\u6837\u5f0f"},{"location":"toolbox/mkdocs/#45-css","text":"\u5728doc\u76ee\u5f55\u4e0b\u65b0\u589e stylesheets/extra.css \u770b\u54ea\u4e0d\u723d\uff0c\u5728\u7f51\u9875\u5ba1\u67e5css\uff0c\u4fee\u6539\u5bf9\u5e94css /* \u4fee\u6539\u4ee3\u7801\u5757\u5b57\u4f53\u548c\u989c\u8272 */ : root > * { --md-code-font : \"Source Code Pro,Consolas,Liberation Mono,Menlo,Courier,monospace\" ; /*--md-code-hl-string-color: #DD1144;*/ /*--md-code-fg-color : #1c7d4d*/ } /* \u4fee\u6539\u4ee3\u7801\u5757\u6837\u5f0f */ . md-typeset code { font-size : 14 px ; font-weight : 400 !important ; line-height : 30 px ; color : #dd1144 ; } /* \u6b63\u6587 */ . md-typeset { line-height : 30 px ; font-size : 15 px ; color : #222 ; letter-spacing : .034 em ; font-family : system-ui , - apple-system , BlinkMacSystemFont , Helvetica Neue , PingFang SC , Hiragino Sans GB , Microsoft YaHei UI , Microsoft YaHei , Arial , sans-serif ; } /* \u76ee\u5f55\u884c\u95f4\u8ddd */ . md-nav { line-height : 20 px ; } /* h2\u6807\u9898 */ . md-typeset h2 { font-size : 18 px ; color : rgb ( 51 , 51 , 51 ); font-weight : bold ; font-family : mp-quote , - apple-system-font , BlinkMacSystemFont , \"Helvetica Neue\" , \"PingFang SC\" , \"Hiragino Sans GB\" , \"Microsoft YaHei UI\" , \"Microsoft YaHei\" , Arial , sans-serif ; } /* h3\u6807\u9898 */ . md-typeset h3 { font-size : 16 px ; color : rgb ( 51 , 51 , 51 ); font-weight : bold ; font-family : mp-quote , - apple-system-font , BlinkMacSystemFont , \"Helvetica Neue\" , \"PingFang SC\" , \"Hiragino Sans GB\" , \"Microsoft YaHei UI\" , \"Microsoft YaHei\" , Arial , sans-serif ; } /* h1\u6807\u9898 */ . md-typeset h1 { font-size : 22 px ; line-height : 1.4 ; font-weight : 400 ; margin-bottom : 14 px ; color : #222 ; font-family : system-ui , - apple-system , BlinkMacSystemFont , Helvetica Neue , PingFang SC , Hiragino Sans GB , Microsoft YaHei UI , Microsoft YaHei , Arial , sans-serif } /* \u6297\u952f\u9f7f */ body { -webkit- font-smoothing : subpixel-antialiased ; }","title":"4.5 \u81ea\u5b9a\u4e49css"},{"location":"toolbox/mkdocs/#5","text":"","title":"5. \u6807\u6ce8"},{"location":"toolbox/mkdocs/#51","text":"markdown_extensions : - admonition - pymdownx . details - pymdownx . superfences","title":"5.1 \u5f00\u542f\u914d\u7f6e"},{"location":"toolbox/mkdocs/#52","text":"!!! note \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f , \u8981\u7f29\u8fdb Note \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f","title":"5.2 \u57fa\u7840\u7528\u6cd5"},{"location":"toolbox/mkdocs/#53","text":"!!! note \"\u6211\u662f\u6807\u9898\" \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f , \u8981\u7f29\u8fdb \u6211\u662f\u6807\u9898 \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f,\u8981\u7f29\u8fdb","title":"5.3 \u66f4\u6539\u6807\u9898"},{"location":"toolbox/mkdocs/#54","text":"!!! note \"\" \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f , \u8981\u7f29\u8fdb , \u65e0\u6807\u9898\u6a21\u5f0f\u4e0d\u53ef\u4ee5\u6298\u53e0 \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f,\u8981\u7f29\u8fdb,\u65e0\u6807\u9898\u6a21\u5f0f\u4e0d\u53ef\u4ee5\u6298\u53e0","title":"5.4 \u65e0\u6807\u9898"},{"location":"toolbox/mkdocs/#55","text":"??? note \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f , \u8981\u7f29\u8fdb Note \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f,\u8981\u7f29\u8fdb","title":"5.5 \u6298\u53e0\u5757"},{"location":"toolbox/mkdocs/#56","text":"??? + note \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f , \u8981\u7f29\u8fdb Note \u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u6216\u8005\u4efb\u4f55markdown\u6837\u5f0f,\u8981\u7f29\u8fdb import pandas","title":"5.6 \u9ed8\u8ba4\u5c55\u5f00\u7684\u6298\u53e0\u5757"},{"location":"toolbox/mkdocs/#57","text":"Note note Abstract abstract , summary , tldr Info info , todo Tip tip , hint , important Success success , check , done Question question , help , faq Warning warning , caution , attention Fail fail , failure , missing Bug bug Error error , danger Example example Cite cite , cite","title":"5.7 \u81ea\u5e26\u56fe\u6807"},{"location":"toolbox/mkdocs/#6","text":"","title":"6. \u6309\u94ae"},{"location":"toolbox/mkdocs/#61","text":"markdown_extensions : - attr_list","title":"6.1 \u914d\u7f6e"},{"location":"toolbox/mkdocs/#62","text":"[ \u6309\u94ae\u540d\u79f0 ]( \u94fe\u63a5 ){ . md - button } \u6309\u94ae","title":"6.2 \u57fa\u7840\u4f7f\u7528"},{"location":"toolbox/mkdocs/#63","text":"[ \u6309\u94ae\u540d\u79f0 ]( \u94fe\u63a5 ){ . md - button -- primary } \u6309\u94ae","title":"6.3 \u6309\u94ae\u586b\u5145"},{"location":"toolbox/mkdocs/#7","text":"``` python title = \"test.py print ( 'hello world' ) ``` test.py print ( 'hello world' )","title":"7. \u5e26\u6807\u9898\u7684\u4ee3\u7801\u5757"},{"location":"toolbox/mkdocs/#8","text":"","title":"8. \u5206\u7ec4\u5c55\u793a"},{"location":"toolbox/mkdocs/#81","text":"=== \"test.py\" def test ( request ): pass === \"demo.py\" def demo (): pass test.py demo.py def test ( request ): pass def demo (): pass","title":"8.1 \u4ee3\u7801\u5757\u5206\u7ec4"},{"location":"toolbox/mkdocs/#82","text":"=== \"Unordered list\" * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci === \"Ordered list\" 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Unordered list Ordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci","title":"8.2 \u5176\u4ed6\u5185\u5bb9\u5206\u7ec4"},{"location":"toolbox/mkdocs/#83","text":"!!! example === \"Unordered List\" ``` markdown * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci ``` === \"Ordered List\" ``` markdown 1. Sed sagittis eleifend rutrums 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci ``` Example Unordered List Ordered List * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci","title":"8.3 \u6298\u53e0\u5185\u5206\u7ec4"},{"location":"toolbox/mkdocs/#9","text":"","title":"9. \u8fdc\u7a0b\u90e8\u7f72"},{"location":"toolbox/mkdocs/#91","text":"mkdocs build \u90e8\u7f72\u65f6\u5019\u5c06 site \u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u4f20\u5230\u670d\u52a1\u5668","title":"9.1 \u9879\u76ee\u6253\u5305"},{"location":"toolbox/mkdocs/#92-git","text":"Git\u5b89\u88c5\u548c\u4f7f\u7528\uff1a git\u5168\u5957\u5b66\u4e60 git \u5168\u5c40\u8bbe\u7f6e # \u8bbe\u7f6e\u7528\u6237\u540d\uff0c\u672c\u5730\u7684\uff0c\u4e0d\u9700\u8981\u548cgithub\u7b49\u4e00\u81f4 git config -- global user . name \u201c username \u201d # \u8bbe\u7f6e\u90ae\u7bb1\uff0c\u672c\u5730\u7684(\u4e0d\u9700\u8981\u5f15\u53f7) git config -- global user . email \"\u90ae\u7bb1\" git ssh key\u751f\u6210 ssh - keygen - t rsa - c \"\u90ae\u7bb1\" \u5728\u6839\u76ee\u5f55 .ssh \u4e0b\u627e\u5230 id_rsa.pub \u6587\u4ef6\uff0c\u5e76\u590d\u5236\u5168\u90e8\u5185\u5bb9","title":"9.2 git"},{"location":"toolbox/mkdocs/#93-githubgitee","text":"1.\u914d\u7f6e ssh key 2.\u521b\u5efa\u4ed3\u5e93\uff0c\u5f00\u542fpage\u670d\u52a1 3.\u514b\u9686\u4ed3\u5e93 git clone < github\u4ed3\u5e93https\u94fe\u63a5 > 4.\u5c06 site \u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u590d\u5236\u5230\u514b\u9686\u51fa\u6765\u7684\u6587\u4ef6\u5939\u5185 5.\u63a8\u9001\u5230GitHub git add . # \u6216\u8005git add -A git commit - m '\u4e0a\u4f20\u6ce8\u91ca' git push - u origin master 6.\u8bbf\u95eeGitHubpage","title":"9.3 github/gitee"},{"location":"toolbox/venv/","text":"1. virtualenv \u5de5\u5177 1.1 \u5b89\u88c5virtualenv pip install virtualenv 1.2 \u521b\u5efa\u865a\u62df\u73af\u5883 # 1. cd\u5230\u9879\u76ee\u6839\u76ee\u5f55 cd ~ # 2. \u521b\u5efa\u865a\u62df\u73af\u5883 virtualenv venv # \u5982\u679c\u4e0d\u60f3\u4f7f\u7528\u7cfb\u7edf\u7684\u5305,\u52a0\u4e0a\u2013no-site-packeages\u53c2\u6570 virtualenv -- no - site - packages venv 1.3 \u6fc0\u6d3b\u73af\u5883 # mac source venv / bin / activate # win venv \\ Scripts \\ activate 1.4 \u9000\u51fa deactivate 2. pip\u6e90 \u4f7f\u7528pip\u6e90\u9700\u8981\u52a0\u53c2\u6570 -i pip install xxx - i [ pip\u6e90 ] \u56fd\u5185\u4e3b\u6d41pip\u6e90\u5982\u4e0b\uff1a # \u6e05\u534e\u5927\u5b66 https : // pypi . tuna . tsinghua . edu . cn / simple / # \u963f\u91cc\u4e91 http : // mirrors . aliyun . com / pypi / simple / # \u8c46\u74e3 http : // pypi . douban . com / simple / # \u817e\u8baf\u6e90 http : // mirrors . cloud . tencent . com / pypi / simple # \u534e\u4e3a\u955c\u50cf\u6e90 https : // repo . huaweicloud . com / repository / pypi / simple / # \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66 http : // pypi . mirrors . ustc . edu . cn / simple / # \u534e\u4e2d\u79d1\u6280\u5927\u5b66 http : // pypi . hustunique . com / 3. \u6279\u91cf\u5bfc\u51fa\u548c\u5b89\u88c5\u9879\u76ee\u4f9d\u8d56 3.1 \u6279\u91cf\u5bfc\u51fa # \u67e5\u770bpip\u5b89\u88c5\u7684\u5305 pip list # \u67e5\u770bpip\u5b89\u88c5\u5305\u7684\u7248\u672c pip freeze # \u5bfc\u51fa\u9879\u76ee\u6240\u6709\u7684\u5305\uff0c\u5bfc\u51fa\u7684\u6587\u4ef6\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\uff0cpwd\u67e5\u770b\u5f53\u524d\u76ee\u5f55 pip freeze > requirement . txt # \u6587\u4ef6\u540d\u53ef\u4ee5\u81ea\u5b9a\u4e49 3.2 \u6279\u91cf\u5b89\u88c5 pip install - r requirement . txt - i [ pip\u6e90 ] 4. \u79bb\u7ebf\u4e0b\u8f7d\u548c\u5b89\u88c5\u7b2c\u4e09\u65b9\u5305 # pip\u4e0b\u8f7d\u7b2c\u4e09\u65b9\u5305 pip download < \u5305\u540d > - d \"\u4e0b\u8f7d\u8def\u5f84\" pip download pymysql - d \"D:\\python\\packages\" # pip\u79bb\u7ebf\u5b89\u88c5 pip install < \u5305\u540d > pip install PyMySQL - 0.9.3 - py2 . py3 - none - any . whl","title":"python\u865a\u62df\u73af\u5883"},{"location":"toolbox/venv/#1-virtualenv","text":"","title":"1. virtualenv \u5de5\u5177"},{"location":"toolbox/venv/#11-virtualenv","text":"pip install virtualenv","title":"1.1 \u5b89\u88c5virtualenv"},{"location":"toolbox/venv/#12","text":"# 1. cd\u5230\u9879\u76ee\u6839\u76ee\u5f55 cd ~ # 2. \u521b\u5efa\u865a\u62df\u73af\u5883 virtualenv venv # \u5982\u679c\u4e0d\u60f3\u4f7f\u7528\u7cfb\u7edf\u7684\u5305,\u52a0\u4e0a\u2013no-site-packeages\u53c2\u6570 virtualenv -- no - site - packages venv","title":"1.2 \u521b\u5efa\u865a\u62df\u73af\u5883"},{"location":"toolbox/venv/#13","text":"# mac source venv / bin / activate # win venv \\ Scripts \\ activate","title":"1.3 \u6fc0\u6d3b\u73af\u5883"},{"location":"toolbox/venv/#14","text":"deactivate","title":"1.4 \u9000\u51fa"},{"location":"toolbox/venv/#2-pip","text":"\u4f7f\u7528pip\u6e90\u9700\u8981\u52a0\u53c2\u6570 -i pip install xxx - i [ pip\u6e90 ] \u56fd\u5185\u4e3b\u6d41pip\u6e90\u5982\u4e0b\uff1a # \u6e05\u534e\u5927\u5b66 https : // pypi . tuna . tsinghua . edu . cn / simple / # \u963f\u91cc\u4e91 http : // mirrors . aliyun . com / pypi / simple / # \u8c46\u74e3 http : // pypi . douban . com / simple / # \u817e\u8baf\u6e90 http : // mirrors . cloud . tencent . com / pypi / simple # \u534e\u4e3a\u955c\u50cf\u6e90 https : // repo . huaweicloud . com / repository / pypi / simple / # \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66 http : // pypi . mirrors . ustc . edu . cn / simple / # \u534e\u4e2d\u79d1\u6280\u5927\u5b66 http : // pypi . hustunique . com /","title":"2. pip\u6e90"},{"location":"toolbox/venv/#3","text":"","title":"3. \u6279\u91cf\u5bfc\u51fa\u548c\u5b89\u88c5\u9879\u76ee\u4f9d\u8d56"},{"location":"toolbox/venv/#31","text":"# \u67e5\u770bpip\u5b89\u88c5\u7684\u5305 pip list # \u67e5\u770bpip\u5b89\u88c5\u5305\u7684\u7248\u672c pip freeze # \u5bfc\u51fa\u9879\u76ee\u6240\u6709\u7684\u5305\uff0c\u5bfc\u51fa\u7684\u6587\u4ef6\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\uff0cpwd\u67e5\u770b\u5f53\u524d\u76ee\u5f55 pip freeze > requirement . txt # \u6587\u4ef6\u540d\u53ef\u4ee5\u81ea\u5b9a\u4e49","title":"3.1 \u6279\u91cf\u5bfc\u51fa"},{"location":"toolbox/venv/#32","text":"pip install - r requirement . txt - i [ pip\u6e90 ]","title":"3.2 \u6279\u91cf\u5b89\u88c5"},{"location":"toolbox/venv/#4","text":"# pip\u4e0b\u8f7d\u7b2c\u4e09\u65b9\u5305 pip download < \u5305\u540d > - d \"\u4e0b\u8f7d\u8def\u5f84\" pip download pymysql - d \"D:\\python\\packages\" # pip\u79bb\u7ebf\u5b89\u88c5 pip install < \u5305\u540d > pip install PyMySQL - 0.9.3 - py2 . py3 - none - any . whl","title":"4. \u79bb\u7ebf\u4e0b\u8f7d\u548c\u5b89\u88c5\u7b2c\u4e09\u65b9\u5305"}]}