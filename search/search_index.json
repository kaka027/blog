{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"%E6%88%BF%E8%B4%B7%E8%AE%A1%E7%AE%97/","text":"\u9996\u4ed8 import pandas as pd price = int ( input ( '\u603b\u4ef7/\u4e07\uff1a' )) mianji = int ( input ( '\u9762\u79ef 1\uff1a\u5c0f\u4e8e90\u5e73 2\uff1a\u5927\u4e8e90\u5e73\uff1a' )) qishui = ( price * 0.01 if mianji == 1 else price * 0.015 ) weiyi = int ( input ( '\u662f\u5426\u6ee1\u4e94\u552f\u4e00\uff1b1\uff1a\u662f\uff1b2:\u4e0d\u662f\uff1a ' )) geshui = ( 0 if weiyi == 1 else price * 0.01 ) zzs = int ( input ( r '1:\u65e0\u589e\u503c\u7a0e\uff1b2\uff1a\u4e0d\u6ee12\u5e74/\u6ee1\u4e8c\u4e0d\u552f\u4e00' )) zengzhishui = ( 0 if zzs == 1 else price * 0.05 ) zhongjie = price * 0.015 shoufu = price * 0.3 sum_shoufu = shoufu + qishui + geshui + zengzhishui + zhongjie df = pd . DataFrame ({ '\u603b\u4ef7' : price , '\u5951\u7a0e' : qishui , '\u4e2a\u7a0e' : geshui , '\u4e2d\u4ecb\u8d39' : zhongjie , '\u589e\u503c\u7a0e' : zengzhishui , '\u9996\u4ed8' : shoufu , '\u9996\u4ed8\u603b\u989d' : sum_shoufu }, index = [ 1 , ]) df \u603b\u4ef7/\u4e07\uff1a240 \u9762\u79ef 1\uff1a\u5c0f\u4e8e90\u5e73 2\uff1a\u5927\u4e8e90\u5e73\uff1a1 \u662f\u5426\u6ee1\u4e94\u552f\u4e00\uff1b1\uff1a\u662f\uff1b2:\u4e0d\u662f\uff1a 1 1:\u65e0\u589e\u503c\u7a0e\uff1b2\uff1a\u4e0d\u6ee12\u5e74/\u6ee1\u4e8c\u4e0d\u552f\u4e001 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } \u603b\u4ef7 \u5951\u7a0e \u4e2a\u7a0e \u4e2d\u4ecb\u8d39 \u589e\u503c\u7a0e \u9996\u4ed8 \u9996\u4ed8\u603b\u989d 1 240 2.4 0 3.6 0 72.0 78.0 \u7b49\u989d\u672c\u606f daikuan = price * 0.7 * 10000 ; yueli = float ( input ( '\u5546\u4e1a\u8d37\u6b3e\u5e74\u5229\u7387\uff1a ' )) / 100 / 12 ; month = 360 meiyue = round ((( daikuan * yueli * ( 1 + yueli ) ** month ) / (( 1 + yueli ) ** month - 1 )), 2 ) lixi = round (( meiyue * month - daikuan ), 2 ) sum_daikuan = round (( daikuan + lixi ), 0 ) daikuan1 = str ( round (( daikuan / 10000 ), 2 )) + '\u4e07' bx = pd . DataFrame ({ '\u8d37\u6b3e\u603b\u989d' : daikuan1 , '\u6bcf\u6708\u5e94\u8fd8' : meiyue , '\u5229\u606f\u603b\u989d' : lixi , '\u8fd8\u6b3e\u603b\u989d' : sum_daikuan }, index = [ 0 ,]) bx \u5546\u4e1a\u8d37\u6b3e\u5e74\u5229\u7387\uff1a 5 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } \u8d37\u6b3e\u603b\u989d \u6bcf\u6708\u5e94\u8fd8 \u5229\u606f\u603b\u989d \u8fd8\u6b3e\u603b\u989d 0 168.0\u4e07 9018.6 1566696.0 3246696.0 \u7b49\u989d\u672c\u91d1 bj_m_price = round ((( daikuan / month ) + ( daikuan - 0 ) * yueli ), 2 ); sum_lixi = month * ( daikuan * yueli - yueli * ( daikuan / month ) * ( month - 1 ) / 2 + daikuan / month ); bj_lixi = sum_lixi - daikuan ; m_jian = round (( bj_m_price * yueli ), 2 ); bj = pd . DataFrame ({ '\u8d37\u6b3e\u603b\u989d' : daikuan1 , '\u9996\u6708\u5e94\u8fd8' : bj_m_price , '\u603b\u5229\u606f' : bj_lixi , '\u6bcf\u6708\u8fd8\u6b3e\u9012\u51cf' : m_jian , '\u8fd8\u6b3e\u603b\u989d' : sum_lixi }, index = [ 0 ,]); bj .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } \u8d37\u6b3e\u603b\u989d \u9996\u6708\u5e94\u8fd8 \u603b\u5229\u606f \u6bcf\u6708\u8fd8\u6b3e\u9012\u51cf \u8fd8\u6b3e\u603b\u989d 0 168.0\u4e07 11666.67 1263500.0 48.61 2943500.0","title":"\u623f\u8d37\u8ba1\u7b972"},{"location":"%E6%88%BF%E8%B4%B7%E8%AE%A1%E7%AE%97/#_1","text":"import pandas as pd price = int ( input ( '\u603b\u4ef7/\u4e07\uff1a' )) mianji = int ( input ( '\u9762\u79ef 1\uff1a\u5c0f\u4e8e90\u5e73 2\uff1a\u5927\u4e8e90\u5e73\uff1a' )) qishui = ( price * 0.01 if mianji == 1 else price * 0.015 ) weiyi = int ( input ( '\u662f\u5426\u6ee1\u4e94\u552f\u4e00\uff1b1\uff1a\u662f\uff1b2:\u4e0d\u662f\uff1a ' )) geshui = ( 0 if weiyi == 1 else price * 0.01 ) zzs = int ( input ( r '1:\u65e0\u589e\u503c\u7a0e\uff1b2\uff1a\u4e0d\u6ee12\u5e74/\u6ee1\u4e8c\u4e0d\u552f\u4e00' )) zengzhishui = ( 0 if zzs == 1 else price * 0.05 ) zhongjie = price * 0.015 shoufu = price * 0.3 sum_shoufu = shoufu + qishui + geshui + zengzhishui + zhongjie df = pd . DataFrame ({ '\u603b\u4ef7' : price , '\u5951\u7a0e' : qishui , '\u4e2a\u7a0e' : geshui , '\u4e2d\u4ecb\u8d39' : zhongjie , '\u589e\u503c\u7a0e' : zengzhishui , '\u9996\u4ed8' : shoufu , '\u9996\u4ed8\u603b\u989d' : sum_shoufu }, index = [ 1 , ]) df \u603b\u4ef7/\u4e07\uff1a240 \u9762\u79ef 1\uff1a\u5c0f\u4e8e90\u5e73 2\uff1a\u5927\u4e8e90\u5e73\uff1a1 \u662f\u5426\u6ee1\u4e94\u552f\u4e00\uff1b1\uff1a\u662f\uff1b2:\u4e0d\u662f\uff1a 1 1:\u65e0\u589e\u503c\u7a0e\uff1b2\uff1a\u4e0d\u6ee12\u5e74/\u6ee1\u4e8c\u4e0d\u552f\u4e001 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } \u603b\u4ef7 \u5951\u7a0e \u4e2a\u7a0e \u4e2d\u4ecb\u8d39 \u589e\u503c\u7a0e \u9996\u4ed8 \u9996\u4ed8\u603b\u989d 1 240 2.4 0 3.6 0 72.0 78.0","title":"\u9996\u4ed8"},{"location":"%E6%88%BF%E8%B4%B7%E8%AE%A1%E7%AE%97/#_2","text":"daikuan = price * 0.7 * 10000 ; yueli = float ( input ( '\u5546\u4e1a\u8d37\u6b3e\u5e74\u5229\u7387\uff1a ' )) / 100 / 12 ; month = 360 meiyue = round ((( daikuan * yueli * ( 1 + yueli ) ** month ) / (( 1 + yueli ) ** month - 1 )), 2 ) lixi = round (( meiyue * month - daikuan ), 2 ) sum_daikuan = round (( daikuan + lixi ), 0 ) daikuan1 = str ( round (( daikuan / 10000 ), 2 )) + '\u4e07' bx = pd . DataFrame ({ '\u8d37\u6b3e\u603b\u989d' : daikuan1 , '\u6bcf\u6708\u5e94\u8fd8' : meiyue , '\u5229\u606f\u603b\u989d' : lixi , '\u8fd8\u6b3e\u603b\u989d' : sum_daikuan }, index = [ 0 ,]) bx \u5546\u4e1a\u8d37\u6b3e\u5e74\u5229\u7387\uff1a 5 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } \u8d37\u6b3e\u603b\u989d \u6bcf\u6708\u5e94\u8fd8 \u5229\u606f\u603b\u989d \u8fd8\u6b3e\u603b\u989d 0 168.0\u4e07 9018.6 1566696.0 3246696.0","title":"\u7b49\u989d\u672c\u606f"},{"location":"%E6%88%BF%E8%B4%B7%E8%AE%A1%E7%AE%97/#_3","text":"bj_m_price = round ((( daikuan / month ) + ( daikuan - 0 ) * yueli ), 2 ); sum_lixi = month * ( daikuan * yueli - yueli * ( daikuan / month ) * ( month - 1 ) / 2 + daikuan / month ); bj_lixi = sum_lixi - daikuan ; m_jian = round (( bj_m_price * yueli ), 2 ); bj = pd . DataFrame ({ '\u8d37\u6b3e\u603b\u989d' : daikuan1 , '\u9996\u6708\u5e94\u8fd8' : bj_m_price , '\u603b\u5229\u606f' : bj_lixi , '\u6bcf\u6708\u8fd8\u6b3e\u9012\u51cf' : m_jian , '\u8fd8\u6b3e\u603b\u989d' : sum_lixi }, index = [ 0 ,]); bj .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } \u8d37\u6b3e\u603b\u989d \u9996\u6708\u5e94\u8fd8 \u603b\u5229\u606f \u6bcf\u6708\u8fd8\u6b3e\u9012\u51cf \u8fd8\u6b3e\u603b\u989d 0 168.0\u4e07 11666.67 1263500.0 48.61 2943500.0","title":"\u7b49\u989d\u672c\u91d1"},{"location":"pandas/pandasdata/","text":"DataFrame\u6570\u636e\u9009\u53d6\u5305\u62ec\u4e09\u79cd\u60c5\u51b5\uff1a - \u5355\u7ef4\u9009\u53d6\uff0c\u4ec5\u9009\u53d6\u884c\u6216\u5217,\u53ea\u80fd\u4e3a\u4e00\u4e2a\u7ef4\u5ea6\u8bbe\u7f6e\u7b5b\u9009\u6761\u4ef6\uff1b df[] - \u591a\u7ef4\u9009\u53d6\uff08\u533a\u57df\u9009\u53d6\uff09\uff0c .loc[] .iloc[] df.ix[] - \u5355\u5143\u683c\u9009\u53d6\uff0c\u51c6\u786e\u5b9a\u4f4d\u4e00\u4e2a\u5355\u5143\u683c\uff1a df.at[] df.iat[] import pandas as pd import numpy as np data = { 'name' : [ 'Joe' , 'Mike' , 'Jack' , 'Rose' , 'David' , 'Marry' , 'Wansi' , 'Sidy' , 'Jason' , 'Even' ], 'age' : [ 25 , 32 , 18 , np . nan , 15 , 20 , 41 , np . nan , 37 , 32 ], 'gender' : [ 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 ], 'isMarried' : [ 'yes' , 'yes' , 'no' , 'yes' , 'no' , 'no' , 'no' , 'yes' , 'no' , 'no' ]} labels = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' ] df = pd . DataFrame ( data , index = labels ) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no d Rose NaN 1 yes e David 15.0 0 no f Marry 20.0 1 no g Wansi 41.0 0 no h Sidy NaN 0 yes i Jason 37.0 1 no j Even 32.0 0 no 1. \u884c\u5217\u9009\u53d6 1. \u9009\u53d6\u884c \u6574\u6570\u7d22\u5f15\u5207\u7247 \u6807\u7b7e\u7d22\u5f15\u5207\u7247 \u5e03\u5c14\u6570\u7ec4 a) \u6574\u6570\u7d22\u5f15\u5207\u7247\uff08\u5de6\u95ed\u53f3\u5f00\uff09 # \u9009\u53d6\u524d\u4e24\u884c df [: 2 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes # \u9009\u53d6\u7b2c\u4e8c\u884c\u5230\u7b2c\u56db\u884c df [ 2 : 4 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried c Jack 18.0 1 no d Rose NaN 1 yes # \u6700\u540e3\u884c df [ - 3 :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried h Sidy NaN 0 yes i Jason 37.0 1 no j Even 32.0 0 no b) \u6807\u7b7e\u7d22\u5f15\u5207\u7247\uff08\u524d\u95ed\u540e\u95ed\uff09 # \u7b2c\u4e00\u884c df [: 'a' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes # a-d df [ 'a' : 'd' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no d Rose NaN 1 yes # g-\u672b\u5c3e df [ 'g' :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried g Wansi 41.0 0 no h Sidy NaN 0 yes i Jason 37.0 1 no j Even 32.0 0 no c\uff09\u5e03\u5c14\u5224\u65ad # \u524d\u4e09\u884c df [[ True , True , True , False , False , False , False , False , False , False ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no # age>30\u7684\u884c # df[[each>30 for each in df['age']]] df [ df [ 'age' ] > 30 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried b Mike 32.0 0 yes g Wansi 41.0 0 no i Jason 37.0 1 no j Even 32.0 0 no # age>30\u548cisMarried=no # \u591a\u6761\u4ef6\u9700\u8981\u5728\u62ec\u53f7\u5185\u586b\u6761\u4ef6 df [( df [ 'age' ] > 30 ) & ( df [ 'isMarried' ] == 'no' )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried g Wansi 41.0 0 no i Jason 37.0 1 no j Even 32.0 0 no # \u591a\u6761\u4ef6 df [( df [ 'age' ] == 20 ) | ( df [ 'age' ] == 32 ) & ( df [ 'isMarried' ] == 'no' )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried f Marry 20.0 1 no j Even 32.0 0 no 1.2 \u9009\u53d6\u884c \u6807\u7b7e\u7d22\u5f15 \u6807\u7b7e\u5217\u8868 Callable\u5bf9\u8c61 a) \u6807\u7b7e\u7d22\u5f15\uff08\u5355\u5217\uff09 # Series df [ 'name' ] # DataFrame df [[ 'name' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name a Joe b Mike c Jack d Rose e David f Marry g Wansi h Sidy i Jason j Even b) \u6807\u7b7e\u5217\u8868\uff08\u591a\u5217\uff09 df [[ 'name' , 'gender' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name gender a Joe 1 b Mike 0 c Jack 1 d Rose 1 e David 0 f Marry 1 g Wansi 0 h Sidy 0 i Jason 1 j Even 0 c) callable\u5bf9\u8c61 df [ lambda df : df . columns [: 3 ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0 2.\u533a\u57df\u9009\u53d6 2.1 df.loc[ ] \uff08\u6807\u7b7e\uff09 a) loc\u9009\u62e9\u884c # index='a'\u7684\u884c df . loc [ 'a' , :] name Joe age 25 gender 1 isMarried yes Name: a, dtype: object # index\u4e3aa\u6216c\u6216d\u7684\u884c df . loc [[ 'a' , 'c' , 'd' ], :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes c Jack 18.0 1 no d Rose NaN 1 yes # inde a-d df . loc [ 'a' : 'd' , :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no d Rose NaN 1 yes # \u524d\u4e09\u884c df . loc [[ True , True , True , False , False , False , False , False , False , False ], :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no # age>30\u884c df . loc [ df [ 'age' ] > 30 ,:] # df.loc[df.loc[:,'age']>30,:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried b Mike 32.0 0 yes g Wansi 41.0 0 no i Jason 37.0 1 no j Even 32.0 0 no b) loc\u9009\u62e9\u5217 df . loc [:, 'name' ] a Joe b Mike c Jack d Rose e David f Marry g Wansi h Sidy i Jason j Even Name: name, dtype: object # name\u81f3gender df . loc [:, 'name' : 'gender' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0 # \u6307\u5b9a\u5217 df . loc [:, [ 'name' , 'gender' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name gender a Joe 1 b Mike 0 c Jack 1 d Rose 1 e David 0 f Marry 1 g Wansi 0 h Sidy 0 i Jason 1 j Even 0 # \u5e03\u5c14\u6570\u7ec4\u524d\u4e09\u5217 df . loc [:, [ True , True , True , False ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0 c) \u884c\u5217\u540c\u65f6\u7b5b\u9009 # \u8f93\u51fa\u5e74\u9f84\u5927\u4e8e30\u7684\u4eba\u7684\u59d3\u540d\u548c\u5e74\u9f84 df . loc [ df [ 'age' ] > 30 , 'name' : 'age' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age b Mike 32.0 g Wansi 41.0 i Jason 37.0 j Even 32.0 2.2 df.iloc[ ] \uff08\u7d22\u5f15\uff09 a) \u9009\u53d6\u884c # \u7b2c2\u884c df . iloc [ 1 ,] name Mike age 32 gender 0 isMarried yes Name: b, dtype: object df . iloc [: 3 ,:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no # \u7b2c2\uff0c4,6\u884c df . iloc [[ 1 , 3 , 5 ],:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried b Mike 32.0 0 yes d Rose NaN 1 yes f Marry 20.0 1 no # \u5e03\u5c14\u9009\u53d6 df . iloc [[ True , True , True , False , False , False , False , False , False , False ], :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no b) \u9009\u53d6\u5217 # \u7b2c2\u5217 df . iloc [:, 1 ] a 25.0 b 32.0 c 18.0 d NaN e 15.0 f 20.0 g 41.0 h NaN i 37.0 j 32.0 Name: age, dtype: float64 # \u524d\u4e09\u5217 df . iloc [:, : 3 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0 # 1\u30013\u30014\u5217 df . iloc [:, [ 0 , 2 , 3 ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name gender isMarried a Joe 1 yes b Mike 0 yes c Jack 1 no d Rose 1 yes e David 0 no f Marry 1 no g Wansi 0 no h Sidy 0 yes i Jason 1 no j Even 0 no # \u5e03\u5c14\u9009\u62e9\u524d\u4e09\u5217 df . iloc [:, [ True , True , True , False ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0 c) \u884c\u5217\u540c\u65f6\u7b5b\u9009 # \u7b2c2\u884c\uff0c1\u30013\u30014\u5217 df . iloc [ 1 , [ 0 , 2 , 3 ]] name Mike gender 0 isMarried yes Name: b, dtype: object # \u524d3\u884c\u7684\u524d3\u5217 df . iloc [: 3 , : 3 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 3. \u5355\u5143\u683c\u9009\u53d6 3.1 df.at[ ] # b\u884cname\u5217 df . at [ 'b' , 'name' ] 'Mike' 3.2 df.iat[ ] df . iat [ 1 , 0 ] 'Mike'","title":"\u9009\u53d6\u6570\u636e"},{"location":"pandas/pandasdata/#1","text":"","title":"1. \u884c\u5217\u9009\u53d6"},{"location":"pandas/pandasdata/#1_1","text":"\u6574\u6570\u7d22\u5f15\u5207\u7247 \u6807\u7b7e\u7d22\u5f15\u5207\u7247 \u5e03\u5c14\u6570\u7ec4","title":"1. \u9009\u53d6\u884c"},{"location":"pandas/pandasdata/#a","text":"# \u9009\u53d6\u524d\u4e24\u884c df [: 2 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes # \u9009\u53d6\u7b2c\u4e8c\u884c\u5230\u7b2c\u56db\u884c df [ 2 : 4 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried c Jack 18.0 1 no d Rose NaN 1 yes # \u6700\u540e3\u884c df [ - 3 :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried h Sidy NaN 0 yes i Jason 37.0 1 no j Even 32.0 0 no","title":"a) \u6574\u6570\u7d22\u5f15\u5207\u7247\uff08\u5de6\u95ed\u53f3\u5f00\uff09"},{"location":"pandas/pandasdata/#b","text":"# \u7b2c\u4e00\u884c df [: 'a' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes # a-d df [ 'a' : 'd' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no d Rose NaN 1 yes # g-\u672b\u5c3e df [ 'g' :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried g Wansi 41.0 0 no h Sidy NaN 0 yes i Jason 37.0 1 no j Even 32.0 0 no","title":"b) \u6807\u7b7e\u7d22\u5f15\u5207\u7247\uff08\u524d\u95ed\u540e\u95ed\uff09"},{"location":"pandas/pandasdata/#c","text":"# \u524d\u4e09\u884c df [[ True , True , True , False , False , False , False , False , False , False ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no # age>30\u7684\u884c # df[[each>30 for each in df['age']]] df [ df [ 'age' ] > 30 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried b Mike 32.0 0 yes g Wansi 41.0 0 no i Jason 37.0 1 no j Even 32.0 0 no # age>30\u548cisMarried=no # \u591a\u6761\u4ef6\u9700\u8981\u5728\u62ec\u53f7\u5185\u586b\u6761\u4ef6 df [( df [ 'age' ] > 30 ) & ( df [ 'isMarried' ] == 'no' )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried g Wansi 41.0 0 no i Jason 37.0 1 no j Even 32.0 0 no # \u591a\u6761\u4ef6 df [( df [ 'age' ] == 20 ) | ( df [ 'age' ] == 32 ) & ( df [ 'isMarried' ] == 'no' )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried f Marry 20.0 1 no j Even 32.0 0 no","title":"c\uff09\u5e03\u5c14\u5224\u65ad"},{"location":"pandas/pandasdata/#12","text":"\u6807\u7b7e\u7d22\u5f15 \u6807\u7b7e\u5217\u8868 Callable\u5bf9\u8c61","title":"1.2 \u9009\u53d6\u884c"},{"location":"pandas/pandasdata/#a_1","text":"# Series df [ 'name' ] # DataFrame df [[ 'name' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name a Joe b Mike c Jack d Rose e David f Marry g Wansi h Sidy i Jason j Even","title":"a) \u6807\u7b7e\u7d22\u5f15\uff08\u5355\u5217\uff09"},{"location":"pandas/pandasdata/#b_1","text":"df [[ 'name' , 'gender' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name gender a Joe 1 b Mike 0 c Jack 1 d Rose 1 e David 0 f Marry 1 g Wansi 0 h Sidy 0 i Jason 1 j Even 0","title":"b) \u6807\u7b7e\u5217\u8868\uff08\u591a\u5217\uff09"},{"location":"pandas/pandasdata/#c-callable","text":"df [ lambda df : df . columns [: 3 ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0","title":"c) callable\u5bf9\u8c61"},{"location":"pandas/pandasdata/#2","text":"","title":"2.\u533a\u57df\u9009\u53d6"},{"location":"pandas/pandasdata/#21-dfloc","text":"","title":"2.1 df.loc[ ] \uff08\u6807\u7b7e\uff09"},{"location":"pandas/pandasdata/#a-loc","text":"# index='a'\u7684\u884c df . loc [ 'a' , :] name Joe age 25 gender 1 isMarried yes Name: a, dtype: object # index\u4e3aa\u6216c\u6216d\u7684\u884c df . loc [[ 'a' , 'c' , 'd' ], :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes c Jack 18.0 1 no d Rose NaN 1 yes # inde a-d df . loc [ 'a' : 'd' , :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no d Rose NaN 1 yes # \u524d\u4e09\u884c df . loc [[ True , True , True , False , False , False , False , False , False , False ], :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no # age>30\u884c df . loc [ df [ 'age' ] > 30 ,:] # df.loc[df.loc[:,'age']>30,:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried b Mike 32.0 0 yes g Wansi 41.0 0 no i Jason 37.0 1 no j Even 32.0 0 no","title":"a) loc\u9009\u62e9\u884c"},{"location":"pandas/pandasdata/#b-loc","text":"df . loc [:, 'name' ] a Joe b Mike c Jack d Rose e David f Marry g Wansi h Sidy i Jason j Even Name: name, dtype: object # name\u81f3gender df . loc [:, 'name' : 'gender' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0 # \u6307\u5b9a\u5217 df . loc [:, [ 'name' , 'gender' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name gender a Joe 1 b Mike 0 c Jack 1 d Rose 1 e David 0 f Marry 1 g Wansi 0 h Sidy 0 i Jason 1 j Even 0 # \u5e03\u5c14\u6570\u7ec4\u524d\u4e09\u5217 df . loc [:, [ True , True , True , False ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0","title":"b) loc\u9009\u62e9\u5217"},{"location":"pandas/pandasdata/#c_1","text":"# \u8f93\u51fa\u5e74\u9f84\u5927\u4e8e30\u7684\u4eba\u7684\u59d3\u540d\u548c\u5e74\u9f84 df . loc [ df [ 'age' ] > 30 , 'name' : 'age' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age b Mike 32.0 g Wansi 41.0 i Jason 37.0 j Even 32.0","title":"c) \u884c\u5217\u540c\u65f6\u7b5b\u9009"},{"location":"pandas/pandasdata/#22-dfiloc","text":"","title":"2.2 df.iloc[ ] \uff08\u7d22\u5f15\uff09"},{"location":"pandas/pandasdata/#a_2","text":"# \u7b2c2\u884c df . iloc [ 1 ,] name Mike age 32 gender 0 isMarried yes Name: b, dtype: object df . iloc [: 3 ,:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no # \u7b2c2\uff0c4,6\u884c df . iloc [[ 1 , 3 , 5 ],:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried b Mike 32.0 0 yes d Rose NaN 1 yes f Marry 20.0 1 no # \u5e03\u5c14\u9009\u53d6 df . iloc [[ True , True , True , False , False , False , False , False , False , False ], :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no","title":"a) \u9009\u53d6\u884c"},{"location":"pandas/pandasdata/#b_2","text":"# \u7b2c2\u5217 df . iloc [:, 1 ] a 25.0 b 32.0 c 18.0 d NaN e 15.0 f 20.0 g 41.0 h NaN i 37.0 j 32.0 Name: age, dtype: float64 # \u524d\u4e09\u5217 df . iloc [:, : 3 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0 # 1\u30013\u30014\u5217 df . iloc [:, [ 0 , 2 , 3 ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name gender isMarried a Joe 1 yes b Mike 0 yes c Jack 1 no d Rose 1 yes e David 0 no f Marry 1 no g Wansi 0 no h Sidy 0 yes i Jason 1 no j Even 0 no # \u5e03\u5c14\u9009\u62e9\u524d\u4e09\u5217 df . iloc [:, [ True , True , True , False ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0","title":"b)  \u9009\u53d6\u5217"},{"location":"pandas/pandasdata/#c_2","text":"# \u7b2c2\u884c\uff0c1\u30013\u30014\u5217 df . iloc [ 1 , [ 0 , 2 , 3 ]] name Mike gender 0 isMarried yes Name: b, dtype: object # \u524d3\u884c\u7684\u524d3\u5217 df . iloc [: 3 , : 3 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1","title":"c) \u884c\u5217\u540c\u65f6\u7b5b\u9009"},{"location":"pandas/pandasdata/#3","text":"","title":"3. \u5355\u5143\u683c\u9009\u53d6"},{"location":"pandas/pandasdata/#31-dfat","text":"# b\u884cname\u5217 df . at [ 'b' , 'name' ] 'Mike'","title":"3.1 df.at[ ]"},{"location":"pandas/pandasdata/#32-dfiat","text":"df . iat [ 1 , 0 ] 'Mike'","title":"3.2 df.iat[ ]"}]}