{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"test/","text":"\u6d4b\u8bd5\u5b89\u88c5\u60c5\u51b5 \u6253\u5f00\u4f60\u7684\u300c\u7ec8\u7aef\u300d\uff08\u6253\u5f00 \u542f\u52a8\u53f0 \u641c\u7d22\u53ef\u4ee5\u627e\u5230\uff09\uff0c\u4f60\u53ef\u4ee5\u4f9d\u6b21\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff08\u6bcf\u884c\u662f\u4e00\u4e2a\u547d\u4ee4\uff0c\u6ce8\u610f\u8f93\u5165\u65f6\u7684\u7a7a\u683c\u3001\u62fc\u5199\u3001\u5927\u5c0f\u5199\u4e0d\u8981\u51fa\u9519\uff0c\u6240\u6709\u7684 version \u524d\u9762\u90fd\u662f\u6709\u4e24\u4e2a - \u7684\uff09\u9a8c\u8bc1\u4e0b\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a\u5f00\u4f60\u7684\u300c\u7ec8\u7aef\u300d\uff08\u6253\u5f00 \u542f\u52a8\u53f0 \u641c\u7d22\u53ef\u4ee5\u627e\u5230\uff09\uff0c\u4f60\u53ef\u4ee5\u4f9d\u6b21\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff08\u6bcf\u884c\u662f\u4e00\u4e2a\u547d\u4ee4\uff0c\u6ce8\u610f\u8f93\u5165\u65f6\u7684\u7a7a\u683c\u3001\u62fc\u5199\u3001\u5927\u5c0f\u5199\u4e0d\u8981\u51fa\u9519\uff0c\u6240\u6709\u7684 version \u524d\u9762\u90fd\u662f\u6709\u4e24\u4e2a - \u7684\uff09\u9a8c\u8bc1\u4e0b\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a\u5f00\u4f60\u7684\u300c\u7ec8\u7aef\u300d\uff08\u6253\u5f00 \u542f\u52a8\u53f0 \u641c\u7d22\u53ef\u4ee5\u627e\u5230\uff09\uff0c\u4f60\u53ef\u4ee5\u4f9d\u6b21\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff08\u6bcf\u884c\u662f\u4e00\u4e2a\u547d\u4ee4\uff0c\u6ce8\u610f\u8f93\u5165\u65f6\u7684\u7a7a\u683c\u3001\u62fc\u5199\u3001\u5927\u5c0f\u5199\u4e0d\u8981\u51fa\u9519\uff0c\u6240\u6709\u7684 version \u524d\u9762\u90fd\u662f\u6709\u4e24\u4e2a - \u7684\uff09\u9a8c\u8bc1\u4e0b\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a conda -- version python -- version pip -- version","title":"\u623f\u8d37\u8ba1\u7b97"},{"location":"test/#_1","text":"\u6253\u5f00\u4f60\u7684\u300c\u7ec8\u7aef\u300d\uff08\u6253\u5f00 \u542f\u52a8\u53f0 \u641c\u7d22\u53ef\u4ee5\u627e\u5230\uff09\uff0c\u4f60\u53ef\u4ee5\u4f9d\u6b21\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff08\u6bcf\u884c\u662f\u4e00\u4e2a\u547d\u4ee4\uff0c\u6ce8\u610f\u8f93\u5165\u65f6\u7684\u7a7a\u683c\u3001\u62fc\u5199\u3001\u5927\u5c0f\u5199\u4e0d\u8981\u51fa\u9519\uff0c\u6240\u6709\u7684 version \u524d\u9762\u90fd\u662f\u6709\u4e24\u4e2a - \u7684\uff09\u9a8c\u8bc1\u4e0b\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a\u5f00\u4f60\u7684\u300c\u7ec8\u7aef\u300d\uff08\u6253\u5f00 \u542f\u52a8\u53f0 \u641c\u7d22\u53ef\u4ee5\u627e\u5230\uff09\uff0c\u4f60\u53ef\u4ee5\u4f9d\u6b21\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff08\u6bcf\u884c\u662f\u4e00\u4e2a\u547d\u4ee4\uff0c\u6ce8\u610f\u8f93\u5165\u65f6\u7684\u7a7a\u683c\u3001\u62fc\u5199\u3001\u5927\u5c0f\u5199\u4e0d\u8981\u51fa\u9519\uff0c\u6240\u6709\u7684 version \u524d\u9762\u90fd\u662f\u6709\u4e24\u4e2a - \u7684\uff09\u9a8c\u8bc1\u4e0b\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a\u5f00\u4f60\u7684\u300c\u7ec8\u7aef\u300d\uff08\u6253\u5f00 \u542f\u52a8\u53f0 \u641c\u7d22\u53ef\u4ee5\u627e\u5230\uff09\uff0c\u4f60\u53ef\u4ee5\u4f9d\u6b21\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff08\u6bcf\u884c\u662f\u4e00\u4e2a\u547d\u4ee4\uff0c\u6ce8\u610f\u8f93\u5165\u65f6\u7684\u7a7a\u683c\u3001\u62fc\u5199\u3001\u5927\u5c0f\u5199\u4e0d\u8981\u51fa\u9519\uff0c\u6240\u6709\u7684 version \u524d\u9762\u90fd\u662f\u6709\u4e24\u4e2a - \u7684\uff09\u9a8c\u8bc1\u4e0b\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a conda -- version python -- version pip -- version","title":"\u6d4b\u8bd5\u5b89\u88c5\u60c5\u51b5"},{"location":"%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","text":"\u53d8\u91cf\u6570\u636e\u7c7b\u578b python\u53d8\u91cf\u7c7b\u578b \u53d8\u91cf\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u7684\u503c\uff0c\u610f\u5473\u7740\u5728\u521b\u5efa\u53d8\u91cf\u65f6\u4f1a\u5728\u5185\u5b58\u4e2d\u5f00\u8f9f\u4e00\u4e2a\u7a7a\u95f4\u3002 \u57fa\u4e8e\u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\uff0c\u89e3\u91ca\u5668\u4f1a\u5206\u914d\u6307\u5b9a\u5185\u5b58\uff0c\u5e76\u51b3\u5b9a\u4ec0\u4e48\u6570\u636e\u53ef\u4ee5\u88ab\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u3002 \u56e0\u6b64\uff0c\u53d8\u91cf\u53ef\u4ee5\u6307\u5b9a\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u5b58\u50a8\u6574\u6570\uff0c\u5c0f\u6570\u6216\u5b57\u7b26\u3002 01. \u53d8\u91cf\u8d4b\u503c Python \u4e2d\u7684\u53d8\u91cf\u8d4b\u503c\u4e0d\u9700\u8981\u7c7b\u578b\u58f0\u660e\u3002 \u6bcf\u4e2a\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u521b\u5efa\uff0c\u90fd\u5305\u62ec\u53d8\u91cf\u7684\u6807\u8bc6\uff0c\u540d\u79f0\u548c\u6570\u636e\u8fd9\u4e9b\u4fe1\u606f\u3002 \u6bcf\u4e2a\u53d8\u91cf\u5728\u4f7f\u7528\u524d\u90fd\u5fc5\u987b\u8d4b\u503c\uff0c\u53d8\u91cf\u8d4b\u503c\u4ee5\u540e\u8be5\u53d8\u91cf\u624d\u4f1a\u88ab\u521b\u5efa\u3002 \u7b49\u53f7 = \u7528\u6765\u7ed9\u53d8\u91cf\u8d4b\u503c\u3002 \u7b49\u53f7 = \u8fd0\u7b97\u7b26\u5de6\u8fb9\u662f\u4e00\u4e2a\u53d8\u91cf\u540d\uff0c\u7b49\u53f7 = \u8fd0\u7b97\u7b26\u53f3\u8fb9\u662f\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\u7684\u503c\u3002\u4f8b\u5982\uff1a >>> name = \"kaka\" # \u5b57\u7b26\u4e32\u7c7b\u578b age = 27 # \u6574\u6570\u7c7b\u578b height = 1.78 # \u6d6e\u70b9\u6570 print ( name ) print ( age ) print ( height ) <<< kaka 27 1.78 02. \u591a\u4e2a\u53d8\u91cf\u8d4b\u503c python\u5141\u8bb8\u540c\u65f6\u4e3a\u591a\u4e2a\u53d8\u91cf\u8d4b\u503c\u3002\u4f8b\u5982\uff1a a = b = c = 1 \u521b\u5efa\u5b9e\u4f8b\uff0c\u540c\u65f6\u4e3aa\u3001b\u3001c\u521b\u5efa\u76f8\u540c\u503c\u7684\u53d8\u91cf\uff0c\u8fd9\u4e09\u4e2a\u53d8\u91cf\u7684\u503c\u50a8\u5b58\u5728\u540c\u4e00\u5185\u5b58\u7a7a\u95f4\u3002 \u4e5f\u53ef\u4ee5\u4e3a\u591a\u4e2a\u5bf9\u8c61\u6307\u5b9a\u591a\u4e2a\u53d8\u91cf\u3002\u4f8b\u5982 a , b , c = 1 , 1.78 , \"kaka\" \u6574\u5f62\u5bf9\u8c611\u5206\u914d\u7ed9a\u53d8\u91cf\uff0c\u6d6e\u70b9\u5bf9\u8c611.78\u5206\u914d\u7ed9b\u5bf9\u8c61\uff0c\u201ckaka\u201d\u5b57\u7b26\u4e32\u5bf9\u8c61\u5206\u914d\u7ed9c\u53d8\u91cf 03. \u53d8\u91cf\u547d\u540d\u89c4\u8303 \u53d8\u91cf\u540d\u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u3002\u53d8\u91cf\u540d\u53ef\u4ee5\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u6253\u5934\uff0c\u4f46\u4e0d\u80fd\u4ee5\u6570\u5b57\u6253 \u5934\uff0c\u4f8b\u5982\uff0c\u53ef\u5c06\u53d8\u91cf\u547d\u540d\u4e3a message_1 \uff0c\u4f46\u4e0d\u80fd\u5c06\u5176\u547d\u540d\u4e3a 1_message \u3002 \u53d8\u91cf\u540d\u4e0d\u80fd\u5305\u542b\u7a7a\u683c\uff0c\u4f46\u53ef\u4f7f\u7528\u4e0b\u5212\u7ebf\u6765\u5206\u9694\u5176\u4e2d\u7684\u5355\u8bcd\u3002\u4f8b\u5982\uff0c\u53d8\u91cf\u540d greeting_message \u53ef\u884c\uff0c\u4f46\u53d8\u91cf\u540d greeting message \u4f1a\u5f15\u53d1\u9519\u8bef\u3002 \u53d8\u91cf\u540d\u5e94\u65e2\u7b80\u77ed\u53c8\u5177\u6709\u63cf\u8ff0\u6027\u3002\u4f8b\u5982\uff0c name \u6bd4 n \u597d\uff0c student_name \u6bd4 s_n \u597d\uff0c name_length \u6bd4 length_of_persons_name \u597d\u3002 \u614e\u7528\u5c0f\u5199\u5b57\u6bcd l \u548c\u5927\u5199\u5b57\u6bcd O \uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u80fd\u88ab\u4eba\u9519\u770b\u6210\u6570\u5b57 1 \u548c 0 \u3002 \u4e0d\u8981\u5c06Python\u5173\u952e\u5b57\u548c\u51fd\u6570\u540d\u7528\u4f5c\u53d8\u91cf\u540d\uff0c\u5373\u4e0d\u8981\u4f7f\u7528Python\u4fdd\u7559\u7528\u4e8e\u7279\u6b8a\u7528\u9014\u7684\u5355\u8bcd\u3002 04. \u53d8\u91cf\u7684\u5f15\u7528 \u53d8\u91cf \u548c \u6570\u636e \u90fd\u662f\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u3002\u5728 Python \u4e2d \u51fd\u6570 \u7684 \u53c2\u6570\u4f20\u9012 \u4ee5\u53ca \u8fd4\u56de\u503c \u90fd\u662f\u9760 \u5f15\u7528 \u4f20\u9012\u7684 \u53d8\u91cf \u548c \u6570\u636e \u662f\u5206\u5f00\u5b58\u50a8\u7684 \u6570\u636e \u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e \u53d8\u91cf \u4e2d\u4fdd\u5b58\u7740\u6570\u636e\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740 \u53d8\u91cf \u4e2d \u8bb0\u5f55\u6570\u636e\u7684\u5730\u5740 \uff0c\u5c31\u53eb\u505a \u5f15\u7528 \u4f7f\u7528 id() \u51fd\u6570\u53ef\u4ee5\u67e5\u770b\u53d8\u91cf\u4e2d\u4fdd\u5b58\u6570\u636e\u6240\u5728\u7684 \u5185\u5b58\u5730\u5740 \u6ce8\u610f\uff1a\u5982\u679c\u53d8\u91cf\u5df2\u7ecf\u88ab\u5b9a\u4e49\uff0c\u5f53\u7ed9\u4e00\u4e2a\u53d8\u91cf\u8d4b\u503c\u7684\u65f6\u5019\uff0c\u672c\u8d28\u4e0a\u662f \u4fee\u6539\u4e86\u6570\u636e\u7684\u5f15\u7528\u3002 \u53d8\u91cf \u4e0d\u518d \u5bf9\u4e4b\u524d\u7684\u6570\u636e\u5f15\u7528 \u53d8\u91cf \u6539\u4e3a \u5bf9\u65b0\u8d4b\u503c\u7684\u6570\u636e\u5f15\u7528 a = 1 print ( id ( a )) b = 1 print ( id ( b )) <<< 4311894064 4311894064 05. \u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf \u5c40\u90e8\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5185\u90e8 \u5b9a\u4e49\u7684\u53d8\u91cf\uff0c \u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 \u5168\u5c40\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5916\u90e8\u5b9a\u4e49 \u7684\u53d8\u91cf\uff08\u6ca1\u6709\u5b9a\u4e49\u5728\u67d0\u4e00\u4e2a\u51fd\u6570\u5185\uff09\uff0c \u6240\u6709\u51fd\u6570 \u5185\u90e8 \u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf 5.1 \u5c40\u90e8\u53d8\u91cf \u5c40\u90e8\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5185\u90e8 \u5b9a\u4e49\u7684\u53d8\u91cf\uff0c \u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 \u51fd\u6570\u6267\u884c\u7ed3\u675f\u540e\uff0c \u51fd\u6570\u5185\u90e8\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u4f1a\u88ab\u7cfb\u7edf\u56de\u6536 \u4e0d\u540c\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u5b9a\u4e49\u76f8\u540c\u7684\u540d\u5b57\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u4f46\u662f \u5f7c\u6b64\u4e4b\u95f4 \u4e0d\u4f1a\u4ea7\u751f\u5f71\u54cd def demo1 (): num = 10 print ( num ) num = 20 print ( \"\u4fee\u6539\u540e %d \" % num ) def demo2 (): num = 100 print ( num ) demo1 () demo2 () print ( \"over\" ) 5.2 \u5c40\u90e8\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f \u6240\u8c13 \u751f\u547d\u5468\u671f \u5c31\u662f\u53d8\u91cf\u4ece \u88ab\u521b\u5efa \u5230 \u88ab\u7cfb\u7edf\u56de\u6536 \u7684\u8fc7\u7a0b \u5c40\u90e8\u53d8\u91cf \u5728 \u51fd\u6570\u6267\u884c\u65f6 \u624d\u4f1a\u88ab\u521b\u5efa \u51fd\u6570\u6267\u884c\u7ed3\u675f\u540e \u5c40\u90e8\u53d8\u91cf \u88ab\u7cfb\u7edf\u56de\u6536 \u5c40\u90e8\u53d8\u91cf\u5728\u751f\u547d\u5468\u671f \u5185\uff0c\u53ef\u4ee5\u7528\u6765\u5b58\u50a8 \u51fd\u6570\u5185\u90e8\u4e34\u65f6\u4f7f\u7528\u5230\u7684\u6570\u636e 5.3 \u5168\u5c40\u53d8\u91cf \u5168\u5c40\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5916\u90e8\u5b9a\u4e49 \u7684\u53d8\u91cf\uff0c\u6240\u6709\u51fd\u6570\u5185\u90e8\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf # \u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf num = 10 def demo1 (): print ( num ) def demo2 (): print ( num ) demo1 () demo2 () print ( \"over\" ) \u6ce8\u610f \uff1a\u51fd\u6570\u6267\u884c\u65f6\uff0c \u9700\u8981\u5904\u7406\u53d8\u91cf\u65f6 \u4f1a\uff1a \u9996\u5148 \u67e5\u627e \u51fd\u6570\u5185\u90e8 \u662f\u5426\u5b58\u5728 \u6307\u5b9a\u540d\u79f0 \u7684\u5c40\u90e8\u53d8\u91cf \uff0c \u5982\u679c\u6709\uff0c\u76f4\u63a5\u4f7f\u7528 \u5982\u679c\u6ca1\u6709\uff0c\u67e5\u627e \u51fd\u6570\u5916\u90e8 \u662f\u5426\u5b58\u5728 \u6307\u5b9a\u540d\u79f0 \u7684\u5168\u5c40\u53d8\u91cf \uff0c \u5982\u679c\u6709\uff0c\u76f4\u63a5\u4f7f\u7528 \u5982\u679c\u8fd8\u6ca1\u6709\uff0c\u7a0b\u5e8f\u62a5\u9519\uff01 5.4 \u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e \u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u7684\u51fd\u6570\u90fd\u80fd\u591f\u6b63\u786e\u4f7f\u7528\u5230\u5168\u5c40\u53d8\u91cf\uff0c\u5e94\u8be5 \u5c06\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u5728\u5176\u4ed6\u51fd\u6570\u7684\u4e0a\u65b9 a = 10 def demo (): print ( \" %d \" % a ) print ( \" %d \" % b ) print ( \" %d \" % c ) b = 20 demo () c = 30 \u7531\u4e8e\u5168\u5c40\u53d8\u91cf c\uff0c\u662f\u5728\u8c03\u7528\u51fd\u6570\u4e4b\u540e\uff0c\u624d\u5b9a\u4e49\u7684\uff0c\u5728\u6267\u884c\u51fd\u6570\u65f6\uff0c\u53d8\u91cf\u8fd8\u6ca1\u6709\u5b9a\u4e49\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u62a5\u9519\uff01 5.5 \u5168\u5c40\u53d8\u91cf\u7684\u547d\u540d \u4e3a\u4e86\u907f\u514d\u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf\u51fa\u73b0\u6df7\u6dc6\uff0c\u5728\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u53d8\u91cf\u540d\u524d\u5e94\u8be5\u589e\u52a0 g_ \u6216\u8005 gl_ \u7684\u524d\u7f00 06. \u6570\u636e\u7c7b\u578b Python3 \u4e2d\u6709\u516d\u4e2a\u6807\u51c6\u7684\u6570\u636e\u7c7b\u578b\uff1a Number \uff08\u6570\u5b57\uff09 String \uff08\u5b57\u7b26\u4e32\uff09 List \uff08\u5217\u8868\uff09 Tuple \uff08\u5143\u7ec4\uff09 Set \uff08\u96c6\u5408\uff09 Dictionary \uff08\u5b57\u5178\uff09 Python3 \u7684\u516d\u4e2a\u6807\u51c6\u6570\u636e\u7c7b\u578b\u4e2d\uff1a \u4e0d\u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a Number \uff08\u6570\u5b57\uff09\u3001 String \uff08\u5b57\u7b26\u4e32\uff09\u3001 Tuple \uff08\u5143\u7ec4\uff09\uff1b \u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a List \uff08\u5217\u8868\uff09\u3001 Dictionary \uff08\u5b57\u5178\uff09\u3001 Set \uff08\u96c6\u5408\uff09\u3002","title":"\u6570\u636e\u7c7b\u578b"},{"location":"%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_1","text":"","title":"\u53d8\u91cf\u6570\u636e\u7c7b\u578b"},{"location":"%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#python","text":"\u53d8\u91cf\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u7684\u503c\uff0c\u610f\u5473\u7740\u5728\u521b\u5efa\u53d8\u91cf\u65f6\u4f1a\u5728\u5185\u5b58\u4e2d\u5f00\u8f9f\u4e00\u4e2a\u7a7a\u95f4\u3002 \u57fa\u4e8e\u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\uff0c\u89e3\u91ca\u5668\u4f1a\u5206\u914d\u6307\u5b9a\u5185\u5b58\uff0c\u5e76\u51b3\u5b9a\u4ec0\u4e48\u6570\u636e\u53ef\u4ee5\u88ab\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u3002 \u56e0\u6b64\uff0c\u53d8\u91cf\u53ef\u4ee5\u6307\u5b9a\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u5b58\u50a8\u6574\u6570\uff0c\u5c0f\u6570\u6216\u5b57\u7b26\u3002","title":"python\u53d8\u91cf\u7c7b\u578b"},{"location":"%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#01","text":"Python \u4e2d\u7684\u53d8\u91cf\u8d4b\u503c\u4e0d\u9700\u8981\u7c7b\u578b\u58f0\u660e\u3002 \u6bcf\u4e2a\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u521b\u5efa\uff0c\u90fd\u5305\u62ec\u53d8\u91cf\u7684\u6807\u8bc6\uff0c\u540d\u79f0\u548c\u6570\u636e\u8fd9\u4e9b\u4fe1\u606f\u3002 \u6bcf\u4e2a\u53d8\u91cf\u5728\u4f7f\u7528\u524d\u90fd\u5fc5\u987b\u8d4b\u503c\uff0c\u53d8\u91cf\u8d4b\u503c\u4ee5\u540e\u8be5\u53d8\u91cf\u624d\u4f1a\u88ab\u521b\u5efa\u3002 \u7b49\u53f7 = \u7528\u6765\u7ed9\u53d8\u91cf\u8d4b\u503c\u3002 \u7b49\u53f7 = \u8fd0\u7b97\u7b26\u5de6\u8fb9\u662f\u4e00\u4e2a\u53d8\u91cf\u540d\uff0c\u7b49\u53f7 = \u8fd0\u7b97\u7b26\u53f3\u8fb9\u662f\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\u7684\u503c\u3002\u4f8b\u5982\uff1a >>> name = \"kaka\" # \u5b57\u7b26\u4e32\u7c7b\u578b age = 27 # \u6574\u6570\u7c7b\u578b height = 1.78 # \u6d6e\u70b9\u6570 print ( name ) print ( age ) print ( height ) <<< kaka 27 1.78","title":"01.  \u53d8\u91cf\u8d4b\u503c"},{"location":"%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#02","text":"python\u5141\u8bb8\u540c\u65f6\u4e3a\u591a\u4e2a\u53d8\u91cf\u8d4b\u503c\u3002\u4f8b\u5982\uff1a a = b = c = 1 \u521b\u5efa\u5b9e\u4f8b\uff0c\u540c\u65f6\u4e3aa\u3001b\u3001c\u521b\u5efa\u76f8\u540c\u503c\u7684\u53d8\u91cf\uff0c\u8fd9\u4e09\u4e2a\u53d8\u91cf\u7684\u503c\u50a8\u5b58\u5728\u540c\u4e00\u5185\u5b58\u7a7a\u95f4\u3002 \u4e5f\u53ef\u4ee5\u4e3a\u591a\u4e2a\u5bf9\u8c61\u6307\u5b9a\u591a\u4e2a\u53d8\u91cf\u3002\u4f8b\u5982 a , b , c = 1 , 1.78 , \"kaka\" \u6574\u5f62\u5bf9\u8c611\u5206\u914d\u7ed9a\u53d8\u91cf\uff0c\u6d6e\u70b9\u5bf9\u8c611.78\u5206\u914d\u7ed9b\u5bf9\u8c61\uff0c\u201ckaka\u201d\u5b57\u7b26\u4e32\u5bf9\u8c61\u5206\u914d\u7ed9c\u53d8\u91cf","title":"02. \u591a\u4e2a\u53d8\u91cf\u8d4b\u503c"},{"location":"%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#03","text":"\u53d8\u91cf\u540d\u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u3002\u53d8\u91cf\u540d\u53ef\u4ee5\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u6253\u5934\uff0c\u4f46\u4e0d\u80fd\u4ee5\u6570\u5b57\u6253 \u5934\uff0c\u4f8b\u5982\uff0c\u53ef\u5c06\u53d8\u91cf\u547d\u540d\u4e3a message_1 \uff0c\u4f46\u4e0d\u80fd\u5c06\u5176\u547d\u540d\u4e3a 1_message \u3002 \u53d8\u91cf\u540d\u4e0d\u80fd\u5305\u542b\u7a7a\u683c\uff0c\u4f46\u53ef\u4f7f\u7528\u4e0b\u5212\u7ebf\u6765\u5206\u9694\u5176\u4e2d\u7684\u5355\u8bcd\u3002\u4f8b\u5982\uff0c\u53d8\u91cf\u540d greeting_message \u53ef\u884c\uff0c\u4f46\u53d8\u91cf\u540d greeting message \u4f1a\u5f15\u53d1\u9519\u8bef\u3002 \u53d8\u91cf\u540d\u5e94\u65e2\u7b80\u77ed\u53c8\u5177\u6709\u63cf\u8ff0\u6027\u3002\u4f8b\u5982\uff0c name \u6bd4 n \u597d\uff0c student_name \u6bd4 s_n \u597d\uff0c name_length \u6bd4 length_of_persons_name \u597d\u3002 \u614e\u7528\u5c0f\u5199\u5b57\u6bcd l \u548c\u5927\u5199\u5b57\u6bcd O \uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u80fd\u88ab\u4eba\u9519\u770b\u6210\u6570\u5b57 1 \u548c 0 \u3002 \u4e0d\u8981\u5c06Python\u5173\u952e\u5b57\u548c\u51fd\u6570\u540d\u7528\u4f5c\u53d8\u91cf\u540d\uff0c\u5373\u4e0d\u8981\u4f7f\u7528Python\u4fdd\u7559\u7528\u4e8e\u7279\u6b8a\u7528\u9014\u7684\u5355\u8bcd\u3002","title":"03.  \u53d8\u91cf\u547d\u540d\u89c4\u8303"},{"location":"%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#04","text":"\u53d8\u91cf \u548c \u6570\u636e \u90fd\u662f\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u3002\u5728 Python \u4e2d \u51fd\u6570 \u7684 \u53c2\u6570\u4f20\u9012 \u4ee5\u53ca \u8fd4\u56de\u503c \u90fd\u662f\u9760 \u5f15\u7528 \u4f20\u9012\u7684 \u53d8\u91cf \u548c \u6570\u636e \u662f\u5206\u5f00\u5b58\u50a8\u7684 \u6570\u636e \u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e \u53d8\u91cf \u4e2d\u4fdd\u5b58\u7740\u6570\u636e\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740 \u53d8\u91cf \u4e2d \u8bb0\u5f55\u6570\u636e\u7684\u5730\u5740 \uff0c\u5c31\u53eb\u505a \u5f15\u7528 \u4f7f\u7528 id() \u51fd\u6570\u53ef\u4ee5\u67e5\u770b\u53d8\u91cf\u4e2d\u4fdd\u5b58\u6570\u636e\u6240\u5728\u7684 \u5185\u5b58\u5730\u5740 \u6ce8\u610f\uff1a\u5982\u679c\u53d8\u91cf\u5df2\u7ecf\u88ab\u5b9a\u4e49\uff0c\u5f53\u7ed9\u4e00\u4e2a\u53d8\u91cf\u8d4b\u503c\u7684\u65f6\u5019\uff0c\u672c\u8d28\u4e0a\u662f \u4fee\u6539\u4e86\u6570\u636e\u7684\u5f15\u7528\u3002 \u53d8\u91cf \u4e0d\u518d \u5bf9\u4e4b\u524d\u7684\u6570\u636e\u5f15\u7528 \u53d8\u91cf \u6539\u4e3a \u5bf9\u65b0\u8d4b\u503c\u7684\u6570\u636e\u5f15\u7528 a = 1 print ( id ( a )) b = 1 print ( id ( b )) <<< 4311894064 4311894064","title":"04. \u53d8\u91cf\u7684\u5f15\u7528"},{"location":"%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#05","text":"\u5c40\u90e8\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5185\u90e8 \u5b9a\u4e49\u7684\u53d8\u91cf\uff0c \u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 \u5168\u5c40\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5916\u90e8\u5b9a\u4e49 \u7684\u53d8\u91cf\uff08\u6ca1\u6709\u5b9a\u4e49\u5728\u67d0\u4e00\u4e2a\u51fd\u6570\u5185\uff09\uff0c \u6240\u6709\u51fd\u6570 \u5185\u90e8 \u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf","title":"05. \u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf"},{"location":"%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#51","text":"\u5c40\u90e8\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5185\u90e8 \u5b9a\u4e49\u7684\u53d8\u91cf\uff0c \u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 \u51fd\u6570\u6267\u884c\u7ed3\u675f\u540e\uff0c \u51fd\u6570\u5185\u90e8\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u4f1a\u88ab\u7cfb\u7edf\u56de\u6536 \u4e0d\u540c\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u5b9a\u4e49\u76f8\u540c\u7684\u540d\u5b57\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u4f46\u662f \u5f7c\u6b64\u4e4b\u95f4 \u4e0d\u4f1a\u4ea7\u751f\u5f71\u54cd def demo1 (): num = 10 print ( num ) num = 20 print ( \"\u4fee\u6539\u540e %d \" % num ) def demo2 (): num = 100 print ( num ) demo1 () demo2 () print ( \"over\" )","title":"5.1 \u5c40\u90e8\u53d8\u91cf"},{"location":"%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#52","text":"\u6240\u8c13 \u751f\u547d\u5468\u671f \u5c31\u662f\u53d8\u91cf\u4ece \u88ab\u521b\u5efa \u5230 \u88ab\u7cfb\u7edf\u56de\u6536 \u7684\u8fc7\u7a0b \u5c40\u90e8\u53d8\u91cf \u5728 \u51fd\u6570\u6267\u884c\u65f6 \u624d\u4f1a\u88ab\u521b\u5efa \u51fd\u6570\u6267\u884c\u7ed3\u675f\u540e \u5c40\u90e8\u53d8\u91cf \u88ab\u7cfb\u7edf\u56de\u6536 \u5c40\u90e8\u53d8\u91cf\u5728\u751f\u547d\u5468\u671f \u5185\uff0c\u53ef\u4ee5\u7528\u6765\u5b58\u50a8 \u51fd\u6570\u5185\u90e8\u4e34\u65f6\u4f7f\u7528\u5230\u7684\u6570\u636e","title":"5.2 \u5c40\u90e8\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f"},{"location":"%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#53","text":"\u5168\u5c40\u53d8\u91cf \u662f\u5728 \u51fd\u6570\u5916\u90e8\u5b9a\u4e49 \u7684\u53d8\u91cf\uff0c\u6240\u6709\u51fd\u6570\u5185\u90e8\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf # \u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf num = 10 def demo1 (): print ( num ) def demo2 (): print ( num ) demo1 () demo2 () print ( \"over\" ) \u6ce8\u610f \uff1a\u51fd\u6570\u6267\u884c\u65f6\uff0c \u9700\u8981\u5904\u7406\u53d8\u91cf\u65f6 \u4f1a\uff1a \u9996\u5148 \u67e5\u627e \u51fd\u6570\u5185\u90e8 \u662f\u5426\u5b58\u5728 \u6307\u5b9a\u540d\u79f0 \u7684\u5c40\u90e8\u53d8\u91cf \uff0c \u5982\u679c\u6709\uff0c\u76f4\u63a5\u4f7f\u7528 \u5982\u679c\u6ca1\u6709\uff0c\u67e5\u627e \u51fd\u6570\u5916\u90e8 \u662f\u5426\u5b58\u5728 \u6307\u5b9a\u540d\u79f0 \u7684\u5168\u5c40\u53d8\u91cf \uff0c \u5982\u679c\u6709\uff0c\u76f4\u63a5\u4f7f\u7528 \u5982\u679c\u8fd8\u6ca1\u6709\uff0c\u7a0b\u5e8f\u62a5\u9519\uff01","title":"5.3 \u5168\u5c40\u53d8\u91cf"},{"location":"%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#54","text":"\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u7684\u51fd\u6570\u90fd\u80fd\u591f\u6b63\u786e\u4f7f\u7528\u5230\u5168\u5c40\u53d8\u91cf\uff0c\u5e94\u8be5 \u5c06\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u5728\u5176\u4ed6\u51fd\u6570\u7684\u4e0a\u65b9 a = 10 def demo (): print ( \" %d \" % a ) print ( \" %d \" % b ) print ( \" %d \" % c ) b = 20 demo () c = 30 \u7531\u4e8e\u5168\u5c40\u53d8\u91cf c\uff0c\u662f\u5728\u8c03\u7528\u51fd\u6570\u4e4b\u540e\uff0c\u624d\u5b9a\u4e49\u7684\uff0c\u5728\u6267\u884c\u51fd\u6570\u65f6\uff0c\u53d8\u91cf\u8fd8\u6ca1\u6709\u5b9a\u4e49\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u62a5\u9519\uff01","title":"5.4 \u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e"},{"location":"%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#55","text":"\u4e3a\u4e86\u907f\u514d\u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf\u51fa\u73b0\u6df7\u6dc6\uff0c\u5728\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u53d8\u91cf\u540d\u524d\u5e94\u8be5\u589e\u52a0 g_ \u6216\u8005 gl_ \u7684\u524d\u7f00","title":"5.5 \u5168\u5c40\u53d8\u91cf\u7684\u547d\u540d"},{"location":"%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#06","text":"Python3 \u4e2d\u6709\u516d\u4e2a\u6807\u51c6\u7684\u6570\u636e\u7c7b\u578b\uff1a Number \uff08\u6570\u5b57\uff09 String \uff08\u5b57\u7b26\u4e32\uff09 List \uff08\u5217\u8868\uff09 Tuple \uff08\u5143\u7ec4\uff09 Set \uff08\u96c6\u5408\uff09 Dictionary \uff08\u5b57\u5178\uff09 Python3 \u7684\u516d\u4e2a\u6807\u51c6\u6570\u636e\u7c7b\u578b\u4e2d\uff1a \u4e0d\u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a Number \uff08\u6570\u5b57\uff09\u3001 String \uff08\u5b57\u7b26\u4e32\uff09\u3001 Tuple \uff08\u5143\u7ec4\uff09\uff1b \u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a List \uff08\u5217\u8868\uff09\u3001 Dictionary \uff08\u5b57\u5178\uff09\u3001 Set \uff08\u96c6\u5408\uff09\u3002","title":"06. \u6570\u636e\u7c7b\u578b"},{"location":"%E6%88%BF%E8%B4%B7%E8%AE%A1%E7%AE%97/","text":"\u9996\u4ed8 import pandas as pd price = int ( input ( '\u603b\u4ef7/\u4e07\uff1a' )) mianji = int ( input ( '\u9762\u79ef 1\uff1a\u5c0f\u4e8e90\u5e73 2\uff1a\u5927\u4e8e90\u5e73\uff1a' )) qishui = ( price * 0.01 if mianji == 1 else price * 0.015 ) weiyi = int ( input ( '\u662f\u5426\u6ee1\u4e94\u552f\u4e00\uff1b1\uff1a\u662f\uff1b2:\u4e0d\u662f\uff1a ' )) geshui = ( 0 if weiyi == 1 else price * 0.01 ) zzs = int ( input ( r '1:\u65e0\u589e\u503c\u7a0e\uff1b2\uff1a\u4e0d\u6ee12\u5e74/\u6ee1\u4e8c\u4e0d\u552f\u4e00' )) zengzhishui = ( 0 if zzs == 1 else price * 0.05 ) zhongjie = price * 0.015 shoufu = price * 0.3 sum_shoufu = shoufu + qishui + geshui + zengzhishui + zhongjie df = pd . DataFrame ({ '\u603b\u4ef7' : price , '\u5951\u7a0e' : qishui , '\u4e2a\u7a0e' : geshui , '\u4e2d\u4ecb\u8d39' : zhongjie , '\u589e\u503c\u7a0e' : zengzhishui , '\u9996\u4ed8' : shoufu , '\u9996\u4ed8\u603b\u989d' : sum_shoufu }, index = [ 1 , ]) df \u603b\u4ef7/\u4e07\uff1a240 \u9762\u79ef 1\uff1a\u5c0f\u4e8e90\u5e73 2\uff1a\u5927\u4e8e90\u5e73\uff1a1 \u662f\u5426\u6ee1\u4e94\u552f\u4e00\uff1b1\uff1a\u662f\uff1b2:\u4e0d\u662f\uff1a 1 1:\u65e0\u589e\u503c\u7a0e\uff1b2\uff1a\u4e0d\u6ee12\u5e74/\u6ee1\u4e8c\u4e0d\u552f\u4e001 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } \u603b\u4ef7 \u5951\u7a0e \u4e2a\u7a0e \u4e2d\u4ecb\u8d39 \u589e\u503c\u7a0e \u9996\u4ed8 \u9996\u4ed8\u603b\u989d 1 240 2.4 0 3.6 0 72.0 78.0 \u7b49\u989d\u672c\u606f daikuan = price * 0.7 * 10000 ; yueli = float ( input ( '\u5546\u4e1a\u8d37\u6b3e\u5e74\u5229\u7387\uff1a ' )) / 100 / 12 ; month = 360 meiyue = round ((( daikuan * yueli * ( 1 + yueli ) ** month ) / (( 1 + yueli ) ** month - 1 )), 2 ) lixi = round (( meiyue * month - daikuan ), 2 ) sum_daikuan = round (( daikuan + lixi ), 0 ) daikuan1 = str ( round (( daikuan / 10000 ), 2 )) + '\u4e07' bx = pd . DataFrame ({ '\u8d37\u6b3e\u603b\u989d' : daikuan1 , '\u6bcf\u6708\u5e94\u8fd8' : meiyue , '\u5229\u606f\u603b\u989d' : lixi , '\u8fd8\u6b3e\u603b\u989d' : sum_daikuan }, index = [ 0 ,]) bx \u5546\u4e1a\u8d37\u6b3e\u5e74\u5229\u7387\uff1a 5 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } \u8d37\u6b3e\u603b\u989d \u6bcf\u6708\u5e94\u8fd8 \u5229\u606f\u603b\u989d \u8fd8\u6b3e\u603b\u989d 0 168.0\u4e07 9018.6 1566696.0 3246696.0 \u7b49\u989d\u672c\u91d1 bj_m_price = round ((( daikuan / month ) + ( daikuan - 0 ) * yueli ), 2 ); sum_lixi = month * ( daikuan * yueli - yueli * ( daikuan / month ) * ( month - 1 ) / 2 + daikuan / month ); bj_lixi = sum_lixi - daikuan ; m_jian = round (( bj_m_price * yueli ), 2 ); bj = pd . DataFrame ({ '\u8d37\u6b3e\u603b\u989d' : daikuan1 , '\u9996\u6708\u5e94\u8fd8' : bj_m_price , '\u603b\u5229\u606f' : bj_lixi , '\u6bcf\u6708\u8fd8\u6b3e\u9012\u51cf' : m_jian , '\u8fd8\u6b3e\u603b\u989d' : sum_lixi }, index = [ 0 ,]); bj .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } \u8d37\u6b3e\u603b\u989d \u9996\u6708\u5e94\u8fd8 \u603b\u5229\u606f \u6bcf\u6708\u8fd8\u6b3e\u9012\u51cf \u8fd8\u6b3e\u603b\u989d 0 168.0\u4e07 11666.67 1263500.0 48.61 2943500.0","title":"\u623f\u8d37\u8ba1\u7b97"},{"location":"%E6%88%BF%E8%B4%B7%E8%AE%A1%E7%AE%97/#_1","text":"import pandas as pd price = int ( input ( '\u603b\u4ef7/\u4e07\uff1a' )) mianji = int ( input ( '\u9762\u79ef 1\uff1a\u5c0f\u4e8e90\u5e73 2\uff1a\u5927\u4e8e90\u5e73\uff1a' )) qishui = ( price * 0.01 if mianji == 1 else price * 0.015 ) weiyi = int ( input ( '\u662f\u5426\u6ee1\u4e94\u552f\u4e00\uff1b1\uff1a\u662f\uff1b2:\u4e0d\u662f\uff1a ' )) geshui = ( 0 if weiyi == 1 else price * 0.01 ) zzs = int ( input ( r '1:\u65e0\u589e\u503c\u7a0e\uff1b2\uff1a\u4e0d\u6ee12\u5e74/\u6ee1\u4e8c\u4e0d\u552f\u4e00' )) zengzhishui = ( 0 if zzs == 1 else price * 0.05 ) zhongjie = price * 0.015 shoufu = price * 0.3 sum_shoufu = shoufu + qishui + geshui + zengzhishui + zhongjie df = pd . DataFrame ({ '\u603b\u4ef7' : price , '\u5951\u7a0e' : qishui , '\u4e2a\u7a0e' : geshui , '\u4e2d\u4ecb\u8d39' : zhongjie , '\u589e\u503c\u7a0e' : zengzhishui , '\u9996\u4ed8' : shoufu , '\u9996\u4ed8\u603b\u989d' : sum_shoufu }, index = [ 1 , ]) df \u603b\u4ef7/\u4e07\uff1a240 \u9762\u79ef 1\uff1a\u5c0f\u4e8e90\u5e73 2\uff1a\u5927\u4e8e90\u5e73\uff1a1 \u662f\u5426\u6ee1\u4e94\u552f\u4e00\uff1b1\uff1a\u662f\uff1b2:\u4e0d\u662f\uff1a 1 1:\u65e0\u589e\u503c\u7a0e\uff1b2\uff1a\u4e0d\u6ee12\u5e74/\u6ee1\u4e8c\u4e0d\u552f\u4e001 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } \u603b\u4ef7 \u5951\u7a0e \u4e2a\u7a0e \u4e2d\u4ecb\u8d39 \u589e\u503c\u7a0e \u9996\u4ed8 \u9996\u4ed8\u603b\u989d 1 240 2.4 0 3.6 0 72.0 78.0","title":"\u9996\u4ed8"},{"location":"%E6%88%BF%E8%B4%B7%E8%AE%A1%E7%AE%97/#_2","text":"daikuan = price * 0.7 * 10000 ; yueli = float ( input ( '\u5546\u4e1a\u8d37\u6b3e\u5e74\u5229\u7387\uff1a ' )) / 100 / 12 ; month = 360 meiyue = round ((( daikuan * yueli * ( 1 + yueli ) ** month ) / (( 1 + yueli ) ** month - 1 )), 2 ) lixi = round (( meiyue * month - daikuan ), 2 ) sum_daikuan = round (( daikuan + lixi ), 0 ) daikuan1 = str ( round (( daikuan / 10000 ), 2 )) + '\u4e07' bx = pd . DataFrame ({ '\u8d37\u6b3e\u603b\u989d' : daikuan1 , '\u6bcf\u6708\u5e94\u8fd8' : meiyue , '\u5229\u606f\u603b\u989d' : lixi , '\u8fd8\u6b3e\u603b\u989d' : sum_daikuan }, index = [ 0 ,]) bx \u5546\u4e1a\u8d37\u6b3e\u5e74\u5229\u7387\uff1a 5 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } \u8d37\u6b3e\u603b\u989d \u6bcf\u6708\u5e94\u8fd8 \u5229\u606f\u603b\u989d \u8fd8\u6b3e\u603b\u989d 0 168.0\u4e07 9018.6 1566696.0 3246696.0","title":"\u7b49\u989d\u672c\u606f"},{"location":"%E6%88%BF%E8%B4%B7%E8%AE%A1%E7%AE%97/#_3","text":"bj_m_price = round ((( daikuan / month ) + ( daikuan - 0 ) * yueli ), 2 ); sum_lixi = month * ( daikuan * yueli - yueli * ( daikuan / month ) * ( month - 1 ) / 2 + daikuan / month ); bj_lixi = sum_lixi - daikuan ; m_jian = round (( bj_m_price * yueli ), 2 ); bj = pd . DataFrame ({ '\u8d37\u6b3e\u603b\u989d' : daikuan1 , '\u9996\u6708\u5e94\u8fd8' : bj_m_price , '\u603b\u5229\u606f' : bj_lixi , '\u6bcf\u6708\u8fd8\u6b3e\u9012\u51cf' : m_jian , '\u8fd8\u6b3e\u603b\u989d' : sum_lixi }, index = [ 0 ,]); bj .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } \u8d37\u6b3e\u603b\u989d \u9996\u6708\u5e94\u8fd8 \u603b\u5229\u606f \u6bcf\u6708\u8fd8\u6b3e\u9012\u51cf \u8fd8\u6b3e\u603b\u989d 0 168.0\u4e07 11666.67 1263500.0 48.61 2943500.0","title":"\u7b49\u989d\u672c\u91d1"},{"location":"pandas/pandasdata/","text":"DataFrame\u6570\u636e\u9009\u53d6\u5305\u62ec\u4e09\u79cd\u60c5\u51b5\uff1a - \u5355\u7ef4\u9009\u53d6\uff0c\u4ec5\u9009\u53d6\u884c\u6216\u5217,\u53ea\u80fd\u4e3a\u4e00\u4e2a\u7ef4\u5ea6\u8bbe\u7f6e\u7b5b\u9009\u6761\u4ef6\uff1b df[] - \u591a\u7ef4\u9009\u53d6\uff08\u533a\u57df\u9009\u53d6\uff09\uff0c .loc[] .iloc[] df.ix[] - \u5355\u5143\u683c\u9009\u53d6\uff0c\u51c6\u786e\u5b9a\u4f4d\u4e00\u4e2a\u5355\u5143\u683c\uff1a df.at[] df.iat[] import pandas as pd import numpy as np data = { 'name' : [ 'Joe' , 'Mike' , 'Jack' , 'Rose' , 'David' , 'Marry' , 'Wansi' , 'Sidy' , 'Jason' , 'Even' ], 'age' : [ 25 , 32 , 18 , np . nan , 15 , 20 , 41 , np . nan , 37 , 32 ], 'gender' : [ 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 ], 'isMarried' : [ 'yes' , 'yes' , 'no' , 'yes' , 'no' , 'no' , 'no' , 'yes' , 'no' , 'no' ]} labels = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' ] df = pd . DataFrame ( data , index = labels ) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no d Rose NaN 1 yes e David 15.0 0 no f Marry 20.0 1 no g Wansi 41.0 0 no h Sidy NaN 0 yes i Jason 37.0 1 no j Even 32.0 0 no 1. \u884c\u5217\u9009\u53d6 1. \u9009\u53d6\u884c \u6574\u6570\u7d22\u5f15\u5207\u7247 \u6807\u7b7e\u7d22\u5f15\u5207\u7247 \u5e03\u5c14\u6570\u7ec4 a) \u6574\u6570\u7d22\u5f15\u5207\u7247\uff08\u5de6\u95ed\u53f3\u5f00\uff09 # \u9009\u53d6\u524d\u4e24\u884c df [: 2 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes # \u9009\u53d6\u7b2c\u4e8c\u884c\u5230\u7b2c\u56db\u884c df [ 2 : 4 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried c Jack 18.0 1 no d Rose NaN 1 yes # \u6700\u540e3\u884c df [ - 3 :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried h Sidy NaN 0 yes i Jason 37.0 1 no j Even 32.0 0 no b) \u6807\u7b7e\u7d22\u5f15\u5207\u7247\uff08\u524d\u95ed\u540e\u95ed\uff09 # \u7b2c\u4e00\u884c df [: 'a' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes # a-d df [ 'a' : 'd' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no d Rose NaN 1 yes # g-\u672b\u5c3e df [ 'g' :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried g Wansi 41.0 0 no h Sidy NaN 0 yes i Jason 37.0 1 no j Even 32.0 0 no c\uff09\u5e03\u5c14\u5224\u65ad # \u524d\u4e09\u884c df [[ True , True , True , False , False , False , False , False , False , False ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no # age>30\u7684\u884c # df[[each>30 for each in df['age']]] df [ df [ 'age' ] > 30 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried b Mike 32.0 0 yes g Wansi 41.0 0 no i Jason 37.0 1 no j Even 32.0 0 no # age>30\u548cisMarried=no # \u591a\u6761\u4ef6\u9700\u8981\u5728\u62ec\u53f7\u5185\u586b\u6761\u4ef6 df [( df [ 'age' ] > 30 ) & ( df [ 'isMarried' ] == 'no' )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried g Wansi 41.0 0 no i Jason 37.0 1 no j Even 32.0 0 no # \u591a\u6761\u4ef6 df [( df [ 'age' ] == 20 ) | ( df [ 'age' ] == 32 ) & ( df [ 'isMarried' ] == 'no' )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried f Marry 20.0 1 no j Even 32.0 0 no 1.2 \u9009\u53d6\u884c \u6807\u7b7e\u7d22\u5f15 \u6807\u7b7e\u5217\u8868 Callable\u5bf9\u8c61 a) \u6807\u7b7e\u7d22\u5f15\uff08\u5355\u5217\uff09 # Series df [ 'name' ] # DataFrame df [[ 'name' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name a Joe b Mike c Jack d Rose e David f Marry g Wansi h Sidy i Jason j Even b) \u6807\u7b7e\u5217\u8868\uff08\u591a\u5217\uff09 df [[ 'name' , 'gender' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name gender a Joe 1 b Mike 0 c Jack 1 d Rose 1 e David 0 f Marry 1 g Wansi 0 h Sidy 0 i Jason 1 j Even 0 c) callable\u5bf9\u8c61 df [ lambda df : df . columns [: 3 ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0 2.\u533a\u57df\u9009\u53d6 2.1 df.loc[ ] \uff08\u6807\u7b7e\uff09 a) loc\u9009\u62e9\u884c # index='a'\u7684\u884c df . loc [ 'a' , :] name Joe age 25 gender 1 isMarried yes Name: a, dtype: object # index\u4e3aa\u6216c\u6216d\u7684\u884c df . loc [[ 'a' , 'c' , 'd' ], :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes c Jack 18.0 1 no d Rose NaN 1 yes # inde a-d df . loc [ 'a' : 'd' , :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no d Rose NaN 1 yes # \u524d\u4e09\u884c df . loc [[ True , True , True , False , False , False , False , False , False , False ], :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no # age>30\u884c df . loc [ df [ 'age' ] > 30 ,:] # df.loc[df.loc[:,'age']>30,:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried b Mike 32.0 0 yes g Wansi 41.0 0 no i Jason 37.0 1 no j Even 32.0 0 no b) loc\u9009\u62e9\u5217 df . loc [:, 'name' ] a Joe b Mike c Jack d Rose e David f Marry g Wansi h Sidy i Jason j Even Name: name, dtype: object # name\u81f3gender df . loc [:, 'name' : 'gender' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0 # \u6307\u5b9a\u5217 df . loc [:, [ 'name' , 'gender' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name gender a Joe 1 b Mike 0 c Jack 1 d Rose 1 e David 0 f Marry 1 g Wansi 0 h Sidy 0 i Jason 1 j Even 0 # \u5e03\u5c14\u6570\u7ec4\u524d\u4e09\u5217 df . loc [:, [ True , True , True , False ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0 c) \u884c\u5217\u540c\u65f6\u7b5b\u9009 # \u8f93\u51fa\u5e74\u9f84\u5927\u4e8e30\u7684\u4eba\u7684\u59d3\u540d\u548c\u5e74\u9f84 df . loc [ df [ 'age' ] > 30 , 'name' : 'age' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age b Mike 32.0 g Wansi 41.0 i Jason 37.0 j Even 32.0 2.2 df.iloc[ ] \uff08\u7d22\u5f15\uff09 a) \u9009\u53d6\u884c # \u7b2c2\u884c df . iloc [ 1 ,] name Mike age 32 gender 0 isMarried yes Name: b, dtype: object df . iloc [: 3 ,:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no # \u7b2c2\uff0c4,6\u884c df . iloc [[ 1 , 3 , 5 ],:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried b Mike 32.0 0 yes d Rose NaN 1 yes f Marry 20.0 1 no # \u5e03\u5c14\u9009\u53d6 df . iloc [[ True , True , True , False , False , False , False , False , False , False ], :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no b) \u9009\u53d6\u5217 # \u7b2c2\u5217 df . iloc [:, 1 ] a 25.0 b 32.0 c 18.0 d NaN e 15.0 f 20.0 g 41.0 h NaN i 37.0 j 32.0 Name: age, dtype: float64 # \u524d\u4e09\u5217 df . iloc [:, : 3 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0 # 1\u30013\u30014\u5217 df . iloc [:, [ 0 , 2 , 3 ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name gender isMarried a Joe 1 yes b Mike 0 yes c Jack 1 no d Rose 1 yes e David 0 no f Marry 1 no g Wansi 0 no h Sidy 0 yes i Jason 1 no j Even 0 no # \u5e03\u5c14\u9009\u62e9\u524d\u4e09\u5217 df . iloc [:, [ True , True , True , False ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0 c) \u884c\u5217\u540c\u65f6\u7b5b\u9009 # \u7b2c2\u884c\uff0c1\u30013\u30014\u5217 df . iloc [ 1 , [ 0 , 2 , 3 ]] name Mike gender 0 isMarried yes Name: b, dtype: object # \u524d3\u884c\u7684\u524d3\u5217 df . iloc [: 3 , : 3 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 3. \u5355\u5143\u683c\u9009\u53d6 3.1 df.at[ ] # b\u884cname\u5217 df . at [ 'b' , 'name' ] 'Mike' 3.2 df.iat[ ] df . iat [ 1 , 0 ] 'Mike'","title":"\u9009\u53d6\u6570\u636e"},{"location":"pandas/pandasdata/#1","text":"","title":"1. \u884c\u5217\u9009\u53d6"},{"location":"pandas/pandasdata/#1_1","text":"\u6574\u6570\u7d22\u5f15\u5207\u7247 \u6807\u7b7e\u7d22\u5f15\u5207\u7247 \u5e03\u5c14\u6570\u7ec4","title":"1. \u9009\u53d6\u884c"},{"location":"pandas/pandasdata/#a","text":"# \u9009\u53d6\u524d\u4e24\u884c df [: 2 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes # \u9009\u53d6\u7b2c\u4e8c\u884c\u5230\u7b2c\u56db\u884c df [ 2 : 4 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried c Jack 18.0 1 no d Rose NaN 1 yes # \u6700\u540e3\u884c df [ - 3 :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried h Sidy NaN 0 yes i Jason 37.0 1 no j Even 32.0 0 no","title":"a) \u6574\u6570\u7d22\u5f15\u5207\u7247\uff08\u5de6\u95ed\u53f3\u5f00\uff09"},{"location":"pandas/pandasdata/#b","text":"# \u7b2c\u4e00\u884c df [: 'a' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes # a-d df [ 'a' : 'd' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no d Rose NaN 1 yes # g-\u672b\u5c3e df [ 'g' :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried g Wansi 41.0 0 no h Sidy NaN 0 yes i Jason 37.0 1 no j Even 32.0 0 no","title":"b) \u6807\u7b7e\u7d22\u5f15\u5207\u7247\uff08\u524d\u95ed\u540e\u95ed\uff09"},{"location":"pandas/pandasdata/#c","text":"# \u524d\u4e09\u884c df [[ True , True , True , False , False , False , False , False , False , False ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no # age>30\u7684\u884c # df[[each>30 for each in df['age']]] df [ df [ 'age' ] > 30 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried b Mike 32.0 0 yes g Wansi 41.0 0 no i Jason 37.0 1 no j Even 32.0 0 no # age>30\u548cisMarried=no # \u591a\u6761\u4ef6\u9700\u8981\u5728\u62ec\u53f7\u5185\u586b\u6761\u4ef6 df [( df [ 'age' ] > 30 ) & ( df [ 'isMarried' ] == 'no' )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried g Wansi 41.0 0 no i Jason 37.0 1 no j Even 32.0 0 no # \u591a\u6761\u4ef6 df [( df [ 'age' ] == 20 ) | ( df [ 'age' ] == 32 ) & ( df [ 'isMarried' ] == 'no' )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried f Marry 20.0 1 no j Even 32.0 0 no","title":"c\uff09\u5e03\u5c14\u5224\u65ad"},{"location":"pandas/pandasdata/#12","text":"\u6807\u7b7e\u7d22\u5f15 \u6807\u7b7e\u5217\u8868 Callable\u5bf9\u8c61","title":"1.2 \u9009\u53d6\u884c"},{"location":"pandas/pandasdata/#a_1","text":"# Series df [ 'name' ] # DataFrame df [[ 'name' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name a Joe b Mike c Jack d Rose e David f Marry g Wansi h Sidy i Jason j Even","title":"a) \u6807\u7b7e\u7d22\u5f15\uff08\u5355\u5217\uff09"},{"location":"pandas/pandasdata/#b_1","text":"df [[ 'name' , 'gender' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name gender a Joe 1 b Mike 0 c Jack 1 d Rose 1 e David 0 f Marry 1 g Wansi 0 h Sidy 0 i Jason 1 j Even 0","title":"b) \u6807\u7b7e\u5217\u8868\uff08\u591a\u5217\uff09"},{"location":"pandas/pandasdata/#c-callable","text":"df [ lambda df : df . columns [: 3 ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0","title":"c) callable\u5bf9\u8c61"},{"location":"pandas/pandasdata/#2","text":"","title":"2.\u533a\u57df\u9009\u53d6"},{"location":"pandas/pandasdata/#21-dfloc","text":"","title":"2.1 df.loc[ ] \uff08\u6807\u7b7e\uff09"},{"location":"pandas/pandasdata/#a-loc","text":"# index='a'\u7684\u884c df . loc [ 'a' , :] name Joe age 25 gender 1 isMarried yes Name: a, dtype: object # index\u4e3aa\u6216c\u6216d\u7684\u884c df . loc [[ 'a' , 'c' , 'd' ], :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes c Jack 18.0 1 no d Rose NaN 1 yes # inde a-d df . loc [ 'a' : 'd' , :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no d Rose NaN 1 yes # \u524d\u4e09\u884c df . loc [[ True , True , True , False , False , False , False , False , False , False ], :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no # age>30\u884c df . loc [ df [ 'age' ] > 30 ,:] # df.loc[df.loc[:,'age']>30,:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried b Mike 32.0 0 yes g Wansi 41.0 0 no i Jason 37.0 1 no j Even 32.0 0 no","title":"a) loc\u9009\u62e9\u884c"},{"location":"pandas/pandasdata/#b-loc","text":"df . loc [:, 'name' ] a Joe b Mike c Jack d Rose e David f Marry g Wansi h Sidy i Jason j Even Name: name, dtype: object # name\u81f3gender df . loc [:, 'name' : 'gender' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0 # \u6307\u5b9a\u5217 df . loc [:, [ 'name' , 'gender' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name gender a Joe 1 b Mike 0 c Jack 1 d Rose 1 e David 0 f Marry 1 g Wansi 0 h Sidy 0 i Jason 1 j Even 0 # \u5e03\u5c14\u6570\u7ec4\u524d\u4e09\u5217 df . loc [:, [ True , True , True , False ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0","title":"b) loc\u9009\u62e9\u5217"},{"location":"pandas/pandasdata/#c_1","text":"# \u8f93\u51fa\u5e74\u9f84\u5927\u4e8e30\u7684\u4eba\u7684\u59d3\u540d\u548c\u5e74\u9f84 df . loc [ df [ 'age' ] > 30 , 'name' : 'age' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age b Mike 32.0 g Wansi 41.0 i Jason 37.0 j Even 32.0","title":"c) \u884c\u5217\u540c\u65f6\u7b5b\u9009"},{"location":"pandas/pandasdata/#22-dfiloc","text":"","title":"2.2 df.iloc[ ] \uff08\u7d22\u5f15\uff09"},{"location":"pandas/pandasdata/#a_2","text":"# \u7b2c2\u884c df . iloc [ 1 ,] name Mike age 32 gender 0 isMarried yes Name: b, dtype: object df . iloc [: 3 ,:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no # \u7b2c2\uff0c4,6\u884c df . iloc [[ 1 , 3 , 5 ],:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried b Mike 32.0 0 yes d Rose NaN 1 yes f Marry 20.0 1 no # \u5e03\u5c14\u9009\u53d6 df . iloc [[ True , True , True , False , False , False , False , False , False , False ], :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender isMarried a Joe 25.0 1 yes b Mike 32.0 0 yes c Jack 18.0 1 no","title":"a) \u9009\u53d6\u884c"},{"location":"pandas/pandasdata/#b_2","text":"# \u7b2c2\u5217 df . iloc [:, 1 ] a 25.0 b 32.0 c 18.0 d NaN e 15.0 f 20.0 g 41.0 h NaN i 37.0 j 32.0 Name: age, dtype: float64 # \u524d\u4e09\u5217 df . iloc [:, : 3 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0 # 1\u30013\u30014\u5217 df . iloc [:, [ 0 , 2 , 3 ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name gender isMarried a Joe 1 yes b Mike 0 yes c Jack 1 no d Rose 1 yes e David 0 no f Marry 1 no g Wansi 0 no h Sidy 0 yes i Jason 1 no j Even 0 no # \u5e03\u5c14\u9009\u62e9\u524d\u4e09\u5217 df . iloc [:, [ True , True , True , False ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1 d Rose NaN 1 e David 15.0 0 f Marry 20.0 1 g Wansi 41.0 0 h Sidy NaN 0 i Jason 37.0 1 j Even 32.0 0","title":"b)  \u9009\u53d6\u5217"},{"location":"pandas/pandasdata/#c_2","text":"# \u7b2c2\u884c\uff0c1\u30013\u30014\u5217 df . iloc [ 1 , [ 0 , 2 , 3 ]] name Mike gender 0 isMarried yes Name: b, dtype: object # \u524d3\u884c\u7684\u524d3\u5217 df . iloc [: 3 , : 3 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name age gender a Joe 25.0 1 b Mike 32.0 0 c Jack 18.0 1","title":"c) \u884c\u5217\u540c\u65f6\u7b5b\u9009"},{"location":"pandas/pandasdata/#3","text":"","title":"3. \u5355\u5143\u683c\u9009\u53d6"},{"location":"pandas/pandasdata/#31-dfat","text":"# b\u884cname\u5217 df . at [ 'b' , 'name' ] 'Mike'","title":"3.1 df.at[ ]"},{"location":"pandas/pandasdata/#32-dfiat","text":"df . iat [ 1 , 0 ] 'Mike'","title":"3.2 df.iat[ ]"}]}